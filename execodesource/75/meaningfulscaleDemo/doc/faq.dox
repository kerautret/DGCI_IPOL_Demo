/**
 *
 @page faq ImaGene HowTo

 -# General questions
    -# @ref faq_purpose
    -# @ref faq_licence
    -# @ref faq_where
    -# @ref faq_authors
    -# @ref faq_documentation
    -# @ref faq_cite
 -# Compilation and installation
    -# @ref faq_install
    -# @ref faq_debug
    -# @ref faq_64

 @section faq_purpose ImaGene: what for ?

 You should go to @ref objectives. Essentially, ImaGene helps for
 writing digital topology and geometry algorithms in nD images. The
 framework is generic enough so that programs can be written
 independently from the dimension of the data. You can look for
 instance at @ref example_1_2.

 @section faq_licence Under what kind of licence is ImaGene ?
 
 The ImaGene library is an open-source project, which can be freely
 downloaded and installed for non-commercial uses. It follows the
 Cecil licence of CNRS, essentially an LGPL licence.

 @section faq_where Where to find ImaGene and download it ?

 Since December 2008, ImaGene is hosted by the LIRIS forge at http://gforge.liris.cnrs.fr.

 @section faq_authors Who wrote ImaGene ?

 The ImaGene library has been initiated and written by Jacques-Olivier
 Lachaud, from 2002 to now (2009), first in the LaBRI laboratory,
 University Bordeaux 1, France, then in the LAMA laboratory,
 University of Savoie, France. 

 Some other persons have contributed or are contributing to ImaGene:
 - François de Vieilleville (LAMA, University of Savoie)
 - Bertrand Kerautret (LORIA, University of Nancy, France)
 - Stéphane Simon (LAMA, University of Savoie, France)
 - David Coeurjolly (LIRIS, CNRS, France)

 @section faq_documentation Is there any documentation for ImaGene ?

 For programming purposes, there is for now only this documentation,
 which is nicely generated by Doxygen (http://www.doxygen.org). 

 If you wish to go into mathematics details, you may read the paper:

 J.-O. Lachaud. Coding cells of digital spaces: a framework to write
 generic digital topology algorithms. In
 Proc. Int. Work. Combinatorial Image Analysis (IWCIA'2003), Palermo,
 Italy, volume 12 of Electronic Notes in Discrete Mathematics, 2003.


 @section faq_cite How can I reference this work in my papers ?

 If ou wish to acknowledge the project as a whole, you may use the
 following citation:

 @b ImaGene project, http://gforge.liris.cnrs.frs/projects/imagene.

 or as a BibTex entry
 @code
 @Misc{ImaGene,
   title = 	 {ImaGene, {Gen}eric Digital {Ima}ge Library },
   note = 	 {http://gforge.liris.cnrs.frs/projects/imagene}
 }
 @endcode

 You may also quote the work

 J.-O. Lachaud. Coding cells of digital spaces: a framework to write
 generic digital topology algorithms. In
 Proc. Int. Work. Combinatorial Image Analysis (IWCIA'2003), Palermo,
 Italy, volume 12 of Electronic Notes in Discrete Mathematics, 2003.

 or as a BibTex entry
 @verbatim
@INPROCEEDINGS{Lachaud03b,
  AUTHOR =   {J.-O. Lachaud},
  TITLE =   {Coding cells of digital spaces: a framework to write generic digital topology algorithms},
  BOOKTITLE =   {Proc. Int. Work. Combinatorial Image Analysis (IWCIA'2003), Palermo, Italy},
  YEAR =   {2003},
  EDITOR =   {Del Lungo, A. and Di Ges\`{u}, V. and A. Kuba},
  SERIES =   {ENDM},
  VOLUME =       {12},
  PUBLISHER =    {Elsevier}
}
 @endverbatim

 @section faq_install How to compile and install ImaGene from its sources ?

 You should read the file INSTALL at the root of the ImaGene archive. For the installation quick way (separate build, preferred way), you may type

 @code
>	tar xvfz ImaGene-1.6.0-Sources.tgz
>	cd ImaGene-1.6.0-Sources
>	mkdir build 
>	cd build 
>	cmake ..
>	make
>	make install
 @endcode
 
 @section faq_debug How can I use the debugging version of ImaGene ?

 You may wish to use a more robust version of ImaGene with debugging
 information. In this case you should specify it at compilation time
 so that the debug version is built and deployed. This is simply done
 when calling cmake, such as:

 @code 
>       cd build
>       rm ../CMakeCache.txt
>       cmake -DCMAKE_BUILD_TYPE:STRING=Debug ..
>       make
 @endcode

 The library and all binaries will be suffixed by @c -debug.

 @section faq_64 I process huge digital spaces. How can I use the 64-bit version of ImaGene ?

 This is simply done when calling cmake, such as:

 @code 
>       cd build
>       rm ../CMakeCache.txt
>       cmake -DIMAGENE64= ..
>       make
 @endcode

 The library and all binaries will be suffixed by @c 64. You may also
 build a debug version in 64 bits mode by adding the parameter @c
 -DCMAKE_BUILD_TYPE:STRING=Debug.
 
*/

