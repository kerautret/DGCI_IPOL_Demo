/*
 * Copyright (c) 2012   Laurent Provot <provot.research@gmail.com>,
 * Yan Gerard <yan.gerard@free.fr> and Fabien Feschet <research@feschet.fr>
 * All rights reserved.
 *
 * This is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "Conic.hpp"

namespace DLL {

/**
  This function adds the point \a xy to the specified \a set by using a
  transformation (Kernel Trick) to turn the 2D recognition problem into
  a 5D recognition problem, where constraints are linears.
 */
void Conic::addPointToSet(const Coordinates & xy, std::vector<Point> & set)
{
  // Kernel-trick: we project the points in the linear space generated by
  //               {x, y, x^2, xy, y^2}
  Point augmentedPoint(5);

  double x = xy.first;
  double y = xy.second;

  augmentedPoint(0) = x;
  augmentedPoint(1) = y;
  augmentedPoint(2) = x * y;
  augmentedPoint(3) = x * x;
  augmentedPoint(4) = y * y;

  set.push_back(augmentedPoint);
}


bool Conic::stillGrowableAfterUpdate()
{
  Vector normal(5);
  double h, H;

  bool isConic;
  try {
    isConic = GJKnD::isDigitalHyperplane(setIn, setUp, setDown,
                                         normal, h, H);
  }
  catch (const SingularSystem &) {
    isConic = false;
  }
  catch (const SuspiciousLoop &) {
    isConic = false;
  }

  if (isConic) {
    a = normal(4);
    b = normal(3);
    c = normal(2);
    d = normal(1);
    e = normal(0);
    lower_bound = h;
    upper_bound = H;
  }

  return isConic;
}


std::ostream & operator<<(std::ostream & out, const Conic & conic)
{
  out << conic.lower_bound << " <= " << conic.a << "x^2 "
      << (conic.b > 0.0 ? "+" : "") << conic.b << "xy "
      << (conic.c > 0.0 ? "+" : "") << conic.c << "y^2 "
      << (conic.d > 0.0 ? "+" : "") << conic.d << "x "
      << (conic.e > 0.0 ? "+" : "") << conic.e << "y <= " << conic.upper_bound;

  return out;
}

} // namespace DLL
