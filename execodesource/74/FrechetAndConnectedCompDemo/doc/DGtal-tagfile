<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="page">
    <name>geometry2d</name>
    <title>Analysis of one-dimensional discrete structures</title>
    <filename>geometry2d</filename>
    <docanchor file="modulegeometry2d">geometryIntro</docanchor>
    <docanchor file="modulegeometry2d">geometryBasicConcepts</docanchor>
    <docanchor file="/Users/kerautre/EnCours/DGtal/doc/module2DGeometry.dox">geometryGridCurve</docanchor>
    <docanchor file="modulegeometry2d">geometrySegments</docanchor>
    <docanchor file="modulegeometry2d">geometrySegmentsExtraction</docanchor>
    <docanchor file="/Users/kerautre/EnCours/DGtal/doc/module2DGeometry.dox">geometryGreedyDecomposition</docanchor>
    <docanchor file="modulegeometry2d">geometryUniqueDecomposition</docanchor>
  </compound>
  <compound kind="page">
    <name>pageArithmeticPackage</name>
    <title>Arithmetic package</title>
    <filename>pageArithmeticPackage</filename>
  </compound>
  <compound kind="page">
    <name>pageArithmeticPackageConcepts</name>
    <title>Arithmetic Concepts and Models</title>
    <filename>pageArithmeticPackageConcepts</filename>
  </compound>
  <compound kind="page">
    <name>dgtal_cellular_topology</name>
    <title>Cellular grid space and topology, unoriented and oriented cells, incidence</title>
    <filename>dgtal_cellular_topology</filename>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec1</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec2</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec3</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec4</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec5</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec6</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec7</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec8</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec9</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec10</docanchor>
    <docanchor file="dgtal_cellular_topology">dgtal_ctopo_sec11</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtalITK</name>
    <title>Interactions between ITK and DGtal using ITKImage</title>
    <filename>dgtalITK</filename>
    <docanchor file="dgtalITK">itkindgal</docanchor>
    <docanchor file="dgtalITK">dgalinitk</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtal_digital_surface</name>
    <title>Digital surfaces</title>
    <filename>dgtal_digital_surface</filename>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec1</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec1_1</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec1_2</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec1_3</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec2</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec2_1</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec2_2</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec2_3</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec3</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec3_1</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec3_2</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec3_3</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec3_4</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec3_5</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec4</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec4_1</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec4_2</docanchor>
    <docanchor file="dgtal_digital_surface">dgtal_digsurf_sec4_3</docanchor>
  </compound>
  <compound kind="page">
    <name>FAQDGtalCmake</name>
    <title>Building DGtal</title>
    <filename>FAQDGtalCmake</filename>
    <docanchor file="moduleVolumetric">intro</docanchor>
    <docanchor file="FAQDGtalCmake">linux</docanchor>
    <docanchor file="FAQDGtalCmake">macos</docanchor>
    <docanchor file="FAQDGtalCmake">win</docanchor>
    <docanchor file="FAQDGtalCmake">vs2008-32</docanchor>
    <docanchor file="FAQDGtalCmake">vs2010-64</docanchor>
    <docanchor file="FAQDGtalCmake">cairo</docanchor>
    <docanchor file="FAQDGtalCmake">cmakeDGtal</docanchor>
  </compound>
  <compound kind="page">
    <name>FAQGit</name>
    <title>Git/Github source code management in DGtal</title>
    <filename>FAQGit</filename>
    <docanchor file="FAQGit">sectGIT1</docanchor>
    <docanchor file="FAQGit">subsectGIT11</docanchor>
    <docanchor file="FAQGit">subsectGIT12</docanchor>
    <docanchor file="FAQGit">subsectGIT13</docanchor>
    <docanchor file="FAQGit">sectGIT3</docanchor>
    <docanchor file="FAQGit">subsectGIT31</docanchor>
    <docanchor file="FAQGit">subsectGIT32</docanchor>
    <docanchor file="FAQGit">sectGITCommands</docanchor>
    <docanchor file="FAQGit">ssCom1</docanchor>
    <docanchor file="FAQGit">ssCom2</docanchor>
    <docanchor file="FAQGit">ssCom3</docanchor>
    <docanchor file="FAQGit">sectGIT2</docanchor>
    <docanchor file="FAQGit">ss21</docanchor>
    <docanchor file="FAQGit">ss22</docanchor>
    <docanchor file="FAQGit">sectGIT5</docanchor>
  </compound>
  <compound kind="page">
    <name>GeometryPackage</name>
    <title>Geometry package</title>
    <filename>GeometryPackage</filename>
  </compound>
  <compound kind="page">
    <name>geomPackageConcepts</name>
    <title>Geometry Concepts</title>
    <filename>geomPackageConcepts</filename>
  </compound>
  <compound kind="page">
    <name>dgtal_helpers_surfaces</name>
    <title>Helpers for digital surfaces</title>
    <filename>dgtal_helpers_surfaces</filename>
    <docanchor file="dgtal_helpers_surfaces">dgtal_helpsurf_sec1</docanchor>
    <docanchor file="dgtal_helpers_surfaces">dgtal_helpsurf_sec2</docanchor>
    <docanchor file="dgtal_helpers_surfaces">dgtal_helpsurf_sec3</docanchor>
  </compound>
  <compound kind="page">
    <name>HowToUseDGtal-qmake</name>
    <title>How to use DGtal in my own project with other build systems?</title>
    <filename>HowToUseDGtal-qmake</filename>
    <docanchor file="HowToUseDGtal-qmake">HowToUseDGtal_QMAKE</docanchor>
  </compound>
  <compound kind="page">
    <name>HowToUseDGtal</name>
    <title>How to use DGtal in my own project ?</title>
    <filename>HowToUseDGtal</filename>
    <docanchor file="HowToUseDGtal">HowToUseDGtal_CMAKE</docanchor>
  </compound>
  <compound kind="page">
    <name>ImagePackage</name>
    <title>Image package</title>
    <filename>ImagePackage</filename>
  </compound>
  <compound kind="page">
    <name>imgPackageConcepts</name>
    <title>Main Image Concepts</title>
    <filename>imgPackageConcepts</filename>
  </compound>
  <compound kind="page">
    <name>IntroductionPackage</name>
    <title>Preliminaries</title>
    <filename>IntroductionPackage</filename>
  </compound>
  <compound kind="page">
    <name>IOPackage</name>
    <title>IO package</title>
    <filename>IOPackage</filename>
  </compound>
  <compound kind="page">
    <name>KernelPackage</name>
    <title>Kernel package</title>
    <filename>KernelPackage</filename>
  </compound>
  <compound kind="page">
    <name>kernelPackageConcepts</name>
    <title>Kernel and Base Concepts</title>
    <filename>kernelPackageConcepts</filename>
  </compound>
  <compound kind="page">
    <name>pageMathPackage</name>
    <title>Mathematical package</title>
    <filename>pageMathPackage</filename>
  </compound>
  <compound kind="page">
    <name>modulegeometry2d</name>
    <title>Analysis of one-dimensional discrete structures</title>
    <filename>modulegeometry2d</filename>
    <docanchor file="modulegeometry2d">geometryIntro</docanchor>
    <docanchor file="modulegeometry2d">geometryBasicConcepts</docanchor>
    <docanchor file="/Users/kerautre/EnCours/DGtal/doc/module2DGeometry.dox">geometryGridCurve</docanchor>
    <docanchor file="modulegeometry2d">geometrySegments</docanchor>
    <docanchor file="modulegeometry2d">geometrySegmentsExtraction</docanchor>
    <docanchor file="/Users/kerautre/EnCours/DGtal/doc/module2DGeometry.dox">geometryGreedyDecomposition</docanchor>
    <docanchor file="modulegeometry2d">geometryUniqueDecomposition</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtal_dgtalboard</name>
    <title>Board2D: a stream mechanism for displaying 2D digital objects</title>
    <filename>dgtal_dgtalboard</filename>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec1</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec11</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec12</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec13</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec14</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec15</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec16</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec17</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec18</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec181</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec182</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec19</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec2</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec21</docanchor>
    <docanchor file="dgtal_dgtalboard">dgtal_dgtalboard_sec22</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtal_digital_straightness</name>
    <title>Patterns, digital straight lines and subsegments</title>
    <filename>dgtal_digital_straightness</filename>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec1</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec2</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec2_1</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec2_2</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec2_3</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec3</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec3_1</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec3_2</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec3_3</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec3_4</docanchor>
    <docanchor file="dgtal_digital_straightness">dgtal_digstraighness_sec3_5</docanchor>
  </compound>
  <compound kind="page">
    <name>threeD_visu</name>
    <title>Display3D: a stream mechanism for displaying 3D DGtal objects</title>
    <filename>threeD_visu</filename>
    <docanchor file="threeD_visu">DGtalGLV_Display3D</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_Viewer3D</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_Boas3DTo2D</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_VisualizationDigitalSet</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_ModeEx</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_Mode</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_ModeListing</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_ModeExamplesDomain</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_ModeOtherExamples</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_Custom</docanchor>
    <docanchor file="threeD_visu">DGtalGLV_CLipping</docanchor>
  </compound>
  <compound kind="page">
    <name>moduleFrechetShortcut</name>
    <title>Fréchet Shorcuts</title>
    <filename>moduleFrechetShortcut</filename>
    <docanchor file="moduleFrechetShortcut">sectOverview</docanchor>
    <docanchor file="moduleFrechetShortcut">subsectFrechet</docanchor>
    <docanchor file="moduleFrechetShortcut">subsectCurve</docanchor>
    <docanchor file="moduleFrechetShortcut">sectAlgo</docanchor>
    <docanchor file="moduleFrechetShortcut">subsectDef</docanchor>
    <docanchor file="moduleFrechetShortcut">subsectWidth</docanchor>
    <docanchor file="moduleFrechetShortcut">subsectBackpath</docanchor>
    <docanchor file="moduleFrechetShortcut">subsectDirections</docanchor>
    <docanchor file="moduleFrechetShortcut">sectQuality</docanchor>
    <docanchor file="moduleFrechetShortcut">subsectGuarantee</docanchor>
    <docanchor file="moduleFrechetShortcut">subsectComplexity</docanchor>
    <docanchor file="moduleFrechetShortcut">sectImplementation</docanchor>
  </compound>
  <compound kind="page">
    <name>moduleImage</name>
    <title>Images</title>
    <filename>moduleImage</filename>
    <docanchor file="moduleImage">dgtalImagesAbstract</docanchor>
    <docanchor file="moduleImage">dgtalImagesDetails</docanchor>
    <docanchor file="moduleImage">dgtalImagesConcepts</docanchor>
    <docanchor file="moduleImage">dgtalImagesMainMethods</docanchor>
    <docanchor file="moduleImage">dgtalImagesRanges</docanchor>
    <docanchor file="moduleImage">dgtalImagesModels</docanchor>
    <docanchor file="moduleImage">dgtalImagesModelsVector</docanchor>
    <docanchor file="moduleImage">dgtalImagesModelsMap</docanchor>
    <docanchor file="moduleImage">dgtalImagesModelsHashTree</docanchor>
    <docanchor file="moduleImage">dgtalImagesAdapters</docanchor>
    <docanchor file="moduleImage">constimage</docanchor>
    <docanchor file="moduleImage">imageadat</docanchor>
    <docanchor file="moduleImage">dgtalImagesFunctions</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtal_integer_computations</name>
    <title>Integer computations</title>
    <filename>dgtal_integer_computations</filename>
    <docanchor file="dgtal_integer_computations">dgtal_integer_computations_sec1</docanchor>
    <docanchor file="dgtal_integer_computations">dgtal_integer_computations_sec2</docanchor>
  </compound>
  <compound kind="page">
    <name>moduleIntroduction</name>
    <title>Introduction</title>
    <filename>moduleIntroduction</filename>
    <docanchor file="moduleIntroduction">dgtalintroBasicConcepts</docanchor>
    <docanchor file="moduleIntroduction">dgtalintroBasicConceptsSpace</docanchor>
    <docanchor file="moduleIntroduction">dgtalintroBasicConceptsExplicitSet</docanchor>
    <docanchor file="moduleIntroduction">dgtalintroBasicConceptsImplicitSet</docanchor>
    <docanchor file="moduleIntroduction">dgtalintroBasicConceptsImage</docanchor>
    <docanchor file="moduleIntroduction">dgtalintroPackages</docanchor>
    <docanchor file="moduleIntroduction">dgtalintroPackagesKernel</docanchor>
    <docanchor file="moduleIntroduction">dgtalintroPackagesTopology</docanchor>
    <docanchor file="moduleIntroduction">dgtalintroPackagesGeometry</docanchor>
    <docanchor file="moduleIntroduction">dgtalintroPackagesImage</docanchor>
  </compound>
  <compound kind="page">
    <name>image_io</name>
    <title>Image and digital object import/export</title>
    <filename>image_io</filename>
    <docanchor file="moduleVolumetric">intro</docanchor>
    <docanchor file="image_io">colormaps</docanchor>
    <docanchor file="image_io">imagefileformat</docanchor>
    <docanchor file="image_io">imagewriters</docanchor>
    <docanchor file="image_io">imagereaders</docanchor>
    <docanchor file="image_io">fileformat</docanchor>
    <docanchor file="image_io">pointListnD</docanchor>
    <docanchor file="image_io">mesh3D</docanchor>
    <docanchor file="image_io">io_examples</docanchor>
    <docanchor file="image_io">importDigitalSet</docanchor>
    <docanchor file="image_io">importPointList</docanchor>
    <docanchor file="image_io">importMesh3D</docanchor>
    <docanchor file="image_io">exportMesh3D</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtal_irreducible_fraction</name>
    <title>Irreducible fraction, continued fractions</title>
    <filename>dgtal_irreducible_fraction</filename>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec1</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec1_1</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec1_2</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec1_3</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec2</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec2_1</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec2_2</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec2_3</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec2_4</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3_1</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3_2</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3_3</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3_4</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3_5</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3_6</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3_7</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3_8</docanchor>
    <docanchor file="dgtal_irreducible_fraction">dgtal_irrfrac_sec3_9</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtal_lattice_polytope_2d</name>
    <title>Lattice polytopes in the digital plane ZxZ (convex polygons with vertices at integer coordinates)</title>
    <filename>dgtal_lattice_polytope_2d</filename>
    <docanchor file="dgtal_lattice_polytope_2d">dgtal_lattice_polytope_2d_sec1</docanchor>
    <docanchor file="dgtal_lattice_polytope_2d">dgtal_lattice_polytope_2d_sec2</docanchor>
    <docanchor file="dgtal_lattice_polytope_2d">dgtal_lattice_polytope_2d_sec3</docanchor>
    <docanchor file="dgtal_lattice_polytope_2d">dgtal_lattice_polytope_2d_sec4</docanchor>
    <docanchor file="dgtal_lattice_polytope_2d">dgtal_lattice_polytope_2d_sec5</docanchor>
    <docanchor file="dgtal_lattice_polytope_2d">dgtal_lattice_polytope_2d_sec6</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtal_naive_plane_recognition</name>
    <title>Naive plane recognition (and naive planes with rational width) with COBA algorithm</title>
    <filename>dgtal_naive_plane_recognition</filename>
    <docanchor file="dgtal_naive_plane_recognition">dgtal_naive_plane_recognition_sec1</docanchor>
    <docanchor file="dgtal_naive_plane_recognition">dgtal_naive_plane_recognition_sec2</docanchor>
    <docanchor file="dgtal_naive_plane_recognition">dgtal_naive_plane_recognition_sec3</docanchor>
    <docanchor file="dgtal_naive_plane_recognition">dgtal_naive_plane_recognition_sec4</docanchor>
    <docanchor file="dgtal_naive_plane_recognition">dgtal_naive_plane_recognition_sec5</docanchor>
    <docanchor file="dgtal_naive_plane_recognition">dgtal_naive_plane_recognition_sec6</docanchor>
  </compound>
  <compound kind="page">
    <name>moduleNumber</name>
    <title>Integer Models</title>
    <filename>moduleNumber</filename>
    <docanchor file="moduleNumber">overV</docanchor>
    <docanchor file="moduleNumber">basicinteger</docanchor>
    <docanchor file="moduleNumber">addinteger</docanchor>
  </compound>
  <compound kind="page">
    <name>modulePolynomial</name>
    <title>Polynomial module</title>
    <filename>modulePolynomial</filename>
  </compound>
  <compound kind="page">
    <name>moduleSegmentComputers</name>
    <title>Segment Computers: several primitives to decompose a one-dimensional digital curve</title>
    <filename>moduleSegmentComputers</filename>
  </compound>
  <compound kind="page">
    <name>moduleShape</name>
    <title>Shapes, Shapers and Digitizers</title>
    <filename>moduleShape</filename>
    <docanchor file="moduleShape">sectmoduleShape1</docanchor>
    <docanchor file="moduleShape">sectmoduleShape2</docanchor>
    <docanchor file="moduleShape">sectmoduleShape3</docanchor>
  </compound>
  <compound kind="page">
    <name>moduleSpacePointVectorDomain</name>
    <title>Digital Spaces, Points, Vectors and Domains</title>
    <filename>moduleSpacePointVectorDomain</filename>
    <docanchor file="moduleSpacePointVectorDomain">sectSpace</docanchor>
    <docanchor file="moduleSpacePointVectorDomain">sectPointVector</docanchor>
    <docanchor file="moduleSpacePointVectorDomain">sectDomain</docanchor>
    <docanchor file="moduleSpacePointVectorDomain">sectDomDef</docanchor>
    <docanchor file="moduleSpacePointVectorDomain">sectDomIter</docanchor>
    <docanchor file="moduleSpacePointVectorDomain">sectImage</docanchor>
  </compound>
  <compound kind="page">
    <name>moduleVolumetric</name>
    <title>nD Volumetric Analysis using Separable Processes Package</title>
    <filename>moduleVolumetric</filename>
    <docanchor file="moduleVolumetric">intro</docanchor>
    <docanchor file="moduleVolumetric">dt</docanchor>
    <docanchor file="moduleVolumetric">rdt</docanchor>
    <docanchor file="moduleVolumetric">rdma</docanchor>
    <docanchor file="moduleVolumetric">sep</docanchor>
    <docanchor file="moduleVolumetric">refs</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtal_multivariate_polynomial</name>
    <title>Multivariate polynomials.</title>
    <filename>dgtal_multivariate_polynomial</filename>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec1</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec1_1</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec1_2</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec1_3</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec1_4</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec1_5</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec1_6</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec2</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec2_1</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec2_2</docanchor>
    <docanchor file="dgtal_multivariate_polynomial">dgtal_mpolynomial_sec3</docanchor>
  </compound>
  <compound kind="page">
    <name>dgtal_topology</name>
    <title>Digital topology and digital objects</title>
    <filename>dgtal_topology</filename>
    <docanchor file="dgtal_topology">dgtal_topology_sec1_ajdacency</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec1_1</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec1_2</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec1_3</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec1_4</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec2_digital_topology</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec3_digital_object</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec3_1</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec3_2</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec3_3</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec3_4</docanchor>
    <docanchor file="dgtal_topology">dgtal_topology_sec3_5</docanchor>
  </compound>
  <compound kind="page">
    <name>TopologyPackage</name>
    <title>Topology package</title>
    <filename>TopologyPackage</filename>
  </compound>
  <compound kind="page">
    <name>TopologyPackageConcepts</name>
    <title>Topology Concepts and Models</title>
    <filename>TopologyPackageConcepts</filename>
  </compound>
  <compound kind="page">
    <name>tutoFileGridCurveRanges</name>
    <title>Tutorial &quot;File -&gt; Grid Curve -&gt; Ranges&quot;</title>
    <filename>tutoFileGridCurveRanges</filename>
    <docanchor file="tutoFileGridCurveRanges">secttutofileGridCurveRanges0</docanchor>
    <docanchor file="tutoFileGridCurveRanges">secttutofileGridCurveRanges1</docanchor>
    <docanchor file="tutoFileGridCurveRanges">secttutofileGridCurveRanges2</docanchor>
    <docanchor file="tutoFileGridCurveRanges">secttutofileGridCurveRanges3</docanchor>
    <docanchor file="tutoFileGridCurveRanges">secttutofileGridCurveRanges4</docanchor>
  </compound>
  <compound kind="page">
    <name>tutoImageGridCurveEstimator</name>
    <title>Tutorial &quot;Image -&gt; Region -&gt; Grid curve -&gt; Length estimation&quot;</title>
    <filename>tutoImageGridCurveEstimator</filename>
    <docanchor file="tutoImageGridCurveEstimator">secttutoImageGridCurveEstimator0</docanchor>
    <docanchor file="tutoImageGridCurveEstimator">secttutoImageGridCurveEstimator1</docanchor>
    <docanchor file="tutoImageGridCurveEstimator">secttutoImageGridCurveEstimator2</docanchor>
    <docanchor file="tutoImageGridCurveEstimator">secttutoImageGridCurveEstimator3</docanchor>
    <docanchor file="tutoImageGridCurveEstimator">secttutoImageGridCurveEstimator4</docanchor>
  </compound>
  <compound kind="page">
    <name>tutoImageGridCurveExtraction</name>
    <title>Tutorial &quot;Image -&gt; Region -&gt; Grid curve -&gt;  Extracting level set boundary from Image&quot;</title>
    <filename>tutoImageGridCurveExtraction</filename>
    <docanchor file="tutoImageGridCurveExtraction">step1</docanchor>
    <docanchor file="tutoImageGridCurveExtraction">step2</docanchor>
    <docanchor file="tutoImageGridCurveExtraction">step3</docanchor>
    <docanchor file="tutoImageGridCurveExtraction">FCfromImageTools</docanchor>
    <docanchor file="tutoImageGridCurveExtraction">secttutoImageGridCurveExctraction5</docanchor>
  </compound>
  <compound kind="page">
    <name>tutoImageRegionDT</name>
    <title>Tutorial &quot;Image -&gt; Region -&gt; Distance Transformation&quot;</title>
    <filename>tutoImageRegionDT</filename>
    <docanchor file="tutoImageRegionDT">secttutoImageRegionDT0</docanchor>
    <docanchor file="tutoImageRegionDT">secttutoImageRegionDT1</docanchor>
    <docanchor file="tutoImageRegionDT">secttutoImageRegionDT2</docanchor>
    <docanchor file="tutoImageRegionDT">secttutoImageRegionDT3</docanchor>
    <docanchor file="tutoImageRegionDT">secttutoImageRegionDT4</docanchor>
  </compound>
  <compound kind="page">
    <name>tutoImageGridVolume3dVolViewer</name>
    <title>Tutorial &quot;Image -&gt; Region -&gt; Volume -&gt;  3dVolViewer : a simple 3D volume viewer in less than 50 lines&quot;</title>
    <filename>tutoImageGridVolume3dVolViewer</filename>
  </compound>
  <compound kind="page">
    <name>tutorials</name>
    <title>Tutorials</title>
    <filename>tutorials</filename>
  </compound>
  <compound kind="page">
    <name>tutoShapeGridCurveEstimator</name>
    <title>Tutorial &quot;Generated shape -&gt; Grid curve -&gt; Length estimation&quot;</title>
    <filename>tutoShapeGridCurveEstimator</filename>
    <docanchor file="tutoShapeGridCurveEstimator">secttutoShapeGridCurveEstimator0</docanchor>
    <docanchor file="tutoShapeGridCurveEstimator">secttutoShapeGridCurveEstimator1</docanchor>
    <docanchor file="tutoShapeGridCurveEstimator">secttutoShapeGridCurveEstimator2</docanchor>
    <docanchor file="tutoShapeGridCurveEstimator">secttutoShapeGridCurveEstimator3</docanchor>
    <docanchor file="tutoShapeGridCurveEstimator">secttutoShapeGridCurveEstimator5</docanchor>
    <docanchor file="tutoShapeGridCurveEstimator">secttutoShapeGridCurveEstimator4</docanchor>
  </compound>
  <compound kind="page">
    <name>citelist</name>
    <title>Bibliographic References</title>
    <filename>citelist</filename>
  </compound>
  <compound kind="group">
    <name>Concepts</name>
    <title>DGtal Concepts</title>
    <filename>group__Concepts.html</filename>
    <namespace>DGtal</namespace>
    <class kind="struct">DGtal::CPositiveIrreducibleFraction</class>
    <class kind="struct">DGtal::CBackInsertable</class>
    <class kind="struct">DGtal::CBidirectionalOutputRange</class>
    <class kind="struct">DGtal::CBidirectionalOutputRangeFromPoint</class>
    <class kind="struct">DGtal::CBidirectionalRange</class>
    <class kind="struct">DGtal::CBidirectionalRangeFromPoint</class>
    <class kind="struct">DGtal::CConstBidirectionalRangeFromPoint</class>
    <class kind="struct">DGtal::CConstSinglePassRange</class>
    <class kind="struct">DGtal::CConstSinglePassRangeFromPoint</class>
    <class kind="struct">DGtal::CLabel</class>
    <class kind="struct">DGtal::CPredicate</class>
    <class kind="struct">DGtal::CQuantity</class>
    <class kind="struct">DGtal::CSinglePassOutputRange</class>
    <class kind="struct">DGtal::CSinglePassOutputRangeFromPoint</class>
    <class kind="struct">DGtal::CSinglePassRange</class>
    <class kind="struct">DGtal::CSinglePassRangeFromPoint</class>
    <class kind="struct">DGtal::CUnaryFunctor</class>
    <class kind="struct">DGtal::CBidirectionalSegmentComputer</class>
    <class kind="struct">DGtal::CDynamicBidirectionalSegmentComputer</class>
    <class kind="struct">DGtal::CDynamicSegmentComputer</class>
    <class kind="struct">DGtal::CForwardSegmentComputer</class>
    <class kind="struct">DGtal::CIncrementalSegmentComputer</class>
    <class kind="struct">DGtal::CSegment</class>
    <class kind="struct">DGtal::CSegmentFactory</class>
    <class kind="struct">DGtal::CGlobalGeometricEstimator</class>
    <class kind="struct">DGtal::CLocalGeometricEstimator</class>
    <class kind="struct">DGtal::CSegmentComputerEstimator</class>
    <class kind="struct">DGtal::CConvolutionWeights</class>
    <class kind="struct">DGtal::CNormalVectorEstimator</class>
    <class kind="struct">DGtal::CSeparableMetric</class>
    <class kind="struct">DGtal::CConstImage</class>
    <class kind="struct">DGtal::CImage</class>
    <class kind="struct">DGtal::CTrivialConstImage</class>
    <class kind="struct">DGtal::CTrivialImage</class>
    <class kind="struct">DGtal::CDrawableWithBoard2D</class>
    <class kind="struct">DGtal::CDrawableWithDisplay3D</class>
    <class kind="struct">DGtal::CColorMap</class>
    <class kind="struct">DGtal::CBoundedInteger</class>
    <class kind="struct">DGtal::CCommutativeRing</class>
    <class kind="struct">DGtal::CEuclideanRing</class>
    <class kind="struct">DGtal::CInteger</class>
    <class kind="struct">DGtal::CPointEmbedder</class>
    <class kind="struct">DGtal::CPointFunctor</class>
    <class kind="struct">DGtal::CPointPredicate</class>
    <class kind="struct">DGtal::CSignedInteger</class>
    <class kind="struct">DGtal::CSpace</class>
    <class kind="struct">DGtal::CUnsignedInteger</class>
    <class kind="struct">DGtal::CWithGradientMap</class>
    <class kind="struct">DGtal::CDigitalSet</class>
    <class kind="struct">DGtal::CDigitalBoundedShape</class>
    <class kind="struct">DGtal::CDigitalOrientedShape</class>
    <class kind="struct">DGtal::CEuclideanBoundedShape</class>
    <class kind="struct">DGtal::CEuclideanOrientedShape</class>
    <class kind="struct">DGtal::CImplicitFunction</class>
    <class kind="struct">DGtal::CImplicitFunctionDiff1</class>
    <class kind="struct">DGtal::CAdjacency</class>
    <class kind="struct">DGtal::CCellEmbedder</class>
    <class kind="struct">DGtal::CCellularGridSpaceND</class>
    <class kind="struct">DGtal::CDigitalSurfaceContainer</class>
    <class kind="struct">DGtal::CDigitalSurfaceEmbedder</class>
    <class kind="struct">DGtal::CDigitalSurfaceTracker</class>
    <class kind="struct">DGtal::CDomainAdjacency</class>
    <class kind="struct">DGtal::CSCellEmbedder</class>
    <class kind="struct">DGtal::CSurfelPredicate</class>
    <class kind="struct">DGtal::CUndirectedSimpleGraph</class>
    <class kind="struct">DGtal::CUndirectedSimpleLocalGraph</class>
    <class kind="struct">DGtal::CVertexMap</class>
    <class kind="struct">DGtal::CVertexPredicate</class>
  </compound>
  <compound kind="group">
    <name>Archetypes</name>
    <title>DGtal Archetypes</title>
    <filename>group__Archetypes.html</filename>
    <class kind="struct">DGtal::CBidirectionalIteratorArchetype</class>
    <class kind="struct">DGtal::CConstBidirectionalIteratorArchetype</class>
    <class kind="struct">DGtal::CForwardIteratorArchetype</class>
    <class kind="class">DGtal::CDomainArchetype</class>
    <class kind="class">DGtal::CDigitalSetArchetype</class>
  </compound>
  <compound kind="group">
    <name>Tests</name>
    <title>DGtal Test Files</title>
    <filename>group__Tests.html</filename>
    <file>testArithmeticDSS-benchmark.cpp</file>
    <file>testIntegerComputer.cpp</file>
    <file>testLatticePolytope2D.cpp</file>
    <file>testLighterSternBrocot.cpp</file>
    <file>testLightSternBrocot.cpp</file>
    <file>testModuloComputer.cpp</file>
    <file>testPattern.cpp</file>
    <file>testStandardDSLQ0-LrSB-reversedSmartDSS-benchmark.cpp</file>
    <file>testStandardDSLQ0-LSB-reversedSmartDSS-benchmark.cpp</file>
    <file>testStandardDSLQ0-reversedSmartDSS-benchmark.cpp</file>
    <file>testStandardDSLQ0-smartDSS-benchmark.cpp</file>
    <file>testSternBrocot.cpp</file>
    <file>testBasicBoolFunctions.cpp</file>
    <file>testBasicFunctors.cpp</file>
    <file>testBits.cpp</file>
    <file>testCirculator.cpp</file>
    <file>testConstIteratorAdapter.cpp</file>
    <file>testCountedPtr.cpp</file>
    <file>testcpp11.cpp</file>
    <file>testIndexedListWithBlocks.cpp</file>
    <file>testLabelledMap-benchmark.cpp</file>
    <file>testLabelledMap.cpp</file>
    <file>testLabels.cpp</file>
    <file>testLabelledMap-benchmark.cpp</file>
    <file>testOrderedAlphabet.cpp</file>
    <file>testOutputIteratorAdapter.cpp</file>
    <file>testOwningOrAliasingPtr.cpp</file>
    <file>testProgressBar.cpp</file>
    <file>testStatistics.cpp</file>
    <file>testTrace.cpp</file>
    <file>testEstimatorComparator.cpp</file>
    <file>testL1LengthEstimator.cpp</file>
    <file>testMostCenteredMSEstimator.cpp</file>
    <file>testTrueLocalEstimator.cpp</file>
    <file>testArithDSS.cpp</file>
    <file>testArithDSS3d.cpp</file>
    <file>testBinomialConvolver.cpp</file>
    <file>testCombinDSS.cpp</file>
    <file>testDecomposition.cpp</file>
    <file>testFP.cpp</file>
    <file>testFrechetShortcut.cpp</file>
    <file>testFreemanChain.cpp</file>
    <file>testGeometricalDCA.cpp</file>
    <file>testGeometricalDSS.cpp</file>
    <file>testMaximalSegments.cpp</file>
    <file>testSegmentation.cpp</file>
    <file>testCOBAGenericNaivePlane-benchmark.cpp</file>
    <file>testCOBANaivePlane-benchmark.cpp</file>
    <file>testCOBANaivePlane.cpp</file>
    <file>testLocalConvolutionNormalVectorEstimator.cpp</file>
    <file>testNormalVectorEstimatorEmbedder.cpp</file>
    <file>testPreimage.cpp</file>
    <file>testSphericalAccumulator.cpp</file>
    <file>testSphericalAccumulator.cpp</file>
    <file>testDistanceTransformation.cpp</file>
    <file>testFMM.cpp</file>
    <file>testMetrics.cpp</file>
    <file>testReverseDT.cpp</file>
    <file>testVoronoiMap.cpp</file>
    <file>testMeasure.cpp</file>
    <file>testImplicitShape.cpp</file>
    <file>testImplicitShape.cpp</file>
    <file>testCheckImageConcept.cpp</file>
    <file>testConstImageAdapter.cpp</file>
    <file>testHashTree.cpp</file>
    <file>testImageAdapter.cpp</file>
    <file>testImageContainerBenchmark.cpp</file>
    <file>testImageContainerBenchmark.cpp</file>
    <file>testImageSimple.cpp</file>
    <file>testITKImage.cpp</file>
    <file>testMorton.cpp</file>
    <file>testColorMaps.cpp</file>
    <file>testMagickReader.cpp</file>
    <file>testMeshReader.cpp</file>
    <file>testMPolynomialReader.cpp</file>
    <file>testPNMReader.cpp</file>
    <file>testPointListReader.cpp</file>
    <file>testRawReader.cpp</file>
    <file>testVolReader.cpp</file>
    <file>testBoard2DCustomStyle.cpp</file>
    <file>testLongvol.cpp</file>
    <file>testDisplayKSCell.cpp</file>
    <file>testIVViewer.cpp</file>
    <file>testIVViewer.cpp</file>
    <file>testMeshWriter.cpp</file>
    <file>testBasicPointFunctors.cpp</file>
    <file>testDGtalGMP.cpp</file>
    <file>testEmbedder.cpp</file>
    <file>testHyperRectDomain.cpp</file>
    <file>testImagesSetsUtilities.cpp</file>
    <file>testInteger.cpp</file>
    <file>testLinearAlgebra.cpp</file>
    <file>testSimpleMatrix.cpp</file>
    <file>testAngleLinearMinimizer.cpp</file>
    <file>testMPolynomial.cpp</file>
    <file>testSignal.cpp</file>
    <file>testBall3DSurface.cpp</file>
    <file>testGaussDigitizer.cpp</file>
    <file>testHalfPlane.cpp</file>
    <file>testImplicitFunctionModels.cpp</file>
    <file>testMeshFromPointsDisplay.cpp</file>
    <file>testAdjacency.cpp</file>
    <file>testAdjacency.cpp</file>
    <file>testCellularGridSpaceND.cpp</file>
    <file>testAdjacency.cpp</file>
    <file>testDigitalSurface.cpp</file>
    <file>testDigitalTopology.cpp</file>
    <file>testExpander.cpp</file>
    <file>testExpander.cpp</file>
    <file>testDigitalSurface.cpp</file>
    <file>testDigitalSurface.cpp</file>
    <file>testObject.cpp</file>
    <file>testObject.cpp</file>
    <file>testObjectBorder.cpp</file>
    <file>testSimpleExpander.cpp</file>
    <file>testUmbrellaComputer.cpp</file>
  </compound>
  <compound kind="group">
    <name>Examples</name>
    <title>DGtal Examples</title>
    <filename>group__Examples.html</filename>
    <file>approximation.cpp</file>
    <file>convergents-biginteger.cpp</file>
    <file>convergents.cpp</file>
    <file>extended-euclid.cpp</file>
    <file>fraction.cpp</file>
    <file>lower-integer-convex-hull.cpp</file>
    <file>pattern.cpp</file>
    <file>demo-kernel-1.cpp</file>
    <file>kernelDomain.cpp</file>
    <file>demo-kernel-1.cpp</file>
    <file>range.cpp</file>
    <file>ArithmeticalDSS.cpp</file>
    <file>convex-and-concave-parts.cpp</file>
    <file>exampleCurvature.cpp</file>
    <file>exampleFrechetShortcut.cpp</file>
    <file>exampleGeometricalDCA.cpp</file>
    <file>exampleGeometricalDSS.cpp</file>
    <file>exampleGridCurve2d.cpp</file>
    <file>digitalSurfaceSlice.cpp</file>
    <file>digitalSurfaceSlice.cpp</file>
    <file>exampleGridCurve3d.cpp</file>
    <file>freemanChainDisplay.cpp</file>
    <file>greedy-dss-decomposition.cpp</file>
    <file>greedy-plane-segmentation-ex2.cpp</file>
    <file>greedy-plane-segmentation-ex3.cpp</file>
    <file>greedy-plane-segmentation.cpp</file>
    <file>examplePreimage.cpp</file>
    <file>distancetransform2D.cpp</file>
    <file>exampleFMM2D.cpp</file>
    <file>exampleFMM3D.cpp</file>
    <file>exampleConstImageAdapter.cpp</file>
    <file>dgtalBoard2D-1-points.cpp</file>
    <file>dgtalBoard2D-2-sets.cpp</file>
    <file>dgtalBoard2D-3-custom-classes.cpp</file>
    <file>dgtalBoard2D-3-custom-points.cpp</file>
    <file>dgtalBoard2D-4-colormaps.cpp</file>
    <file>logoDGtal.cpp</file>
    <file>digitalSetFromVol.cpp</file>
    <file>digitalSetFromVol.cpp</file>
    <file>meshFromOFF.cpp</file>
    <file>digitalSetFromVol.cpp</file>
    <file>kernelDomain.cpp</file>
    <file>viewer3D-7-planes.cpp</file>
    <file>polynomial-derivative.cpp</file>
    <file>polynomial-read.cpp</file>
    <file>polynomial2-derivative.cpp</file>
    <file>3dBorderExtraction.cpp</file>
    <file>3dBorderExtraction.cpp</file>
    <file>3dKSSurfaceExtraction.cpp</file>
    <file>ctopo-1.cpp</file>
    <file>ctopo-2-3d.cpp</file>
    <file>ctopo-2.cpp</file>
    <file>digitalSurfaceSlice.cpp</file>
    <file>frontierAndBoundary.cpp</file>
    <file>generateSimplicityTables2D.cpp</file>
    <file>generateSimplicityTables3D.cpp</file>
    <file>khalimskySpaceScanner.cpp</file>
    <file>trackImplicitPolynomialSurfaceToOFF.cpp</file>
    <file>volBreadthFirstTraversal.cpp</file>
    <file>volMarchingCubes.cpp</file>
    <file>volScanBoundary.cpp</file>
    <file>volToOFF.cpp</file>
    <file>volTrackBoundary.cpp</file>
    <file>freemanChainDisplay.cpp</file>
    <file>imageSetDT.cpp</file>
  </compound>
  <compound kind="class">
    <name>ArrayLXY</name>
    <filename>classArrayLXY.html</filename>
    <templarg></templarg>
    <templarg>L</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayLXY</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>a40ab113ca5d9d83ec55f968a16f8c567</anchor>
      <arglist>(Value invalid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>ab38f3923e8ad7b2b20e0fd9b4f5df496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>abf3aeadf1d181d6e584d66bc9f6d077f</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>erase</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>a3b4fcf1fedad22aa7dba97991d4d3573</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>a7d9668ec42e1a5fed8eea190abe603e3</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueNoNewLabel</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>ad73f1860dad54815b6526858b6aeb4b1</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLabel</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>a7642dd81660776495a261e4b7aa5e7de</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLabels</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>a952ef7a1f1d28f217ba94dedd9932c25</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;labels, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbLabels</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>a89dff5c608c5f4adbf8df808df67fda7</anchor>
      <arglist>(unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>a3cafc1efc31a328faac863e2ea1c645d</anchor>
      <arglist>(ostream &amp;out, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>area</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>abde4fc27124dd8e4999c0bda77dffcaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>_data</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>a65246b439f61162703e732eabbc0229f</anchor>
      <arglist>[L][X][Y]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>_invalid</name>
      <anchorfile>classArrayLXY.html</anchorfile>
      <anchor>a4b3e92bc1e015513c6819d7cf4c5a663</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayXYOfLabelledMap</name>
    <filename>classArrayXYOfLabelledMap.html</filename>
    <templarg></templarg>
    <templarg>L</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>M</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayXYOfLabelledMap</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>ab8b67831d7f86981f05fa1069865adb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a2b8ed180bafa0e711a3a362029596e48</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>abb0b2f4b09dbfd9c86e63957fff9e401</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>erase</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a1cfa5935619c29e1fb96db67829dd73e</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueNoNewLabel</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a52a15511a2400574a3cfc0dac5e21c7c</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLabel</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>ab3f1bbbf8383a1e0ae1f425c4eb00686</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLabels</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a1d30bba5de5a19946abe1bb4ea80b92e</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;labels, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbLabels</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a2b6acbdd556be83a047e5f248816bcaa</anchor>
      <arglist>(unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>ac212f5a8faa842c2d7d819cafb86809b</anchor>
      <arglist>(ostream &amp;out, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>area</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a8cd88faecfd1b88448aaf0e9b51fb163</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LabelledMap&lt; Value, L, TWord, N, M &gt;</type>
      <name>MyLabelledMap</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a62e701a7d60cc37ab57b0cc8ca8ad433</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MyLabelledMap</type>
      <name>_data</name>
      <anchorfile>classArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a3c862dac4760dc58441d524d71ef9c27</anchor>
      <arglist>[X][Y]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayXYOfMap</name>
    <filename>classArrayXYOfMap.html</filename>
    <templarg></templarg>
    <templarg>L</templarg>
    <templarg>X</templarg>
    <templarg>Y</templarg>
    <member kind="function">
      <type></type>
      <name>ArrayXYOfMap</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a373d22376ac24aba819a600fa0a711d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a684e91331432298d7f62da726ba24d5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a30e2d48f7534d6c75e489ba2cc4cfeb5</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>erase</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a388565a91b5b47d46e7b72427b4512cb</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a1510380a6887775bcc173dc6916fee47</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueNoNewLabel</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>aaa7c6670829a927b50b9a6bd90a5f1e5</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLabel</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>ae769bc327ff62de00269c090325b928a</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLabels</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a53a41753dffd3957a22f65088186aeaa</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;labels, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbLabels</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>acf679006061bd3a2499098b30cf85c68</anchor>
      <arglist>(unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a2490694c484fadf269c5de8b4ec563dd</anchor>
      <arglist>(ostream &amp;out, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>area</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a0ffa1aa99b65c9d72e38c7f1ecd4040f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; unsigned int, Value &gt;</type>
      <name>MyMap</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>aab673d0a3046b9a76c491aae74c6683c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>MyMap::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a48a12aa02972902fc5605d392cf343e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MyMap</type>
      <name>_data</name>
      <anchorfile>classArrayXYOfMap.html</anchorfile>
      <anchor>a78e536894e76dc68c8e50d6cbd579d7c</anchor>
      <arglist>[X][Y]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>boost::Assignable</name>
    <filename>classboost_1_1Assignable.html</filename>
  </compound>
  <compound kind="class">
    <name>BallFunctor</name>
    <filename>classBallFunctor.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>aa468f2e61bf1ada8d7276a7e3f54af4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>af0d09cdb154867af3369d1de26704f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>aa468f2e61bf1ada8d7276a7e3f54af4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>af0d09cdb154867af3369d1de26704f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BallFunctor</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>aef0be719fc91b05e7f42165e6d9ebe97</anchor>
      <arglist>(double aCx, double aCy, double aR)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>a76c2da29e08f4ddb806c28cd09d3fa2b</anchor>
      <arglist>(const TPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BallFunctor</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>aef0be719fc91b05e7f42165e6d9ebe97</anchor>
      <arglist>(double aCx, double aCy, double aR)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>a76c2da29e08f4ddb806c28cd09d3fa2b</anchor>
      <arglist>(const TPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myCx</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>a719ae120a0f442b00e3297354b9aaf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myCy</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>a6039d1c28ebc63d394c542b7fe5380ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myR</name>
      <anchorfile>classBallFunctor.html</anchorfile>
      <anchor>a9b35337977711d04977a477a2c53896c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BallPredicate</name>
    <filename>classBallPredicate.html</filename>
    <templarg>TPoint</templarg>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>classBallPredicate.html</anchorfile>
      <anchor>a50242fa6a73aa972121c633e9523d008</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>classBallPredicate.html</anchorfile>
      <anchor>a50242fa6a73aa972121c633e9523d008</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BallPredicate</name>
      <anchorfile>classBallPredicate.html</anchorfile>
      <anchor>afbbfb69028cc5ed482704d2dace99d3b</anchor>
      <arglist>(double aCx, double aCy, double aR)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classBallPredicate.html</anchorfile>
      <anchor>aada0d5edd2f6a51678a35c9598831faa</anchor>
      <arglist>(const TPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BallPredicate</name>
      <anchorfile>classBallPredicate.html</anchorfile>
      <anchor>afbbfb69028cc5ed482704d2dace99d3b</anchor>
      <arglist>(double aCx, double aCy, double aR)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classBallPredicate.html</anchorfile>
      <anchor>aada0d5edd2f6a51678a35c9598831faa</anchor>
      <arglist>(const TPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myCx</name>
      <anchorfile>classBallPredicate.html</anchorfile>
      <anchor>a453557ff12a0d45a290d64f1a834362e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myCy</name>
      <anchorfile>classBallPredicate.html</anchorfile>
      <anchor>a7586b1e7f1d891af7c71fc1a8d8c596b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myR</name>
      <anchorfile>classBallPredicate.html</anchorfile>
      <anchor>a870e9aa1ce0f5ec71b96406aa026a4d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ConfigPointPredicate</name>
    <filename>structConfigPointPredicate.html</filename>
    <templarg>Vector</templarg>
    <member kind="function">
      <type></type>
      <name>ConfigPointPredicate</name>
      <anchorfile>structConfigPointPredicate.html</anchorfile>
      <anchor>a56d49d81bb1f3b5e6a05fcdc0b08572b</anchor>
      <arglist>(std::map&lt; Vector, bool &gt; &amp;aFct, Vector aBase)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structConfigPointPredicate.html</anchorfile>
      <anchor>a5c87c3af5f2a93bac8a8f7b23dcb9f18</anchor>
      <arglist>(const Vector &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; Vector, bool &gt; &amp;</type>
      <name>fct</name>
      <anchorfile>structConfigPointPredicate.html</anchorfile>
      <anchor>ae8fc9b994ed08cf838069a042d3bdc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>base</name>
      <anchorfile>structConfigPointPredicate.html</anchorfile>
      <anchor>a731424d803d0607b455231b05633bce4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DistanceTraits</name>
    <filename>structDistanceTraits.html</filename>
    <templarg>TImage</templarg>
    <templarg>TSet</templarg>
    <templarg>norm</templarg>
    <member kind="typedef">
      <type>LInfLocalDistance&lt; TImage, TSet &gt;</type>
      <name>Distance</name>
      <anchorfile>structDistanceTraits.html</anchorfile>
      <anchor>a70aa3c25e85a34e5c9c2eb4f45b71a9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DistanceTraits&lt; TImage, TSet, 1 &gt;</name>
    <filename>structDistanceTraits_3_01TImage_00_01TSet_00_011_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>L1LocalDistance&lt; TImage, TSet &gt;</type>
      <name>Distance</name>
      <anchorfile>structDistanceTraits_3_01TImage_00_01TSet_00_011_01_4.html</anchorfile>
      <anchor>ac722048045490cf236537f9a67cd8786</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dummy1</name>
    <filename>classDummy1.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Dummy1</name>
      <anchorfile>classDummy1.html</anchorfile>
      <anchor>a420c116e7fb822de9c0dc841d5dbe25c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dummy1</name>
      <anchorfile>classDummy1.html</anchorfile>
      <anchor>abdca1d93abff4ba11d14df2fce1b2724</anchor>
      <arglist>(T *aPtr)</arglist>
    </member>
    <member kind="variable">
      <type>OwningOrAliasingPtr&lt; T &gt;</type>
      <name>myPtr</name>
      <anchorfile>classDummy1.html</anchorfile>
      <anchor>a367530e6f0a234bc250db2553b082d6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dummy2</name>
    <filename>classDummy2.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Dummy2</name>
      <anchorfile>classDummy2.html</anchorfile>
      <anchor>ab37758b153c6e48f4ee9f7fff0f461a1</anchor>
      <arglist>(T *aPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dummy2</name>
      <anchorfile>classDummy2.html</anchorfile>
      <anchor>aae4238c68278924bd54506318cde881a</anchor>
      <arglist>(T data)</arglist>
    </member>
    <member kind="variable">
      <type>OwningOrAliasingPtr&lt; T &gt;</type>
      <name>myPtr</name>
      <anchorfile>classDummy2.html</anchorfile>
      <anchor>a0125eaa4aa89c5f5ebe0f418c97c4911</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DummyBigObject</name>
    <filename>classDummyBigObject.html</filename>
  </compound>
  <compound kind="class">
    <name>DynArrayLXY</name>
    <filename>classDynArrayLXY.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Value</type>
      <name>ValueType</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a1d4571bc127414c6f6ed4aee3a150d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynArrayLXY</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>ae31257c28b251e55f19633fe30d71116</anchor>
      <arglist>(unsigned int _L, unsigned int _X, unsigned int _Y, Value invalid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynArrayLXY</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a8da3460f2259c4cf281088d3a48d9259</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a5f702d70df4101a57f9cfb30d58b5e95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>offset</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a452e4d5a9872f4dad7488229859b739b</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>aa198586882705e21ef3ed33a4e4f0cc0</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>erase</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a7812e0ae4e538849476c774bb99348f0</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a3330f36f8e808a69681ff684037d8a72</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueNoNewLabel</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a72d3da502a049eb8c6b5283433228f72</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLabel</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>ad1fe96d31a5d9d161bc474a4093cb484</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLabels</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a72698be38ec905b48448f278ab68ff86</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;labels, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbLabels</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a297d8a9a9af166ad781f5270ebd41a9b</anchor>
      <arglist>(unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a3750e749e29958d408b9e630eb91a8d4</anchor>
      <arglist>(ostream &amp;out, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>area</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>af71eca4951e4b773efe9c30845bbb839</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>L</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a88001e4cb6a47b17fa7602daf60bef69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>X</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>adfa5c231b2aa196b88fdcb95bb002fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>Y</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>a0c11cc5a4b14f7954947a5649a2a4507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value *</type>
      <name>_data</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>ac1fb944d7373ed1ecd137fe65cdcb0cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>_invalid</name>
      <anchorfile>classDynArrayLXY.html</anchorfile>
      <anchor>ad262d2557c9248b47374ea206b58b92f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynArrayXYOfLabelledMap</name>
    <filename>classDynArrayXYOfLabelledMap.html</filename>
    <templarg></templarg>
    <templarg>L</templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg>M</templarg>
    <member kind="typedef">
      <type>Value</type>
      <name>ValueType</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>acb8c62a3a387fcd67a2348ddbad31da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynArrayXYOfLabelledMap</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>aff12d906417a685343a122f0fa216b1e</anchor>
      <arglist>(unsigned int _X, unsigned int _Y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynArrayXYOfLabelledMap</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a4f09ae5e9a50c612f51ab2715fb460af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>offset</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>afff0c1899b07afe27a2ca7eedaad6fea</anchor>
      <arglist>(unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>ace66be6785c2c3059007349b6167b61e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a649510fc6684c96af4a6e495d7564805</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a8319d7e39fd2e2dcb06bf4fb4e0bfc07</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>erase</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a9fbd33a11d724fba135271c444089656</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueNoNewLabel</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a8f632a79b0ed076837b3f06245f8e291</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLabel</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>acc22136a49ff19bbdf3be3f454e86e08</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLabels</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>ac40b075c0bca276111c7d427d0b0f3aa</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;labels, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbLabels</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a572bf9d9a10b49d08af1da31ad7fff54</anchor>
      <arglist>(unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a32fe050492e7885f19b23fd2e1f9fb01</anchor>
      <arglist>(ostream &amp;out, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>area</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>ae7d20b8b984bd264dc67d0ff3feed355</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>X</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>a5cc658ab6b14083068ba4e9e903a5771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>Y</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>ae26e0bc53bc41de6f5df587e9dfd23d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LabelledMap&lt; Value, L, TWord, N, M &gt;</type>
      <name>MyLabelledMap</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>adf5fff9fc7ea187e466550366bf47120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MyLabelledMap *</type>
      <name>_data</name>
      <anchorfile>classDynArrayXYOfLabelledMap.html</anchorfile>
      <anchor>af9f310982b26d869e37ca0fce5c97c6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DynArrayXYOfMap</name>
    <filename>classDynArrayXYOfMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Value</type>
      <name>ValueType</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a168f00573f4e5edd37ea1633cab44262</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynArrayXYOfMap</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a9d0726f7e41bae19a25c6e8a03e1a762</anchor>
      <arglist>(unsigned int _L, unsigned int _X, unsigned int _Y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynArrayXYOfMap</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a3672a9a92148d807f36bdef07dcb4092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>offset</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>ac2e08b988c6162faef0dad794b41d3f7</anchor>
      <arglist>(unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a5cf3320c248b8e00ee8100f23da1e3f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>adc6cdaf3c359501359b13369ead55c81</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>erase</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a801d9d45f30dabad134bdb12aac4fbbd</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a45d96369362c137091001a006b369079</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValueNoNewLabel</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a8ee59cf4d96f7d773780492da925bcfc</anchor>
      <arglist>(const Value &amp;val, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLabel</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a514c16d83d89595d67f338fafc6e3fda</anchor>
      <arglist>(unsigned int l, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLabels</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>add6de9263654b37520c40ab1d50956a4</anchor>
      <arglist>(std::vector&lt; unsigned int &gt; &amp;labels, unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbLabels</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a3c818737d0e0ad006fe306ae33d6f199</anchor>
      <arglist>(unsigned int x, unsigned int y) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>display</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a483c67daed65516cd36eb432e150404c</anchor>
      <arglist>(ostream &amp;out, unsigned int l, unsigned int x, unsigned int y)</arglist>
    </member>
    <member kind="function">
      <type>unsigned long long</type>
      <name>area</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a05193928772a6d6e5f2439cf67f0574e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>L</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>acd398c3aba761dfebfcf432a26d1eb55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>X</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a277caa8aa97fa907a030955ca60176af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>Y</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a040c02e63658121042eb94263333136c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::map&lt; unsigned int, Value &gt;</type>
      <name>MyMap</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>ad40cf99d41275a38ee3193faaf6a49e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>MyMap::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>ae58b3e141b8ad1f2a918e8830c621a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MyMap *</type>
      <name>_data</name>
      <anchorfile>classDynArrayXYOfMap.html</anchorfile>
      <anchor>a4a9be0d5d823eba6643ab1a70a4cfc8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FindAndGetValue</name>
    <filename>structFindAndGetValue.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>implementation</name>
      <anchorfile>structFindAndGetValue.html</anchorfile>
      <anchor>afea841f1bc58973ac734d8f1ba8b1917</anchor>
      <arglist>(const I &amp;aImg, const S &amp;aSet, const typename D::Point &amp;aPoint, V &amp;aValue)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>FindAndGetValue&lt; ImageContainerBySTLMap&lt; D, V &gt;, DigitalSetFromMap&lt; ImageContainerBySTLMap&lt; D, V &gt; &gt;, D, V &gt;</name>
    <filename>structFindAndGetValue_3_01ImageContainerBySTLMap_3_01D_00_01V_01_4_00_01DigitalSetFromMap_3_01Im952d802389315baaf944149692bc3151.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>implementation</name>
      <anchorfile>structFindAndGetValue_3_01ImageContainerBySTLMap_3_01D_00_01V_01_4_00_01DigitalSetFromMap_3_01Im952d802389315baaf944149692bc3151.html</anchorfile>
      <anchor>aa04de5d686062f313930b69e18943e15</anchor>
      <arglist>(const ImageContainerBySTLMap&lt; D, V &gt; &amp;aImg, const DigitalSetFromMap&lt; ImageContainerBySTLMap&lt; D, V &gt; &gt; &amp;, const typename D::Point &amp;aPoint, V &amp;aValue)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ImplicitDigitalEllipse3</name>
    <filename>structImplicitDigitalEllipse3.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TPoint3</type>
      <name>Point</name>
      <anchorfile>structImplicitDigitalEllipse3.html</anchorfile>
      <anchor>a1969c5abb8805da4b16f168054d89ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitDigitalEllipse3</name>
      <anchorfile>structImplicitDigitalEllipse3.html</anchorfile>
      <anchor>ab23799a44340600375c2f34aa9433f01</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structImplicitDigitalEllipse3.html</anchorfile>
      <anchor>af4a5dd8db129e35f6b56e23387b1c63a</anchor>
      <arglist>(const TPoint3 &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myA</name>
      <anchorfile>structImplicitDigitalEllipse3.html</anchorfile>
      <anchor>abfd0ba8d0fb7d7c3b1b68e50ec4a7d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myB</name>
      <anchorfile>structImplicitDigitalEllipse3.html</anchorfile>
      <anchor>ace16c1dbfe88cee3782ed6fddee4d500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myC</name>
      <anchorfile>structImplicitDigitalEllipse3.html</anchorfile>
      <anchor>a14cf338f6afa093cb2e1045bb2d12fcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>InsertAndAlwaysSetValue</name>
    <filename>structInsertAndAlwaysSetValue.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>implementation</name>
      <anchorfile>structInsertAndAlwaysSetValue.html</anchorfile>
      <anchor>a963a53c702b8be32449f0e12bb0538f0</anchor>
      <arglist>(I &amp;aImg, S &amp;aSet, const typename D::Point &amp;aPoint, const V &amp;aValue)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>InsertAndAlwaysSetValue&lt; ImageContainerBySTLMap&lt; D, V &gt;, DigitalSetFromMap&lt; ImageContainerBySTLMap&lt; D, V &gt; &gt;, D, V &gt;</name>
    <filename>structInsertAndAlwaysSetValue_3_01ImageContainerBySTLMap_3_01D_00_01V_01_4_00_01DigitalSetFromMa6b49f85effea2a47b4579052c04de318.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>implementation</name>
      <anchorfile>structInsertAndAlwaysSetValue_3_01ImageContainerBySTLMap_3_01D_00_01V_01_4_00_01DigitalSetFromMa6b49f85effea2a47b4579052c04de318.html</anchorfile>
      <anchor>a49abb1228f9dde5d2654c9cee62f72c7</anchor>
      <arglist>(ImageContainerBySTLMap&lt; D, V &gt; &amp;aImg, DigitalSetFromMap&lt; ImageContainerBySTLMap&lt; D, V &gt; &gt; &amp;, const typename D::Point &amp;aPoint, const V &amp;aValue)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>InsertAndSetValue</name>
    <filename>structInsertAndSetValue.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>implementation</name>
      <anchorfile>structInsertAndSetValue.html</anchorfile>
      <anchor>a5d6eba146a4533add7a14f19e8f3f9a2</anchor>
      <arglist>(I &amp;aImg, S &amp;aSet, const typename D::Point &amp;aPoint, const V &amp;aValue)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>InsertAndSetValue&lt; ImageContainerBySTLMap&lt; D, V &gt;, DigitalSetFromMap&lt; ImageContainerBySTLMap&lt; D, V &gt; &gt;, D, V &gt;</name>
    <filename>structInsertAndSetValue_3_01ImageContainerBySTLMap_3_01D_00_01V_01_4_00_01DigitalSetFromMap_3_01aa23adb4bbc0c557a0679dcdc9f54a0a.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>implementation</name>
      <anchorfile>structInsertAndSetValue_3_01ImageContainerBySTLMap_3_01D_00_01V_01_4_00_01DigitalSetFromMap_3_01aa23adb4bbc0c557a0679dcdc9f54a0a.html</anchorfile>
      <anchor>af1860809b183bbfed33a37cecaadafb4</anchor>
      <arglist>(ImageContainerBySTLMap&lt; D, V &gt; &amp;aImg, DigitalSetFromMap&lt; ImageContainerBySTLMap&lt; D, V &gt; &gt; &amp;, const typename D::Point &amp;aPoint, const V &amp;aValue)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LessThanOnFace</name>
    <filename>structLessThanOnFace.html</filename>
    <templarg>Vector</templarg>
    <member kind="function">
      <type></type>
      <name>LessThanOnFace</name>
      <anchorfile>structLessThanOnFace.html</anchorfile>
      <anchor>a0849bee893ac998693d6d256266a3411</anchor>
      <arglist>(const Vector &amp;aN, const Vector &amp;aP, const std::vector&lt; Vector &gt; &amp;aPts)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structLessThanOnFace.html</anchorfile>
      <anchor>ad55b6a9454ab96f1ba8060a0eaf2a577</anchor>
      <arglist>(unsigned int i1, unsigned int i2) const </arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>N</name>
      <anchorfile>structLessThanOnFace.html</anchorfile>
      <anchor>aa036b86d4d909a4b0ef1cb43866ab9da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>P</name>
      <anchorfile>structLessThanOnFace.html</anchorfile>
      <anchor>ad8a8bfce1a66a4f27da83e7759e097a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; Vector &gt; &amp;</type>
      <name>pts</name>
      <anchorfile>structLessThanOnFace.html</anchorfile>
      <anchor>ab6218886b4a9ca852b2566d149a4fd89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LogScaleFunctor</name>
    <filename>structLogScaleFunctor.html</filename>
    <templarg>Scalar</templarg>
    <member kind="function">
      <type></type>
      <name>LogScaleFunctor</name>
      <anchorfile>structLogScaleFunctor.html</anchorfile>
      <anchor>a2fc60e4bda8249d37fe17387cd42fd00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>structLogScaleFunctor.html</anchorfile>
      <anchor>a7d3071123f32b18a3344c327b4c033fb</anchor>
      <arglist>(const Scalar &amp;a) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyDomainStyleCustomRed</name>
    <filename>structMyDomainStyleCustomRed.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyDomainStyleCustomRed.html</anchorfile>
      <anchor>ae13cd45aa2c4edf64b4a7d5bcc77616b</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyDrawStyleCustomBlue</name>
    <filename>structMyDrawStyleCustomBlue.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyDrawStyleCustomBlue.html</anchorfile>
      <anchor>ae6307065f26a32faf9a567090a9d2b98</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyDrawStyleCustomColor</name>
    <filename>structMyDrawStyleCustomColor.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function">
      <type></type>
      <name>MyDrawStyleCustomColor</name>
      <anchorfile>structMyDrawStyleCustomColor.html</anchorfile>
      <anchor>a00ea85591d77f3938c3df6d4a0b8b438</anchor>
      <arglist>(const Color &amp;penColor, const Color &amp;fillColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyDrawStyleCustomColor.html</anchorfile>
      <anchor>a1eb3117b3c9aa0a84fad71b5af593e25</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myPenColor</name>
      <anchorfile>structMyDrawStyleCustomColor.html</anchorfile>
      <anchor>a4962f9b685bf086faaee989d3306a24d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myFillColor</name>
      <anchorfile>structMyDrawStyleCustomColor.html</anchorfile>
      <anchor>a985876fe3c99b8724cc252b9442cbb9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyDrawStyleCustomFillColor</name>
    <filename>structMyDrawStyleCustomFillColor.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function">
      <type></type>
      <name>MyDrawStyleCustomFillColor</name>
      <anchorfile>structMyDrawStyleCustomFillColor.html</anchorfile>
      <anchor>a980b23ad95ef5ecf988b589564af484e</anchor>
      <arglist>(const Color &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyDrawStyleCustomFillColor.html</anchorfile>
      <anchor>a91f0b73ebb2ee5490e0b678bc91a2a61</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myColor</name>
      <anchorfile>structMyDrawStyleCustomFillColor.html</anchorfile>
      <anchor>acd5d7dc55e378b855198dd9ca61ec939</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyDrawStyleCustomGreen</name>
    <filename>structMyDrawStyleCustomGreen.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyDrawStyleCustomGreen.html</anchorfile>
      <anchor>a6ca6363d404fb902a57ec9b015866435</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyDrawStyleCustomGreen.html</anchorfile>
      <anchor>a827dc773cc79e0209966e4cbda8d80fc</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyDrawStyleCustomRed</name>
    <filename>structMyDrawStyleCustomRed.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyDrawStyleCustomRed.html</anchorfile>
      <anchor>a5d53b7d642663ee8cd9014d5afb04fca</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyDrawStyleCustomRed.html</anchorfile>
      <anchor>a5d53b7d642663ee8cd9014d5afb04fca</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyObjectStyleCustom</name>
    <filename>structMyObjectStyleCustom.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyObjectStyleCustom.html</anchorfile>
      <anchor>a028ee0f43f829a54322924e608f3cfc9</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyObjectStyleCustomRed</name>
    <filename>structMyObjectStyleCustomRed.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyObjectStyleCustomRed.html</anchorfile>
      <anchor>a0dd841510efc9e4dca7dd20829f42d4a</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>myreverse_iterator</name>
    <filename>classmyreverse__iterator.html</filename>
    <templarg>_Iterator</templarg>
    <member kind="typedef">
      <type>_Iterator</type>
      <name>iterator_type</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>ab4d04022be3fc3beb1ee97e34db04958</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator_traits&lt; _Iterator &gt;::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a3540280d23d6bbf99777a9cd828396c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator_traits&lt; _Iterator &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a799554bf4097152e885ade3528a98150</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator_traits&lt; _Iterator &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a931003cfe10a8ade57bff9ffe28e3c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>myreverse_iterator</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a4d28df67bdf66d0c41bf47f4b99d06a3</anchor>
      <arglist>(iterator_type __x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>myreverse_iterator</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a6ed35ce2573509e25b54b64fb9c183a4</anchor>
      <arglist>(const myreverse_iterator &amp;__x)</arglist>
    </member>
    <member kind="function">
      <type>iterator_type</type>
      <name>base</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>aeb5e398457410d45529e54547bb75c49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a7d89fbc5bb53d8109580490d2f865800</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a77bd6ccafce0622e3e63c113b0cba761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a11d783b71f2326d22b93aff6e99646ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>myreverse_iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>aa12c03236bfad052c85c971d4184f3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>myreverse_iterator</type>
      <name>operator++</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>aaa42d25fb420ca3f1ec03e52ac0c85b6</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>myreverse_iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>ae89953888c12437d99412c7fbdc7f11d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>myreverse_iterator</type>
      <name>operator--</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>af2d0371b440aa6e887a9608ca66bda46</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>myreverse_iterator</type>
      <name>operator+</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>ae50d6bbbf8f9c014324c69a39667d55d</anchor>
      <arglist>(difference_type __n) const </arglist>
    </member>
    <member kind="function">
      <type>myreverse_iterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>ae52392fa41d87bb04cce3312c2d537f1</anchor>
      <arglist>(difference_type __n)</arglist>
    </member>
    <member kind="function">
      <type>myreverse_iterator</type>
      <name>operator-</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>abd3a21c2fa1a547b84d031ef898867a9</anchor>
      <arglist>(difference_type __n) const </arglist>
    </member>
    <member kind="function">
      <type>myreverse_iterator &amp;</type>
      <name>operator-=</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a2da9a61b19905c7b5f1746ad075b0330</anchor>
      <arglist>(difference_type __n)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a5cd312e831cdc60f4f0d41cd3e87a6a0</anchor>
      <arglist>(difference_type __n) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>_Iterator</type>
      <name>current</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a4bdbd98b60aad417ff428672e7c812e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>_Iterator</type>
      <name>prev</name>
      <anchorfile>classmyreverse__iterator.html</anchorfile>
      <anchor>a33cbefa63e73014d086480aa574086ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyStyleCustom</name>
    <filename>structMyStyleCustom.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyStyleCustom.html</anchorfile>
      <anchor>a4b3f0789dd763e71dae2528c4a3da370</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>MyStyleCustomRed</name>
    <filename>structMyStyleCustomRed.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structMyStyleCustomRed.html</anchorfile>
      <anchor>af76742a49c93b4b3faa37306b2c7f16d</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MyTransValueFunctor</name>
    <filename>classMyTransValueFunctor.html</filename>
    <templarg>TValue</templarg>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classMyTransValueFunctor.html</anchorfile>
      <anchor>a1f0f2941369c05497f13ce6bce252a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MyTransValueFunctor</name>
      <anchorfile>classMyTransValueFunctor.html</anchorfile>
      <anchor>acb8d5fba0cef7bd129717b4dd0680013</anchor>
      <arglist>(const Value &amp;aValue=0)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classMyTransValueFunctor.html</anchorfile>
      <anchor>a1c924f83949e113972be0686a34e0d72</anchor>
      <arglist>(const TInput &amp;aInput) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myValue</name>
      <anchorfile>classMyTransValueFunctor.html</anchorfile>
      <anchor>a3d12d7bb174936933d59b1adccdcf75f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Norm1</name>
    <filename>structNorm1.html</filename>
    <templarg>P</templarg>
    <member kind="typedef">
      <type>P</type>
      <name>Point</name>
      <anchorfile>structNorm1.html</anchorfile>
      <anchor>af402dc5744ea6cee2adf23726aad4371</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>P::Coordinate</type>
      <name>Value</name>
      <anchorfile>structNorm1.html</anchorfile>
      <anchor>a280ff1eb87112160c493040190eb6b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structNorm1.html</anchorfile>
      <anchor>a715393db29a1171ec48fc740a85cdadf</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Point3D</name>
    <filename>structPoint3D.html</filename>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>structPoint3D.html</anchorfile>
      <anchor>a2ba84368afc7e5367b3f018b220329af</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>structPoint3D.html</anchorfile>
      <anchor>a4e2657ff2774c1f500e7eb13b822aa11</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>structPoint3D.html</anchorfile>
      <anchor>abf9d1f564d599503cdb114934c7044b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>structPoint3D.html</anchorfile>
      <anchor>abcb44b06e310b076fa9d65dec8541dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>structPoint3D.html</anchorfile>
      <anchor>a9f4a32e3afccb3c9fe9b5cd88e179c3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>SegmentedPlane</name>
    <filename>structSegmentedPlane.html</filename>
    <member kind="variable">
      <type>NaivePlaneComputer</type>
      <name>plane</name>
      <anchorfile>structSegmentedPlane.html</anchorfile>
      <anchor>ad28b3aa6b5b4e66df71387b47088d6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>color</name>
      <anchorfile>structSegmentedPlane.html</anchorfile>
      <anchor>ad4aa12cebcf0cd16cb8fcb6379a1bbb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>VertexSize</name>
    <filename>structVertexSize.html</filename>
    <member kind="function">
      <type></type>
      <name>VertexSize</name>
      <anchorfile>structVertexSize.html</anchorfile>
      <anchor>a0eaa65a6e400caf3bc74806c558be9cf</anchor>
      <arglist>(const Vertex &amp;aV, unsigned int aSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexSize</name>
      <anchorfile>structVertexSize.html</anchorfile>
      <anchor>a0eaa65a6e400caf3bc74806c558be9cf</anchor>
      <arglist>(const Vertex &amp;aV, unsigned int aSize)</arglist>
    </member>
    <member kind="variable">
      <type>Vertex</type>
      <name>v</name>
      <anchorfile>structVertexSize.html</anchorfile>
      <anchor>a5a61f1f04296fe6940151aeb7a752e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structVertexSize.html</anchorfile>
      <anchor>a4b0af2d14b893a67192031a7a35d8e84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>DGtal</name>
    <filename>namespaceDGtal.html</filename>
    <namespace>DGtal::BasicColorToScalarFunctors</namespace>
    <namespace>DGtal::ConceptUtils</namespace>
    <namespace>DGtal::deprecated</namespace>
    <namespace>DGtal::detail</namespace>
    <namespace>DGtal::details</namespace>
    <namespace>DGtal::experimental</namespace>
    <namespace>DGtal::Z2i</namespace>
    <namespace>DGtal::Z3i</namespace>
    <class kind="struct">DGtal::ClosedIntegerHalfPlane</class>
    <class kind="struct">DGtal::CPositiveIrreducibleFraction</class>
    <class kind="class">DGtal::IntegerComputer</class>
    <class kind="class">DGtal::LatticePolytope2D</class>
    <class kind="class">DGtal::LighterSternBrocot</class>
    <class kind="class">DGtal::LightSternBrocot</class>
    <class kind="class">DGtal::ModuloComputer</class>
    <class kind="class">DGtal::Pattern</class>
    <class kind="class">DGtal::StandardDSLQ0</class>
    <class kind="class">DGtal::SternBrocot</class>
    <class kind="struct">DGtal::CBidirectionalIteratorArchetype</class>
    <class kind="struct">DGtal::CConstBidirectionalIteratorArchetype</class>
    <class kind="struct">DGtal::CForwardIteratorArchetype</class>
    <class kind="struct">DGtal::TrueBoolFct0</class>
    <class kind="struct">DGtal::FalseBoolFct0</class>
    <class kind="struct">DGtal::IdentityBoolFct1</class>
    <class kind="struct">DGtal::NotBoolFct1</class>
    <class kind="struct">DGtal::AndBoolFct2</class>
    <class kind="struct">DGtal::OrBoolFct2</class>
    <class kind="struct">DGtal::XorBoolFct2</class>
    <class kind="struct">DGtal::ImpliesBoolFct2</class>
    <class kind="struct">DGtal::MinFunctor</class>
    <class kind="struct">DGtal::MaxFunctor</class>
    <class kind="struct">DGtal::MinusFunctor</class>
    <class kind="struct">DGtal::AbsFunctor</class>
    <class kind="struct">DGtal::DefaultFunctor</class>
    <class kind="class">DGtal::ConstValueFunctor</class>
    <class kind="struct">DGtal::CastFunctor</class>
    <class kind="class">DGtal::Composer</class>
    <class kind="class">DGtal::Thresholder</class>
    <class kind="struct">DGtal::Thresholder&lt; T, false, false &gt;</class>
    <class kind="struct">DGtal::Thresholder&lt; T, false, true &gt;</class>
    <class kind="struct">DGtal::Thresholder&lt; T, true, false &gt;</class>
    <class kind="struct">DGtal::Thresholder&lt; T, true, true &gt;</class>
    <class kind="struct">DGtal::PredicateCombiner</class>
    <class kind="class">DGtal::IntervalThresholder</class>
    <class kind="class">DGtal::Pair1st</class>
    <class kind="class">DGtal::Pair2nd</class>
    <class kind="class">DGtal::Pair1stMutator</class>
    <class kind="class">DGtal::Pair2ndMutator</class>
    <class kind="struct">DGtal::Bits</class>
    <class kind="struct">DGtal::CBackInsertable</class>
    <class kind="struct">DGtal::CBidirectionalOutputRange</class>
    <class kind="struct">DGtal::CBidirectionalOutputRangeFromPoint</class>
    <class kind="struct">DGtal::CBidirectionalRange</class>
    <class kind="struct">DGtal::CBidirectionalRangeFromPoint</class>
    <class kind="struct">DGtal::CConstBidirectionalRange</class>
    <class kind="struct">DGtal::CConstBidirectionalRangeFromPoint</class>
    <class kind="struct">DGtal::CConstSinglePassRange</class>
    <class kind="struct">DGtal::CConstSinglePassRangeFromPoint</class>
    <class kind="class">DGtal::Circulator</class>
    <class kind="struct">DGtal::CLabel</class>
    <class kind="class">DGtal::Clock</class>
    <class kind="struct">DGtal::DrawableWithDisplay3D</class>
    <class kind="struct">DGtal::DrawableWithBoard2D</class>
    <class kind="struct">DGtal::TagFalse</class>
    <class kind="struct">DGtal::TagTrue</class>
    <class kind="struct">DGtal::TagUnknown</class>
    <class kind="struct">DGtal::Negate</class>
    <class kind="struct">DGtal::Negate&lt; TagTrue &gt;</class>
    <class kind="struct">DGtal::Negate&lt; TagFalse &gt;</class>
    <class kind="struct">DGtal::DummyObject</class>
    <class kind="class">DGtal::ConstIteratorAdapter</class>
    <class kind="class">DGtal::ConstRangeAdapter</class>
    <class kind="class">DGtal::ConstRangeFromPointAdapter</class>
    <class kind="class">DGtal::CountedPtr</class>
    <class kind="class">DGtal::CowPtr</class>
    <class kind="struct">DGtal::CPredicate</class>
    <class kind="struct">DGtal::CQuantity</class>
    <class kind="struct">DGtal::CSinglePassOutputRange</class>
    <class kind="struct">DGtal::CSinglePassOutputRangeFromPoint</class>
    <class kind="struct">DGtal::CSinglePassRange</class>
    <class kind="struct">DGtal::CSinglePassRangeFromPoint</class>
    <class kind="struct">DGtal::CUnaryFunctor</class>
    <class kind="class">DGtal::IOException</class>
    <class kind="class">DGtal::InputException</class>
    <class kind="class">DGtal::ConnectivityException</class>
    <class kind="class">DGtal::MemoryException</class>
    <class kind="class">DGtal::InfiniteNumberException</class>
    <class kind="class">DGtal::POW</class>
    <class kind="class">DGtal::POW&lt; X, 1 &gt;</class>
    <class kind="class">DGtal::LOG2</class>
    <class kind="class">DGtal::LOG2&lt; 2 &gt;</class>
    <class kind="class">DGtal::LOG2&lt; 1 &gt;</class>
    <class kind="class">DGtal::IndexedListWithBlocks</class>
    <class kind="class">DGtal::InputIteratorWithRankOnSequence</class>
    <class kind="class">DGtal::IteratorAdapter</class>
    <class kind="struct">DGtal::IteratorType</class>
    <class kind="struct">DGtal::CirculatorType</class>
    <class kind="struct">DGtal::ForwardCategory</class>
    <class kind="struct">DGtal::BidirectionalCategory</class>
    <class kind="struct">DGtal::RandomAccessCategory</class>
    <class kind="struct">DGtal::IsCirculator</class>
    <class kind="struct">DGtal::IteratorCirculatorType</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits&lt; std::forward_iterator_tag &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits&lt; std::bidirectional_iterator_tag &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits&lt; std::random_access_iterator_tag &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits&lt; boost::forward_traversal_tag &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits&lt; boost::bidirectional_traversal_tag &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits&lt; boost::random_access_traversal_tag &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits&lt; boost::detail::iterator_category_with_traversal&lt; std::input_iterator_tag, boost::forward_traversal_tag &gt; &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits&lt; boost::detail::iterator_category_with_traversal&lt; std::input_iterator_tag, boost::bidirectional_traversal_tag &gt; &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTagTraits&lt; boost::detail::iterator_category_with_traversal&lt; std::input_iterator_tag, boost::random_access_traversal_tag &gt; &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTraits</class>
    <class kind="struct">DGtal::IteratorCirculatorTraits&lt; T * &gt;</class>
    <class kind="struct">DGtal::IteratorCirculatorTraits&lt; T const * &gt;</class>
    <class kind="class">DGtal::LabelledMap</class>
    <class kind="class">DGtal::Labels</class>
    <class kind="struct">DGtal::OpInSTLContainers</class>
    <class kind="struct">DGtal::OpInSTLContainers&lt; Container, std::reverse_iterator&lt; typename Container::iterator &gt; &gt;</class>
    <class kind="class">DGtal::OrderedAlphabet</class>
    <class kind="class">DGtal::OutputIteratorAdapter</class>
    <class kind="class">DGtal::OwningOrAliasingPtr</class>
    <class kind="class">DGtal::ReverseIterator</class>
    <class kind="class">DGtal::SimpleConstRange</class>
    <class kind="class">DGtal::SimpleRandomAccessConstRangeFromPoint</class>
    <class kind="class">DGtal::SimpleRandomAccessRangeFromPoint</class>
    <class kind="class">DGtal::Statistic</class>
    <class kind="struct">DGtal::StdMapRebinder</class>
    <class kind="class">DGtal::Trace</class>
    <class kind="class">DGtal::TraceWriter</class>
    <class kind="class">DGtal::TraceWriterFile</class>
    <class kind="class">DGtal::TraceWriterTerm</class>
    <class kind="class">DGtal::ArithmeticalDSS</class>
    <class kind="class">DGtal::ArithmeticalDSS3d</class>
    <class kind="class">DGtal::BinomialConvolver</class>
    <class kind="struct">DGtal::TangentFromBinomialConvolverFunctor</class>
    <class kind="struct">DGtal::CurvatureFromBinomialConvolverFunctor</class>
    <class kind="class">DGtal::BinomialConvolverEstimator</class>
    <class kind="struct">DGtal::CBidirectionalSegmentComputer</class>
    <class kind="struct">DGtal::CDynamicBidirectionalSegmentComputer</class>
    <class kind="struct">DGtal::CDynamicSegmentComputer</class>
    <class kind="struct">DGtal::CForwardSegmentComputer</class>
    <class kind="struct">DGtal::CIncrementalSegmentComputer</class>
    <class kind="class">DGtal::CombinatorialDSS</class>
    <class kind="struct">DGtal::CSegment</class>
    <class kind="struct">DGtal::CSegmentFactory</class>
    <class kind="class">DGtal::BLUELocalLengthEstimator</class>
    <class kind="struct">DGtal::CGlobalGeometricEstimator</class>
    <class kind="struct">DGtal::CLocalGeometricEstimator</class>
    <class kind="struct">DGtal::CompareLocalEstimators</class>
    <class kind="struct">DGtal::CSegmentComputerEstimator</class>
    <class kind="class">DGtal::DSSLengthEstimator</class>
    <class kind="class">DGtal::FPLengthEstimator</class>
    <class kind="class">DGtal::L1LengthEstimator</class>
    <class kind="class">DGtal::MLPLengthEstimator</class>
    <class kind="class">DGtal::MostCenteredMaximalSegmentEstimator</class>
    <class kind="class">DGtal::ParametricShapeArcLengthFunctor</class>
    <class kind="class">DGtal::ParametricShapeCurvatureFunctor</class>
    <class kind="class">DGtal::ParametricShapeTangentFunctor</class>
    <class kind="class">DGtal::RosenProffittLocalLengthEstimator</class>
    <class kind="class">DGtal::TangentFromDSSEstimator</class>
    <class kind="class">DGtal::TangentVectorFromDSSEstimator</class>
    <class kind="class">DGtal::TangentAngleFromDSSEstimator</class>
    <class kind="class">DGtal::CurvatureFromDCAEstimator</class>
    <class kind="class">DGtal::NormalFromDCAEstimator</class>
    <class kind="class">DGtal::TangentFromDCAEstimator</class>
    <class kind="class">DGtal::DistanceFromDCAEstimator</class>
    <class kind="class">DGtal::CurvatureFromDSSLengthEstimator</class>
    <class kind="class">DGtal::CurvatureFromDSSEstimator</class>
    <class kind="class">DGtal::TrueGlobalEstimatorOnPoints</class>
    <class kind="class">DGtal::TrueLocalEstimatorOnPoints</class>
    <class kind="class">DGtal::TwoStepLocalLengthEstimator</class>
    <class kind="class">DGtal::Adapter</class>
    <class kind="class">DGtal::Adapter4ConvexPart</class>
    <class kind="class">DGtal::Adapter4ConcavePart</class>
    <class kind="class">DGtal::FP</class>
    <class kind="class">DGtal::FrechetShortcut</class>
    <class kind="class">DGtal::FreemanChain</class>
    <class kind="class">DGtal::GeometricalDCA</class>
    <class kind="class">DGtal::GeometricalDSS</class>
    <class kind="class">DGtal::GreedySegmentation</class>
    <class kind="class">DGtal::GridCurve</class>
    <class kind="class">DGtal::SaturatedSegmentation</class>
    <class kind="struct">DGtal::ForwardSegmentComputer</class>
    <class kind="struct">DGtal::BidirectionalSegmentComputer</class>
    <class kind="struct">DGtal::DynamicSegmentComputer</class>
    <class kind="struct">DGtal::DynamicBidirectionalSegmentComputer</class>
    <class kind="struct">DGtal::SegmentComputerTraits</class>
    <class kind="class">DGtal::ContourHelper</class>
    <class kind="class">DGtal::COBAGenericNaivePlane</class>
    <class kind="class">DGtal::COBANaivePlane</class>
    <class kind="class">DGtal::ConstantConvolutionWeights</class>
    <class kind="class">DGtal::GaussianConvolutionWeights</class>
    <class kind="struct">DGtal::CConvolutionWeights</class>
    <class kind="struct">DGtal::CNormalVectorEstimator</class>
    <class kind="class">DGtal::DigitalSurfaceEmbedderWithNormalVectorEstimator</class>
    <class kind="class">DGtal::DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap</class>
    <class kind="class">DGtal::LocalConvolutionNormalVectorEstimator</class>
    <class kind="class">DGtal::NormalVectorEstimatorLinearCellEmbedder</class>
    <class kind="class">DGtal::Preimage2D</class>
    <class kind="class">DGtal::SphericalAccumulator</class>
    <class kind="struct">DGtal::CSeparableMetric</class>
    <class kind="class">DGtal::DistanceTransformation</class>
    <class kind="class">DGtal::FMM</class>
    <class kind="class">DGtal::L2FirstOrderLocalDistance</class>
    <class kind="class">DGtal::L2SecondOrderLocalDistance</class>
    <class kind="class">DGtal::LInfLocalDistance</class>
    <class kind="class">DGtal::L1LocalDistance</class>
    <class kind="class">DGtal::L2FirstOrderLocalDistanceFromCells</class>
    <class kind="class">DGtal::SpeedExtrapolator</class>
    <class kind="class">DGtal::ReverseDistanceTransformation</class>
    <class kind="struct">DGtal::SeparableMetricHelper</class>
    <class kind="struct">DGtal::SeparableMetricHelper&lt; TPoint, TInternalValue, 2 &gt;</class>
    <class kind="struct">DGtal::SeparableMetricHelper&lt; TPoint, TInternalValue, 1 &gt;</class>
    <class kind="struct">DGtal::SeparableMetricHelper&lt; TPoint, TInternalValue, 0 &gt;</class>
    <class kind="class">DGtal::VoronoiMap</class>
    <class kind="class">DGtal::Measure</class>
    <class kind="struct">DGtal::CConstImage</class>
    <class kind="struct">DGtal::CImage</class>
    <class kind="class">DGtal::ConstImageAdapter</class>
    <class kind="struct">DGtal::CTrivialConstImage</class>
    <class kind="struct">DGtal::CTrivialImage</class>
    <class kind="class">DGtal::DefaultConstImageRange</class>
    <class kind="class">DGtal::DefaultImageRange</class>
    <class kind="class">DGtal::Image</class>
    <class kind="class">DGtal::ImageAdapter</class>
    <class kind="class">DGtal::ImageContainerByHashTree</class>
    <class kind="class">DGtal::ImageContainerBySTLMap</class>
    <class kind="class">DGtal::DistanceFunctorFromPoint</class>
    <class kind="class">DGtal::ImageContainerBySTLVector</class>
    <class kind="class">DGtal::ImageLinearCellEmbedder</class>
    <class kind="struct">DGtal::ImageSelector</class>
    <class kind="struct">DGtal::ImageSelector&lt; Domain, Value, LOW_ITER_I+LOW_BEL_I &gt;</class>
    <class kind="struct">DGtal::ImageFromSet</class>
    <class kind="class">DGtal::IntervalForegroundPredicate</class>
    <class kind="struct">DGtal::SetFromImage</class>
    <class kind="class">DGtal::SimpleThresholdForegroundPredicate</class>
    <class kind="class">DGtal::Morton</class>
    <class kind="class">DGtal::SetValueIterator</class>
    <class kind="class">DGtal::Board2D</class>
    <class kind="struct">DGtal::DrawWithBoardModifier</class>
    <class kind="struct">DGtal::CustomStyle</class>
    <class kind="struct">DGtal::SetMode</class>
    <class kind="struct">DGtal::CustomColors</class>
    <class kind="struct">DGtal::CustomPenColor</class>
    <class kind="struct">DGtal::CustomFillColor</class>
    <class kind="struct">DGtal::CustomPen</class>
    <class kind="class">DGtal::Board3DTo2D</class>
    <class kind="struct">DGtal::CDrawableWithBoard2D</class>
    <class kind="struct">DGtal::CDrawableWithDisplay3D</class>
    <class kind="class">DGtal::Color</class>
    <class kind="struct">DGtal::CColorMap</class>
    <class kind="class">DGtal::ColorBrightnessColorMap</class>
    <class kind="class">DGtal::GradientColorMap</class>
    <class kind="class">DGtal::GrayscaleColorMap</class>
    <class kind="class">DGtal::HueShadeColorMap</class>
    <class kind="class">DGtal::RandomColorMap</class>
    <class kind="struct">DGtal::Display2DFactory</class>
    <class kind="class">DGtal::Display3D</class>
    <class kind="struct">DGtal::Display3DFactory</class>
    <class kind="struct">DGtal::DrawWithDisplay3DModifier</class>
    <class kind="struct">DGtal::SetMode3D</class>
    <class kind="struct">DGtal::CustomStyle3D</class>
    <class kind="struct">DGtal::CustomColors3D</class>
    <class kind="struct">DGtal::ClippingPlane</class>
    <class kind="struct">DGtal::CameraPosition</class>
    <class kind="struct">DGtal::CameraDirection</class>
    <class kind="struct">DGtal::CameraUpVector</class>
    <class kind="struct">DGtal::CameraZNearFar</class>
    <class kind="struct">DGtal::TransformedKSSurfel</class>
    <class kind="struct">DGtal::LongvolReader</class>
    <class kind="struct">DGtal::MagickReader</class>
    <class kind="struct">DGtal::MeshReader</class>
    <class kind="struct">DGtal::PNMReader</class>
    <class kind="struct">DGtal::PointListReader</class>
    <class kind="struct">DGtal::RawReader</class>
    <class kind="struct">DGtal::VolReader</class>
    <class kind="struct">DGtal::Style2DFactory</class>
    <class kind="struct">DGtal::DefaultDrawStyleCircular_AngleLinearMinimizer</class>
    <class kind="struct">DGtal::DefaultDrawStyleBB_ArithmeticalDSS</class>
    <class kind="struct">DGtal::DefaultDrawStylePoints_ArithmeticalDSS</class>
    <class kind="struct">DGtal::DefaultDrawStyle_DigitalSetBySTLSet</class>
    <class kind="struct">DGtal::DefaultDrawStyle_DigitalSetBySTLVector</class>
    <class kind="struct">DGtal::DefaultDrawStyle_FP</class>
    <class kind="struct">DGtal::DefaultDrawStyleGrid_FreemanChain</class>
    <class kind="struct">DGtal::DefaultDrawStyleInterGrid_FreemanChain</class>
    <class kind="struct">DGtal::DefaultDrawStyle_GeometricalDSS</class>
    <class kind="struct">DGtal::DefaultDrawStyle_GeometricalDCA</class>
    <class kind="struct">DGtal::DefaultDrawStyle_FrechetShortcut</class>
    <class kind="struct">DGtal::DefaultDrawStylePaving_HyperRectDomain</class>
    <class kind="struct">DGtal::DefaultDrawStyleGrid_HyperRectDomain</class>
    <class kind="struct">DGtal::DefaultDrawStyle_ImageContainerByHashTree</class>
    <class kind="struct">DGtal::DefaultDrawStyle_ImageContainerBySTLVector</class>
    <class kind="struct">DGtal::DefaultDrawStyle_KhalimskyCell</class>
    <class kind="struct">DGtal::DefaultDrawStyle_Object</class>
    <class kind="struct">DGtal::DefaultDrawStylePaving_PointVector</class>
    <class kind="struct">DGtal::DefaultDrawStyleGrid_PointVector</class>
    <class kind="struct">DGtal::DefaultDrawStyle_SignedKhalimskyCell</class>
    <class kind="struct">DGtal::DefaultDrawStyleFilled_LatticePolytope2D</class>
    <class kind="struct">DGtal::DefaultDrawStyleTransparent_LatticePolytope2D</class>
    <class kind="class">DGtal::DGtalInventor</class>
    <class kind="class">DGtal::IVViewer</class>
    <class kind="class">DGtal::Lattice</class>
    <class kind="class">DGtal::Viewer3D</class>
    <class kind="struct">DGtal::LongvolWriter</class>
    <class kind="struct">DGtal::MeshWriter</class>
    <class kind="struct">DGtal::PGMWriter</class>
    <class kind="struct">DGtal::PPMWriter</class>
    <class kind="struct">DGtal::RawWriter</class>
    <class kind="struct">DGtal::VolWriter</class>
    <class kind="struct">DGtal::Projector</class>
    <class kind="struct">DGtal::ConstantPointPredicate</class>
    <class kind="struct">DGtal::TruePointPredicate</class>
    <class kind="struct">DGtal::FalsePointPredicate</class>
    <class kind="struct">DGtal::IsLowerPointPredicate</class>
    <class kind="struct">DGtal::IsUpperPointPredicate</class>
    <class kind="struct">DGtal::IsWithinPointPredicate</class>
    <class kind="struct">DGtal::NotPointPredicate</class>
    <class kind="struct">DGtal::EqualPointPredicate</class>
    <class kind="struct">DGtal::BinaryPointPredicate</class>
    <class kind="struct">DGtal::PointFunctorPredicate</class>
    <class kind="struct">DGtal::CanonicCellEmbedder</class>
    <class kind="struct">DGtal::CanonicDigitalSurfaceEmbedder</class>
    <class kind="struct">DGtal::CanonicEmbedder</class>
    <class kind="struct">DGtal::CanonicSCellEmbedder</class>
    <class kind="struct">DGtal::CBoundedInteger</class>
    <class kind="struct">DGtal::CCommutativeRing</class>
    <class kind="struct">DGtal::CEuclideanRing</class>
    <class kind="struct">DGtal::CInteger</class>
    <class kind="struct">DGtal::CPointEmbedder</class>
    <class kind="struct">DGtal::CPointFunctor</class>
    <class kind="struct">DGtal::CPointPredicate</class>
    <class kind="struct">DGtal::CSignedInteger</class>
    <class kind="struct">DGtal::CSpace</class>
    <class kind="struct">DGtal::CUnsignedInteger</class>
    <class kind="struct">DGtal::CWithGradientMap</class>
    <class kind="struct">DGtal::CDomain</class>
    <class kind="class">DGtal::CDomainArchetype</class>
    <class kind="struct">DGtal::DomainPredicate</class>
    <class kind="class">DGtal::HyperRectDomain</class>
    <class kind="class">DGtal::HyperRectDomain_Iterator</class>
    <class kind="class">DGtal::HyperRectDomain_subIterator</class>
    <class kind="struct">DGtal::LinearAlgebra</class>
    <class kind="struct">DGtal::NumberTraits</class>
    <class kind="struct">DGtal::NumberTraits&lt; uint16_t &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; int16_t &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; uint8_t &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; int8_t &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; uint32_t &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; int32_t &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; uint64_t &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; int64_t &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; float &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; double &gt;</class>
    <class kind="struct">DGtal::NumberTraits&lt; long double &gt;</class>
    <class kind="class">DGtal::Warning_promote_trait_not_specialized_for_this_case</class>
    <class kind="struct">DGtal::promote_trait</class>
    <class kind="struct">DGtal::promote_trait&lt; int32_t, int64_t &gt;</class>
    <class kind="class">DGtal::PointVector</class>
    <class kind="class">DGtal::RegularPointEmbedder</class>
    <class kind="struct">DGtal::CDigitalSet</class>
    <class kind="class">DGtal::CDigitalSetArchetype</class>
    <class kind="class">DGtal::DigitalSetBySTLSet</class>
    <class kind="class">DGtal::DigitalSetBySTLVector</class>
    <class kind="struct">DGtal::DigitalSetConverter</class>
    <class kind="class">DGtal::DigitalSetDomain</class>
    <class kind="class">DGtal::DigitalSetFromMap</class>
    <class kind="class">DGtal::DigitalSetInserter</class>
    <class kind="struct">DGtal::DigitalSetSelector</class>
    <class kind="struct">DGtal::DigitalSetSelector&lt; Domain, SMALL_DS+LOW_VAR_DS+LOW_ITER_DS+LOW_BEL_DS &gt;</class>
    <class kind="struct">DGtal::DigitalSetSelector&lt; Domain, SMALL_DS+LOW_VAR_DS+HIGH_ITER_DS+LOW_BEL_DS &gt;</class>
    <class kind="struct">DGtal::SetPredicate</class>
    <class kind="class">DGtal::SimpleMatrix</class>
    <class kind="struct">DGtal::SimpleMatrixSpecializations</class>
    <class kind="struct">DGtal::SimpleMatrixSpecializations&lt; TMatrix, 2, 2 &gt;</class>
    <class kind="struct">DGtal::SimpleMatrixSpecializations&lt; TMatrix, 1, 1 &gt;</class>
    <class kind="struct">DGtal::SimpleMatrixSpecializations&lt; TMatrix, 3, 3 &gt;</class>
    <class kind="class">DGtal::SpaceND</class>
    <class kind="struct">DGtal::AngleComputer</class>
    <class kind="class">DGtal::AngleLinearMinimizer</class>
    <class kind="class">DGtal::AngleLinearMinimizerByRelaxation</class>
    <class kind="class">DGtal::AngleLinearMinimizerByGradientDescent</class>
    <class kind="class">DGtal::AngleLinearMinimizerByAdaptiveStepGradientDescent</class>
    <class kind="class">DGtal::MeasureOfStraightLines</class>
    <class kind="class">DGtal::MPolynomialEvaluatorImpl&lt; 1, TRing, TOwner, TAlloc, TX &gt;</class>
    <class kind="class">DGtal::MPolynomialEvaluatorImpl</class>
    <class kind="class">DGtal::MPolynomialEvaluator&lt; 1, TRing, TAlloc, TX &gt;</class>
    <class kind="class">DGtal::MPolynomialEvaluator</class>
    <class kind="class">DGtal::MPolynomial&lt; 0, TRing, TAlloc &gt;</class>
    <class kind="class">DGtal::IVector</class>
    <class kind="class">DGtal::IVector&lt; T, TAlloc, true &gt;</class>
    <class kind="class">DGtal::MPolynomial</class>
    <class kind="class">DGtal::Xe_kComputer</class>
    <class kind="class">DGtal::Xe_kComputer&lt; 0, Ring, Alloc &gt;</class>
    <class kind="class">DGtal::MPolynomialDerivativeComputer&lt; 0, n, Ring, Alloc &gt;</class>
    <class kind="class">DGtal::MPolynomialDerivativeComputer</class>
    <class kind="class">DGtal::MPolynomialDerivativeComputer&lt; 0, 0, Ring, Alloc &gt;</class>
    <class kind="class">DGtal::MPolynomialDerivativeComputer&lt; N, 0, Ring, Alloc &gt;</class>
    <class kind="struct">DGtal::SignalData</class>
    <class kind="class">DGtal::Signal</class>
    <class kind="struct">DGtal::CDigitalBoundedShape</class>
    <class kind="struct">DGtal::CDigitalOrientedShape</class>
    <class kind="struct">DGtal::CEuclideanBoundedShape</class>
    <class kind="struct">DGtal::CEuclideanOrientedShape</class>
    <class kind="class">DGtal::CircleFrom2Points</class>
    <class kind="class">DGtal::CircleFrom3Points</class>
    <class kind="class">DGtal::MeshFromPoints</class>
    <class kind="class">DGtal::Point2ShapePredicate</class>
    <class kind="struct">DGtal::Point2ShapePredicateComparator</class>
    <class kind="struct">DGtal::Point2ShapePredicateComparator&lt; T, false, false &gt;</class>
    <class kind="struct">DGtal::Point2ShapePredicateComparator&lt; T, false, true &gt;</class>
    <class kind="struct">DGtal::Point2ShapePredicateComparator&lt; T, true, false &gt;</class>
    <class kind="struct">DGtal::Point2ShapePredicateComparator&lt; T, true, true &gt;</class>
    <class kind="class">DGtal::StraightLineFrom2Points</class>
    <class kind="class">DGtal::GaussDigitizer</class>
    <class kind="struct">DGtal::CImplicitFunction</class>
    <class kind="struct">DGtal::CImplicitFunctionDiff1</class>
    <class kind="class">DGtal::ImplicitBall</class>
    <class kind="class">DGtal::ImplicitFunctionDiff1LinearCellEmbedder</class>
    <class kind="struct">DGtal::ImplicitFunctionDiff1LinearCellEmbedderGradientMap</class>
    <class kind="class">DGtal::ImplicitFunctionLinearCellEmbedder</class>
    <class kind="class">DGtal::ImplicitHyperCube</class>
    <class kind="class">DGtal::ImplicitNorm1Ball</class>
    <class kind="class">DGtal::ImplicitPolynomial3Shape</class>
    <class kind="class">DGtal::ImplicitRoundedHyperCube</class>
    <class kind="class">DGtal::AccFlower2D</class>
    <class kind="class">DGtal::Ball2D</class>
    <class kind="class">DGtal::Ball3D</class>
    <class kind="class">DGtal::Ellipse2D</class>
    <class kind="class">DGtal::Flower2D</class>
    <class kind="class">DGtal::NGon2D</class>
    <class kind="class">DGtal::StarShaped2D</class>
    <class kind="class">DGtal::StarShaped3D</class>
    <class kind="class">DGtal::Shapes</class>
    <class kind="class">DGtal::BreadthFirstVisitor</class>
    <class kind="struct">DGtal::CAdjacency</class>
    <class kind="struct">DGtal::CCellEmbedder</class>
    <class kind="struct">DGtal::CCellularGridSpaceND</class>
    <class kind="struct">DGtal::CDigitalSurfaceContainer</class>
    <class kind="struct">DGtal::CDigitalSurfaceEmbedder</class>
    <class kind="struct">DGtal::CDigitalSurfaceTracker</class>
    <class kind="struct">DGtal::CDomainAdjacency</class>
    <class kind="struct">DGtal::CSCellEmbedder</class>
    <class kind="struct">DGtal::CSurfelPredicate</class>
    <class kind="struct">DGtal::CUndirectedSimpleGraph</class>
    <class kind="struct">DGtal::CUndirectedSimpleLocalGraph</class>
    <class kind="struct">DGtal::CVertexMap</class>
    <class kind="struct">DGtal::CVertexPredicate</class>
    <class kind="class">DGtal::DepthFirstVisitor</class>
    <class kind="class">DGtal::DigitalSetBoundary</class>
    <class kind="class">DGtal::DigitalSurface</class>
    <class kind="class">DGtal::DigitalSurface2DSlice</class>
    <class kind="class">DGtal::DigitalTopology</class>
    <class kind="class">DGtal::DomainAdjacency</class>
    <class kind="class">DGtal::Expander</class>
    <class kind="class">DGtal::ExplicitDigitalSurface</class>
    <class kind="class">DGtal::BoundaryPredicate</class>
    <class kind="class">DGtal::FrontierPredicate</class>
    <class kind="class">DGtal::Surfaces</class>
    <class kind="class">DGtal::ImplicitDigitalSurface</class>
    <class kind="struct">DGtal::KhalimskyCell</class>
    <class kind="struct">DGtal::SignedKhalimskyCell</class>
    <class kind="class">DGtal::CellDirectionIterator</class>
    <class kind="class">DGtal::KhalimskySpaceND</class>
    <class kind="class">DGtal::LightExplicitDigitalSurface</class>
    <class kind="class">DGtal::LightImplicitDigitalSurface</class>
    <class kind="class">DGtal::MetricAdjacency</class>
    <class kind="class">DGtal::MetricAdjacency&lt; TSpace, 2, 2 &gt;</class>
    <class kind="class">DGtal::MetricAdjacency&lt; TSpace, 1, 2 &gt;</class>
    <class kind="class">DGtal::MetricAdjacency&lt; TSpace, 3, 3 &gt;</class>
    <class kind="class">DGtal::MetricAdjacency&lt; TSpace, 2, 3 &gt;</class>
    <class kind="class">DGtal::MetricAdjacency&lt; TSpace, 1, 3 &gt;</class>
    <class kind="class">DGtal::Object</class>
    <class kind="class">DGtal::SCellToPoint</class>
    <class kind="class">DGtal::SCellToMidPoint</class>
    <class kind="class">DGtal::SCellToArrow</class>
    <class kind="class">DGtal::SCellToInnerPoint</class>
    <class kind="class">DGtal::SCellToOuterPoint</class>
    <class kind="class">DGtal::SCellToIncidentPoints</class>
    <class kind="class">DGtal::SCellToCode</class>
    <class kind="class">DGtal::SetOfSurfels</class>
    <class kind="class">DGtal::STLMapToVertexMapAdapter</class>
    <class kind="class">DGtal::SurfelAdjacency</class>
    <class kind="class">DGtal::SurfelNeighborhood</class>
    <class kind="struct">DGtal::SurfelSetPredicate</class>
    <class kind="class">DGtal::UmbrellaComputer</class>
    <class kind="struct">DGtal::ImplicitDigitalEllipse3</class>
    <member kind="typedef">
      <type>boost::function0&lt; bool &gt;</type>
      <name>BoolFunction0</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a40f198468aea6d0121b11cd49e599e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function1&lt; bool, bool &gt;</type>
      <name>BoolFunction1</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9a92f37472d9010932be3fe6d28f94cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function2&lt; bool, bool, bool &gt;</type>
      <name>BoolFunction2</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7d57d4419aa9656ae4be838f903b5dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function3&lt; bool, bool, bool, bool &gt;</type>
      <name>BoolFunction3</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1bbf050f10f3c666dc5e170e893d8e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint8_t</type>
      <name>uint8_t</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a3f01c0f785c605d021be8e328180f502</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint16_t</type>
      <name>uint16_t</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a30f912c6a9d587320495d627df2719ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint32_t</type>
      <name>uint32_t</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a27c59126488e9c545120667959d2fc4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::uint64_t</type>
      <name>uint64_t</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ab33c0c25b8cc3cd86de343bca34329f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int8_t</type>
      <name>int8_t</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac28d51e0b1672afa52b3c218a32a6a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int16_t</type>
      <name>int16_t</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac62de8348789e05494b7515c6525baa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int32_t</type>
      <name>int32_t</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac1e9ac6a329319ae13c51c0c9e92486a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::int64_t</type>
      <name>int64_t</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1c09e3f63904ff371f1b99f45069fc63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::uint32_t</type>
      <name>Dimension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8fbe8c8d47ca5c36ced14284ac62613d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Orientation</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9f6cc75dc44e45506a66cd233e0deb41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INSIDE</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9f6cc75dc44e45506a66cd233e0deb41a528af0eaf947edc94796219523aa9553</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ON</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9f6cc75dc44e45506a66cd233e0deb41a7671a5416d92f37137f9999ca23dd65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTSIDE</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9f6cc75dc44e45506a66cd233e0deb41a5f4bdeccc29812b7de1cc0c05b724734</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ImageIterability</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7f3384cac6dea91b4d46cc1421854dda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIGH_ITER_IMAGE</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7f3384cac6dea91b4d46cc1421854ddaacf7975d858b926cba1cc047885d1765c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOW_ITER_I</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7f3384cac6dea91b4d46cc1421854ddaa66f45381ecc834daac482ee3493a79f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ImageBelongTestability</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afbda75b83fdb9094d0e38931838c8d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIGH_BEL_I</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afbda75b83fdb9094d0e38931838c8d6aa3417447f6aa436ccbf37e0c359adac12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOW_BEL_I</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afbda75b83fdb9094d0e38931838c8d6aa5bb4ca524cc66ff98e8b4ad4b4138630</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ImageSpecificContainer</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0a142484d2c7efc3d29f5bbde3b449b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NORMAL_CONTAINER_I</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0a142484d2c7efc3d29f5bbde3b449b7a0a9f2a6126427332825d75e775f59388</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VTKIMAGEDATA_CONTAINER_I</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0a142484d2c7efc3d29f5bbde3b449b7ad4deed74c04fa5f801b7c2638d536c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DomainDrawMode</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2526218ffac7b4842d393facbedd9ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GRID</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2526218ffac7b4842d393facbedd9ee3a6cfb206d9d6225066329a79e83db654e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PAVING</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2526218ffac7b4842d393facbedd9ee3ad788351651a8e983ca1b5b30861ad8ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>ColorGradientPreset</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_CUSTOM</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2a97a652eb81107a63d65d0d091f48e320</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_GRAYSCALE</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2a03f20e9e057e38ce03220e2a43b1a366</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_SPRING</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2ad222787b0de6a7d74f0e403da496266c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_SUMMER</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2aa5b0ef9d5b1e2e496ac149d9a42dd3e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_AUTUMN</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2a3ff3c09197871bad3bb5921e30223533</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_WINTER</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2acd0da059abca1decd6b75ecc6d131be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_COOL</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2a40d9e19d8fbedda0f45c0673c6c6dcbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_COPPER</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2a2b8eab305f63590e49a6dab0b628ae33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_HOT</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2a075659185495ce61ea5b09ab439e2abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CMAP_JET</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa68309838cffd86a3c671c44ef129cb2ac677c31e4299bc29c4e591063b4fc9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>BoundEnum</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a65228f031a436d2f4edd698ae733ba31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUNDED</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a65228f031a436d2f4edd698ae733ba31a4b4e195031215bcfc63b5bf65c1c1035</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNBOUNDED</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a65228f031a436d2f4edd698ae733ba31a1906bfa4ce33f3c129b1e974826f686d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOUND_UNKNOWN</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a65228f031a436d2f4edd698ae733ba31aec51247a223f33a421840eb3cbd5598e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>SignEnum</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a679e16b34aad98ff340decf89d1c86db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGNED</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a679e16b34aad98ff340decf89d1c86dbae3e0717ad611faed845dd64931b1f99c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNSIGNED</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a679e16b34aad98ff340decf89d1c86dba4e5cd9a9d62617341034f3f1c0f79b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIGN_UNKNOWN</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a679e16b34aad98ff340decf89d1c86dba23888a413fb400a53deeb0b0e17d3100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DigitalSetSize</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a07a2f5d6c861cd13dd680ea2e64e2dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SMALL_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a07a2f5d6c861cd13dd680ea2e64e2dd4acf48b00343e26a7f40a1fdbbc7af4d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEDIUM_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a07a2f5d6c861cd13dd680ea2e64e2dd4a0df10d7a38d07b6795da39a66cbe97cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BIG_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a07a2f5d6c861cd13dd680ea2e64e2dd4a37af4f429983b8069af58a2334f776a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WHOLE_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a07a2f5d6c861cd13dd680ea2e64e2dd4ac6f14eff3712732f6fa6d608f11e79fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DigitalSetVariability</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae37267b68e31ee8f7531488f7e88426a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOW_VAR_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae37267b68e31ee8f7531488f7e88426aa453acc6bba092ef2476618fad08d47f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIGH_VAR_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae37267b68e31ee8f7531488f7e88426aabef0d75c93891808eaa54c78aa08484a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DigitalSetIterability</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>abae5017e6f3a3d5e0c4debd8142e8ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOW_ITER_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>abae5017e6f3a3d5e0c4debd8142e8ccca73f1c02534747463a70f05e94ad50b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIGH_ITER_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>abae5017e6f3a3d5e0c4debd8142e8ccca0f85b8033e1532f5c4a0ff3d59a187bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DigitalSetBelongTestability</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0f37e197740e9d7742426109610c513a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOW_BEL_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0f37e197740e9d7742426109610c513aac54bafeace89b71100756e99a7ef368e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIGH_BEL_DS</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0f37e197740e9d7742426109610c513aadcca3a30244180b4238a80ae3a06e01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>DigitalTopologyProperties</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9f57dcd68d3056024eec6b4205f7083d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN_DT</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9f57dcd68d3056024eec6b4205f7083dabce62ac78855e24784c74bdd7d8e4e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NOT_JORDAN_DT</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9f57dcd68d3056024eec6b4205f7083da76d2c48b4a35a0dcb5ca4e6cf2462ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JORDAN_DT</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9f57dcd68d3056024eec6b4205f7083da731ee8276af4e05e2fe322cf2a4fd179</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>Connectedness</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5df441c76f46779791d077a80f0b902e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DISCONNECTED</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5df441c76f46779791d077a80f0b902ea3188ed38ab448384424887958f44beea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONNECTED</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5df441c76f46779791d077a80f0b902ea71b8166fccee5ea03cd61a4a9b3ece1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNKNOWN</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5df441c76f46779791d077a80f0b902ea01966050c6ac7ceb9818c946cd229fc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a75322b203241e20a106afb814182df80</anchor>
      <arglist>(std::ostream &amp;out, const ClosedIntegerHalfPlane&lt; TSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a196a8c122d6e58d73ecd46c249b8b849</anchor>
      <arglist>(std::ostream &amp;out, const IntegerComputer&lt; TInteger &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2c2216f99d3bb51af40e13a811bfd846</anchor>
      <arglist>(std::ostream &amp;out, const LatticePolytope2D&lt; TSpace, TSequence &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae4f0a1e7a73fe21a13f6809e3a47ff0c</anchor>
      <arglist>(std::ostream &amp;out, const ModuloComputer&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5f14f15bee0a8b951c870363e278a94e</anchor>
      <arglist>(std::ostream &amp;out, const Pattern&lt; TFraction &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa0e2794580b8d7d35c4b4761f264d08e</anchor>
      <arglist>(std::ostream &amp;out, const StandardDSLQ0&lt; TFraction &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac4d5198d8a044649b47cf6ccecf43549</anchor>
      <arglist>(std::ostream &amp;out, const Clock &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0e7ca3a483107d4b69dfa47cf7919663</anchor>
      <arglist>(std::ostream &amp;out, const ConstRangeAdapter&lt; TIterator, TFunctor, TReturnType &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aba713edeb51f787070eff9f9edc210c7</anchor>
      <arglist>(std::ostream &amp;out, const std::pair&lt; A, B &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa5ad29732984e904acf8a15b5f36f391</anchor>
      <arglist>(std::ostream &amp;out, const CountedPtr&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a3b43a30839ecc0499b0b5d2d71952233</anchor>
      <arglist>(std::ostream &amp;out, const CowPtr&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>minDGtal</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>af78ce7935f43397801a6d65785f71df5</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>maxDGtal</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5da3e5d223f3f741760a4e0fc3483c3a</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>abs</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a54cd4c3ec97c9ec323a52de71339f589</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a156fb1231cef8a4755062c0319f5b0eb</anchor>
      <arglist>(std::ostream &amp;out, const IndexedListWithBlocks&lt; TValue, N, M &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7b3757780615da753f109e91c107bbd3</anchor>
      <arglist>(std::ostream &amp;out, const InputIteratorWithRankOnSequence&lt; TSequence, TRank &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a6b49e997d09ccb163eb82529e8970996</anchor>
      <arglist>(const IC &amp;itb, const IC &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNotEmpty</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a6f1b22211474c60437654c3a0decb8ef</anchor>
      <arglist>(const IC &amp;itb, const IC &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7d3cb1a90041cd25855944e723d44f5a</anchor>
      <arglist>(std::ostream &amp;out, const LabelledMap&lt; TData, L, TWord, N, M &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2f5edcc946b7d5701677dd3acac2860a</anchor>
      <arglist>(std::ostream &amp;out, const Labels&lt; L, TWord &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0213a561c03e9d90b12581abcf2ea54d</anchor>
      <arglist>(std::ostream &amp;out, const OrderedAlphabet &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a756d34159757aef9d0e815a8426071f9</anchor>
      <arglist>(std::ostream &amp;out, const OwningOrAliasingPtr&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2129e2cee3ca511648fd20bcf90635f4</anchor>
      <arglist>(std::ostream &amp;thatStream, const Statistic&lt; RealNumberType &gt; &amp;that_object_to_display)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae5cfe3192eb33036ed5a6afdce4fa90c</anchor>
      <arglist>(std::ostream &amp;out, const Trace &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa1a0c72f3ea963c433d33b86d1fba535</anchor>
      <arglist>(std::ostream &amp;out, const TraceWriter &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>abb0ae3e476260be1ddbbe6c881738e81</anchor>
      <arglist>(std::ostream &amp;out, const TraceWriterFile &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa60540f21dc15c6580824e2e370a7600</anchor>
      <arglist>(std::ostream &amp;out, const TraceWriterTerm &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a36a2459f7913ffe2255193bdfc4536d8</anchor>
      <arglist>(std::ostream &amp;out, ArithmeticalDSS&lt; TIterator, TInteger, connectivity &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aaabd5b098d8beabcd7e4bc7d4316586a</anchor>
      <arglist>(std::ostream &amp;out, ArithmeticalDSS3d&lt; TIterator, TInteger, connectivity &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a352f8e878ed0810de6b9166501d8f33a</anchor>
      <arglist>(std::ostream &amp;out, const BinomialConvolver&lt; TConstIteratorOnPoints, TValue &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ab3a7c82e86886176e1633ffa720003cb</anchor>
      <arglist>(std::ostream &amp;out, const CombinatorialDSS&lt; T1, T2 &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2e60731c3d380a3d904efbf5c088cf07</anchor>
      <arglist>(std::ostream &amp;out, const BLUELocalLengthEstimator&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac81440dbce679bb785c1679dc6b226af</anchor>
      <arglist>(std::ostream &amp;out, const DSSLengthEstimator&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9611bc4af426ac90cd62f4f0d147d686</anchor>
      <arglist>(std::ostream &amp;out, const FPLengthEstimator&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8b8a89999c5ec643ec73f257abe6c488</anchor>
      <arglist>(std::ostream &amp;out, const L1LengthEstimator&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5b8eb9b80ef38f0b355c23ce44caec57</anchor>
      <arglist>(std::ostream &amp;out, const MLPLengthEstimator&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a4b1f11e76731f6b53d58741593de1718</anchor>
      <arglist>(std::ostream &amp;out, const RosenProffittLocalLengthEstimator&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a3ebfff66f1d6cdbd2b15f83c2ee8c55b</anchor>
      <arglist>(std::ostream &amp;out, const TwoStepLocalLengthEstimator&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a6ba93e4cd388ebab2cb5ec533a303962</anchor>
      <arglist>(std::ostream &amp;out, const FP&lt; TIterator, TInteger, connectivity &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afb8e4d60f980875ee264a4470c0cd39d</anchor>
      <arglist>(std::ostream &amp;out, const FrechetShortcut&lt; TIterator, TInteger &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a85c3c4d290e6b5c6de7e46b431d4c4fe</anchor>
      <arglist>(std::ostream &amp;out, const FreemanChain&lt; TInteger &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a62707785131f3a712ab96fdc6525f956</anchor>
      <arglist>(std::ostream &amp;out, const GeometricalDCA&lt; TConstIterator &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>af36416f9fdefcffddd2b2953f551257b</anchor>
      <arglist>(std::ostream &amp;out, const GeometricalDSS&lt; TConstIterator &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a52995248ae36d8cd61977cf8e37c63bc</anchor>
      <arglist>(std::ostream &amp;out, const GreedySegmentation&lt; SegmentComputer &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a6f39f856a5dc3683cd3fdb8e22afa143</anchor>
      <arglist>(std::ostream &amp;out, const GridCurve&lt; TKSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a86a932423c11c531c9ecfe4631704aab</anchor>
      <arglist>(std::ostream &amp;out, const SaturatedSegmentation&lt; SegmentComputer &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>IC</type>
      <name>getMiddleIterator</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8c4fb1b2976e5fc35dc1b4073149408e</anchor>
      <arglist>(const IC &amp;itb, const IC &amp;ite, RandomAccessCategory)</arglist>
    </member>
    <member kind="function">
      <type>IC</type>
      <name>getMiddleIterator</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9cf4e9405b276ba5b8b931f72d180d9d</anchor>
      <arglist>(const IC &amp;itb, const IC &amp;ite, BidirectionalCategory)</arglist>
    </member>
    <member kind="function">
      <type>IC</type>
      <name>getMiddleIterator</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8f53c482fe83e31093accf95ec7190d9</anchor>
      <arglist>(const IC &amp;itb, const IC &amp;ite, ForwardCategory)</arglist>
    </member>
    <member kind="function">
      <type>IC</type>
      <name>getMiddleIterator</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a318f9e3e73cd0988af98b3a66a543334</anchor>
      <arglist>(const IC &amp;itb, const IC &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maximalExtension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a4718031e09102bb8f73a874c47e10aaf</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;end, IteratorType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maximalExtension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a367841808f36fa49eceaa1671718f3ee</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;, CirculatorType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maximalExtension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a21c7d5ea8b24456694c6fa5f6a25f4cc</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oppositeEndMaximalExtension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a462eaaf587bc04ebd2e6141bed3fc21e</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin, IteratorType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oppositeEndMaximalExtension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9f50b26bc3256332ab287e1bb2a3e7cf</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin, CirculatorType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oppositeEndMaximalExtension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a567c997ae858c829256cc8a13c04d230</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>maximalSymmetricExtension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad8d73948fddeeb1f2e0fa94c4c9b03a9</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, IteratorType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>maximalSymmetricExtension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a04bd5266c4907488dc943c3fd18b72a0</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, CirculatorType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>maximalSymmetricExtension</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad09a396e60a1ff248a246cc2f365fb31</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maximalRetraction</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad4831d5ff3c1c70bd1c6a26403297a9a</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oppositeEndMaximalRetraction</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a137f26d321873e90065142afff6fa928</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>longestSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2034305fadb5376a987519daba4c982a</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;end, IteratorType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>longestSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a67994f04a54230cdb524e46dba46a127</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;end, CirculatorType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>longestSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a464c32dc87cc7ded90f601f4657664a1</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae6d3175b6c7d86845a0c259f566bd7ea</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::ForwardSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae37d5f56ebcd83255b9c93038deff781</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::BidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8b81102d807d1ec5629d25c6e13ddae7</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::DynamicSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aae8ba2a7a4a42e59741df4afed37f449</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::DynamicBidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a18c5282eb177f64a2957c29bf51b0e1c</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mostCenteredMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1b3f25b1f654c74c78819624604e4950</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::ForwardSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mostCenteredMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad153558eaa4afb851f884b64680f4631</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::BidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mostCenteredMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a07a2cb535d2b0befce8f080d9d1a2414</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::DynamicSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mostCenteredMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa43392e8f5aeba868858b9b2c1e52cf7</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::DynamicBidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mostCenteredMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>adb7b7f5908ea811a44f41186c7a01e8e</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lastMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a19f04b5f095862ee00e620f8246df2f8</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::ForwardSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lastMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8c5dc0554703f63c1ec705f764f2ba3a</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, BidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lastMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a652ebafea1d9e8891f40d9b0af8fcb02</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::DynamicSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lastMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a47282aa7c7fc28d49e7a52a3f8eeee3c</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end, DGtal::DynamicBidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>lastMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afa3e824f983193de48aaf18590edaa52</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;i, const typename SC::ConstIterator &amp;begin, const typename SC::ConstIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a91c1293187f38e931f5f353d1a38f71c</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;end, DGtal::ForwardSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0f4fc5b05689abd850faa6637a64505c</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;end, DGtal::BidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a6ee548c7f570f6bdb18ce2cc592cb009</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;end, DGtal::DynamicSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae9e6d98ecc15fc5062f30060d4452706</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;end, DGtal::DynamicBidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a325d2a962cd3410424a45f83c1b32b7a</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>previousMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>adabb9ea04f81cba914f3ac178439ffd4</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin, DGtal::ForwardSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>previousMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8e35d35160afaea835678e7bf4a3458c</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin, DGtal::BidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>previousMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afa1f75e59b72ea5e69760c965e20b3ff</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin, DGtal::DynamicSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>previousMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad14e74091568436294698404dc08c9c5</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;end, DGtal::DynamicBidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>previousMaximalSegment</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>af03fbf680fc202a21ef0801ee9240934</anchor>
      <arglist>(SC &amp;s, const typename SC::ConstIterator &amp;begin)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a3e210a0da2db0fe767f88859a7ec00ba</anchor>
      <arglist>(std::ostream &amp;out, const ContourHelper &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a97a5060ed0aa5b031edef61dd369aafd</anchor>
      <arglist>(std::ostream &amp;out, const COBAGenericNaivePlane&lt; TSpace, TInternalInteger &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae591e8cecb39b8f25c2ffa65929ce1d7</anchor>
      <arglist>(std::ostream &amp;out, const COBANaivePlane&lt; TSpace, TInternalInteger &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a311a8c89ec31846a61238a44a48c51c9</anchor>
      <arglist>(std::ostream &amp;out, const DigitalSurfaceEmbedderWithNormalVectorEstimator&lt; TDigitalSurfaceEmbedder, TNormalVectorEstimator &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a855e675db4e5e115051b87a6c79c6f36</anchor>
      <arglist>(std::ostream &amp;out, const NormalVectorEstimatorLinearCellEmbedder&lt; TDigitalSurface, TNormalVectorEstimator, TEmbedder &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>af1add10c7a26535a4feb8d370bd6fb4e</anchor>
      <arglist>(std::ostream &amp;out, const Preimage2D&lt; Shape &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aed3c31b50222da39a5484940fa7c7987</anchor>
      <arglist>(std::ostream &amp;out, const SphericalAccumulator&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad3c376126e05e1f797bb688366dd30f5</anchor>
      <arglist>(std::ostream &amp;out, const FMM&lt; TImage, TSet, TPointPredicate, TPointFunctor &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a71ebae2f928719f51222d9830f580ab6</anchor>
      <arglist>(std::ostream &amp;out, const Measure&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9353d51816abd73c77d05aa44b5298ed</anchor>
      <arglist>(std::ostream &amp;out, const ConstImageAdapter&lt; TImageContainer, TNewDomain, TFunctorD, TNewValue, TFunctorV &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a3611cd19b341d3f70a23a0023e6aff2d</anchor>
      <arglist>(std::ostream &amp;out, const Image&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa5fc9d51f585b97ec5094a8a7792ea44</anchor>
      <arglist>(std::ostream &amp;out, const ImageAdapter&lt; TImageContainer, TNewDomain, TFunctorD, TNewValue, TFunctorV, TFunctorVm1 &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>adcd8d9d47caf12b58c0270ee77c7ec5e</anchor>
      <arglist>(std::ostream &amp;out, ImageContainerByHashTree&lt; TDomain, TValue, THashKey &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad5f4caac3598001543faa58512905fa1</anchor>
      <arglist>(std::ostream &amp;out, const experimental::ImageContainerByITKImage&lt; T, TV &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a44bf615980e20b3cd46b582b7141a6a4</anchor>
      <arglist>(std::ostream &amp;out, const experimental::ImageContainerByITKImage&lt; TDomain, TValue &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a30d8ad5b6fd2dc5b1a3cff0afc4e3a5c</anchor>
      <arglist>(std::ostream &amp;out, const ImageContainerBySTLMap&lt; TDomain, TValue &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afec460eda081b4dc6922174819cae6cc</anchor>
      <arglist>(std::ostream &amp;out, const ImageContainerBySTLVector&lt; Domain, V &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromPointsRangeAndPredicate</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad67647d42db11b7b3d3533e1cba6c2ba</anchor>
      <arglist>(const I &amp;itb, const I &amp;ite, const O &amp;ito, const P &amp;aPred)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromPointsRangeAndFunctor</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad57d4465e40fe4c1982ec2e01985be73</anchor>
      <arglist>(const I &amp;itb, const I &amp;ite, const O &amp;ito, const F &amp;aFunctor, const typename F::Value &amp;aThreshold=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromImage</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a202be24e94b5bdfba2d8563d0947f373</anchor>
      <arglist>(const I &amp;aImg, const O &amp;ito, const typename I::Value &amp;aThreshold=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromImage</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aecddf53312d4b765f34a022b049627c3</anchor>
      <arglist>(const I &amp;aImg, const O &amp;ito, const typename I::Value &amp;low, const typename I::Value &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>imageFromRangeAndValue</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac1511d84bd2b82df82bea3aefc3af2dd</anchor>
      <arglist>(const It &amp;itb, const It &amp;ite, Im &amp;aImg, const typename Im::Value &amp;aValue=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>imageFromRangeAndValue</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aff03c6c44f0ec8ad182440aad1b4e86a</anchor>
      <arglist>(const R &amp;aRange, I &amp;aImg, const typename I::Value &amp;aValue=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>imageFromFunctor</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a46234d3693677caa52b0ffb6db059d5d</anchor>
      <arglist>(I &amp;aImg, const F &amp;aFun)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>imageFromImage</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a6e6f5a9c305d047a2e9c6315ca17832c</anchor>
      <arglist>(I &amp;aImg1, const I &amp;aImg2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertAndSetValue</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5f01a70f2cf84e9c08d1308e77911a08</anchor>
      <arglist>(I &amp;aImg, S &amp;aSet, const typename I::Point &amp;aPoint, const typename I::Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertAndAlwaysSetValue</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac920bc98f866a2e17ee53faddc67ff80</anchor>
      <arglist>(I &amp;aImg, S &amp;aSet, const typename I::Point &amp;aPoint, const typename I::Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findAndGetValue</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a3f73d6217f05eef8225781a523efc077</anchor>
      <arglist>(const I &amp;aImg, const S &amp;aSet, const typename I::Point &amp;aPoint, typename I::Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7272fa4a71b37b89de44110188769338</anchor>
      <arglist>(std::ostream &amp;out, const ImageLinearCellEmbedder&lt; TKSpace, TImage, TEmbedder &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac3c6d87ade0e0da551f72c4e645771e1</anchor>
      <arglist>(std::ostream &amp;out, const Board2D &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa32e43bdffbdc24f45de94ad9102978a</anchor>
      <arglist>(std::ostream &amp;out, const Board3DTo2D &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>abb59a7087b1ca526c94078e5cc499672</anchor>
      <arglist>(std::ostream &amp;out, const Color &amp;aColor)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0cadab732dfb13c3b84f49566f5b9c11</anchor>
      <arglist>(std::ostream &amp;out, const ColorBrightnessColorMap&lt; PValue, PDefaultColor &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1cfec935d23b12fc18c32eece2a8ab1e</anchor>
      <arglist>(std::ostream &amp;out, const GradientColorMap&lt; PValue, PDefaultPreset, PDefaultFirstColor, PDefaultLastColor &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a485151b618f71a80d057c3c7d35e84ca</anchor>
      <arglist>(std::ostream &amp;out, const GrayscaleColorMap&lt; PValue &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a69f3490f30f770c8fc9fc6dd445cd93c</anchor>
      <arglist>(std::ostream &amp;out, const HueShadeColorMap&lt; PValue, DefaultCycles &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0862dd8a38f8e16ed9bc34ad6ba2bc55</anchor>
      <arglist>(std::ostream &amp;out, const RandomColorMap &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cross</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7b632be90297f1d6a81a58c1a0a4bdc3</anchor>
      <arglist>(double dst[3], double srcA[3], double srcB[3])</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>normalize</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5953d43d65a342438b932b5fac6a0334</anchor>
      <arglist>(double vec[3])</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae515a588c9f74ac323d60f95bc8bedb9</anchor>
      <arglist>(std::ostream &amp;out, const DGtal::Display3D &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac53021bc0d5dc675ed32631396cac05d</anchor>
      <arglist>(const Display3D &amp;aDisplay3D, DGtal::MeshFromPoints&lt; Display3D::pointD3D &gt; &amp;aMesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa24e0992d0b4c61469dbf5da726718c4</anchor>
      <arglist>(const Display3D &amp;aDisplay3D, string aFilename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a027b1488a4625548cc76d8f70b640f5a</anchor>
      <arglist>(MeshFromPoints&lt; TPoint &gt; &amp;mesh, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a008281343ea4fc3971b69a6543b9b842</anchor>
      <arglist>(std::ostream &amp;out, const DGtalInventor&lt; TSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>adbf9270f5f724d5e51d1356f3372783c</anchor>
      <arglist>(std::ostream &amp;out, const IVViewer &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2d3fcda6867c1a6cae9a2011a8c1b30c</anchor>
      <arglist>(std::ostream &amp;out, const Lattice&lt; TSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac2a53895055b003622553da7cb636570</anchor>
      <arglist>(std::ostream &amp;out, const Viewer3D &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7da2e4ec36c07db836f12a3b829c4961</anchor>
      <arglist>(MeshFromPoints&lt; TPoint &gt; &amp;aMesh, const std::string &amp;aFilename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aee8aa91a2345d8315df394b94de70f99</anchor>
      <arglist>(MeshFromPoints&lt; TPoint &gt; &amp;aMesh, ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a61e5d3bce501d46ca6cb4baee8590389</anchor>
      <arglist>(std::ostream &amp;out, const CanonicCellEmbedder&lt; TKSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>abbf878eedd1e61f021f337b903ac1a5e</anchor>
      <arglist>(std::ostream &amp;out, const CanonicDigitalSurfaceEmbedder&lt; TDigitalSurface &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1c198285c212e189cc6b3775282d971b</anchor>
      <arglist>(std::ostream &amp;out, const CanonicEmbedder&lt; TSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afc39fa68fdb704b43c5f89b871030b30</anchor>
      <arglist>(std::ostream &amp;out, const CanonicSCellEmbedder&lt; TKSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a65fe5e7517f127b50ab8d9daa779a55e</anchor>
      <arglist>(std::ostream &amp;out, const HyperRectDomain&lt; TSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::bitset&lt; dim &gt;</type>
      <name>setDimensionsIn</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a44d1dd3f9097cf9d2b7f280c95e34b1e</anchor>
      <arglist>(const Container &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>std::bitset&lt; dim &gt;</type>
      <name>setDimensionsNotIn</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae405036e4e10cc9ecee7918e5fb10dd9</anchor>
      <arglist>(const Container &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a484bbc565292ed3fd276d70c3e71afac</anchor>
      <arglist>(std::ostream &amp;out, const PointVector&lt; dim, Component &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa22cc58968d7134d4ec338d8b6d49f47</anchor>
      <arglist>(std::ostream &amp;out, const RegularPointEmbedder&lt; TSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a294f23451c7c99ae08e19bd5eea76469</anchor>
      <arglist>(std::ostream &amp;out, const DigitalSetBySTLSet&lt; Domain &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a133f736b6505cf0359ccc7e8be803c46</anchor>
      <arglist>(std::ostream &amp;out, const DigitalSetBySTLVector&lt; Domain &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a64c1c0996bfe10bd42952cad2d72ecdb</anchor>
      <arglist>(std::ostream &amp;out, const DigitalSetDomain&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a6f97c9e9c01d4864725d8d606a5535a6</anchor>
      <arglist>(std::ostream &amp;out, const DigitalSetFromMap&lt; TMapImage &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1c7a202da7d028af6c2565026014318c</anchor>
      <arglist>(std::ostream &amp;out, const SimpleMatrix&lt; T, M, N &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5684b6b55398b599ed5aaa9a70f3a0cc</anchor>
      <arglist>(std::ostream &amp;out, const AngleLinearMinimizer &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0c685b28cb1a025847d30274b28d0edd</anchor>
      <arglist>(std::ostream &amp;out, const MeasureOfStraightLines &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>euclidDiv</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a2bbdffe7efc4f8af031964cecfe477a7</anchor>
      <arglist>(const MPolynomial&lt; 1, TRing, TAlloc &gt; &amp;f, const MPolynomial&lt; 1, TRing, TAlloc &gt; &amp;g, MPolynomial&lt; 1, TRing, TAlloc &gt; &amp;q, MPolynomial&lt; 1, TRing, TAlloc &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aade413b000d41b595aa32414aaa564a9</anchor>
      <arglist>(std::ostream &amp;out, const MPolynomial&lt; N, TRing, TAlloc &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; n, Ring, Alloc &gt;</type>
      <name>Xe_k</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a948cc02e8fe7e8ab1051bce164421fa8</anchor>
      <arglist>(unsigned int k, unsigned int e)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; n, Ring, std::allocator&lt; Ring &gt; &gt;</type>
      <name>Xe_k</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad099005ab7d493b2ea19026e2fb96a32</anchor>
      <arglist>(unsigned int k, unsigned int e)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 1, Ring, Alloc &gt;</type>
      <name>mmonomial</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a770659cf50cd49c0ce6c3d4ab08abb46</anchor>
      <arglist>(unsigned int e)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 2, Ring, Alloc &gt;</type>
      <name>mmonomial</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad04b582eb75ae0cfc14dfc40d57c03f2</anchor>
      <arglist>(unsigned int e, unsigned int f)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 3, Ring, Alloc &gt;</type>
      <name>mmonomial</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a46b41f1ac0f88d213c7fb8bee8931799</anchor>
      <arglist>(unsigned int e, unsigned int f, unsigned int g)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 4, Ring, Alloc &gt;</type>
      <name>mmonomial</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae6ba6c1f73137c9da0365c16635c92e9</anchor>
      <arglist>(unsigned int e, unsigned int f, unsigned int g, unsigned int h)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 1, Ring, std::allocator&lt; Ring &gt; &gt;</type>
      <name>mmonomial</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9ef248272fbf9b379c272e0ec632289c</anchor>
      <arglist>(unsigned int e)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 2, Ring, std::allocator&lt; Ring &gt; &gt;</type>
      <name>mmonomial</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9ac70e986a68541f5a9e2b9a4035da2c</anchor>
      <arglist>(unsigned int e, unsigned int f)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 3, Ring, std::allocator&lt; Ring &gt; &gt;</type>
      <name>mmonomial</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a4f44e0a9fc1e30d29e52646daeca211d</anchor>
      <arglist>(unsigned int e, unsigned int f, unsigned int g)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 4, Ring, std::allocator&lt; Ring &gt; &gt;</type>
      <name>mmonomial</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a4a679186eed201b0844c7bf6f83e76c8</anchor>
      <arglist>(unsigned int e, unsigned int f, unsigned int g, unsigned int h)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; n, Ring, Alloc &gt;</type>
      <name>derivative</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afd55a2a73cd7b4552dbaf0b62980b323</anchor>
      <arglist>(const MPolynomial&lt; n, Ring, Alloc &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; n, Ring, std::allocator&lt; Ring &gt; &gt;</type>
      <name>derivative</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9aedf0fbd5b7c5814911d1299be81cb9</anchor>
      <arglist>(const MPolynomial&lt; n, Ring, std::allocator&lt; Ring &gt; &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>euclidDiv</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>afc4718ecc21bcecf1618414e982b951c</anchor>
      <arglist>(const MPolynomial&lt; 1, Ring, Alloc &gt; &amp;f, const MPolynomial&lt; 1, Ring, Alloc &gt; &amp;g, MPolynomial&lt; 1, Ring, Alloc &gt; &amp;q, MPolynomial&lt; 1, Ring, Alloc &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>euclidDiv</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a57e756b9529892b5019066b6d4a4310c</anchor>
      <arglist>(const MPolynomial&lt; 1, Ring, std::allocator&lt; Ring &gt; &gt; &amp;f, const MPolynomial&lt; 1, Ring, std::allocator&lt; Ring &gt; &gt; &amp;g, MPolynomial&lt; 1, Ring, std::allocator&lt; Ring &gt; &gt; &amp;q, MPolynomial&lt; 1, Ring, std::allocator&lt; Ring &gt; &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 1, Ring, Alloc &gt;</type>
      <name>gcd</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a38fc7e3a7ad4420d8b0b5950ae21c32e</anchor>
      <arglist>(const MPolynomial&lt; 1, Ring, Alloc &gt; &amp;f, const MPolynomial&lt; 1, Ring, Alloc &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 1, Ring, std::allocator&lt; Ring &gt; &gt;</type>
      <name>gcd</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ab28649140d0b09a9b25515660a3e6f12</anchor>
      <arglist>(const MPolynomial&lt; 1, Ring, std::allocator&lt; Ring &gt; &gt; &amp;f, const MPolynomial&lt; 1, Ring, std::allocator&lt; Ring &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7bf8ccb5fec38dffae46efd2c0d5c2c7</anchor>
      <arglist>(std::ostream &amp;out, const Signal&lt; TValue &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a585a463f4055c1df3774c34bc4d1c5fb</anchor>
      <arglist>(std::ostream &amp;out, const CircleFrom2Points&lt; TPoint &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5ee88b42fe08c64c833f2b785139063c</anchor>
      <arglist>(std::ostream &amp;out, const CircleFrom3Points&lt; TPoint &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a3af9b163e8918cad50ffea5f1195887a</anchor>
      <arglist>(std::ostream &amp;out, const MeshFromPoints&lt; TPoint &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8b6273f070d1edcf9c510601044863d4</anchor>
      <arglist>(std::ostream &amp;out, const Point2ShapePredicate&lt; TSurface, isUpward, isClosed &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9c9db375c56d37d5a38a7599c7e02e07</anchor>
      <arglist>(std::ostream &amp;out, const StraightLineFrom2Points&lt; TPoint &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aebacbf3c61709a7e0d1fc250f1f0204f</anchor>
      <arglist>(std::ostream &amp;out, const GaussDigitizer&lt; TSpace, TEuclideanShape &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>abd178d36151704c1413d4ad614e7f774</anchor>
      <arglist>(std::ostream &amp;out, const ImplicitBall&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>accdbde97ed9607a15ec962171d6d933e</anchor>
      <arglist>(std::ostream &amp;out, const ImplicitFunctionDiff1LinearCellEmbedder&lt; TKSpace, TImplicitFunctionDiff1, TEmbedder &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aeebf10a683d3e958f2b53c11af2e8548</anchor>
      <arglist>(std::ostream &amp;out, const ImplicitFunctionLinearCellEmbedder&lt; TKSpace, TImplicitFunction, TEmbedder &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8a88c744566a4a1adce2dd7d55256bbd</anchor>
      <arglist>(std::ostream &amp;out, const ImplicitHyperCube&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a670552923873f4f08a0c8d2ecf75cbe9</anchor>
      <arglist>(std::ostream &amp;out, const ImplicitNorm1Ball&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a31c3aec34372e12bb2a4b530ebefb1b6</anchor>
      <arglist>(std::ostream &amp;out, const ImplicitPolynomial3Shape&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a094a29952a05e86998aaf467bb013d1b</anchor>
      <arglist>(std::ostream &amp;out, const ImplicitRoundedHyperCube&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9d6116d3f522841ef300a0a3d0a22dd6</anchor>
      <arglist>(std::ostream &amp;out, const AccFlower2D&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1d0842bcae55bdd9b262e906c5b3a79d</anchor>
      <arglist>(std::ostream &amp;out, const Ball2D&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac4e8f6819676918bd7ecac2e88e847f7</anchor>
      <arglist>(std::ostream &amp;out, const Ball3D&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0e209bc654b6b3088e3d880d4eb24a96</anchor>
      <arglist>(std::ostream &amp;out, const Ellipse2D&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a87b130f95ae2c59b8ce9a2d9b3eb00eb</anchor>
      <arglist>(std::ostream &amp;out, const Flower2D&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae1caecda191f889867656183eabae2f7</anchor>
      <arglist>(std::ostream &amp;out, const NGon2D&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a0da05652e14a44efd06ab37c830fb00c</anchor>
      <arglist>(std::ostream &amp;out, const StarShaped2D&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a6dd73f56ae05b88cb69f61caff00d5ca</anchor>
      <arglist>(std::ostream &amp;out, const StarShaped3D&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a30df8b8fe139c899b9f825d7e5f6398d</anchor>
      <arglist>(std::ostream &amp;out, const Shapes&lt; TDomain &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a60cb8329ec7e317f1beb03c8b322cf13</anchor>
      <arglist>(std::ostream &amp;out, const BreadthFirstVisitor&lt; TGraph, TMarkSet &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a45e13e373849988b8c7143a6c6c0b58e</anchor>
      <arglist>(std::ostream &amp;out, const DepthFirstVisitor&lt; TGraph, TMarkSet &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8600426252610144c749a003e93274f6</anchor>
      <arglist>(std::ostream &amp;out, const DigitalSetBoundary&lt; TKSpace, TDigitalSet &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1f3fe65ff2eec5a590b6a2c550725e7e</anchor>
      <arglist>(std::ostream &amp;out, const DigitalSurface&lt; TDigitalSurfaceContainer &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a432b6b35fc11ee6b9c11fb54d193b366</anchor>
      <arglist>(std::ostream &amp;out, const DigitalSurface2DSlice&lt; TDigitalSurfaceTracker &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa8be5db54eccfba7fd8916763cbf00da</anchor>
      <arglist>(std::ostream &amp;out, const DigitalTopology&lt; TForegroundAdjacency, TBackgroundAdjacency &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac9e45359f1676fa161c263f50cbee30d</anchor>
      <arglist>(std::ostream &amp;out, const DomainAdjacency&lt; TDomain, TAdjacency &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa92bbcb0c90cddb06c7f84134c1e4a5f</anchor>
      <arglist>(std::ostream &amp;out, const Expander&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac2a3ce65944bf6a16aeb2ebce2c9cd00</anchor>
      <arglist>(std::ostream &amp;out, const ExplicitDigitalSurface&lt; TKSpace, TSurfelPredicate &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>af0a7679f68647399382399dc1608a6dc</anchor>
      <arglist>(std::ostream &amp;out, const BoundaryPredicate&lt; TKSpace, TImage &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac60851b0fad3cc7d11289811fd942728</anchor>
      <arglist>(std::ostream &amp;out, const FrontierPredicate&lt; TKSpace, TImage &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1b2bc070ca54bd515c2948faae24b179</anchor>
      <arglist>(std::ostream &amp;out, const Surfaces&lt; TKSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa8c04085996bfcb483774f35e6a6ffda</anchor>
      <arglist>(std::ostream &amp;out, const ImplicitDigitalSurface&lt; TKSpace, TPointPredicate &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a105d0f6359b68e48600e22cf765f4aaa</anchor>
      <arglist>(std::ostream &amp;out, const KhalimskyCell&lt; dim, TInteger &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a075acfb401c86aea97863e49764f7e74</anchor>
      <arglist>(std::ostream &amp;out, const SignedKhalimskyCell&lt; dim, TInteger &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ac9d84c5b0391cb2973795d314b7a26ca</anchor>
      <arglist>(std::ostream &amp;out, const KhalimskySpaceND&lt; dim, TInteger &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a55f2044bafa880126f92373e30027115</anchor>
      <arglist>(std::ostream &amp;out, const LightExplicitDigitalSurface&lt; TKSpace, TSurfelPredicate &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a5694066261d35cce4631775ccc2596e4</anchor>
      <arglist>(std::ostream &amp;out, const LightImplicitDigitalSurface&lt; TKSpace, TPointPredicate &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aa8e4002c881f8a192a8185c3a0a80d1e</anchor>
      <arglist>(std::ostream &amp;out, const MetricAdjacency&lt; TSpace, maxNorm1, TSpace::dimension &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ad3071ce24e8bfd8044515d2e8bf31b0a</anchor>
      <arglist>(std::ostream &amp;out, const Object&lt; TDigitalTopology, TDigitalSet &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a25bbd127be81b65901f94e0247fbd4b9</anchor>
      <arglist>(std::ostream &amp;out, const SetOfSurfels&lt; TKSpace, TSurfelSet &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a1f268b8a695128c059e37512d115571f</anchor>
      <arglist>(std::ostream &amp;out, const SurfelAdjacency&lt; dim &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>acbfc586cb4ecd8bb0b1a787a84cb82d6</anchor>
      <arglist>(std::ostream &amp;out, const SurfelNeighborhood&lt; T &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a581d2514f85e3cc8a8c5833991207fe4</anchor>
      <arglist>(std::ostream &amp;out, const UmbrellaComputer&lt; TDigitalSurfaceTracker &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testImplicitDigitalSurface</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a9d0c060685d6e9a49445a562a99c5286</anchor>
      <arglist>(const KSpace &amp;K, const PointPredicate &amp;pp, const typename KSpace::Surfel &amp;bel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testLightImplicitDigitalSurface</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a08886ee117009e48c66e4349c7c47265</anchor>
      <arglist>(const KSpace &amp;K, const PointPredicate &amp;pp, const typename KSpace::Surfel &amp;bel)</arglist>
    </member>
    <member kind="variable">
      <type>It also possible to remove the visualisation of the transparent clipping plane by adding boolean</type>
      <name>option</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a7df3f0545c8e59b83394c60601c122e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>It also possible to remove the visualisation of the transparent clipping plane by adding boolean</type>
      <name>false</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a3c1454fe50af31341c890919f93b76b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BoolFunction0</type>
      <name>trueBF0</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>aad0fa31bef8d6552db900af1809d787d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BoolFunction0</type>
      <name>falseBF0</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a8c0dbf38da6779899ca99fc25ec8b0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BoolFunction1</type>
      <name>identityBF1</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a154eac21029f20806b646b025b6d59a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BoolFunction1</type>
      <name>notBF1</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a31614f15cda0ab53c57cf414e48c149f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BoolFunction2</type>
      <name>andBF2</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a70c28100eb4618dbb59a4080cbdf383b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BoolFunction2</type>
      <name>orBF2</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a14f119bf8a5eb80a58870ebbd33bfb07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BoolFunction2</type>
      <name>xorBF2</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a29281e7462720aa5d454fa2355baa0f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const BoolFunction2</type>
      <name>impliesBF2</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>af22fdd40c268d4270906236e3ce234cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TraceWriterTerm</type>
      <name>traceWriterTerm</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>ae801de7ee4d22c47257dc7e00e0c5dd7</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
    <member kind="variable">
      <type>Trace</type>
      <name>trace</name>
      <anchorfile>namespaceDGtal.html</anchorfile>
      <anchor>a604c07ec391ad12a1f3fb6479993f112</anchor>
      <arglist>(traceWriterTerm)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ClosedIntegerHalfPlane</name>
    <filename>structDGtal_1_1ClosedIntegerHalfPlane.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>ClosedIntegerHalfPlane&lt; TSpace &gt;</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a0bb9934756c6dff79fb665373f60dc46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a5908293e1c006d106e7272d47b023b53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a2fbe21a6a4b68af66042ce5eb0611381</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>ac131fb1205a05d96814a7240a35242a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a97435719215c0a8df4737accbeb96a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a0e24ce7c5970f644604ead89dfca8af2</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClosedIntegerHalfPlane</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a528f48954a749984a3b9527414018559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosedIntegerHalfPlane</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a5f7b22fbeffc01af18f81fedf8d4d590</anchor>
      <arglist>(const Vector &amp;aN, const Integer &amp;aC)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClosedIntegerHalfPlane</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>aaae1f4a01efdce96896175a642738d13</anchor>
      <arglist>(const Point &amp;A, const Point &amp;B, const Point &amp;inP, IntegerComputer&lt; Integer &gt; &amp;ic)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a53228755c1ba71dbf54abb5f3db9b0f2</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnBoundary</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a063e4e63adbe6f46fb96f4a228739b93</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>tangent</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>ae23d4c21ee704175850b3e5f2456ab81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a0b450b65897067400746837b27f66929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a12b9efba48a92bb05d4b28b7cdf33127</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a04c6d5e85ffcd356415e8ee4fc6ee235</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>N</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>a1af1be477a9476572e2df6a02bb3328a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>c</name>
      <anchorfile>structDGtal_1_1ClosedIntegerHalfPlane.html</anchorfile>
      <anchor>ad946b465d0d661af7d6fb30f4634a50d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CPositiveIrreducibleFraction</name>
    <filename>structDGtal_1_1CPositiveIrreducibleFraction.html</filename>
    <templarg></templarg>
    <base>boost::Assignable</base>
    <base>DGtal::CBackInsertable</base>
    <base>DGtal::CConstSinglePassRange</base>
    <member kind="typedef">
      <type>T::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ab402b49ef575e98fd13f373a0d9cc390</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Quotient</type>
      <name>Quotient</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a55cb5b63ea7118cb5bef2b09939cbb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::value_type</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ab72cee14d51133495b6897b24ebf33c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ab405c66de289cdbed7a72a98c8407675</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ad7027480877a632e6359dfcf13f01c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ac8607c6bc6d74090c3993372638af444</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a129e51bf0eddbbd66a4dbb84acc6ece8</anchor>
      <arglist>((CInteger&lt; Integer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a0b9761989ed45904f8346f7bbdf5aaef</anchor>
      <arglist>((CSignedInteger&lt; Quotient &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ae6de91faa961cf76c9120f3a2ceb320f</anchor>
      <arglist>((ConceptUtils::SameType&lt; value_type, std::pair&lt; Quotient, Quotient &gt; &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a95ae59983a9e5d53e7a8aabbefda6b46</anchor>
      <arglist>((ConceptUtils::SameType&lt; value_type, Value &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ad3eadb4412d4ba6114900a754988acf5</anchor>
      <arglist>(CPositiveIrreducibleFraction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ab595e364e6ad2308178a4d67c1817f27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBackInsertable.html</anchorfile>
      <anchor>a81d60bba47b9c6cac4e8b34bdcadc382</anchor>
      <arglist>(CBackInsertable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a660bb45d62ffb7cc9131c3fd18de88f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myY</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a3542b019c6625a5ebd0560443214ffb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>myP</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a53349e9bd95130e83775b183c9baa240</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>myQ</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>aad9d6f7603a9e0f60bab90d6a51c0089</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quotient</type>
      <name>myU</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>acc06475694375e1ced3f78ca56a3d41e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myBool</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a96bd1825731bba6761878e8c368d2cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quotient</type>
      <name>myN1</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ad66ffb8ad5f60ed5a3915593185cca84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quotient</type>
      <name>myN2</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a1d9f74e2efbcc0f4c5d179e1f15de1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myF1</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a26ca9ace969b76a83d81476cd16922c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myF2</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>ac043ac22fda1558c12f52e515b303e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Quotient &gt;</type>
      <name>myQuots</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a379577b65ccdb8d57b7e1a4d5cce4466</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::pair&lt; Quotient, Quotient &gt;</type>
      <name>myValue</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a6c73f566d8585b6961b5914184f284e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myIterator</name>
      <anchorfile>structDGtal_1_1CPositiveIrreducibleFraction.html</anchorfile>
      <anchor>a52ce44b01f9f7376d93d755d7d07147f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IntegerComputer</name>
    <filename>classDGtal_1_1IntegerComputer.html</filename>
    <templarg>TInteger</templarg>
    <member kind="typedef">
      <type>IntegerComputer&lt; TInteger &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a3015eb3aa4f7dc36e9bae4529421bd87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; TInteger &gt;::SignedVersion</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a238ed9bf5055afd39b6b2777009962ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::ParamType</type>
      <name>IntegerParamType</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>aacf43a3dd1ea14c9ffe14e37c611d2a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; TInteger &gt;::UnsignedVersion</type>
      <name>UnsignedInteger</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a5bb90665fc29692a42dbc9c1ec43192c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; UnsignedInteger &gt;::ParamType</type>
      <name>UnsignedIntegerParamType</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>aab4611c4bab48e1928a8ce723f488854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceND&lt; 2, Integer &gt;::Point</type>
      <name>Point2I</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a7d251f34d4f006abde0d32459c1c6e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceND&lt; 2, Integer &gt;::Vector</type>
      <name>Vector2I</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a632e61a858627e68917bb905b09d60e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceND&lt; 3, Integer &gt;::Point</type>
      <name>Point3I</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>aedbc36f4eb17770d1f1f63528cc1ab3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceND&lt; 3, Integer &gt;::Vector</type>
      <name>Vector3I</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a03a4b65e5c7e95a3d42ad3c18a69c2cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>acc76d40f026af43e8fbba0257e852070</anchor>
      <arglist>((CInteger&lt; Integer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a00cd4e2b8754b45ee43dccb095ba8f5d</anchor>
      <arglist>((CUnsignedInteger&lt; UnsignedInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IntegerComputer</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a2df250de99402656ceb82da6d0bf0171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerComputer</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a5a4511d7e81cca646b80b1d4d1d8b078</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntegerComputer</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>ac350e52f701ea7a392d58651f065519b</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a73d485888d2209cdeabe8912e61ebba1</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEuclideanDiv</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>aebd99377312cc6460d8b8e039478b239</anchor>
      <arglist>(Integer &amp;q, Integer &amp;r, IntegerParamType a, IntegerParamType b) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>floorDiv</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a96afbe71f1b5d15daad0e55d3a73d265</anchor>
      <arglist>(IntegerParamType na, IntegerParamType nb) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>ceilDiv</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>ae99e749c4a07fc8950fb6de1e58676c7</anchor>
      <arglist>(IntegerParamType na, IntegerParamType nb) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFloorCeilDiv</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>af1add45cba8391a2015249642ca165dd</anchor>
      <arglist>(Integer &amp;fl, Integer &amp;ce, IntegerParamType na, IntegerParamType nb) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>gcd</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a2a774e704b44012ae77981903c76ca90</anchor>
      <arglist>(IntegerParamType a, IntegerParamType b) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getGcd</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a701a77207101edf48ff381198fb61b18</anchor>
      <arglist>(Integer &amp;g, IntegerParamType a, IntegerParamType b) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getCFrac</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a743e9507c35ffb389f4a71fede7ba781</anchor>
      <arglist>(std::vector&lt; Integer &gt; &amp;quotients, IntegerParamType a, IntegerParamType b) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getCFrac</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a7bccf83ad0046d2243ecf4f7187b6b6e</anchor>
      <arglist>(OutputIterator outIt, IntegerParamType a, IntegerParamType b) const </arglist>
    </member>
    <member kind="function">
      <type>Point2I</type>
      <name>convergent</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>ae1795837daa8a30ed0feb39226dc2def</anchor>
      <arglist>(const std::vector&lt; Integer &gt; &amp;quotients, unsigned int k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>ac578e44d9fcafdabd2724e2c390adf15</anchor>
      <arglist>(Vector2I &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>crossProduct</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>afa9403019a45995d10eb668eebadda7c</anchor>
      <arglist>(const Vector2I &amp;u, const Vector2I &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCrossProduct</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a78616de67cb116e2704bcdf53d98d519</anchor>
      <arglist>(Integer &amp;cp, const Vector2I &amp;u, const Vector2I &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>dotProduct</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a56cf7af5e8aadf6d32a90af80257d4b5</anchor>
      <arglist>(const Vector2I &amp;u, const Vector2I &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDotProduct</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a550ba9bc7ee040cf0880e3e03e32758b</anchor>
      <arglist>(Integer &amp;dp, const Vector2I &amp;u, const Vector2I &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vector2I</type>
      <name>extendedEuclid</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a71c3dfff6f86f76eeb7c80499cf67803</anchor>
      <arglist>(IntegerParamType a, IntegerParamType b, IntegerParamType c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoefficientIntersection</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a405ede4d894af3f14ac3721aa4335598</anchor>
      <arglist>(Integer &amp;fl, Integer &amp;ce, const Vector2I &amp;p, const Vector2I &amp;u, const Vector2I &amp;N, IntegerParamType c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getValidBezout</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>ac0ba8f66c08e0300e57af5523e6051fb</anchor>
      <arglist>(Vector2I &amp;v, const Point2I &amp;A, const Vector2I &amp;u, const Vector2I &amp;N, IntegerParamType c, const Vector2I &amp;N2, IntegerParamType c2, bool compute_v=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reduce</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a3cf19f6926e0ee9f35570241f33ebfe8</anchor>
      <arglist>(Vector3I &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>dotProduct</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>aa578b0923a1dda2729dc69d3647e0974</anchor>
      <arglist>(const Vector3I &amp;u, const Vector3I &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDotProduct</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a9ce06251647ec84e03fb64b8c9ad81b1</anchor>
      <arglist>(Integer &amp;dp, const Vector3I &amp;u, const Vector3I &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a932730558999d868400f2331243ebb12</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a7a09885005fbe93e4d0c01bc3510aabf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isZero</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a2a3a75cc277d1003af8eaf8366c564d2</anchor>
      <arglist>(IntegerParamType a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNotZero</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>aa32f7b3616379ad417db2cb7764f66c4</anchor>
      <arglist>(IntegerParamType a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isPositive</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a8cf6093e223d8ab1f324d4a3ecf9d867</anchor>
      <arglist>(IntegerParamType a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNegative</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a72d1606be9430f5bf3cc7b81f6c3ad76</anchor>
      <arglist>(IntegerParamType a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isPositiveOrZero</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a5b307506f7e0cee38c6e37e3e609e32a</anchor>
      <arglist>(IntegerParamType a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isNegativeOrZero</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a21fc7ddc33d52990852dcad42aa15683</anchor>
      <arglist>(IntegerParamType a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>abs</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a546c31bc33c2802dae0d8ed8b5f5f9ff</anchor>
      <arglist>(IntegerParamType a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a996578cadd13768efaa4481ac6d5359f</anchor>
      <arglist>(IntegerParamType a, IntegerParamType b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a5f549afd23d19a1e81c3259dbc01dba2</anchor>
      <arglist>(IntegerParamType a, IntegerParamType b, IntegerParamType c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a55faf98e4b1000db303427fabf4a7cf7</anchor>
      <arglist>(IntegerParamType a, IntegerParamType b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>aa815ac0952deb37671843f66a705bc29</anchor>
      <arglist>(IntegerParamType a, IntegerParamType b, IntegerParamType c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>staticGcd</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a5b4f6eccfb0baf715aa1bd105fc9475b</anchor>
      <arglist>(IntegerParamType a, IntegerParamType b)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_m_a</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a3cf77e28d363f2fd5bda44ab7a742f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_m_b</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a5eeec13a9fe50d0e4b76f369e97f7fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_m_a0</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a53477d60c247aa430901dfcf57582781</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_m_a1</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a4edaa10d9cecd2a916fd76e96618f7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_m_q</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a7475a29d1067d909e9632d7caedad539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_m_r</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>acbdfadd3593d5bcd67ea953b8d430a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Integer &gt;</type>
      <name>_m_bezout</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a52c91e139b9a39620a48ecdda76c6f72</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector2I</type>
      <name>_m_v</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>aa869b9ce1e368a31222c45ed81ff1e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector2I</type>
      <name>_m_v0</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>aad39dcaebbac311ec6160410ffc052c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector2I</type>
      <name>_m_v1</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a8a2baf8ea31683cea69a840e1e1df4b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_m_c0</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>abd88629660d7ec6c931d39fd624ae9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_m_c1</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a9c56a57f02ab8bcec59602d97d12c76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_m_c2</name>
      <anchorfile>classDGtal_1_1IntegerComputer.html</anchorfile>
      <anchor>a4efe581eabdac1a982cd1931a6a226ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LatticePolytope2D</name>
    <filename>classDGtal_1_1LatticePolytope2D.html</filename>
    <templarg>TSpace</templarg>
    <templarg>TSequence</templarg>
    <member kind="typedef">
      <type>LatticePolytope2D&lt; TSpace, TSequence &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a90f327263cfd6f0d01eedbf914d5d9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSequence</type>
      <name>ClockwiseVertexSequence</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a3dae47e65d701f49d90e8201c1555aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a229e8fafa51bf7705e97744cb9269da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>aa5c67b7b7c99fa744eab6ba71c09149c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ae8922d236427e834f85fa1196a7f07d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a9029145c454550e2326e8f96dc40dc45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerComputer&lt; Integer &gt;</type>
      <name>MyIntegerComputer</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a92b0aad5cd5fe0e865ba86c11b1c8b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyperRectDomain&lt; Space &gt;</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ab5fb8edfa12b57ce969d36e9eec3de04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClosedIntegerHalfPlane&lt; Space &gt;</type>
      <name>HalfSpace</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a1fad49f4de7471dd4e45d7b9fdce2b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::value_type</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a204199da7f0f4fc240de53145823a1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a1ed95c12e345e9f30b892e4c40160e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>aae5038dba88933999f3296e3774e8d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::iterator</type>
      <name>iterator</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ae81a22ba5980c42a918fd7389fd8634e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ab8fe3eae9a0e8c01d9bbc21e91b90bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>acacd756aebeca2b4bfa09880ee8507c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::size_type</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a48405f05d92d900965bcb07ff4e0f844</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>aa26c7c30969566089a543548674f8ce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::value_type</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>aa9006273e800005694ec3664878c88e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::iterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ae89d51e668bb1995dfff297c1ec1f254</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClockwiseVertexSequence::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a3f88676a6f665effc6e220bf5fd8a245</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a34f3153981f12acc6dd48c7d39be04d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Size, Size &gt;</type>
      <name>SizeCouple</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a806295597a0901a635759d4274922c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MyIntegerComputer::Point2I</type>
      <name>Point2I</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a7fda40e55f7ff47d9ca285d096760b05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MyIntegerComputer::Vector2I</type>
      <name>Vector2I</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>aa38d4ae742330b274d7b4275601a7d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MyIntegerComputer::Point3I</type>
      <name>Point3I</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a221262b2758b46f983c49a247d159c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MyIntegerComputer::Vector3I</type>
      <name>Vector3I</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>acfae147a51dbce2710543fffd05db11d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a9f3fa565aeb2be355c90c7ea4d2f81f6</anchor>
      <arglist>((ConceptUtils::SameType&lt; Value, Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>aad8cb38a6e519106911a5ec47f952fef</anchor>
      <arglist>((ConceptUtils::SameType&lt; Point2I, Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a65d0755fc5d9d17870f545e07dc63961</anchor>
      <arglist>((ConceptUtils::SameType&lt; Vector2I, Vector &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LatticePolytope2D</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ae72db7277e9c112d4192392111455f81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LatticePolytope2D</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a4a66a01db0453df23d85f380d6ce8ee9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LatticePolytope2D</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ab0550e2e8e32c3fd6f410132538283ae</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ab0939f1c394b41b1e1eb14d60037bbe5</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MyIntegerComputer &amp;</type>
      <name>ic</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a3525ae0453f33651565754161d724c04</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a8cf11dc9aea006a837646b1a89136eaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a59413f446bdcfe620b71c45d0e2ffdbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a458b06d8dc9abfa664d4f798f6747087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a4dbfaa877825df4b49b0eadb380c74ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a7db42d0f77981cf91bf426304c02b944</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a6b870b71b47808b7e51703bf0e116453</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>max_size</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a756c16fd41a014bb5401612c60194dd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ad179e5baa4347b721616f2474190809e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ac1290e0ce6cb744959b68a41f2db3eee</anchor>
      <arglist>(Iterator it)</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>boundingBoxDomain</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a69c88f2fc14953d38949a9ebcb164d4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a8ca124414ca74f5f178b2a2a5272b9c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>insertBefore</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a00f7e450be67ead382fcf3e20c3f1167</anchor>
      <arglist>(const Iterator &amp;pos, const Point &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>af45f0fc4de081f7e60cf250e1504da28</anchor>
      <arglist>(const Point &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushFront</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a4e78d470d815cccb411938568595188a</anchor>
      <arglist>(const Point &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a5944fcd087a1164c9b332c38a989ca17</anchor>
      <arglist>(const Point &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a1b2f7b787039c4234a6d9acc183876c7</anchor>
      <arglist>(const Point &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>const Integer &amp;</type>
      <name>twiceArea</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>aa4f512099152642b0725811ed33f815d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3I</type>
      <name>centroid</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a712a2795054e92c4ae1ed13c97ea6037</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point3I</type>
      <name>centroid</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a0d1733d8cea0095fffe6fd42eca4034e</anchor>
      <arglist>(const Integer &amp;twice_area) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>numberBoundaryPoints</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a9b1bbef94609164155ec0e8f09813fca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>numberInteriorPoints</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a87106d421d6646b78e5f0a2eb57d736f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SizeCouple</type>
      <name>findCut</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a34d79b242091f61b6427e31e67d870aa</anchor>
      <arglist>(Iterator &amp;it_next_is_outside, Iterator &amp;it_next_is_inside, const HalfSpace &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>cut</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ae68c2a8eaa4e675895f4f3b0aefac5af</anchor>
      <arglist>(const HalfSpace &amp;hs)</arglist>
    </member>
    <member kind="function">
      <type>HalfSpace</type>
      <name>halfSpace</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>afcca448d38d1665c1a208b6d0ce3d561</anchor>
      <arglist>(ConstIterator it) const </arglist>
    </member>
    <member kind="function">
      <type>HalfSpace</type>
      <name>halfSpace</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a5c805f157eaf7671abad49ddd8c18741</anchor>
      <arglist>(const Point &amp;A, const Point &amp;B, const Point &amp;inP) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getIncludedDigitalPoints</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a49e3c95cd803655bd7ce97b3901ab732</anchor>
      <arglist>(DigitalSet &amp;aSet) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getFirstPointsOfHull</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ac20917e0e4f72b2ab0d06727b5aea4df</anchor>
      <arglist>(Vector &amp;v, Point &amp;inPt, Point &amp;outPt, const HalfSpace &amp;hs1, const HalfSpace &amp;hs2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAllPointsOfHull</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a97b8c07e9a14a21c4a12e881850f6eb2</anchor>
      <arglist>(std::vector&lt; Point &gt; &amp;inPts, std::vector&lt; Point &gt; &amp;outPts, const Vector &amp;BV, const HalfSpace &amp;hs2, const HalfSpace &amp;hs3) const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>computeConvexHullBorder</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>afb7c76916613a2ce3efb9cbcffded87a</anchor>
      <arglist>(OutputIterator itOut, const Point &amp;pointRefC1, const Point &amp;pointRefC3, const HalfSpace &amp;hs1, const HalfSpace &amp;hs2, const HalfSpace &amp;hs3) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a1de1096552f844dd163827bc8d4dd835</anchor>
      <arglist>(LatticePolytope2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a173618575ac245d48095cdc51ce2be28</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a7ab101ca1c893a63826a5242d9ac5327</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ab8cfe415b6787799f2b2e63fcbe7fee6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ClockwiseVertexSequence</type>
      <name>myVertices</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a17750a256094b80d972918c79f039cbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a599d6318dee7ac42e4f189c66021c765</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a63a7a5ba1b6aed5a64b3b681daa813ce</anchor>
      <arglist>((TSpace::dimension==2))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a7a0bc220185ee543346f78b735083f9e</anchor>
      <arglist>((boost::Sequence&lt; TSequence &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MyIntegerComputer</type>
      <name>_ic</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a93be1376098ffed3f4822876eaa69cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_a</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a0250504b95370b76a14141f9ef11f9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_b</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a77f7587c633fa632c67160620b1e0ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_c</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a8193439d88c57af7dc48caefeb70d239</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_c1</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a366fc20603ce79259c1913fb46a60d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_c3</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a20fe54d3d1947b775211f855fb394da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_den</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>afd8972c749218ea9b4835f5c3c64a946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_g</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a3507ee12c5052ac20c9bcb7c910e4d57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_fl</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ace92c646640f150ba51c8f1ce2a38171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>_ce</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a48302acbc76a60079d45ae8cca447c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>_A</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a988498a2f784c823d830921abf6c7238</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>_B</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a79790e0da5d56aee322677e7fd3f893b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>_A1</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a69fd047fab54f0a3666110b08cafbc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>_B1</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a28152d6e05208877c808500d8347d3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>_A2</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a66cff489dd9d819447e279bbbcc7c303</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>_B2</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a5c403ae8dc6f5f0d38c004f789b332eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector</type>
      <name>_N</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>ae5bbddd429e171debee16a63deecdea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector</type>
      <name>_DV</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a57ed873785dd23be2163feef9f78df53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector</type>
      <name>_u</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a94d743ecabd2093293d63d693471df9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector</type>
      <name>_v</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a143ef89237c880c3b0c5942311df01ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Point &gt;</type>
      <name>_inPts</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a6689971e4b3fac474b2310ee4ec873d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Point &gt;</type>
      <name>_outPts</name>
      <anchorfile>classDGtal_1_1LatticePolytope2D.html</anchorfile>
      <anchor>a3d261d7ad09ba15f0befb7115d4ee166</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LighterSternBrocot</name>
    <filename>classDGtal_1_1LighterSternBrocot.html</filename>
    <templarg>TInteger</templarg>
    <templarg>TQuotient</templarg>
    <templarg>TMap</templarg>
    <class kind="class">DGtal::LighterSternBrocot::Fraction</class>
    <class kind="struct">DGtal::LighterSternBrocot::Node</class>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>aac3adb2918f5b4f1ec30d18efea1d080</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TQuotient</type>
      <name>Quotient</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a5021ff3aa069352b7645a5160583b277</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMap</type>
      <name>Map</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>acf5ce55710cba41b0dae58ca6842115c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LighterSternBrocot&lt; TInteger, TQuotient, TMap &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>afa5cfe10a43b4437bce3705040f96dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMap::template Rebinder&lt; Quotient, Node * &gt;::Type</type>
      <name>MapQuotientToNode</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a8575f867a4aea456e8b5c9a21a5aeabc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>af1b79b8b57d7833a125768321a48eb55</anchor>
      <arglist>((CInteger&lt; Integer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>ad76f08198e449159a49df15c9ff6095c</anchor>
      <arglist>((CSignedInteger&lt; Quotient &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LighterSternBrocot</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a02b9ac5ad184787fec790787b778dd03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a172aad32f0cde73fdbde7d1f71161c02</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LighterSternBrocot &amp;</type>
      <name>instance</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a6777a928adf442686f396c901ef3a15c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>zeroOverOne</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>ad7635f828ef70abfdd5469b3fa650843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>oneOverZero</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>affcc881cc82d04f8a7137e1c77621d9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>oneOverOne</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a19df4fd1373a3ade9b9f018bc4da9ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>fraction</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>ad3f023cdc8f201269b1ef652e7aa3f2c</anchor>
      <arglist>(Integer p, Integer q, Fraction ancestor=oneOverZero())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>display</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a97ae8fc3138fd5eb2e25ce305aef02b6</anchor>
      <arglist>(std::ostream &amp;out, const Fraction &amp;f)</arglist>
    </member>
    <member kind="variable">
      <type>Quotient</type>
      <name>nbFractions</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a0456cdd668fcb7ca2a8756a4ef295d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LighterSternBrocot</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a86b4eb2d57806904d50be1197c8a22f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LighterSternBrocot</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>ab7f9d7738c13dc7335c51daa065db778</anchor>
      <arglist>(const LighterSternBrocot &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LighterSternBrocot &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>ada0c5de9f3f29ac5342181899eff4541</anchor>
      <arglist>(const LighterSternBrocot &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LighterSternBrocot&lt; DGtal::int32_t, DGtal::int32_t &gt; *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a9d5d1ae76f2ed6f949971a321612ae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>LighterSternBrocot&lt; DGtal::int64_t, DGtal::int32_t &gt; *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a1b4a2e7ea8f2586a1e96cef1f168be64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>LighterSternBrocot&lt; DGtal::int64_t, DGtal::int64_t &gt; *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a4986c62410228e0546d6b3f6a13af6b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myOneOverZero</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>aa4efb836005df7ee30f976c876df66af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myOneOverOne</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>ab1acbceb3c4c0cb0cd6a77a259e96f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static LighterSternBrocot *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot.html</anchorfile>
      <anchor>a92c96d64da0bef4eb59bc3f83fb89bee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LighterSternBrocot::Fraction</name>
    <filename>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</filename>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a8519318ea587dc62c76d3ee60004cbf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TQuotient</type>
      <name>Quotient</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a4a157a1ca84caa9cf1237989bd2b0fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LighterSternBrocot&lt; TInteger, TQuotient, TMap &gt;</type>
      <name>SternBrocotTree</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a19643912f21bc8ad06d7ffa1154e9f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SternBrocotTree::Fraction</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a8b276f2edc301d001f17eade79a64093</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::UnsignedVersion</type>
      <name>UnsignedInteger</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a2a573a19f0df27cd5be2fa326bb969fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Quotient, Quotient &gt;</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a99172fd9342911044d6b8e3d06219e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Quotient &gt;</type>
      <name>CFracSequence</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a7921c57e64bcbee09698196e28150ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputIteratorWithRankOnSequence&lt; CFracSequence, Quotient &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ae824263526ed75214bc766a48d28258b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>abf7e9c6f9177b115ae2bf0659f9dd91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a02ef8774a554f12ea6f9078c5ac99e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aac4feffc554230aee1be7e435bf9f536</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ab01de4cae3469a23be43a8ea3278c231</anchor>
      <arglist>(Integer aP, Integer aQ, Fraction start=SternBrocotTree::zeroOverOne())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>abdf46635ebffa261dada7358094362c0</anchor>
      <arglist>(Node *sb_node=0, bool sup1=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a29a32d712cf8bf750892bb9e3fba5d42</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a6ae40a9027286a9acb17952eac47c683</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>null</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a3a43871bdc15ce2b9fa12fb1969af4e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>p</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a3f3467d7328dd8904a36cb017d27d353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>q</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a05219d331aa391e0f36995341db94c6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quotient</type>
      <name>u</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a204937fdc29be61df4ce2dad6c33a7dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quotient</type>
      <name>k</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a90dc67abba26de538044967f9fd484d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSup1</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ad6171b3b9f6172c135ac001858715156</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quotient</type>
      <name>trueK</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aa9bfd7eabfe0ab11d898ae07ffe0a8a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>left</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a1686c8df122de418c21c7269f3a9e055</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>right</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>af033ad1a2e1fe41ae9fb358e19a4bd77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>even</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aafd70e099a043e528e021c0df97a9237</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>odd</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aa71fe50e9d8e773e45bfff088fe99f47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>ancestor</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a34d9bf87a3d3e8d9743be1fcf2ddb8df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAncestorDirect</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a23cdc8409f9f8038e3aa938b1d97cf18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>father</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a7037f1ffd40e8fd81dbc201a24917aea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>father</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a34ba436ed777b24c26b7ecbf408c57c1</anchor>
      <arglist>(Quotient m) const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>previousPartial</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>afa45c6ef2fedce45018272c97701820f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>inverse</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a97e2a0f7f1d92d7643c559179525014b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>partial</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aef1bdb4d4db81c4fb26c7c8e6f12c6bb</anchor>
      <arglist>(Quotient kp) const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>reduced</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a88b25db8300aeb641c66abb5053ea316</anchor>
      <arglist>(Quotient i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ac774d9d0bc6641c1191da2c85415ba17</anchor>
      <arglist>(const std::pair&lt; Quotient, Quotient &gt; &amp;quotient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a799dbdf87ce87be004037aee8cb5547c</anchor>
      <arglist>(const std::pair&lt; Quotient, Quotient &gt; &amp;quotient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSplit</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a5854d948a73ca8874e0e83c58cf5dfc2</anchor>
      <arglist>(Fraction &amp;f1, Fraction &amp;f2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSplitBerstel</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>adc63b14c58c5f1da61b6af0594407329</anchor>
      <arglist>(Fraction &amp;f1, Quotient &amp;nb1, Fraction &amp;f2, Quotient &amp;nb2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCFrac</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aec44542cce0df33dab76fd3f16869806</anchor>
      <arglist>(std::vector&lt; Quotient &gt; &amp;quotients) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a749246f2809b52666f5bc9c590d6ecd6</anchor>
      <arglist>(Integer p1, Integer q1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lessThan</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a8bf620714f91298b33a87c17ed711021</anchor>
      <arglist>(Integer p1, Integer q1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moreThan</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a95cbc011e02688ce18398b29f7ee4753</anchor>
      <arglist>(Integer p1, Integer q1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ad7e43ea7bc4b90c365a9f926e856a3ea</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ab6aaf2920bc8d191a658662c1e2c185e</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aa315289803f591aa46f68f8a2c4cc2e9</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aaf4c12ebb514d0bb213680349d458fe5</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a80e87b627e85a06a84c6aa34525a872b</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>af0f7ccc882d31666c1caef2a343b804f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a3a96dde9011eeb96ecf1e498f8548be7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Fraction</type>
      <name>child</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a99dcabcb72ecb6d903be6e41744f16bc</anchor>
      <arglist>(Quotient v) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Fraction</type>
      <name>origin</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aa10c86c4f7a3d5ea18421554b048d246</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Fraction</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a1a6b5ac477f569e849b05a85121defe9</anchor>
      <arglist>(Quotient v) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myNode</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a6b84886ce51c9b4d9611d3ea416f3d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mySup1</name>
      <anchorfile>classDGtal_1_1LighterSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a23698c4351af06f3a6791cd67c025c18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LighterSternBrocot::Node</name>
    <filename>structDGtal_1_1LighterSternBrocot_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>a3bb26f41b7aaea5ef3c7d763fb8aa41f</anchor>
      <arglist>(Integer p1, Integer q1, Quotient u1, Quotient k1, Node *_origin)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>child</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>a10f842ac335b40cd28ce702fcb1c3bea</anchor>
      <arglist>(Quotient v)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>origin</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>a503545639408bb8dd8dea6ea94f1c08e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>ancestor</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>a3fdb1149a48f61840f7c793187a36567</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>father</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>acbafa7a151db9ba1801920575b6fa1bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>ae74266cb3a68afb7313b975937426110</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>ab9fb747962c6678681a01c3635590efc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameDepthLeft</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>a76445f02ea46bd6e19fc4614e85049da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>aaa67fa2db41b08230766b2e4b440e704</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>q</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>aa82c7be63c27adb5d6ae01fc9f22dce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Quotient</type>
      <name>u</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>ab9c3b4181c0d533a4989de812a298aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Quotient</type>
      <name>k</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>af1f2b5396af3e9914d2cd071de786e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>myOrigin</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>a57e1b56be8b24235f6635cd0abaa000d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MapQuotientToNode</type>
      <name>myChildren</name>
      <anchorfile>structDGtal_1_1LighterSternBrocot_1_1Node.html</anchorfile>
      <anchor>a5c6ea4303410637b24bb0d7f65b63727</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LightSternBrocot</name>
    <filename>classDGtal_1_1LightSternBrocot.html</filename>
    <templarg>TInteger</templarg>
    <templarg>TQuotient</templarg>
    <templarg>TMap</templarg>
    <class kind="class">DGtal::LightSternBrocot::Fraction</class>
    <class kind="struct">DGtal::LightSternBrocot::Node</class>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a442af560dbbdd21900debdc05907b947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TQuotient</type>
      <name>Quotient</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>af4d28758914c89ca9c157e6b8db7fe68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMap</type>
      <name>Map</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>aabeb5d66b08cd0e1c467cd7e7dcedef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightSternBrocot&lt; TInteger, TQuotient, TMap &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a0070a815b0e854c4836de532b65ea218</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMap::template Rebinder&lt; Quotient, Node * &gt;::Type</type>
      <name>MapQuotientToNode</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a1d7402f5d8369078b54e941a557425de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>afa989d41207e243f1e61c438eb9e047f</anchor>
      <arglist>((CInteger&lt; Integer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a1ede078054d1011d09844c253295457d</anchor>
      <arglist>((CSignedInteger&lt; Quotient &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LightSternBrocot</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a1aa49f6d50f69bab8596789cad743204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>aa996715b04485afe15d670803b9b2e5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LightSternBrocot &amp;</type>
      <name>instance</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>ab58202cc54060160df9d61c6b7883ae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>zeroOverOne</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>aba052e91ec5c9ce52c963c1e6bd10f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>oneOverZero</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>afc8b19bb8d58d5015cf339e98ecf8240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>fraction</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a314697697112af96ecc3631690465316</anchor>
      <arglist>(Integer p, Integer q, Fraction ancestor=zeroOverOne())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>display</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>ae6d46b443fc857ca42dc41a821320f19</anchor>
      <arglist>(std::ostream &amp;out, const Fraction &amp;f)</arglist>
    </member>
    <member kind="variable">
      <type>Quotient</type>
      <name>nbFractions</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>aa862c6646c6a868396220da58ae5b429</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LightSternBrocot</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a884d854f8078ab8282290d1c47332ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LightSternBrocot</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a5f4fc1d42771955b82a2f909876548c9</anchor>
      <arglist>(const LightSternBrocot &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LightSternBrocot &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>ae2629f0af9cda5897f44ca7d13fd0cdd</anchor>
      <arglist>(const LightSternBrocot &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LightSternBrocot&lt; DGtal::int32_t, DGtal::int32_t &gt; *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>aadc16d9b6f0ad3574542afd3552d0bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>LightSternBrocot&lt; DGtal::int64_t, DGtal::int32_t &gt; *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>add6c33e7de26361966d36132bf316da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>LightSternBrocot&lt; DGtal::int64_t, DGtal::int64_t &gt; *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>ac459e365e3ad64f70d54af4316bfc43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myZeroOverOne</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a157ca9142e232dcbffcdc3f6214f0250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myOneOverZero</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>a6cc228fbe1507c9bd8c4fb7e466e7b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myOneOverOne</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>ab398283298fa763efc2c0587bfe4f22b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static LightSternBrocot *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1LightSternBrocot.html</anchorfile>
      <anchor>af18e231cde8df5e21bdf248320bef2ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LightSternBrocot::Fraction</name>
    <filename>classDGtal_1_1LightSternBrocot_1_1Fraction.html</filename>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a97a24f3ab264b731110b608d8ee91356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TQuotient</type>
      <name>Quotient</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a88be05d2fd6a2581b3eb743100dd0a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightSternBrocot&lt; TInteger, TQuotient, TMap &gt;</type>
      <name>SternBrocotTree</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a32bdca01c273270a17e9923f0afe7e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SternBrocotTree::Fraction</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a3843a20b98d0a83f74c4eba4479eed16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::UnsignedVersion</type>
      <name>UnsignedInteger</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a97094aab6a4528740b9867ffc242f7a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Quotient, Quotient &gt;</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a274e51cdd6b80a2ce6f949182967cf15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Quotient &gt;</type>
      <name>CFracSequence</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>abc3a0d8a9a97a9fd08fcae4da111ae15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputIteratorWithRankOnSequence&lt; CFracSequence, Quotient &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a61e6828366d2b25f1e0d39c135b356c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aaff09ccfb2ad5c4aab4c35a5511171bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ae1b5a853d5a7de7ed3efa5743593f399</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>af0c30949585dca27b214143cab216264</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>af2255ab9f8683e158c5f2d7cae4ce1c7</anchor>
      <arglist>(Integer aP, Integer aQ, Fraction start=SternBrocotTree::zeroOverOne())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a8b8d094db4a08b58c39c19f19710f369</anchor>
      <arglist>(Node *sb_node=0, bool sup1=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a73d1b455f3905cebbb4e94632a28c60d</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a0d534821d55998e5cd056be01e35f68e</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>null</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a92bc004740c719bb5719f02305db8d61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>p</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a388e37451d0eab4f910624bb90c346c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>q</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a6acaccfa8fe1548f7fb05dd2c7f7426c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quotient</type>
      <name>u</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a0db1e991b202443a74cae1b8b8fac65a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quotient</type>
      <name>k</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>afb3571774fc1a45add922bbee787db91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSup1</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a5f9fd75badf7f9143cf891a1032b6187</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quotient</type>
      <name>trueK</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aa87bddafa405def469bcf15071da821b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>left</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a98e47d868a4f282ed692734e94569c7c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>right</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aa83d1a8ccb1ec6c2b809f3abfc7d8baf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>even</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ae94982d4204954364f6014537ba36bf4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>odd</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aee53b9ab6387ec0e8ed9c2487e3b6696</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>ancestor</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>add20ee249fc03a14fbc55e291f245b2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAncestorDirect</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a2486dd1992ce5343165c41b569f1465f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>father</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a527727561a814b2b49b8de761c21a31c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>father</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a92d99fa4ec392eca45b1587df6e46a00</anchor>
      <arglist>(Quotient m) const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>previousPartial</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a06a7ae6f7cfcce1d6449b782d5a94d91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>inverse</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>abcbbf2f07cf8ad96609625b022e4e64b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>partial</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a0a5fb5f724ceb017c4cc9b016de0a3b1</anchor>
      <arglist>(Quotient kp) const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>reduced</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a5930e66c5c54149bc19fbef2760d7722</anchor>
      <arglist>(Quotient i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ab1f291941193d9ac875a8f38fc08afc3</anchor>
      <arglist>(const std::pair&lt; Quotient, Quotient &gt; &amp;quotient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aa0a4b4c6d8289b4d86bb94149186bbaf</anchor>
      <arglist>(const std::pair&lt; Quotient, Quotient &gt; &amp;quotient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSplit</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a3872d67db1bdebe5f39f85b4aad526d3</anchor>
      <arglist>(Fraction &amp;f1, Fraction &amp;f2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSplitBerstel</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a13c977a2e450a2e587cfb4277ed6f3c4</anchor>
      <arglist>(Fraction &amp;f1, Quotient &amp;nb1, Fraction &amp;f2, Quotient &amp;nb2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCFrac</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a0f1e9730aa07f189d86c1d686eb200d3</anchor>
      <arglist>(std::vector&lt; Quotient &gt; &amp;quotients) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ac81cc294b96b202db2c0d2539cbb9cec</anchor>
      <arglist>(Integer p1, Integer q1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lessThan</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a6353d58dae1262582d5b959dae17cf10</anchor>
      <arglist>(Integer p1, Integer q1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moreThan</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ad19bb0418df0bbdf18b2b2c2e12d9adb</anchor>
      <arglist>(Integer p1, Integer q1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ac5de9c757e91ec5452028105b5bd5021</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a8706712e365b56562b6ac5f8fbc681a4</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ae275b560a002b81335faa0a07659a17a</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a8366bdb36562d1336e8dba5f8c66650c</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a00178a1c6ba94acea153bc98a3f7612e</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a18586b4f7318e8da4ee21c726283a8a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aaf1d3c92ed0112757b3bbfff2523628d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Fraction</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a5bdca57d3cdd92eb5f91012aeb35c10e</anchor>
      <arglist>(Quotient v) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Fraction</type>
      <name>next1</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a0d42466eef8293abf2e2ed88c08897c6</anchor>
      <arglist>(Quotient v) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myNode</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a5059344d198c07ed3121c6331bfa066e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mySup1</name>
      <anchorfile>classDGtal_1_1LightSternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a503faecd785a6007856dacba6d4aa4ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LightSternBrocot::Node</name>
    <filename>structDGtal_1_1LightSternBrocot_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>aa7fcb2bdd14988fb92412df38cd4920f</anchor>
      <arglist>(Integer p1, Integer q1, Quotient u1, Quotient k1, Node *ascendant)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>a65043fb0a0e324e8be1400c8c0138e13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>a4d49f9dc8e2055bdc9a1edd3b412a8d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameDepthLeft</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>aec6e2c8727d5fd1f0a268058a5f8f29c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>a29c49d72b704a097ca614a06b6c501bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>q</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>a4c5d4c74b5c35b44d2d76ca247e4ad00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Quotient</type>
      <name>u</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>ab14f228492691e705f782fcd13df8fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Quotient</type>
      <name>k</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>a515a921e58759c9c9755efad83588793</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>ascendant</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>a6770d9cd94619c73f06d122e40fbd25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MapQuotientToNode</type>
      <name>descendant</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>a55e0e1035e4a8a0017cbcbfd0f65e49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MapQuotientToNode</type>
      <name>descendant2</name>
      <anchorfile>structDGtal_1_1LightSternBrocot_1_1Node.html</anchorfile>
      <anchor>ab82ea67a34c160b35ee747bb35077867</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ModuloComputer</name>
    <filename>classDGtal_1_1ModuloComputer.html</filename>
    <templarg>TInteger</templarg>
    <member kind="typedef">
      <type>NumberTraits&lt; TInteger &gt;::SignedVersion</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a27b81ac7f46a8cba821e9c869acd63f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::ParamType</type>
      <name>IntegerParamType</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a50b106a148fbb6c7bec795ecd69845da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; TInteger &gt;::UnsignedVersion</type>
      <name>UnsignedInteger</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a71e45e60dd3b5aaea1fcbc9f26e7809c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; UnsignedInteger &gt;::ParamType</type>
      <name>UnsignedIntegerParamType</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a9bb30515dcde2797c083b61ff8663732</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>ad5334eea49e3f20945008e4e0705dd48</anchor>
      <arglist>((CInteger&lt; Integer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a80fdd69feca50a7e6c33cd15bf3766d7</anchor>
      <arglist>((CUnsignedInteger&lt; UnsignedInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModuloComputer</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a5c5c21adf901ef422f0c1cf0fe9608fd</anchor>
      <arglist>(UnsignedIntegerParamType m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a059995fd1ff2d7a35d9a035a1df4c1a4</anchor>
      <arglist>(UnsignedInteger &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a66ef47234a13bf35be9ec69d36373981</anchor>
      <arglist>(UnsignedInteger &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>UnsignedInteger</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>aca1e1a4b36915b3f9391b23c915823cb</anchor>
      <arglist>(UnsignedIntegerParamType i) const </arglist>
    </member>
    <member kind="function">
      <type>UnsignedInteger</type>
      <name>previous</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>ab84f2b474e3b57a590437ae5dba9c9a6</anchor>
      <arglist>(UnsignedIntegerParamType i) const </arglist>
    </member>
    <member kind="function">
      <type>UnsignedInteger</type>
      <name>cast</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>accea9c2e367e8572a0f1a6b1f1f2dee0</anchor>
      <arglist>(IntegerParamType i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>less</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>aff999fb2a2514d3c4c66c94474239ae9</anchor>
      <arglist>(UnsignedIntegerParamType i, UnsignedIntegerParamType j) const </arglist>
    </member>
    <member kind="function">
      <type>UnsignedInteger</type>
      <name>posDiff</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a81e419040923440c261b57b38ab13dd3</anchor>
      <arglist>(UnsignedIntegerParamType j, UnsignedIntegerParamType i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>a4debdfcbe04ed6901d59d74954dd4eb5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>ac346d7b686719a5eeb1078050b92c7a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ModuloComputer</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>ae1e3568f91e97c2149420d391dc0e59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ModuloComputer</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>afe9ed0c28268bba8fe5e27eddf86d55e</anchor>
      <arglist>(const ModuloComputer &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ModuloComputer &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>ad4cea805875e9c9518b06a1e7fb026bb</anchor>
      <arglist>(const ModuloComputer &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UnsignedInteger</type>
      <name>k</name>
      <anchorfile>classDGtal_1_1ModuloComputer.html</anchorfile>
      <anchor>acc375e2eff20d6ceac31e1e686ff8b66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Pattern</name>
    <filename>classDGtal_1_1Pattern.html</filename>
    <templarg>TFraction</templarg>
    <member kind="typedef">
      <type>TFraction</type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a39a42af8fa3e9404d96f0a0cd2264a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pattern&lt; TFraction &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>aed9a67b56536d5f1187fbce4063e7df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fraction::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a8c63c1f158c12dbdda3a033e72248874</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fraction::Quotient</type>
      <name>Quotient</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a3ef467ce2884f919cf8382d7224b9d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerComputer&lt; Integer &gt;</type>
      <name>IC</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>adefbd624111a0010883ec497c908cf98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::Point2I</type>
      <name>Point2I</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a47d8c36a610279f5ee2b2d049297da68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::Vector2I</type>
      <name>Vector2I</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>aca9f5df6c495682cad46e8a7a98823e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>ac095922585a68058b67cd012b01fd949</anchor>
      <arglist>((CPositiveIrreducibleFraction&lt; Fraction &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pattern</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>af6e6cb398d57f075eece0ea5ebb59c7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pattern</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a9e8c74a3a37a20b03b7cc462bdc33328</anchor>
      <arglist>(Fraction f=Fraction(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pattern</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>aef8e13e631c6c4291b27f690b8599c99</anchor>
      <arglist>(Integer p, Integer q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pattern</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>ae1def7a9c36fcd41c33e1afdc40543da</anchor>
      <arglist>(const Pattern &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Pattern &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>aed535f83b870c31dfd345d5c1d4ced97</anchor>
      <arglist>(const Pattern &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>rE</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a4b8ae71d3c324754362ebda40dfe7252</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>rEs</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a31c2124654d81e728529e14de9d651cc</anchor>
      <arglist>(const std::string &amp;seps=&quot;(|)&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>slope</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>abac2624c3903cd8d47915f18ce0fc8b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>length</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>aa591c9666b9db9f064d1690a65a197c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>posU</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>ad703fbfb7583e71f7b23f2ee351dba37</anchor>
      <arglist>(Quotient k) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>posL</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a6ea68501ec2a55e69226aa4d7eac74f7</anchor>
      <arglist>(Quotient k) const </arglist>
    </member>
    <member kind="function">
      <type>Point2I</type>
      <name>U</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a5ff360d0ee626847575943c67a9c99ef</anchor>
      <arglist>(Quotient k) const </arglist>
    </member>
    <member kind="function">
      <type>Point2I</type>
      <name>L</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a437af87915cb80608559773f28548057</anchor>
      <arglist>(Quotient k) const </arglist>
    </member>
    <member kind="function">
      <type>Vector2I</type>
      <name>bezout</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a7e61e3aa4b754ca843077e0d882203ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector2I</type>
      <name>v</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a75b32dbe84ce39c306b493d24809bda9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pattern</type>
      <name>previousPattern</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a8afa2b697ada8668c242c28cc79f1886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getSmallestCoveringSubpattern</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>afd8f082a6fae50eea19b635cff6f07c8</anchor>
      <arglist>(Pattern &amp;subpattern, Quotient &amp;nb, Vector2I &amp;startPos, Integer posA, Integer posB, bool reversed=false) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getGreatestIncludedSubpattern</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>acc6121cf525084a02e3eb6a5d9e84fa6</anchor>
      <arglist>(Pattern &amp;subpattern, Quotient &amp;nb, Vector2I &amp;startPos, Integer posA, Integer posB, bool reversed=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>ab5dfa49ae11c65e04a5883a9242d77dd</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a2754ab5b07a69a051988bd1c7af4b616</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Fraction</type>
      <name>mySlope</name>
      <anchorfile>classDGtal_1_1Pattern.html</anchorfile>
      <anchor>a16aa6a8af80fc2334d0a396032059c8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::StandardDSLQ0</name>
    <filename>classDGtal_1_1StandardDSLQ0.html</filename>
    <templarg>TFraction</templarg>
    <class kind="struct">DGtal::StandardDSLQ0::ConstIterator</class>
    <member kind="typedef">
      <type>TFraction</type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a059b7206f0c8edebd5694696b379d164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardDSLQ0&lt; TFraction &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>af6a9ffaa62b7b7c1fe56ec8d53c0c026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fraction::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a476a404bfe11e71b727936800d61e4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fraction::UnsignedInteger</type>
      <name>UnsignedInteger</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>af7ff3d72a86cb6f692770ab0a2c6a3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Fraction::Quotient</type>
      <name>Quotient</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a4f701eeaea734b7b433ed9bb124aff86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerComputer&lt; Integer &gt;</type>
      <name>IC</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a68f2f677d86090e8a4db69d45418d7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::IntegerParamType</type>
      <name>IntegerParamType</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a259312737663e3ce0a52753c33a8e7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::Vector2I</type>
      <name>Vector2I</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>aaf4e65941ed77bb2850e8610d11d5309</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::Point2I</type>
      <name>Point2I</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a79722a50034fffe539763e0d7b92637d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::Point2I</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>ad768743d80bcf0a89e9a339818a5d98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StandardDSLQ0</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a58ae50d3f60164034d24b9a1bc3a369d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StandardDSLQ0</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a8cc9f1185183aff322d22e31d2277058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StandardDSLQ0</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>ad8cb8f333ad229ae2fc4d0d714b6167e</anchor>
      <arglist>(const StandardDSLQ0 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>StandardDSLQ0 &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>abf97dfb6cba7b8efbead1ce6a9bf5d3d</anchor>
      <arglist>(const StandardDSLQ0 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StandardDSLQ0</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a0479ce0e180e25ddf7e9727bddf407a6</anchor>
      <arglist>(Fraction aSlope, IntegerParamType aMu)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StandardDSLQ0</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a194f0fa1bcf886a27c4afbc818dfb25b</anchor>
      <arglist>(IntegerParamType a1, IntegerParamType b1, IntegerParamType mu1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>af289e4256567a45c3a2e094075cec014</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>slope</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>aa0e6f2a61969496eb535cd98e615c1b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Integer &amp;</type>
      <name>mu</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>ae825d370c1437dc93ad64ba25d79b8ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>mup</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>aefa5c4b81b5b2eba57433e9fc371a9e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>a</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a231c27a961a80c69ed5b5b62b692ded6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>b</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a4a8e97036361bdbc75e11ca1256aac80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector2I</type>
      <name>v</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a15199726ea8ebee6b00c79a8e17f890e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a87f6827c0497501c7ee26a6cdfe66a16</anchor>
      <arglist>(Point p) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a327b9cb1d938b08eb6bf609414b30623</anchor>
      <arglist>(Point p) const </arglist>
    </member>
    <member kind="function">
      <type>const Pattern&lt; Fraction &gt; &amp;</type>
      <name>pattern</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a8afc324a627c22423583a0672612a946</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>r</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>ab38e8abf569efbac70b65ef468d91380</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>U</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>ad30cac5c4af94193b774bb94a7c6666f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>L</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a633a5546f3941f055b385587f294129b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>lowestY</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a7b4802d1b13af0a5f100c67b6cbd8216</anchor>
      <arglist>(IntegerParamType x) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>uppermostY</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a0aa90c71bf7d2d8063fff0a68bd53432</anchor>
      <arglist>(IntegerParamType x) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>lowestX</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a57d6d71f4ca85a6fc7b60641be36f3a1</anchor>
      <arglist>(IntegerParamType y) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>uppermostX</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a4377810c06a4b713494ed4fa9881c5fa</anchor>
      <arglist>(IntegerParamType y) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>before</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a1f5d130cee8f14a641bc8b27c4057c4a</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeOrEqual</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>adce77abc9ef1cfe070ce95c3859a3127</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>reversedSmartDSS</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a8c09ea4e2a63c4fc47b9d266891dbe2d</anchor>
      <arglist>(const Point &amp;A, const Point &amp;B) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>reversedSmartDSS</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a3f25fce014b2b9138d1bb22641e71162</anchor>
      <arglist>(Point U1, Point U2, const Point &amp;A, const Point &amp;B) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>DSSWithinTwoPatterns</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>aaa866fc50fd274f2d01db21430b8fe11</anchor>
      <arglist>(Point U1, Point U2, const Point &amp;A, const Point &amp;B) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>smartDSS</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>abcc7cc35477c5c4758e2f77aba905470</anchor>
      <arglist>(const Point &amp;A, const Point &amp;B) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a150b72b1b596532f1a7908a5861e2db6</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a7fced3f9e5a2d98c9940d6adb387c8bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Pattern&lt; Fraction &gt;</type>
      <name>myPattern</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a94847fb12e0a389de6aa13fa44d58536</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Integer</type>
      <name>myMu</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a9fba46995b10ca3312e51e8106c3e58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static Fraction</type>
      <name>deepest</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a07646157c75e0c61e8572754d5246ed4</anchor>
      <arglist>(Fraction f1, Fraction f2, Fraction f3)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static Fraction</type>
      <name>deepest</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a08ee4efc5a6d68d8de27e50e2ca96a1b</anchor>
      <arglist>(Fraction f1, Fraction f2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IC</type>
      <name>ic</name>
      <anchorfile>classDGtal_1_1StandardDSLQ0.html</anchorfile>
      <anchor>a6e92b4f7f1066d2ba210302e989631e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::StandardDSLQ0::ConstIterator</name>
    <filename>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</filename>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a03db0ac2bc67e261021809566c02fe54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>aaae832cc2f6520e5927f454f6d959959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a85f44027005dc6caee143fc68f99f2d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>ac9183fae9e461598271e01b5f43cedfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>af2aab34b59b0bbb14c74a184ae78a4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Point *</type>
      <name>pointer</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a8aa9b2fc95942dc3762eae984ba5e270</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Point &amp;</type>
      <name>reference</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a162e08c51575de48a71a777b6d79a581</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a8262b82664c6d5329bd051dea53bd9e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>aef331c79e529b409b38dacf54a3e5b5a</anchor>
      <arglist>(const StandardDSLQ0&lt; TFraction &gt; &amp;myDSL, const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a70c76e4056193a19430c207453caf98a</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a5091d9037a764c14bae1feebd86195a0</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a4ef2a2ae9890c5e67a3b88bf27ee300b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a4452d1cf5dceb8fec856e33b07f8bab4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a67d3829856e369b62e324d5c1dbb1f11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>ac5cc906ec10537b6203a8de2aa83b961</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>ac790a710867425edd06a7f0aafc74477</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a5c1ac15bcb45f1a514052056ea1e8c2a</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const StandardDSLQ0&lt; TFraction &gt; *</type>
      <name>myPtrDSL</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>a0298b9de415466d12a91a9aff5faff91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP</name>
      <anchorfile>structDGtal_1_1StandardDSLQ0_1_1ConstIterator.html</anchorfile>
      <anchor>ab0f6ab856e3e35fe8e7328d9386f5999</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SternBrocot</name>
    <filename>classDGtal_1_1SternBrocot.html</filename>
    <templarg>TInteger</templarg>
    <templarg>TQuotient</templarg>
    <class kind="class">DGtal::SternBrocot::Fraction</class>
    <class kind="struct">DGtal::SternBrocot::Node</class>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>adecb84e66d75e11fa6fcf73e9ed95d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TQuotient</type>
      <name>Quotient</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a12faf68f60e71d2bfc28fead3cca7382</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SternBrocot&lt; Integer, Quotient &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>aaeb23c5da161864e44253091a10a33fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>ae1a6e0716ee425717bbabcfbbf395b8b</anchor>
      <arglist>((CInteger&lt; Integer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a5074e8282c3838325b99169d79b2738c</anchor>
      <arglist>((CSignedInteger&lt; Quotient &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SternBrocot</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a4e7228bebf42eacea49a42efa86f2f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a4eb4cbf903aa521c446d90fbe8340056</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SternBrocot &amp;</type>
      <name>instance</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>acde0dabef2087a58fe9496cbc29c074b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>zeroOverOne</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>aae364751dbf16307df9902b155c9eead</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>oneOverZero</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a13b27eaaa746b8f67aae540503ef7d09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Fraction</type>
      <name>fraction</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>aacd18f6f56ec8a73dccbb9af3e88faa4</anchor>
      <arglist>(Integer p, Integer q, Fraction ancestor=zeroOverOne())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>display</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a52d4e1276387dce443edd23d1b074bb3</anchor>
      <arglist>(std::ostream &amp;out, const Fraction &amp;f)</arglist>
    </member>
    <member kind="variable">
      <type>Quotient</type>
      <name>nbFractions</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a3cd60240f5e34f974a893ccd7a272890</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SternBrocot</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a7f93d168f0a7810deba2bccb0951ddbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SternBrocot</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>add7263e2bd926ff043214cfa47990725</anchor>
      <arglist>(const SternBrocot &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SternBrocot &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>aad353ced7d72e58b06da77c46df8c1c2</anchor>
      <arglist>(const SternBrocot &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SternBrocot&lt; DGtal::int32_t, DGtal::int32_t &gt; *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>aa12be4311eb44d6a985ed46f74f89446</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>SternBrocot&lt; DGtal::int64_t, DGtal::int32_t &gt; *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>ae2cfd4aea2e5a8afc0458aee388a8362</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>SternBrocot&lt; DGtal::int64_t, DGtal::int64_t &gt; *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>aec0bce02297a7197af27e53d39939569</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myZeroOverOne</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a0b6cc2bfb842e41846ec46af92f72ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myOneOverZero</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>afa5b4efac73b3cb7f999e2f8e176f0cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myOneOverOne</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>a207178c9e01f5615e0710a63f60c93f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static SternBrocot *</type>
      <name>singleton</name>
      <anchorfile>classDGtal_1_1SternBrocot.html</anchorfile>
      <anchor>acdfeeaf55693f0a89a8ed0065da31914</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SternBrocot::Fraction</name>
    <filename>classDGtal_1_1SternBrocot_1_1Fraction.html</filename>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a7e9a5f5b3a5a25f41550637d71f98f9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TQuotient</type>
      <name>Quotient</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a80680e8f42907387f53609bf189dcd3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SternBrocot&lt; TInteger, TQuotient &gt;</type>
      <name>SternBrocotTree</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ae29109c5854642842f33cc7f27d5356b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SternBrocotTree::Fraction</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a8c3be28a1b819de42e5286735ffeafa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::UnsignedVersion</type>
      <name>UnsignedInteger</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a4d9838b930fce5804691e6133ea39b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Quotient, Quotient &gt;</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a03a8de61c7a0815330b5c21e4789d0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Quotient &gt;</type>
      <name>CFracSequence</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a5af97b34ba6349041b0b04f30c7d0e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputIteratorWithRankOnSequence&lt; CFracSequence, Quotient &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a137796f6390b921e8cff37fc3e01ac6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a97cb845158f62d49eee907da76a92efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a1c4a393516135f5487bd5816e045ecfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a85898d7c86af5b686b6804895f912dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ae3c7842842745c618314241d32f17031</anchor>
      <arglist>(Integer aP, Integer aQ, Fraction ancestor=SternBrocotTree::zeroOverOne())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a17b82deeb8e9be30e87ecad4bb418160</anchor>
      <arglist>(Node *sb_node=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Fraction</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aa39e61b76700bf9beeaaca6d6e5d30cd</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a1b2cb180a94b2ad116bcd52e40e7749f</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>null</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a33b3272deeca99e163f6d124512c36d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>p</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>af0b5e8eea4585c4ed590024aca5c1feb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>q</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a1527793d5e3391f9df1bbb4c2b569890</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quotient</type>
      <name>u</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a70a74ab5395670ce7b90b396fe64ba25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quotient</type>
      <name>k</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a1db3401163fdcbb4b40763e9b48c8ac9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>left</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a8c45ece0bfc52598e8f6932afa0431e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>right</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ae3a41975a817af7adad69aa86b5aa87c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>even</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a2612f56fd1d9b0db999ffa352de037a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>odd</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a69b015f5b365ade3bc34b2d7e86fd4c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>father</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>abfeab24ee19e23595bca88e4ed014027</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>father</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ab6bddfe3a033d20244e85488d8576cc2</anchor>
      <arglist>(Quotient m) const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>previousPartial</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a59bdd6ea8a1676fa4458cee82c52dddc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>inverse</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>aef307827f70088dd1c416f0f7579a652</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>partial</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ad9436add5d24970da2056448eb654cb3</anchor>
      <arglist>(Quotient kp) const </arglist>
    </member>
    <member kind="function">
      <type>Fraction</type>
      <name>reduced</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a67238effedb4f2be271e02d2b27ce688</anchor>
      <arglist>(Quotient i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a35076c49eb8db022db08704b998c68e0</anchor>
      <arglist>(const std::pair&lt; Quotient, Quotient &gt; &amp;quotient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a738d70648ca0f00217afc39ca2edd840</anchor>
      <arglist>(const std::pair&lt; Quotient, Quotient &gt; &amp;quotient)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSplit</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a77c32ea569fdf9c653cbed3b82468c85</anchor>
      <arglist>(Fraction &amp;f1, Fraction &amp;f2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSplitBerstel</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>adfc6eb0988ba7087dfa41e5c22de412e</anchor>
      <arglist>(Fraction &amp;f1, Quotient &amp;nb1, Fraction &amp;f2, Quotient &amp;nb2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCFrac</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a95412991cca8648b5fe86e320c52156b</anchor>
      <arglist>(std::vector&lt; Quotient &gt; &amp;quotients) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a028d5ac1799b8d8c6053433174e484eb</anchor>
      <arglist>(Integer p1, Integer q1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lessThan</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a1dd6da0cf9519779cf80664b79168b1a</anchor>
      <arglist>(Integer p1, Integer q1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moreThan</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a89588f9970b939533f5bfb7286356fac</anchor>
      <arglist>(Integer p1, Integer q1) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a6262d55f58fef0ac2c50cd3ca54a39df</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a483b270399f64872b37c7bf90c863e35</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a0bd57a8bca0252a04be5737bf009a101</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a1c596ff17491b13e51d76e22d20538c3</anchor>
      <arglist>(const Fraction &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a2f6ce6ac881304b6356953ced1b5f3db</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>a5a13490f47144aa0526fffd32a2f63e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>acec1228a3119e2daa726c7cac31e97a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Node *</type>
      <name>myNode</name>
      <anchorfile>classDGtal_1_1SternBrocot_1_1Fraction.html</anchorfile>
      <anchor>ab5e6a21dd39cb3e710de879ca0992418</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SternBrocot::Node</name>
    <filename>structDGtal_1_1SternBrocot_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>a32e456b6efc1259290a42e69a06e2300</anchor>
      <arglist>(Integer p1, Integer q1, Quotient u1, Quotient k1, Node *ascendant_left1, Node *ascendant_right1, Node *descendant_left1, Node *descendant_right1, Node *inverse1)</arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>a98086ffe1fee83e17fdcedb4228b46a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>q</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>a258e3d6bd35db7ea04b61137e6b2a9fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Quotient</type>
      <name>u</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>a82af845295a659ffd16ec9f675816fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Quotient</type>
      <name>k</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>a80b158fa2480907700f8a15d7d40c700</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>ascendantLeft</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>a8b9bea0f5619c26b01ef74ebe93e30fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>ascendantRight</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>a45df24f5f2053fa440342d48d58c249a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>descendantLeft</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>ae335c27e52e87c2afaeff6af941fe81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>descendantRight</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>afecc83c609cee1476bc7a0fd7e5dc84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Node *</type>
      <name>inverse</name>
      <anchorfile>structDGtal_1_1SternBrocot_1_1Node.html</anchorfile>
      <anchor>a448b626f55b99e0501787460964cf5e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CBidirectionalIteratorArchetype</name>
    <filename>structDGtal_1_1CBidirectionalIteratorArchetype.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>DGtal::CConstBidirectionalIteratorArchetype</name>
    <filename>structDGtal_1_1CConstBidirectionalIteratorArchetype.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>DGtal::CForwardIteratorArchetype</name>
    <filename>structDGtal_1_1CForwardIteratorArchetype.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>DGtal::TrueBoolFct0</name>
    <filename>structDGtal_1_1TrueBoolFct0.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1TrueBoolFct0.html</anchorfile>
      <anchor>a30913e8d399cff048ef29b5b5a2d1455</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::FalseBoolFct0</name>
    <filename>structDGtal_1_1FalseBoolFct0.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1FalseBoolFct0.html</anchorfile>
      <anchor>aaa1ffd132e277881ffa0af670c5fb93b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IdentityBoolFct1</name>
    <filename>structDGtal_1_1IdentityBoolFct1.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1IdentityBoolFct1.html</anchorfile>
      <anchor>adcf39e5a15aa778e5138d642e5b4eaa0</anchor>
      <arglist>(bool b) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NotBoolFct1</name>
    <filename>structDGtal_1_1NotBoolFct1.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1NotBoolFct1.html</anchorfile>
      <anchor>af0a8a13c7567930296a485b168ff95da</anchor>
      <arglist>(bool b) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::AndBoolFct2</name>
    <filename>structDGtal_1_1AndBoolFct2.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1AndBoolFct2.html</anchorfile>
      <anchor>a7f0676c4144d56276513aa240392f442</anchor>
      <arglist>(bool b1, bool b2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::OrBoolFct2</name>
    <filename>structDGtal_1_1OrBoolFct2.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1OrBoolFct2.html</anchorfile>
      <anchor>abda702645f2ff6a37b7895391af698d2</anchor>
      <arglist>(bool b1, bool b2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::XorBoolFct2</name>
    <filename>structDGtal_1_1XorBoolFct2.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1XorBoolFct2.html</anchorfile>
      <anchor>adddafc8667a892811eb1a6ba60632ef5</anchor>
      <arglist>(bool b1, bool b2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ImpliesBoolFct2</name>
    <filename>structDGtal_1_1ImpliesBoolFct2.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1ImpliesBoolFct2.html</anchorfile>
      <anchor>a9c49b9a0cfa31d5073d700646a2e8133</anchor>
      <arglist>(bool b1, bool b2) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MinFunctor</name>
    <filename>structDGtal_1_1MinFunctor.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1MinFunctor.html</anchorfile>
      <anchor>ad97d73c7aa88c4787237cc40d18a3f62</anchor>
      <arglist>(const T &amp;a, const T &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MaxFunctor</name>
    <filename>structDGtal_1_1MaxFunctor.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1MaxFunctor.html</anchorfile>
      <anchor>a911b213d978aac208f585c590f517154</anchor>
      <arglist>(const T &amp;a, const T &amp;b) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MinusFunctor</name>
    <filename>structDGtal_1_1MinusFunctor.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1MinusFunctor.html</anchorfile>
      <anchor>a270ecefec853ca9a89600ee9531abdeb</anchor>
      <arglist>(const T &amp;x, const T &amp;y) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::AbsFunctor</name>
    <filename>structDGtal_1_1AbsFunctor.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1AbsFunctor.html</anchorfile>
      <anchor>a9b28bfeffad91754a23f6b67314fa4a4</anchor>
      <arglist>(const T &amp;x) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultFunctor</name>
    <filename>structDGtal_1_1DefaultFunctor.html</filename>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1DefaultFunctor.html</anchorfile>
      <anchor>ac5c9b4a9ade1f24025cca746418bdfcc</anchor>
      <arglist>(const T &amp;aT) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ConstValueFunctor</name>
    <filename>classDGtal_1_1ConstValueFunctor.html</filename>
    <templarg>TValue</templarg>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ConstValueFunctor.html</anchorfile>
      <anchor>a67efe7d9cbe30af92b16c87c66771e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstValueFunctor</name>
      <anchorfile>classDGtal_1_1ConstValueFunctor.html</anchorfile>
      <anchor>af429f57df3c30ec24d07d81e1cd2f879</anchor>
      <arglist>(const Value &amp;aValue=0)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ConstValueFunctor.html</anchorfile>
      <anchor>aac19fdc0ca68650b72f51da98cdd46c0</anchor>
      <arglist>(const TInput &amp;) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myValue</name>
      <anchorfile>classDGtal_1_1ConstValueFunctor.html</anchorfile>
      <anchor>a75ce17725a14121d3b53e3a9343cfa6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CastFunctor</name>
    <filename>structDGtal_1_1CastFunctor.html</filename>
    <templarg>TOutput</templarg>
    <member kind="function">
      <type>TOutput</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1CastFunctor.html</anchorfile>
      <anchor>a863ef39a976c468d60d4120795461604</anchor>
      <arglist>(const TInput &amp;aInput) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Composer</name>
    <filename>classDGtal_1_1Composer.html</filename>
    <templarg>TFunctor1</templarg>
    <templarg>TFunctor2</templarg>
    <templarg>ReturnType</templarg>
    <member kind="function">
      <type></type>
      <name>Composer</name>
      <anchorfile>classDGtal_1_1Composer.html</anchorfile>
      <anchor>aa9c6309379cd1b9e8c2115372d887257</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Composer</name>
      <anchorfile>classDGtal_1_1Composer.html</anchorfile>
      <anchor>ac029fa339e642caed3bc4474570adadf</anchor>
      <arglist>(const TFunctor1 &amp;aF1, const TFunctor2 &amp;aF2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Composer</name>
      <anchorfile>classDGtal_1_1Composer.html</anchorfile>
      <anchor>a838a3396023c9032ebc750ea7c8f18fb</anchor>
      <arglist>(const Composer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Composer &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Composer.html</anchorfile>
      <anchor>ad189f7ebd0dbc3b7993f9485f0621b9f</anchor>
      <arglist>(const Composer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ReturnType</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Composer.html</anchorfile>
      <anchor>af413eba86aa9bc8e5e3df9a41db650bf</anchor>
      <arglist>(const TInput &amp;aInput) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TFunctor1 *</type>
      <name>myF1</name>
      <anchorfile>classDGtal_1_1Composer.html</anchorfile>
      <anchor>a80fa7237b08b46b69ea6973f59455655</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TFunctor2 *</type>
      <name>myF2</name>
      <anchorfile>classDGtal_1_1Composer.html</anchorfile>
      <anchor>a5f3379d0abbb5ae608d5c7115b1f5d02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Thresholder</name>
    <filename>classDGtal_1_1Thresholder.html</filename>
    <templarg>T</templarg>
    <templarg>isLower</templarg>
    <templarg>isEqual</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1Thresholder.html</anchorfile>
      <anchor>a64b5e9e91b26e81cd3d942f167bd5443</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1Thresholder.html</anchorfile>
      <anchor>a8ed212976ec080f50b70b4ed7406fc06</anchor>
      <arglist>((boost::EqualityComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1Thresholder.html</anchorfile>
      <anchor>a2e9b885f3461d4bb36689248f4725ece</anchor>
      <arglist>((boost::LessThanComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thresholder</name>
      <anchorfile>classDGtal_1_1Thresholder.html</anchorfile>
      <anchor>a2a981ed7068bd78a4f48cd714d64c58b</anchor>
      <arglist>(const Input &amp;aT=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Thresholder.html</anchorfile>
      <anchor>aaa7966666bf6f34b69bd641551dfe5ec</anchor>
      <arglist>(const Input &amp;aI) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Input</type>
      <name>myT</name>
      <anchorfile>classDGtal_1_1Thresholder.html</anchorfile>
      <anchor>a46e98a2bd28dd3599f0e511ac67793da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Thresholder&lt; T, false, false &gt;</name>
    <filename>structDGtal_1_1Thresholder_3_01T_00_01false_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Input</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>add2670914e859d354b5474ce79c44676</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a159d98a39df10645d71312ff5c56d224</anchor>
      <arglist>((boost::EqualityComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a6af47922607015205ecf999066d4f3a9</anchor>
      <arglist>((boost::LessThanComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thresholder</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a024acfbeac559dcb5fb6395d31efe143</anchor>
      <arglist>(const Input &amp;aT=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a4dd1400f95189a0f705be1d3efb8fac6</anchor>
      <arglist>(const Input &amp;aI) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Input</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>afd1f26042858e3388ad5aecb1d73c130</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Thresholder&lt; T, false, true &gt;</name>
    <filename>structDGtal_1_1Thresholder_3_01T_00_01false_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Input</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a9ce18049b022f313da1e234647d8aebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a0581403fbb64e463daabbbd86950177a</anchor>
      <arglist>((boost::EqualityComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a4a09749d907cd09fe292a36cedc6117c</anchor>
      <arglist>((boost::LessThanComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thresholder</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a598816de8bfe6857429e152c68ab1601</anchor>
      <arglist>(const Input &amp;aT=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>a6abf8594becae92bf81c1a2653812c51</anchor>
      <arglist>(const Input &amp;aI) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Input</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>aa2fc0562404e1ac8adc51debb4076926</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Thresholder&lt; T, true, false &gt;</name>
    <filename>structDGtal_1_1Thresholder_3_01T_00_01true_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Input</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>af7219bc564a90a29820ee5fa63d5b0a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>aea1420dfe09b33ed0d704b25c2aeec41</anchor>
      <arglist>((boost::EqualityComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>a6e83a3902fbd76887d49d41576c6134b</anchor>
      <arglist>((boost::LessThanComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thresholder</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>aae8de3c84492a5a406e9bac12f360e37</anchor>
      <arglist>(const Input &amp;aT=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>a52c8f62d399c2008f5db53fc5a68e99a</anchor>
      <arglist>(const Input &amp;aI) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Input</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>a1a30e608cb3968eadcbbbc117d4aa7bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Thresholder&lt; T, true, true &gt;</name>
    <filename>structDGtal_1_1Thresholder_3_01T_00_01true_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Input</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>a86654532cde59a110af041008eb53c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>a5f53fa5b34a7a85c8d53bb43aab7e79c</anchor>
      <arglist>((boost::EqualityComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>a614f20c7fb373f220fb56d4563030828</anchor>
      <arglist>((boost::LessThanComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Thresholder</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>a715336bf2545f970ca8286a27a7a96d6</anchor>
      <arglist>(const Input &amp;aT=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>aedbe14f5da2a2c734827b08608b14a6c</anchor>
      <arglist>(const Input &amp;aI) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Input</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1Thresholder_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>a4d3edc83d1228fe16ab4eac3681cb9c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::PredicateCombiner</name>
    <filename>structDGtal_1_1PredicateCombiner.html</filename>
    <templarg>TPredicate1</templarg>
    <templarg>TPredicate2</templarg>
    <templarg>TBinaryFunctor</templarg>
    <member kind="typedef">
      <type>TPredicate1</type>
      <name>Predicate1</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>aeaa33f982a6ba4712792c40ba287b987</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPredicate2</type>
      <name>Predicate2</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>a6eead16df1d4b0a9f196d9ffd4b26a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PredicateCombiner</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>acf019df50a9910345d378bbf84f54700</anchor>
      <arglist>(const Predicate1 &amp;pred1, const Predicate2 &amp;pred2, const TBinaryFunctor &amp;boolFunctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PredicateCombiner</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>a67dc7e5173835a489be70c882a6fc4b5</anchor>
      <arglist>(const PredicateCombiner &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PredicateCombiner &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>a1e8d323432c52b13065381a9b5945a28</anchor>
      <arglist>(const PredicateCombiner &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PredicateCombiner</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>ac7a63372f542084342cc6fde73945743</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>a3df7ad6cf65cb7b8f62cb16370197d4d</anchor>
      <arglist>(const T &amp;t) const </arglist>
    </member>
    <member kind="variable">
      <type>const Predicate1 *</type>
      <name>myPred1</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>af9ed64c45ee71288208038502be1aa88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Predicate2 *</type>
      <name>myPred2</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>a1cc19436826ce4609ef6274518186499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TBinaryFunctor *</type>
      <name>myBoolFunctor</name>
      <anchorfile>structDGtal_1_1PredicateCombiner.html</anchorfile>
      <anchor>ad8f855771c2caaecf58ab83dddb78024</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IntervalThresholder</name>
    <filename>classDGtal_1_1IntervalThresholder.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>a0d184429d7bbe357c5d2b6c4c4f166d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Thresholder&lt; T, false, true &gt;</type>
      <name>Tlow</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>a0fb28c970b705a112cc544eb8a60401d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Thresholder&lt; T, true, true &gt;</type>
      <name>Tup</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>aa123632e8cc3c1ebef9f45fcab2faac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PredicateCombiner&lt; Tlow, Tup, AndBoolFct2 &gt;</type>
      <name>CombinedPredicate</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>a07b5015bcb53028fb842b3a20daf5546</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>ad6d4d91bd7b0db248804fe9ae6e114e4</anchor>
      <arglist>((boost::EqualityComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>ac2f914e71db6f046fc8cd6383bba2f94</anchor>
      <arglist>((boost::LessThanComparable&lt; T &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntervalThresholder</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>a5b54184260d8fa950f921441bc668add</anchor>
      <arglist>(const Input &amp;low, const Input &amp;up)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>a65d5a882d5cb5c4926f1443fb233a5da</anchor>
      <arglist>(const Input &amp;aI) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Tlow</type>
      <name>myTlow</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>a473350ca6d1e2e53cdf7bfbb115ea082</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Tup</type>
      <name>myTup</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>a6c4bfb7c4eba254556ccc6abecb78919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CombinedPredicate</type>
      <name>myPred</name>
      <anchorfile>classDGtal_1_1IntervalThresholder.html</anchorfile>
      <anchor>a20e2f562779c0af438856c5bdbcff1b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Pair1st</name>
    <filename>classDGtal_1_1Pair1st.html</filename>
    <templarg>ReturnType</templarg>
    <member kind="function">
      <type>ReturnType</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Pair1st.html</anchorfile>
      <anchor>a85783c067b89d43c3e04b9b433362469</anchor>
      <arglist>(const TPair &amp;aPair) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Pair2nd</name>
    <filename>classDGtal_1_1Pair2nd.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>ReturnType</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Pair2nd.html</anchorfile>
      <anchor>a7118ee2e0f2533fa6b70f200984b7f22</anchor>
      <arglist>(const TPair &amp;aPair) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Pair1stMutator</name>
    <filename>classDGtal_1_1Pair1stMutator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>ReturnType &amp;</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Pair1stMutator.html</anchorfile>
      <anchor>a03c2ba3ef580550558afe41f7dcbcbb3</anchor>
      <arglist>(TPair &amp;aPair) const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType &amp;</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Pair1stMutator.html</anchorfile>
      <anchor>a29af4b41bcd00228ae50083f8299be66</anchor>
      <arglist>(const TPair &amp;aPair) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Pair2ndMutator</name>
    <filename>classDGtal_1_1Pair2ndMutator.html</filename>
    <templarg>ReturnType</templarg>
    <member kind="function">
      <type>ReturnType &amp;</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Pair2ndMutator.html</anchorfile>
      <anchor>a4254695b08506daed770dca70ee578a6</anchor>
      <arglist>(TPair &amp;aPair) const </arglist>
    </member>
    <member kind="function">
      <type>const ReturnType &amp;</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Pair2ndMutator.html</anchorfile>
      <anchor>a7c1bd68c1aed568d0f419628ba766e38</anchor>
      <arglist>(const TPair &amp;aPair) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Bits</name>
    <filename>structDGtal_1_1Bits.html</filename>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>bitString</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>af45e5a4b824eb374e5a5b9364af5bd45</anchor>
      <arglist>(T value, unsigned nbBits=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>mask</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>aafa0d50660ba9bd958c14f127fab861d</anchor>
      <arglist>(unsigned nthBit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getBit</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>ae74af5d4dbf2b41d41d2e54b184bf085</anchor>
      <arglist>(T key, unsigned nthBit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>firstSetBit</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a8213bbebb2f2a580aa914b97cbe734a5</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>firstUnsetBit</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a0e31d8489bc1c919ae58c6e04509d59a</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>nbSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a6c8ae97b5a23db19fe0a04429f6f61c9</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>nbSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>aafe78a64ee4e6cd918e5414ce11a043a</anchor>
      <arglist>(DGtal::uint8_t val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>nbSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>ae105062c96d1a6a815eb57f5b0549349</anchor>
      <arglist>(DGtal::uint16_t val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>nbSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>ae6175b5d11278730480652baad6fe612</anchor>
      <arglist>(DGtal::uint32_t val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>nbSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>aabd288969b001b55e06ecc77e6370297</anchor>
      <arglist>(DGtal::uint64_t val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>indexInSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a1ab59733bb317e14c5f34f5dd9c55518</anchor>
      <arglist>(DGtal::uint8_t n, unsigned int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>indexInSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>ae34d49180dca5c7dc3a7a185ad2a5b30</anchor>
      <arglist>(DGtal::uint16_t n, unsigned int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>indexInSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a208ee12f3d1ea9a9fe5d78500a5c75d8</anchor>
      <arglist>(DGtal::uint32_t n, unsigned int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>indexInSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a8efa2b72c6346f0797ec16d274e398b5</anchor>
      <arglist>(DGtal::uint64_t n, unsigned int b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>leastSignificantBit</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a7dbadaa9194c07d927fc17f7e63a4f61</anchor>
      <arglist>(DGtal::uint8_t n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>leastSignificantBit</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a4747310645a25f2c209224c45ee7d6b2</anchor>
      <arglist>(DGtal::uint16_t n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>leastSignificantBit</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a6543144fe1db1274f3a551db80796204</anchor>
      <arglist>(DGtal::uint32_t n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>leastSignificantBit</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a38cf376430ec28dfcd0e655df26f1e37</anchor>
      <arglist>(DGtal::uint64_t n)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DGtal::uint8_t</type>
      <name>myBitCount</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>aeaa20cf9579938cc4449dce9fe3273b9</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DGtal::uint8_t</type>
      <name>myLSB</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>af35b3671127ea8e517ef5dc19dd14092</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DGtal::uint8_t</type>
      <name>myIndexInSetBits</name>
      <anchorfile>structDGtal_1_1Bits.html</anchorfile>
      <anchor>a63e3a8687fa5b0c00dae2e3d590f6750</anchor>
      <arglist>[8][256]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CBackInsertable</name>
    <filename>structDGtal_1_1CBackInsertable.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::value_type</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1CBackInsertable.html</anchorfile>
      <anchor>a8a6abd5c8708674c227fce87157365ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBackInsertable.html</anchorfile>
      <anchor>a81d60bba47b9c6cac4e8b34bdcadc382</anchor>
      <arglist>(CBackInsertable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CBackInsertable.html</anchorfile>
      <anchor>a0653f71e59b137c756f826a54898ef59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CBackInsertable.html</anchorfile>
      <anchor>a99e521ed7f7889ea23c894066d4799a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>value_type</type>
      <name>myV</name>
      <anchorfile>structDGtal_1_1CBackInsertable.html</anchorfile>
      <anchor>a001f18a5ea7bdc3aa21d06f844f40a94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CBidirectionalOutputRange</name>
    <filename>structDGtal_1_1CBidirectionalOutputRange.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>DGtal::CSinglePassOutputRange</base>
    <member kind="typedef">
      <type>T::ReverseOutputIterator</type>
      <name>ReverseOutputIterator</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRange.html</anchorfile>
      <anchor>a7a43f651148dd1965b3f8461e4e1c90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::OutputIterator</type>
      <name>OutputIterator</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>aedbcee602b61dc5cf0694ffbf70152e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRange.html</anchorfile>
      <anchor>a29b32c843d7cf192b35a9127a15f62da</anchor>
      <arglist>(CBidirectionalOutputRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>a2b80046a44ff4c9421038ee2b86cd842</anchor>
      <arglist>((boost::OutputIterator&lt; OutputIterator, Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>ac3d5979e677bc69338dafe2573ea031f</anchor>
      <arglist>(CSinglePassOutputRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRange.html</anchorfile>
      <anchor>aa594cd18eb68fd57459ddee9b55c4a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ReverseOutputIterator</type>
      <name>myOutput</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRange.html</anchorfile>
      <anchor>abb8452557a4906c8c431a5fa664533b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CBidirectionalOutputRangeFromPoint</name>
    <filename>structDGtal_1_1CBidirectionalOutputRangeFromPoint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>DGtal::CBidirectionalOutputRange</base>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRangeFromPoint.html</anchorfile>
      <anchor>a71bde588813cac3cc2b14b72e6daf4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ReverseOutputIterator</type>
      <name>ReverseOutputIterator</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRangeFromPoint.html</anchorfile>
      <anchor>ae30443ad48dbd3256fdec75d512abfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::OutputIterator</type>
      <name>OutputIterator</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>aedbcee602b61dc5cf0694ffbf70152e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRangeFromPoint.html</anchorfile>
      <anchor>a88a72d6f2be5bc0d8e983052a2260788</anchor>
      <arglist>(CBidirectionalOutputRangeFromPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRange.html</anchorfile>
      <anchor>a29b32c843d7cf192b35a9127a15f62da</anchor>
      <arglist>(CBidirectionalOutputRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>a2b80046a44ff4c9421038ee2b86cd842</anchor>
      <arglist>((boost::OutputIterator&lt; OutputIterator, Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>ac3d5979e677bc69338dafe2573ea031f</anchor>
      <arglist>(CSinglePassOutputRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRangeFromPoint.html</anchorfile>
      <anchor>ab9d59158d536e6266042b4df848b6d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myPoint</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRangeFromPoint.html</anchorfile>
      <anchor>aa4e898b102a5e29a9f3794905a00bb81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ReverseOutputIterator</type>
      <name>myIt</name>
      <anchorfile>structDGtal_1_1CBidirectionalOutputRangeFromPoint.html</anchorfile>
      <anchor>ae2c2dff019cb85c99baff813c4276add</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CBidirectionalRange</name>
    <filename>structDGtal_1_1CBidirectionalRange.html</filename>
    <templarg></templarg>
    <base>DGtal::CConstBidirectionalRange</base>
    <member kind="typedef">
      <type>T::ReverseIterator</type>
      <name>ReverseIterator</name>
      <anchorfile>structDGtal_1_1CBidirectionalRange.html</anchorfile>
      <anchor>ad68340bc9e21d9a101f4c4af79cb9d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstReverseIterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a97e2f80c076e8d80c99dbe4b214b2f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CBidirectionalRange.html</anchorfile>
      <anchor>aa3c164905c057fcd7a05d51ca2fa92c1</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ReverseIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBidirectionalRange.html</anchorfile>
      <anchor>a8a69bcb120107bb5792da376ecf9b4d3</anchor>
      <arglist>(CBidirectionalRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a7ef7b0895dca5a4800a75ad32f5c18ee</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstReverseIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a5c8fdf675c846800b99f975f30ebef61</anchor>
      <arglist>(CConstBidirectionalRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>i</name>
      <anchorfile>structDGtal_1_1CBidirectionalRange.html</anchorfile>
      <anchor>a0cc209eb295e7d676cefb74d6ff1c450</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CBidirectionalRangeFromPoint</name>
    <filename>structDGtal_1_1CBidirectionalRangeFromPoint.html</filename>
    <templarg></templarg>
    <base>DGtal::CBidirectionalRange</base>
    <base>DGtal::CConstBidirectionalRangeFromPoint</base>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>adb7c0f5fb696057fd17ec383627307c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ReverseIterator</type>
      <name>ReverseIterator</name>
      <anchorfile>structDGtal_1_1CBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a08c10a9e4fba3198f73a120ea6cd9859</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstReverseIterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a97e2f80c076e8d80c99dbe4b214b2f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a013f9ade7b1a0f72f67ea479691e051a</anchor>
      <arglist>(CBidirectionalRangeFromPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CBidirectionalRange.html</anchorfile>
      <anchor>aa3c164905c057fcd7a05d51ca2fa92c1</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ReverseIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBidirectionalRange.html</anchorfile>
      <anchor>a8a69bcb120107bb5792da376ecf9b4d3</anchor>
      <arglist>(CBidirectionalRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a7ef7b0895dca5a4800a75ad32f5c18ee</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstReverseIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a5c8fdf675c846800b99f975f30ebef61</anchor>
      <arglist>(CConstBidirectionalRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a799d884a47d1865086c10504ba617f4f</anchor>
      <arglist>(CConstBidirectionalRangeFromPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>aa29c28d3d91f3e7e7f169dda16f548cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a85f52b5e2ed66a8703b6924755b632ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myPoint</name>
      <anchorfile>structDGtal_1_1CBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a10294efdba43547eb510644620cd73e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ReverseIterator</type>
      <name>myIt</name>
      <anchorfile>structDGtal_1_1CBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a2aaff9adf9771213a43cdc5e8e2fa044</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CConstBidirectionalRange</name>
    <filename>structDGtal_1_1CConstBidirectionalRange.html</filename>
    <templarg></templarg>
    <base>DGtal::CConstSinglePassRange</base>
    <member kind="typedef">
      <type>T::ConstReverseIterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a97e2f80c076e8d80c99dbe4b214b2f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a7ef7b0895dca5a4800a75ad32f5c18ee</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstReverseIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a5c8fdf675c846800b99f975f30ebef61</anchor>
      <arglist>(CConstBidirectionalRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>i</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a2e95eb6260aae4b06b26f8828ee2b63a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CConstBidirectionalRangeFromPoint</name>
    <filename>structDGtal_1_1CConstBidirectionalRangeFromPoint.html</filename>
    <templarg></templarg>
    <base>DGtal::CConstBidirectionalRange</base>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a9c311c33a29ffd319d9305e30a45644c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstReverseIterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a97e2f80c076e8d80c99dbe4b214b2f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a799d884a47d1865086c10504ba617f4f</anchor>
      <arglist>(CConstBidirectionalRangeFromPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>aa29c28d3d91f3e7e7f169dda16f548cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a7ef7b0895dca5a4800a75ad32f5c18ee</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstReverseIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRange.html</anchorfile>
      <anchor>a5c8fdf675c846800b99f975f30ebef61</anchor>
      <arglist>(CConstBidirectionalRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a90024d83ea131ca126310aca1849302b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myPoint</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a4e8b1854a2bcce71675c4a2aad10bc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T::ConstReverseIterator</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1CConstBidirectionalRangeFromPoint.html</anchorfile>
      <anchor>a5fa17e617ad72a3f0aeebc684880ff9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CConstSinglePassRange</name>
    <filename>structDGtal_1_1CConstSinglePassRange.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>i</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a67de85b9d863417f8babaac9cac6c09c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CConstSinglePassRangeFromPoint</name>
    <filename>structDGtal_1_1CConstSinglePassRangeFromPoint.html</filename>
    <templarg>T</templarg>
    <base>DGtal::CConstSinglePassRange</base>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>a5e4f1633917db356ee7b486e3562752d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>afe35a2f722ef07aa4ec089b2215caa3e</anchor>
      <arglist>(CConstSinglePassRangeFromPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>a8cdb1bc247d2aac4ba0e62c271d2330f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>a2d83de3d32cb2876eda33c6fbedd5bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myPoint</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>aa86e01b3727aaab97481b172687f95af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterartor</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>a98cbe89f3a38e0c09491ccab66a544ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Circulator</name>
    <filename>classDGtal_1_1Circulator.html</filename>
    <templarg>TIterator</templarg>
    <member kind="typedef">
      <type>TIterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a1b7295d6ee61d5b9844b2dd852bfeae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Circulator&lt; TIterator &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a7bf40c2f28bbcc0bab600f2645702c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CirculatorType</type>
      <name>Type</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a0b5129f49bfaf88f1854a75dfc24b343</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_category&lt; TIterator &gt;::type</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>aaca858bb211c69a4e6b6b59f1ed2d3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator_traits&lt; TIterator &gt;::value_type</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>ac2fc07fb3f20faa6e5c557962b81080b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator_traits&lt; TIterator &gt;::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a2ce82d8b7c2e67b2afe9b129e7a71d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator_traits&lt; TIterator &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>af54e4e3aa1c5274f0409a8e50c0ec6c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator_traits&lt; TIterator &gt;::reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a8fddd92214d0323e9a7d80012c4da7e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circulator</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a32e1a3418fc5c65263faed512519362a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circulator</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>aae92eac3c527ac02c6f0ab150a39a6f1</anchor>
      <arglist>(const Iterator &amp;i, const Iterator &amp;itb, const Iterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Circulator</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a96c7b91dd47da730dddd73f80e17721d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circulator</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a12d9c9ffc7e54b2b5260fe2423040f66</anchor>
      <arglist>(const Circulator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Circulator</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a97d113b28e4531fa2c10f4ead009c7d5</anchor>
      <arglist>(const Circulator&lt; other_Iterator &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Circulator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a49d7d43351a957491d2e8db75d99047e</anchor>
      <arglist>(const Circulator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Circulator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>ad50413dde65e1005710dc508dcd54368</anchor>
      <arglist>(const Circulator&lt; other_Iterator &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>af244bd35999a1b79a7658149929f8d05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>base</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>aa1ba4d7c92a13c31b39bbaf0d42e7c3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a3cf70fce2e14af1668160d1f6d6ecfaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a4ba9235ebf16545f9705cf32beed6855</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a0b76e67935c00412bcf304c547e4f9d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a59b50ebccc45d7c56c06c9741e64a081</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>ab5c2b23274bef7486a3a3587f00926a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>ad7545a596d0203fb78aa84744d15b05f</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>ab3d2ef3a77eea919f465bc18e740523d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a6c148dcd805f3bd42dbaa43175a0a6be</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a288795e569c8a69a6a00ddd0862d3246</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>ac1892e2bb97c68fcf32f7a673e357338</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>aab98170be74233b7841caa702c0fdee9</anchor>
      <arglist>(const OtherIterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a3b4a8ac2bb61cfc71abf658fd81400b3</anchor>
      <arglist>(const OtherIterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a6753ee91f54e24ea40d3d536f61fcad6</anchor>
      <arglist>(difference_type d)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator+</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a46f1501c7d62306cfc0459775e2a6540</anchor>
      <arglist>(difference_type d) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a86704e21f9ff553b706e632e5d7d6d27</anchor>
      <arglist>(difference_type d) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator-=</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a073f1f0726d913d4b1aa3f0d9f7cb6d4</anchor>
      <arglist>(difference_type d)</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a2675eca3b7589110d91d05a7b235ad23</anchor>
      <arglist>(const Self &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>af608cf39eba5e38ba07e40380a4723fe</anchor>
      <arglist>(difference_type d) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Iterator</type>
      <name>myCurrentIt</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>ad246fa00b9ccf03f3fe5dbca9cd31101</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Iterator</type>
      <name>myBeginIt</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>aa79701877550f2795bae501a75b067d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Iterator</type>
      <name>myEndIt</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>abf042981b249923ce8c1a42007ef26e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myFlagIsValid</name>
      <anchorfile>classDGtal_1_1Circulator.html</anchorfile>
      <anchor>a9bd1e3660cda158073154b08e3322142</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CLabel</name>
    <filename>structDGtal_1_1CLabel.html</filename>
    <templarg></templarg>
    <base>boost::Assignable</base>
  </compound>
  <compound kind="class">
    <name>DGtal::Clock</name>
    <filename>classDGtal_1_1Clock.html</filename>
    <member kind="function">
      <type>void</type>
      <name>startClock</name>
      <anchorfile>classDGtal_1_1Clock.html</anchorfile>
      <anchor>aa334c8dc915eeea5caffcb7a3a960d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stopClock</name>
      <anchorfile>classDGtal_1_1Clock.html</anchorfile>
      <anchor>a938071a46b82069ab0e66c5495ec080c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Clock</name>
      <anchorfile>classDGtal_1_1Clock.html</anchorfile>
      <anchor>a823aa10a0a905cc6bcbe902f3c8ae8e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Clock</name>
      <anchorfile>classDGtal_1_1Clock.html</anchorfile>
      <anchor>a5dfa4b9bdcbff156aa8ad00d6e359f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Clock.html</anchorfile>
      <anchor>a3e0e767a9286edc8a0ae17e1ec21c82b</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Clock.html</anchorfile>
      <anchor>a26e2a58eb06b7d05f17d5227e197f0ea</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DrawableWithDisplay3D</name>
    <filename>structDGtal_1_1DrawableWithDisplay3D.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DrawableWithDisplay3D.html</anchorfile>
      <anchor>ad7fb3989acbb7834485251b55ee86263</anchor>
      <arglist>(Display3D &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DrawableWithBoard2D</name>
    <filename>structDGtal_1_1DrawableWithBoard2D.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DrawableWithBoard2D.html</anchorfile>
      <anchor>a28f80766e9132d7d59eb22ceccee60e2</anchor>
      <arglist>(Board2D &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::TagFalse</name>
    <filename>structDGtal_1_1TagFalse.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::TagTrue</name>
    <filename>structDGtal_1_1TagTrue.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::TagUnknown</name>
    <filename>structDGtal_1_1TagUnknown.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::Negate</name>
    <filename>structDGtal_1_1Negate.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TagUnknown</type>
      <name>type</name>
      <anchorfile>structDGtal_1_1Negate.html</anchorfile>
      <anchor>a02c4c9a9a7d86834d720eae36279834d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Negate&lt; TagTrue &gt;</name>
    <filename>structDGtal_1_1Negate_3_01TagTrue_01_4.html</filename>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>type</name>
      <anchorfile>structDGtal_1_1Negate_3_01TagTrue_01_4.html</anchorfile>
      <anchor>a6372d40c3c70d14ee36c114a3b44519b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Negate&lt; TagFalse &gt;</name>
    <filename>structDGtal_1_1Negate_3_01TagFalse_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>type</name>
      <anchorfile>structDGtal_1_1Negate_3_01TagFalse_01_4.html</anchorfile>
      <anchor>a55d8ca7ae90de213fa0b0ea4948cf10d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DummyObject</name>
    <filename>structDGtal_1_1DummyObject.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>DGtal::ConstIteratorAdapter</name>
    <filename>classDGtal_1_1ConstIteratorAdapter.html</filename>
    <templarg>TIterator</templarg>
    <templarg>TLightFunctor</templarg>
    <templarg>TReturnType</templarg>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; TIterator &gt;::Type</type>
      <name>Type</name>
      <anchorfile>classDGtal_1_1ConstIteratorAdapter.html</anchorfile>
      <anchor>a81175a02461a267129ca1f438a65f5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIteratorAdapter</name>
      <anchorfile>classDGtal_1_1ConstIteratorAdapter.html</anchorfile>
      <anchor>a177e480a01bb62b7bd60fdea01585687</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIteratorAdapter</name>
      <anchorfile>classDGtal_1_1ConstIteratorAdapter.html</anchorfile>
      <anchor>af8ae7eb84e8d15e8095f7a7c502cd28d</anchor>
      <arglist>(TIterator const &amp;i, TLightFunctor f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIteratorAdapter</name>
      <anchorfile>classDGtal_1_1ConstIteratorAdapter.html</anchorfile>
      <anchor>a2ba84947fffcb396c780b9524cfd3972</anchor>
      <arglist>(ConstIteratorAdapter&lt; OtherFunctor, OtherIterator, OtherReturnType &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TLightFunctor</type>
      <name>functor</name>
      <anchorfile>classDGtal_1_1ConstIteratorAdapter.html</anchorfile>
      <anchor>ae386601e82f33e48b5aaf5a7c27c4534</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>boost::iterator_adaptor&lt; ConstIteratorAdapter&lt; TIterator, TLightFunctor, TReturnType &gt;, TIterator, TReturnType, boost::use_default, TReturnType &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1ConstIteratorAdapter.html</anchorfile>
      <anchor>a73dacad0a033857dbeaf8d94def3fff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Super::reference</type>
      <name>dereference</name>
      <anchorfile>classDGtal_1_1ConstIteratorAdapter.html</anchorfile>
      <anchor>a6b190f05d91e6df56b10cd4ce90a26d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TLightFunctor</type>
      <name>myF</name>
      <anchorfile>classDGtal_1_1ConstIteratorAdapter.html</anchorfile>
      <anchor>af0d49d0bc894379de8b4ff5ebb3a6529</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::iterator_core_access</name>
      <anchorfile>classDGtal_1_1ConstIteratorAdapter.html</anchorfile>
      <anchor>ac09f73e325921cc50ebcd96bed0f8096</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ConstRangeAdapter</name>
    <filename>classDGtal_1_1ConstRangeAdapter.html</filename>
    <templarg>TIterator</templarg>
    <templarg>TFunctor</templarg>
    <templarg>TReturnType</templarg>
    <member kind="typedef">
      <type>ConstIteratorAdapter&lt; TIterator, TFunctor, TReturnType &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>aa64040242c996bdccecef538b21acfe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReverseIterator&lt; ConstIterator &gt;</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a58f9023c686aa3ee747fec434de7a406</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Circulator&lt; ConstIterator &gt;</type>
      <name>ConstCirculator</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a4c7c41422c3057aa1b22497de30272a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReverseIterator&lt; ConstCirculator &gt;</type>
      <name>ConstReverseCirculator</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a017db6cf1acaf5a1cce923bb2d9f8676</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; ConstIterator &gt;::Difference</type>
      <name>Difference</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a70052c9ca5d85431fb1f70ee600bc236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstRangeAdapter</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>aa8168feafa091dbd2d97f911e9a34562</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite, const TFunctor &amp;aFunctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstRangeAdapter</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a1f95c5dbc4abe4a4391d2a4c2c31a2c1</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite, const TFunctor *aFunctorPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstRangeAdapter</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a0ee2f9ce9e7bc98612ebd44eeac3b1ce</anchor>
      <arglist>(const ConstRangeAdapter &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstRangeAdapter</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a7dd05cd41140b413dad3aaebe3c88d8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a12cb023e509577a601adb1dfb5c8a2af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Difference</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a8fa58480d998c35aaa49cb0e547ce4da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a3b2355c782e6f70319afe7f6fc7624e5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a21f6712ed977e1de2ec6a1297860167b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a60d28b99f5873ecb19a27a4efebaf2de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a5d14c8de1d7369ec6acfe0d8133214a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>acaffda7356ce90a7f08f4241449ecf5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>ae6b6cbcc75f6ca329dce2ffc66aec7d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstCirculator</type>
      <name>c</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>af8182cbae5d8b636904275db8b36a494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseCirculator</type>
      <name>rc</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a00f5600d134723041b7a33690d89238d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a35d3d86d294efc406bf921197fe25259</anchor>
      <arglist>((boost_concepts::ReadableIteratorConcept&lt; TIterator &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>afc4c20ebd1bfc30dcaea43527419e004</anchor>
      <arglist>((boost_concepts::BidirectionalTraversalConcept&lt; TIterator &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ConstRangeAdapter &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a5bcdf34b3b85d423aacdc5674ef5dfe7</anchor>
      <arglist>(const ConstRangeAdapter &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Difference</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a54eb87aae2c48b9d00afe66ef7044e6a</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite, RandomAccessCategory) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Difference</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>a214d71c3694c4aedda8c94afe47b9370</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite, BidirectionalCategory) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>ad42083e05bbf41f3cc33c80aef365b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>aa86bdf6637d6fd929ea927696a34dd46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TFunctor *</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>ad7547bbc52fc226b0564fc98f7ee9f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsOwned</name>
      <anchorfile>classDGtal_1_1ConstRangeAdapter.html</anchorfile>
      <anchor>af7f53b963598f200a370fb86d6ad09f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ConstRangeFromPointAdapter</name>
    <filename>classDGtal_1_1ConstRangeFromPointAdapter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TRange::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a1798f8fb47732296b1a7317453b1d509</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIteratorAdapter&lt; typename TRange::ConstIterator, TFunctor, TReturnType &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a69ceb458b17f26e261c1da64d3b73990</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstIterator &gt;</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>aeed612856b512801cd1f5b2f2e8d9102</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstRangeFromPointAdapter</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a606bdd94ea03078394b7bf743def6015</anchor>
      <arglist>(const TRange &amp;aRange, const TFunctor &amp;aFunctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstRangeFromPointAdapter</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>ab2a1ab1b51d37901235d17a9b7baa3ea</anchor>
      <arglist>(const ConstRangeFromPointAdapter &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstRangeFromPointAdapter &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>ae69852dc92cd2b5357b7b92d6644831a</anchor>
      <arglist>(const ConstRangeFromPointAdapter &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstRangeFromPointAdapter</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>aa9ca38de214c441060eb2b88510189ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a482548a53bcb8824c1f700825bde8320</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>ac70ca9f35de926b90388f5ea5639978f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a9114703e2ddffe33d2ed86ee8df819b5</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>af5782562b7fb3ef4105eefc011bab860</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a610efa51a5f7284aebdb7f4c417698e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a149235835ef4fef8d9ea2f51dfec0bae</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a291bea0faea4da1919b2712b0ece430c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a254e94df236ef86d175255aaa206cde6</anchor>
      <arglist>((CConstBidirectionalRangeFromPoint&lt; TRange &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TRange *</type>
      <name>myRangePtr</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a4479f655bc643839bb3e44bbc3203d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TFunctor *</type>
      <name>myFunctorPtr</name>
      <anchorfile>classDGtal_1_1ConstRangeFromPointAdapter.html</anchorfile>
      <anchor>a12efd2fe677bcdff624c0a69853de83c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CountedPtr</name>
    <filename>classDGtal_1_1CountedPtr.html</filename>
    <templarg>T</templarg>
    <class kind="struct">DGtal::CountedPtr::counter</class>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>af64f7f30cbbb17ea7e9c2b3de296cf69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CountedPtr</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>a84dc5ffd03555b28f1d25cd83ed74b53</anchor>
      <arglist>(T *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CountedPtr</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>ab05b5bd42c3cefde3a41444707fd5a6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CountedPtr</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>a6a4efed4b112b303b0b6024ebda6e00c</anchor>
      <arglist>(const CountedPtr &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CountedPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>a2695fcff9edc06aded66b97ea5845f99</anchor>
      <arglist>(const CountedPtr &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>ae543e3c8d694ea590385f9ca78b15606</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>af896442d1e631c934fb06cf48900c882</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>a2a5212a4f5de51e8bd98e6c8fe4bcdfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>a83d07742ea4a0857f19cc70af5c42cac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>count</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>a3d0bed4624e47dabaa8faa2461647aba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>a1cdb99a0ba0e3a6d46feb9937d1d183c</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>ad4180cceefac888a1395a5fc1195c1e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>acquire</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>a00b99e1f0f3a83e8e4f3880ae710d04d</anchor>
      <arglist>(counter *c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>release</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>afaf01784bb07127df0e9e9b2266e7698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>struct DGtal::CountedPtr::counter *</type>
      <name>myCounter</name>
      <anchorfile>classDGtal_1_1CountedPtr.html</anchorfile>
      <anchor>a26f9e4f698d2a96fa08717b3594b3581</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CountedPtr::counter</name>
    <filename>structDGtal_1_1CountedPtr_1_1counter.html</filename>
    <member kind="function">
      <type></type>
      <name>counter</name>
      <anchorfile>structDGtal_1_1CountedPtr_1_1counter.html</anchorfile>
      <anchor>a85a562147b2e27b27e35d6d67b8b5ed5</anchor>
      <arglist>(T *p=0, unsigned c=1)</arglist>
    </member>
    <member kind="variable">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>structDGtal_1_1CountedPtr_1_1counter.html</anchorfile>
      <anchor>a6219fed55fc28caf19b755d914fca5d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned</type>
      <name>count</name>
      <anchorfile>structDGtal_1_1CountedPtr_1_1counter.html</anchorfile>
      <anchor>ab1e1900727da602426b5edefa6e49594</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CowPtr</name>
    <filename>classDGtal_1_1CowPtr.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>a9314467fd82dc090e5c2b8260b0fa30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CowPtr</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>ac53e0cf984ca673a587e28d58c887677</anchor>
      <arglist>(T *p=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CowPtr</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>a29bc9068664a6c335115eb6fcbe730d9</anchor>
      <arglist>(const CowPtr &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CowPtr</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>adf1cc0c6e3612df9614e4344903c3418</anchor>
      <arglist>(const CountedPtr&lt; T &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>CowPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>a11979040659315e72802fbf62b6eb386</anchor>
      <arglist>(const CowPtr &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>ab02fc9fad2a8ec31fdede3f72a9da36f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>aab06873b8b3b75ddb8e44b9f9246693b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const T *</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>a1dc4455086ee46ed26d991d8e3f865a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>a03b01f28c3462036946ef8aa200a6180</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>aa3a164f38e6f0cd8ca3d1ffe8687cc7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>ab591c2fe440bb11221e49e7795efde45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>count</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>ad3432b4358e0378227b837918ca8975a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>ae3878cb6ab2b20ecf4375901578c6e2d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>ab58f507606cd5c03c2864d00ae862057</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>a43269a874577532ef6f1a92f00d78d56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CountedPtr&lt; T &gt;</type>
      <name>myPtr</name>
      <anchorfile>classDGtal_1_1CowPtr.html</anchorfile>
      <anchor>ae11b926326f5b8ea864773e63773ff1a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CPredicate</name>
    <filename>structDGtal_1_1CPredicate.html</filename>
    <templarg>T</templarg>
    <templarg>TElement</templarg>
    <base>boost::Assignable</base>
    <member kind="typedef">
      <type>TElement</type>
      <name>Element</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>ac5f670436a2793c76eb725d2d69bcdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>a4da1a3fad5f2a00f4279026173c8e2b9</anchor>
      <arglist>(CPredicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>a7b6bb027a92532932fbced9752da0c2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myPred</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>afba4dbce636ddaf24a28e510b3de1ce5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Element</type>
      <name>myElement</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>a63d25b6959a24841da938bb6e4839e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myBool</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>addb9a626a870fc00db68ddfde0bf919e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CQuantity</name>
    <filename>structDGtal_1_1CQuantity.html</filename>
    <templarg></templarg>
    <base>DGtal::CLabel</base>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSinglePassOutputRange</name>
    <filename>structDGtal_1_1CSinglePassOutputRange.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::OutputIterator</type>
      <name>OutputIterator</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>aedbcee602b61dc5cf0694ffbf70152e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>a2b80046a44ff4c9421038ee2b86cd842</anchor>
      <arglist>((boost::OutputIterator&lt; OutputIterator, Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>ac3d5979e677bc69338dafe2573ea031f</anchor>
      <arglist>(CSinglePassOutputRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>aca3204bf7d9608061ad88714ca4e6995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OutputIterator</type>
      <name>myOutput</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>a2a4bbdf06b98589d8945d4c5048e1f03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSinglePassOutputRangeFromPoint</name>
    <filename>structDGtal_1_1CSinglePassOutputRangeFromPoint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CConstSinglePassRangeFromPoint&lt; T, Value &gt;</base>
    <base>DGtal::CSinglePassOutputRange</base>
    <member kind="typedef">
      <type>T::OutputIterator</type>
      <name>OutputIterator</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRangeFromPoint.html</anchorfile>
      <anchor>a009fb8c15b5fdde9fd3ed77174ef54a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRangeFromPoint.html</anchorfile>
      <anchor>a3b595ed964aa4db701b5cb94b79f19d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRangeFromPoint.html</anchorfile>
      <anchor>ae57721b02dc16098e2ef942ea00d427e</anchor>
      <arglist>(CSinglePassOutputRangeFromPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>afe35a2f722ef07aa4ec089b2215caa3e</anchor>
      <arglist>(CConstSinglePassRangeFromPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>a8cdb1bc247d2aac4ba0e62c271d2330f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>a2b80046a44ff4c9421038ee2b86cd842</anchor>
      <arglist>((boost::OutputIterator&lt; OutputIterator, Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRange.html</anchorfile>
      <anchor>ac3d5979e677bc69338dafe2573ea031f</anchor>
      <arglist>(CSinglePassOutputRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRangeFromPoint.html</anchorfile>
      <anchor>a5817b05447816c1d41cfc41ba25f5ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myPoint</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRangeFromPoint.html</anchorfile>
      <anchor>a9fe5c54785597e613741375b6250a381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>OutputIterartor</type>
      <name>myIt</name>
      <anchorfile>structDGtal_1_1CSinglePassOutputRangeFromPoint.html</anchorfile>
      <anchor>a4e008c3d703da780b9567c11983c395d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSinglePassRange</name>
    <filename>structDGtal_1_1CSinglePassRange.html</filename>
    <templarg></templarg>
    <base>DGtal::CConstSinglePassRange</base>
    <member kind="typedef">
      <type>T::Iterator</type>
      <name>Iterator</name>
      <anchorfile>structDGtal_1_1CSinglePassRange.html</anchorfile>
      <anchor>a903d892fd933f3bdba0e9f1fe238c345</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSinglePassRange.html</anchorfile>
      <anchor>a103fd4b51c5db3b503265b3407efbf0b</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; Iterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSinglePassRange.html</anchorfile>
      <anchor>a489c4e1a229b902b9f4d0e980efe376e</anchor>
      <arglist>(CSinglePassRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>i</name>
      <anchorfile>structDGtal_1_1CSinglePassRange.html</anchorfile>
      <anchor>a050ae6fdfd4bbb986522bf58fee0ce99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSinglePassRangeFromPoint</name>
    <filename>structDGtal_1_1CSinglePassRangeFromPoint.html</filename>
    <templarg></templarg>
    <base>DGtal::CSinglePassRange</base>
    <base>DGtal::CConstSinglePassRangeFromPoint</base>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CSinglePassRangeFromPoint.html</anchorfile>
      <anchor>a95c3ef69beed80ff7e33167be8105f6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Iterator</type>
      <name>Iterator</name>
      <anchorfile>structDGtal_1_1CSinglePassRange.html</anchorfile>
      <anchor>a903d892fd933f3bdba0e9f1fe238c345</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSinglePassRangeFromPoint.html</anchorfile>
      <anchor>ae4def81bc7e1a7bb65e730e8a91e0af5</anchor>
      <arglist>(CSinglePassRangeFromPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSinglePassRange.html</anchorfile>
      <anchor>a103fd4b51c5db3b503265b3407efbf0b</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; Iterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSinglePassRange.html</anchorfile>
      <anchor>a489c4e1a229b902b9f4d0e980efe376e</anchor>
      <arglist>(CSinglePassRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>afe35a2f722ef07aa4ec089b2215caa3e</anchor>
      <arglist>(CConstSinglePassRangeFromPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRangeFromPoint.html</anchorfile>
      <anchor>a8cdb1bc247d2aac4ba0e62c271d2330f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CSinglePassRangeFromPoint.html</anchorfile>
      <anchor>a7114719663240b4c7913ca95a7696442</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myPoint</name>
      <anchorfile>structDGtal_1_1CSinglePassRangeFromPoint.html</anchorfile>
      <anchor>af721920893fc595a6d94ae599e8e7157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterartor</type>
      <name>myIt</name>
      <anchorfile>structDGtal_1_1CSinglePassRangeFromPoint.html</anchorfile>
      <anchor>aefd62ecc008447176030511efcb7a80d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CUnaryFunctor</name>
    <filename>structDGtal_1_1CUnaryFunctor.html</filename>
    <templarg>X</templarg>
    <templarg>A</templarg>
    <templarg>R</templarg>
    <base>boost::Assignable</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUnaryFunctor.html</anchorfile>
      <anchor>a9c5f252680e4e0b14a0c68b724656840</anchor>
      <arglist>(CUnaryFunctor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>X</type>
      <name>x</name>
      <anchorfile>structDGtal_1_1CUnaryFunctor.html</anchorfile>
      <anchor>a3fa07bdab5f81bada1dbd8406141b31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>A</type>
      <name>a</name>
      <anchorfile>structDGtal_1_1CUnaryFunctor.html</anchorfile>
      <anchor>a3bf1937b83f37925f1d0e5d626d798c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>R</type>
      <name>r</name>
      <anchorfile>structDGtal_1_1CUnaryFunctor.html</anchorfile>
      <anchor>afaa6046ddc9699fcfcb7213610736f02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IOException</name>
    <filename>classDGtal_1_1IOException.html</filename>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classDGtal_1_1IOException.html</anchorfile>
      <anchor>a750ae7311bfe1de366100a129591586b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::InputException</name>
    <filename>classDGtal_1_1InputException.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classDGtal_1_1InputException.html</anchorfile>
      <anchor>aa48f2e75d186d612c8c286de2d27c023</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ConnectivityException</name>
    <filename>classDGtal_1_1ConnectivityException.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classDGtal_1_1ConnectivityException.html</anchorfile>
      <anchor>a4dd5c3a6e93bb1985b345fd0587aaab7</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MemoryException</name>
    <filename>classDGtal_1_1MemoryException.html</filename>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classDGtal_1_1MemoryException.html</anchorfile>
      <anchor>a355214a6fdae1c37afb6d9d22a95ad49</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::InfiniteNumberException</name>
    <filename>classDGtal_1_1InfiniteNumberException.html</filename>
    <member kind="function" protection="private" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classDGtal_1_1InfiniteNumberException.html</anchorfile>
      <anchor>a133404b69004f75f55dc21cba79ab65c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::POW</name>
    <filename>classDGtal_1_1POW.html</filename>
    <templarg>X</templarg>
    <templarg>exponent</templarg>
    <member kind="enumvalue">
      <name>VALUE</name>
      <anchorfile>classDGtal_1_1POW.html</anchorfile>
      <anchor>a30862dcfb418db326ac62698b98f9e31a72c5a50cbf0f0260f330399c2f255461</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::POW&lt; X, 1 &gt;</name>
    <filename>classDGtal_1_1POW_3_01X_00_011_01_4.html</filename>
    <templarg>X</templarg>
    <member kind="enumvalue">
      <name>VALUE</name>
      <anchorfile>classDGtal_1_1POW_3_01X_00_011_01_4.html</anchorfile>
      <anchor>afe12c9aa5ca1e79103f7853a2d1f7d75a304934d661dd0f3f08991e562d74e544</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LOG2</name>
    <filename>classDGtal_1_1LOG2.html</filename>
    <templarg>X</templarg>
    <member kind="enumvalue">
      <name>VALUE</name>
      <anchorfile>classDGtal_1_1LOG2.html</anchorfile>
      <anchor>ac5539ad0a7b2040b0d750a4474d243eda1d769396dedb6a9e8214fdecdd9429b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LOG2&lt; 2 &gt;</name>
    <filename>classDGtal_1_1LOG2_3_012_01_4.html</filename>
    <member kind="enumvalue">
      <name>VALUE</name>
      <anchorfile>classDGtal_1_1LOG2_3_012_01_4.html</anchorfile>
      <anchor>ae4d7abc5187290441a60e0142f765f53abaf81e9210a583f6f052c1522fd5bd0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LOG2&lt; 1 &gt;</name>
    <filename>classDGtal_1_1LOG2_3_011_01_4.html</filename>
    <member kind="enumvalue">
      <name>VALUE</name>
      <anchorfile>classDGtal_1_1LOG2_3_011_01_4.html</anchorfile>
      <anchor>ac1137204b78aaee16797901ff88ebe16add81477e0aa85ec54049879c10d1b993</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IndexedListWithBlocks</name>
    <filename>classDGtal_1_1IndexedListWithBlocks.html</filename>
    <templarg>TValue</templarg>
    <templarg>N</templarg>
    <templarg>M</templarg>
    <class kind="struct">DGtal::IndexedListWithBlocks::AnyBlock</class>
    <class kind="union">DGtal::IndexedListWithBlocks::BlockPointer</class>
    <class kind="class">DGtal::IndexedListWithBlocks::ConstIterator</class>
    <class kind="struct">DGtal::IndexedListWithBlocks::FirstBlock</class>
    <class kind="class">DGtal::IndexedListWithBlocks::Iterator</class>
    <class kind="union">DGtal::IndexedListWithBlocks::ValueOrBlockPointer</class>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a696d1e2129dec9d464090103ea053705</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a9df6c8b2659aac6ba936e0a3628500c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>SizeType</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>afd146e4f0a5a51aba2a958e333d485f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a2a6a54e7f3cb825bc471cd7ce8d715fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a57ec434a0785d3bac7d68d75027b554f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a4f628585fe3f7ef38c28613572f26fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value *</type>
      <name>ConstPointer</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>af91154cea093ddd8feb4950544ae6a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>aaa9cafdc8f92451316409d82adbcbc8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferenceType</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>aa489a1e469971c2a76ab0df90f91cef6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a546e84a332a93cb8015ed9fcd55df279</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a5f640be16c2b0cfa2596070438417aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstReference</type>
      <name>const_reference</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a53292713da1d78731e8924fa070109cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstPointer</type>
      <name>const_pointer</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a7cc56c1cd21065cbb3015337dd915e17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SizeType</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a49a96a4b6f49aebfa2510654c3384d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a6875ebdea49b0b1d3a4f9fe7c97b5469</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>abbcf3f4cca57127c3ddfdbe7586e05b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedListWithBlocks</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a14cb0143bc2e75b14aeda63421c4476b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexedListWithBlocks</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>aae670011373502f9b78485fff4ea75ec</anchor>
      <arglist>(const IndexedListWithBlocks &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IndexedListWithBlocks &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a7a587c64874bf7de8e4c898ed0df8a6f</anchor>
      <arglist>(const IndexedListWithBlocks &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndexedListWithBlocks</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a2c9e2609f653c8c3621dbea84627614d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>af7292e0c1fa22a831c83ee67803aaeb3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>aac5d05cc55b2fac971eecbdab0afb17d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>max_size</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a402ce730089f7466bb3da4560beeee80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>capacity</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>acf7771fd0f65748dc24b2ca4bcc4cd87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a7521a3176af2c16a2cec279ccf26351b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a728ed4640098309b3e2c774d96aecfe4</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>aeebb64b8a2768443b71e561b8683f52b</anchor>
      <arglist>(unsigned int idx) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a01211ca6f5065a905f1708d5b30f37c2</anchor>
      <arglist>(unsigned int idx, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a4a387beed31ee2131b8f34882a4c4bb2</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a711c731f7b127af05ab4ab036680a0aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a1537cf387dd2a5ee3129d8e0a5065176</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>ada18c3d96955ce120c8e038f5b85986a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a17ffe4bff65235c7ce20040ebe119f12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>aac18ddc386203601dd98884ac3d94c99</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a1b0c48bec8aea6049bd2af34f28463e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>a030d67b0de1db4f51c4fc35ac6ce5442</anchor>
      <arglist>(N &gt;=1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>aad55dcc951f4491ea803f7456322674c</anchor>
      <arglist>(M &gt;=2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>FirstBlock</type>
      <name>myFirstBlock</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks.html</anchorfile>
      <anchor>ae0a1905bec5830c373ea21fcc61b0c02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IndexedListWithBlocks::AnyBlock</name>
    <filename>structDGtal_1_1IndexedListWithBlocks_1_1AnyBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>AnyBlock</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1AnyBlock.html</anchorfile>
      <anchor>a352e9e28b070396f167d1bb2bd8a833d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1AnyBlock.html</anchorfile>
      <anchor>afa2368d0cdfe3c5f34fffb772a615011</anchor>
      <arglist>(unsigned int idx, unsigned int size, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>AnyBlock *</type>
      <name>erase</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1AnyBlock.html</anchorfile>
      <anchor>a9c41f4bc1ba45a0705b2c2a79fe7feb2</anchor>
      <arglist>(unsigned int idx, unsigned int size)</arglist>
    </member>
    <member kind="variable">
      <type>Value</type>
      <name>values</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1AnyBlock.html</anchorfile>
      <anchor>ae5986ae42a64d59162918e938563abb7</anchor>
      <arglist>[M]</arglist>
    </member>
    <member kind="variable">
      <type>AnyBlock *</type>
      <name>next</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1AnyBlock.html</anchorfile>
      <anchor>ad33167ce08604d15998f32e78d941a97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>DGtal::IndexedListWithBlocks::BlockPointer</name>
    <filename>unionDGtal_1_1IndexedListWithBlocks_1_1BlockPointer.html</filename>
    <member kind="variable">
      <type>FirstBlock *</type>
      <name>first</name>
      <anchorfile>unionDGtal_1_1IndexedListWithBlocks_1_1BlockPointer.html</anchorfile>
      <anchor>ae242d0efb11f319f08696752b3b7ed02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AnyBlock *</type>
      <name>any</name>
      <anchorfile>unionDGtal_1_1IndexedListWithBlocks_1_1BlockPointer.html</anchorfile>
      <anchor>a5eb7f47db0c775dc8407f077b9c5da41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IndexedListWithBlocks::ConstIterator</name>
    <filename>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</filename>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a65f436828fa7edb6f042c878319dba1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>adb997f2caae1069ba951c0da3d4bf831</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>ac4abb503d66e2898e6dbd0f54f22a70f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>Reference</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a28ec2393cf2f7268f9f86bf266b8cdb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a44f009e4861be4b707b5f851021d6af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>afa92edfa9437fea8f1bb9da09c05c383</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>ae989fa64c2d6deede282d1e591565885</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferenceType</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a41e37250271257f8a2033a88412c013d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a8f1b4346836ef3a1a6f688aff13ccce6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>ab3236be19ec3e0a0f800f802c99d16be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a18b82ac9a99fe591fe764d38f26367bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstIterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a3fc397e008eec6be55bf06c055b51e82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a47e4d7078c34c887b7071da473b6a735</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a12a0454fc1f01ed9327b6967b51c8ece</anchor>
      <arglist>(const ConstIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a9a245c6183723f18e4a0a5dd8cafe945</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a4d5eeddb462df25f2823293612e50b7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a47d155cf02fd3ee7f66e10bf52b92411</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a488e730618275e59d3a07a3cf80f098b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a981df6267159065c5d44daa5cd322220</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a338e0273339704d0389593ae2de039bd</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a9bf405126dce4ae8d1f86ccaffb79d68</anchor>
      <arglist>(DifferenceType n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a49e9ae8dae6d453b59a596f3c9cabd06</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a3782f9ce2ea1f9993abdd7ab2e9c43ac</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a441f5737ebd9fbcbaf724c14d898c4b5</anchor>
      <arglist>(const FirstBlock &amp;block, unsigned int idx)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myIdx</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>aaf29a3ba8959133aeeed351fb132d1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myNbValues</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>ad71cbcf15b74cd175b8e1348a661a2ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Value *</type>
      <name>myValues</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a8c2440830ecd66e8c0a50a1e186d8a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const AnyBlock *</type>
      <name>myNext</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a4b600601f90873acd82ca2883903f199</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>IndexedListWithBlocks</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1ConstIterator.html</anchorfile>
      <anchor>a119ddbdb61e6e0888ba7002ce4a56568</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IndexedListWithBlocks::FirstBlock</name>
    <filename>structDGtal_1_1IndexedListWithBlocks_1_1FirstBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>FirstBlock</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1FirstBlock.html</anchorfile>
      <anchor>a3c534cb15fc87b16ad6de430c4a55849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1FirstBlock.html</anchorfile>
      <anchor>a6244d28931c8d0111016cdfd24ffa96b</anchor>
      <arglist>(unsigned int idx, const Value &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1FirstBlock.html</anchorfile>
      <anchor>a294871da19bb4ef733b92902d01a166c</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1FirstBlock.html</anchorfile>
      <anchor>a51d5cf17961c9be1b4ef3205b8d8ed4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Value</type>
      <name>values</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1FirstBlock.html</anchorfile>
      <anchor>af4bdd235ec7c28fd1715d0e345744cb3</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="variable">
      <type>ValueOrBlockPointer</type>
      <name>data</name>
      <anchorfile>structDGtal_1_1IndexedListWithBlocks_1_1FirstBlock.html</anchorfile>
      <anchor>a9f315f5e611a5810deb2676775ea51e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IndexedListWithBlocks::Iterator</name>
    <filename>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</filename>
    <member kind="typedef">
      <type>Iterator</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a9af5f01cabd41965890a3bdb04d2e3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>af5b77be564b5469aa1c90b3f3789d728</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>adc8324ab6e68074731671ac9ecb077dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a344fede9e0536ea6b06498f9a45a2fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a66769b28e1c0c17d5b97b5fc0bdff2c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a7e8a13fc21028ec31062c011f9f0d9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a46577c1e4687945cf51629cc7684c3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferenceType</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a09eae837d267dd7de21cccd86855b24a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a66c88b1a93002856a45a80f8fbc92782</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>aef3c9b1dbc1b2950ac6d3e30f64f25ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a09e7ea392d8f8ffd209e9eeab8083aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>ad97019396e64fddb0671d5c4b13f7e56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>ad1e5229baefd52542b4323d67b24a453</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a30216f39b99d6d06549c9799d063cd9f</anchor>
      <arglist>(const Iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>ade488374684b706a6c542858cd4b1530</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>ae5de2eeb48e61797662a4c54c57815c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a17af73c651777d3ddd2d2518dfd8d121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>aeab21e13109df6de31f42cfba5bc7ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a683afa20e2d6efd38971fca21d4dfe96</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a783da5e93d84bdcc0c469b0c7a110590</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a28fa5b3fdf7c429fa8b13998e65b2138</anchor>
      <arglist>(DifferenceType n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a8fbc4793996dee721cf06b4f47b8ff3c</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a91ebded7e056cae59986c9d0f170db9a</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>ac2e18c49b3f6935931a53f05ddf2702d</anchor>
      <arglist>(FirstBlock &amp;block, unsigned int idx)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myIdx</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a09d3b07c4e31356d068350ca49500d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myNbValues</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a73f1af12750aeb3529dcc5254c3a2226</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Value *</type>
      <name>myValues</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a1671072a20dc4596fcb43bfc6e53c87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AnyBlock *</type>
      <name>myNext</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a21c9cd7a1f12e2d516daed67df23e32d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>IndexedListWithBlocks</name>
      <anchorfile>classDGtal_1_1IndexedListWithBlocks_1_1Iterator.html</anchorfile>
      <anchor>a119ddbdb61e6e0888ba7002ce4a56568</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>DGtal::IndexedListWithBlocks::ValueOrBlockPointer</name>
    <filename>unionDGtal_1_1IndexedListWithBlocks_1_1ValueOrBlockPointer.html</filename>
    <member kind="variable">
      <type>Value</type>
      <name>lastValue</name>
      <anchorfile>unionDGtal_1_1IndexedListWithBlocks_1_1ValueOrBlockPointer.html</anchorfile>
      <anchor>a302bd9c89ed39c2cdceb7ba261c646a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>AnyBlock *</type>
      <name>nextBlock</name>
      <anchorfile>unionDGtal_1_1IndexedListWithBlocks_1_1ValueOrBlockPointer.html</anchorfile>
      <anchor>a94c9dea6b4ca16a73677040b01986666</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::InputIteratorWithRankOnSequence</name>
    <filename>classDGtal_1_1InputIteratorWithRankOnSequence.html</filename>
    <templarg>TSequence</templarg>
    <templarg>TRank</templarg>
    <member kind="typedef">
      <type>TSequence</type>
      <name>Sequence</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a6c40b637d3f2b1c0846309d9d7bf42bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TRank</type>
      <name>Rank</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>aba2a24b5e8896ad67c157abedf20a3f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InputIteratorWithRankOnSequence&lt; Sequence, Rank &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a2c96dda6ac3bdbbc498416870253bd9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sequence::value_type</type>
      <name>SequenceValue</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>abf87bc5d602eb57a1721d295fb51c4f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; SequenceValue, Rank &gt;</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>acf255a4f315b2828c82bb0760a9da156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sequence::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a9395a2f1f272a52d016668197be57a78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a7c968609536c3bec72db9fd0b56874fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a72bc046d88641fc4fbbf0abb60ccebbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sequence::size_type</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a7bd9f265dab75d9ca268c5b933d3acd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Sequence::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>adbe7ee500cf9ed8169c4f9f89b809a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>ae2ea97b1657fbaedb8be0f7ba206eec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a35b7a51f28d3e580b7254b56f9f9ba84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const reference</type>
      <name>const_reference</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>af7364bcdbba4c2d6ec2992abdaa06404</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>aafb8c8f45afc48b4da5f8680ab716331</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a02152b2cfbfb6358581eb247d384fdfd</anchor>
      <arglist>((boost::Sequence&lt; TSequence &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>accaa5c93f66129277a434b4e2209b827</anchor>
      <arglist>((CInteger&lt; TRank &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InputIteratorWithRankOnSequence</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a494000d1fd1dffdca440fef610286812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InputIteratorWithRankOnSequence</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a9b7490c199d43d54c65619ab6def7107</anchor>
      <arglist>(const Sequence &amp;seq, ConstIterator it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InputIteratorWithRankOnSequence</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a921f0826022c5c145bcedb8dc57183ba</anchor>
      <arglist>(Sequence *ptrSeq, ConstIterator it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InputIteratorWithRankOnSequence</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>ae666445d583acc3ca9fe26fab6c58824</anchor>
      <arglist>(const CountedPtr&lt; Sequence &gt; &amp;ptrSeq, ConstIterator it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InputIteratorWithRankOnSequence</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a0a7bdc59d2e26655e3660db6e706ac2a</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a01ea88523151f4a3a3ea735f790f0c0b</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a831b1b8f6c64299d0a0fd39939159d90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a57abecd395e5ec454a34e293530d4aa0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a5718186dd730b94e489d5a61f436eb07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>adbb3ebc779d21ff9ba096e9155c56d40</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>ab561a0270c1d42f0523cc5cf6b057827</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a98c5de17c66418e777286dd7b5a5577b</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>af8054b6d4b322fac1893af9413617c18</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a8fc1ae3afb81e014f4009e64bd5a15d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InputIteratorWithRankOnSequence</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>ab6ecb1417e3851744c3bd421b3f8b4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CountedPtr&lt; Sequence &gt;</type>
      <name>mySequence</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>adfcdb2f453275d117143dbbd8e66d802</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myIterator</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>a5d1b7cb9c6c5523e18092b7dab08c3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myTmpValue</name>
      <anchorfile>classDGtal_1_1InputIteratorWithRankOnSequence.html</anchorfile>
      <anchor>aca5acf15c3c0c02441d6edee23a7d37a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IteratorAdapter</name>
    <filename>classDGtal_1_1IteratorAdapter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorAdapter&lt; TIterator, TFunctor, TReturnType &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>a66448fcca7a768b9e990ce1d6db378c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; TFunctor, TIterator, TReturnType &amp;, TReturnType &gt;</type>
      <name>Parent</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>a8bf753d74627ac4c4ea5011b042182a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IteratorAdapter</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>ac8e0309b2d0dcd86217cdd936e9bb22e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IteratorAdapter</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>abd6d75cd63c66f647215a8d3bb8291bf</anchor>
      <arglist>(const TIterator &amp;iter, TFunctor func)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IteratorAdapter</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>ab06f56b055bf8162cef37d0f48414a42</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IteratorAdapter</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>ac667b40dbd7947a058f3b7a82010d86d</anchor>
      <arglist>(const Parent &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>aee8f99971ac9d1231b54ce1835e3413e</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>a1a46a69cbea4c22ddda68ab883ba4f05</anchor>
      <arglist>(const Parent &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IteratorAdapter</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>a00e1a3cf7510ea8fb1b1ffadfec025d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1IteratorAdapter.html</anchorfile>
      <anchor>aadd00fb0e16cc326dec27d675d9f001a</anchor>
      <arglist>((boost_concepts::LvalueIteratorConcept&lt; TIterator &gt;))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorType</name>
    <filename>structDGtal_1_1IteratorType.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::CirculatorType</name>
    <filename>structDGtal_1_1CirculatorType.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::ForwardCategory</name>
    <filename>structDGtal_1_1ForwardCategory.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::BidirectionalCategory</name>
    <filename>structDGtal_1_1BidirectionalCategory.html</filename>
    <base>DGtal::ForwardCategory</base>
  </compound>
  <compound kind="struct">
    <name>DGtal::RandomAccessCategory</name>
    <filename>structDGtal_1_1RandomAccessCategory.html</filename>
    <base>DGtal::BidirectionalCategory</base>
  </compound>
  <compound kind="struct">
    <name>DGtal::IsCirculator</name>
    <filename>structDGtal_1_1IsCirculator.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1IsCirculator.html</anchorfile>
      <anchor>ab807a39c3207118730602a1932305263</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorType</name>
    <filename>structDGtal_1_1IteratorCirculatorType.html</filename>
    <templarg>IC</templarg>
    <member kind="typedef">
      <type>detail::IteratorCirculatorTypeImpl&lt; IsCirculator&lt; IC &gt;::value &gt;::Type</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorType.html</anchorfile>
      <anchor>a3ace0d9aeda7cf37431e98eb908f0484</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits.html</filename>
    <templarg>C</templarg>
    <member kind="typedef">
      <type>C</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits.html</anchorfile>
      <anchor>a64240056ee69735508bbc7d9deb7d97b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits&lt; std::forward_iterator_tag &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits_3_01std_1_1forward__iterator__tag_01_4.html</filename>
    <member kind="typedef">
      <type>ForwardCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits_3_01std_1_1forward__iterator__tag_01_4.html</anchorfile>
      <anchor>a7856f4483da2f957c749a8ce57ccc60e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits&lt; std::bidirectional_iterator_tag &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits_3_01std_1_1bidirectional__iterator__tag_01_4.html</filename>
    <member kind="typedef">
      <type>BidirectionalCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits_3_01std_1_1bidirectional__iterator__tag_01_4.html</anchorfile>
      <anchor>ae19bb0e034160e036de2d5e8f04dc4dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits&lt; std::random_access_iterator_tag &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits_3_01std_1_1random__access__iterator__tag_01_4.html</filename>
    <member kind="typedef">
      <type>RandomAccessCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits_3_01std_1_1random__access__iterator__tag_01_4.html</anchorfile>
      <anchor>aebd33cf522d070595ef9e3961dc79f2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits&lt; boost::forward_traversal_tag &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1forward__traversal__tag_01_4.html</filename>
    <member kind="typedef">
      <type>ForwardCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1forward__traversal__tag_01_4.html</anchorfile>
      <anchor>acc6f53408df548ed9139ac78100d8b21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits&lt; boost::bidirectional_traversal_tag &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1bidirectional__traversal__tag_01_4.html</filename>
    <member kind="typedef">
      <type>BidirectionalCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1bidirectional__traversal__tag_01_4.html</anchorfile>
      <anchor>aa205fa5c7ed697e55b2bac4581cb0158</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits&lt; boost::random_access_traversal_tag &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1random__access__traversal__tag_01_4.html</filename>
    <member kind="typedef">
      <type>RandomAccessCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1random__access__traversal__tag_01_4.html</anchorfile>
      <anchor>ad4186529d5ec27984244286cf432707a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits&lt; boost::detail::iterator_category_with_traversal&lt; std::input_iterator_tag, boost::forward_traversal_tag &gt; &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1detail_1_1iterator__category__with__trav7c3e00e2eb7908d2ae91f03c79a71172.html</filename>
    <member kind="typedef">
      <type>ForwardCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1detail_1_1iterator__category__with__trav7c3e00e2eb7908d2ae91f03c79a71172.html</anchorfile>
      <anchor>a96dc58890037834413e3785da6f85102</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits&lt; boost::detail::iterator_category_with_traversal&lt; std::input_iterator_tag, boost::bidirectional_traversal_tag &gt; &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1detail_1_1iterator__category__with__trav8d48ed628c0166e9654f17f910e91a4c.html</filename>
    <member kind="typedef">
      <type>BidirectionalCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1detail_1_1iterator__category__with__trav8d48ed628c0166e9654f17f910e91a4c.html</anchorfile>
      <anchor>a8453d872a4ca616d5b03579bc5cad320</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTagTraits&lt; boost::detail::iterator_category_with_traversal&lt; std::input_iterator_tag, boost::random_access_traversal_tag &gt; &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1detail_1_1iterator__category__with__trave963740ba0c806f27d968227f12a68a7.html</filename>
    <member kind="typedef">
      <type>RandomAccessCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTagTraits_3_01boost_1_1detail_1_1iterator__category__with__trave963740ba0c806f27d968227f12a68a7.html</anchorfile>
      <anchor>af5eb1c0f138edfe9aa8ddc051aabb020</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTraits</name>
    <filename>structDGtal_1_1IteratorCirculatorTraits.html</filename>
    <templarg>IC</templarg>
    <member kind="typedef">
      <type>IteratorCirculatorType&lt; IC &gt;::Type</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits.html</anchorfile>
      <anchor>a3bbc7bf13468270ec8e81562d60c7d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTagTraits&lt; typename boost::iterator_category&lt; IC &gt;::type &gt;::Category</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits.html</anchorfile>
      <anchor>a433eae9612ba817ee2152c8f854857dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::value_type</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits.html</anchorfile>
      <anchor>a5b41c32239448b80a3252fe226dd8fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::difference_type</type>
      <name>Difference</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits.html</anchorfile>
      <anchor>a173aea8ad641ad158cb3ad64a0f620e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::pointer</type>
      <name>Pointer</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits.html</anchorfile>
      <anchor>ab9c7c3e4445bf661525ec3bd37528ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IC::reference</type>
      <name>Reference</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits.html</anchorfile>
      <anchor>a87712d4bc8f2edac1373c75bf3df6aec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTraits&lt; T * &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTraits_3_01T_01_5_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorType</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01_5_01_4.html</anchorfile>
      <anchor>a5f75bb2caf118db2819667ce1c09b059</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RandomAccessCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01_5_01_4.html</anchorfile>
      <anchor>a85c6db7563c8b49d9a335dd1dbd30320</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01_5_01_4.html</anchorfile>
      <anchor>a1ac29c3234c1f0e372a81865a90042c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>Difference</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01_5_01_4.html</anchorfile>
      <anchor>a9072e44fa640ca876cd252abe04a9adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01_5_01_4.html</anchorfile>
      <anchor>a0258e13eb918f2777458f1e685e5cbce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01_5_01_4.html</anchorfile>
      <anchor>a36e96d29ef4a71457cc336ecd5347681</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IteratorCirculatorTraits&lt; T const * &gt;</name>
    <filename>structDGtal_1_1IteratorCirculatorTraits_3_01T_01const_01_5_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorType</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01const_01_5_01_4.html</anchorfile>
      <anchor>a53e1a6bfcbcc30a7e063187b6f0ca2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RandomAccessCategory</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01const_01_5_01_4.html</anchorfile>
      <anchor>a9b8dbe0060966686a7508355de970e39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01const_01_5_01_4.html</anchorfile>
      <anchor>aaa1c98a892383b6df279864923e2ed9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>Difference</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01const_01_5_01_4.html</anchorfile>
      <anchor>a146458b3b970fbb9f36df1f56fc6aa7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const *</type>
      <name>Pointer</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01const_01_5_01_4.html</anchorfile>
      <anchor>a139d573fa21165a2319f787027121422</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const &amp;</type>
      <name>Reference</name>
      <anchorfile>structDGtal_1_1IteratorCirculatorTraits_3_01T_01const_01_5_01_4.html</anchorfile>
      <anchor>a9ca5052a1e6874223587d28264eb2311</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LabelledMap</name>
    <filename>classDGtal_1_1LabelledMap.html</filename>
    <templarg>TData</templarg>
    <templarg>L</templarg>
    <templarg>TWord</templarg>
    <templarg>N</templarg>
    <templarg>M</templarg>
    <class kind="struct">DGtal::LabelledMap::__AnyBlock</class>
    <class kind="struct">DGtal::LabelledMap::__FirstBlock</class>
    <class kind="class">DGtal::LabelledMap::BlockConstIterator</class>
    <class kind="class">DGtal::LabelledMap::BlockIterator</class>
    <class kind="union">DGtal::LabelledMap::BlockPointer</class>
    <class kind="class">DGtal::LabelledMap::ConstIterator</class>
    <class kind="union">DGtal::LabelledMap::DataOrBlockPointer</class>
    <class kind="class">DGtal::LabelledMap::KeyCompare</class>
    <class kind="class">DGtal::LabelledMap::ValueCompare</class>
    <member kind="typedef">
      <type>LabelledMap&lt; TData, L, TWord, N, M &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a1a053061d88825bbe8876b7c2add8e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TData</type>
      <name>Data</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a383ad8063ec1a68cf93132652ccb1782</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TWord</type>
      <name>Word</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>adaaa263c27e607d053d80d755bb0e9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Labels&lt; L, Word &gt;</type>
      <name>LabelsType</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ae2fa12ada8e4be1054555439f801b826</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabelsType::Label</type>
      <name>Label</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ace226adaaed87a81889d01327313f041</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Label</type>
      <name>Key</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>af6b5eb5fa79557546459d9d4d117d14a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const Key, Data &gt;</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ad703fcd9f80c1eb3bbd6eb0635a55693</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LabelsType::ConstIterator</type>
      <name>LabelsConstIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a4f1d1e9407f99f2e22a02ac4abc9c014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>abdecc5c5f4d85ed96d9c77930b1fdcd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>SizeType</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a525b24115a466fe17da8675aabed2580</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ac502477e72c8571c1998f6dca6243676</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ac52d09535812c914e7702665e2bdd5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>ConstReference</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a295d3dd01140f85d863491492a0ff315</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value *</type>
      <name>ConstPointer</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>adb0eaeafab006697c5bae957247a14bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Key</type>
      <name>key_type</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a51dd5aa23f17cadaee521e7c20a52307</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>aef561aab9c1c997fc83b46941e5102f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Data</type>
      <name>data_type</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a0fdb86304f2b9b19ad20c829567d92f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Data</type>
      <name>mapped_type</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a57bb28a9066acdf6ad5c167d6c6528a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferenceType</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a0d67b90eb5d0487884fe7a4ef79c1535</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a63919117207d72c0c18662abe0954df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a34e21a8d9a0ebc25f48f44f652e6b90d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstReference</type>
      <name>const_reference</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a762a2c86c23dd08413eca4ec32a7e3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstPointer</type>
      <name>const_pointer</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a65ee5da16a90dee13ed5af908f0feae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SizeType</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a69fa7af167056da3bd6bd305c57d6c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>iterator</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a2da46c91453d8f778101dda80b8fbd55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a9209c8e5078eb76c0f27700031f04fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyCompare</type>
      <name>key_compare</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a49eb775af84a32e2813121fe58ae55b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueCompare</type>
      <name>value_compare</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a292f021fd8f36196a4e716e09d69667d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>abe576c57e23bd64547482b54bd672dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelledMap</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a11d4cc7282a4bf98213a0d3ca3683469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelledMap</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a71d8af422cfb7a774a0284c9981daad5</anchor>
      <arglist>(const LabelledMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabelledMap</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a1ff2d92ee6df4d68571d427dffe2a552</anchor>
      <arglist>(InputIterator first, InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>LabelledMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a7b54f1f408c38bdec7602abceb005f60</anchor>
      <arglist>(const LabelledMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LabelledMap</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>aa62bc8513061a3727c2740fdc4eab44a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LabelsType &amp;</type>
      <name>labels</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>aa0db8d33aa5c932ff2f2f7a144b4f353</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>acb8bfb17d61e3da7b9b3bb38f7dee772</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a66779c243477508836d9196e9ef78487</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>max_size</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a162f4c5c7468bd06295b88c10c96c9f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>capacity</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ae82dd03eb76456280e6a7af0fec00f86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KeyCompare</type>
      <name>key_comp</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a4d49dc4c0a87abc64a7b52d4307452a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ValueCompare</type>
      <name>value_comp</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a07cbc6aaca6dbda78a271174907498f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a929b20177f94656917cbe294806a3ec4</anchor>
      <arglist>(Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a2d48b789349980409e22defc8fa0fc77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>count</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>af6a95c941a595794474443e2f410b6eb</anchor>
      <arglist>(const Key &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a65a2800f14da282a540db8dd33dd8ddd</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Data &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>afb8c8ad3c4be6033e4136eb2b5ebb91c</anchor>
      <arglist>(const Key &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>fastAt</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a903032bbfd26aa4899cbda9f31c0476b</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Data &amp;</type>
      <name>fastAt</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a3b5c77a229360b256f09cc7ea6c8515b</anchor>
      <arglist>(const Key &amp;key) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Iterator, bool &gt;</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a094725a587b4250c92c0ac4284aa6b3f</anchor>
      <arglist>(const Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a00050f9ebe7d5b351329492956feb1e8</anchor>
      <arglist>(Iterator position, const Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a4b0d040c8cbc9d0e249da4c95a3f7716</anchor>
      <arglist>(InputIterator first, InputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>afe72c1f5e6dd15eb98e271cf784452f6</anchor>
      <arglist>(Iterator position)</arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a9ea9558a85e31007963442174a92d183</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ad4160e9e8717420cddb8cacbb0fa5b16</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>acac46e4f65c6434e9251630fa18956e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a74c7848e512d1212623f56f2112d7d41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a3faa99ad44abe4ed1cdabbce5ccfe66b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a51247157e2fa266ca56b47243aa75d0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Iterator, Iterator &gt;</type>
      <name>equal_range</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a24a02cb5ac1d3070f969b9c8ab53563e</anchor>
      <arglist>(const Key &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; ConstIterator, ConstIterator &gt;</type>
      <name>equal_range</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ade953295e62738aa20da16c35a3e47ba</anchor>
      <arglist>(const Key &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ab7b4c610f8d9ce901f36b7202ebd821f</anchor>
      <arglist>(const Key &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>aec1c422a8f1fef1e442d22dff3f74ea8</anchor>
      <arglist>(const Key &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>lower_bound</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>aec394fbf7dad3dcc655d870770305da1</anchor>
      <arglist>(const Key &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>lower_bound</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a827ea217229c3747f717580f79b82226</anchor>
      <arglist>(const Key &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>upper_bound</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a034b210432689ec5700704f018ecf3ca</anchor>
      <arglist>(const Key &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>upper_bound</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a5e260899d87c1e063f5893e9ca6e3599</anchor>
      <arglist>(const Key &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockClear</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a4df6646deb536bcc86c1f50cee993a18</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>blockAt</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a26f1ea6e9bdf8f625d27dcefb024147d</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="function">
      <type>const Data &amp;</type>
      <name>blockAt</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a553c02f60471c2de3e36ba971710ff7b</anchor>
      <arglist>(unsigned int idx) const </arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>blockInsert</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a1b2b1348b1ca4521198aa4670cf8ec30</anchor>
      <arglist>(unsigned int idx, unsigned int block_size, const Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockErase</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>aabc7f84342631d6ce915547f785eb4e2</anchor>
      <arglist>(unsigned int idx)</arglist>
    </member>
    <member kind="function">
      <type>BlockIterator</type>
      <name>blockBegin</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a47991e15d4c2aa64878596eb3346c6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlockIterator</type>
      <name>blockEnd</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a3ea79028de32107bd4bda3d9813c9220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BlockConstIterator</type>
      <name>blockBegin</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a4e5c3833678c98ca34c90df2a5223ef5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>BlockConstIterator</type>
      <name>blockEnd</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a189f0c8dfd4630848a21814eecf7d373</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a84d9e4a3d7a14a0656aac8c448a97961</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a939c5a86b3605978ffd28d41eaeb367a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>ac6b1020ea9a7819c5e4e807dd0286579</anchor>
      <arglist>(L &gt;=1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a603a138cbcb7f730ed4fed47402e9aef</anchor>
      <arglist>(N &gt;=0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a0edcbf461eb5b9360781c3d11fe25ee9</anchor>
      <arglist>(M &gt;=2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LabelsType</type>
      <name>myLabels</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a77211033f376a96d5740a5feca9f943b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>__FirstBlock</type>
      <name>myFirstBlock</name>
      <anchorfile>classDGtal_1_1LabelledMap.html</anchorfile>
      <anchor>a6d7a223cbcaf7ce3f3c35485e26282c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LabelledMap::__AnyBlock</name>
    <filename>structDGtal_1_1LabelledMap_1_1____AnyBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>__AnyBlock</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____AnyBlock.html</anchorfile>
      <anchor>af7683d0554d0b7f0becdb224aac967ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>insert</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____AnyBlock.html</anchorfile>
      <anchor>a4097f11b008a02c3a4a37f065b5b0443</anchor>
      <arglist>(unsigned int idx, unsigned int size, const Data &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>__AnyBlock *</type>
      <name>erase</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____AnyBlock.html</anchorfile>
      <anchor>aa30ef75bc9829f14704ddb4ef49a71d6</anchor>
      <arglist>(unsigned int idx, unsigned int size)</arglist>
    </member>
    <member kind="variable">
      <type>Data</type>
      <name>datas</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____AnyBlock.html</anchorfile>
      <anchor>a78553db1387aa63feb4c67f41abc7007</anchor>
      <arglist>[M]</arglist>
    </member>
    <member kind="variable">
      <type>__AnyBlock *</type>
      <name>next</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____AnyBlock.html</anchorfile>
      <anchor>aa4ed390ca97f53b3d490a7f8a5335511</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LabelledMap::__FirstBlock</name>
    <filename>structDGtal_1_1LabelledMap_1_1____FirstBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>__FirstBlock</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____FirstBlock.html</anchorfile>
      <anchor>a8675c1ef1d8c6b2f6828e1e5d52e7cae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>insert</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____FirstBlock.html</anchorfile>
      <anchor>ac173a729cd5d6886df6a8e3c0242131f</anchor>
      <arglist>(unsigned int idx, unsigned int size, const Data &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____FirstBlock.html</anchorfile>
      <anchor>a7a1187d6b68a8d68914798a01abdda48</anchor>
      <arglist>(unsigned int idx, unsigned int size)</arglist>
    </member>
    <member kind="variable">
      <type>Data</type>
      <name>datas</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____FirstBlock.html</anchorfile>
      <anchor>a77b85a577cc2d90b0a5ab59530586814</anchor>
      <arglist>[N]</arglist>
    </member>
    <member kind="variable">
      <type>DataOrBlockPointer</type>
      <name>data</name>
      <anchorfile>structDGtal_1_1LabelledMap_1_1____FirstBlock.html</anchorfile>
      <anchor>a5510e7038da0c24ff80c87f58b2271ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LabelledMap::BlockConstIterator</name>
    <filename>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</filename>
    <member kind="typedef">
      <type>BlockConstIterator</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a95ebf5f7fa814a05d43db9db03396d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TData</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a8384eb599b4fa836e3a6ec313cd15b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>af02998fee6d418a1789644d68a858525</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>Reference</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>ae3730d4b7db6bc217f4774667d54a886</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>ac3f5baab934d865d12ba71919c5a26e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a41de533f39f6f4a358c86a862a963cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>acbd0f4671be77acc78aee66ce950c02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferenceType</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a387f703d53f3f81d7a4ad7617a33d74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a0dc22c59b5e2fc7b8364b81d023ee0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a1ca9e932567a52d497801d7771632377</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>ac35a93b13c874af593ea541a08b032fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BlockConstIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a51defd7c86abf37efa766dbadcf38df4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockConstIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a44c377f4240f31afb3454d205722738b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockConstIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a7d61ded05d5c78738fbec9e5cacaeb81</anchor>
      <arglist>(const BlockConstIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a094630d7c87c80e0b15030ccb0927a6a</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>ab496f8c085031a5602a990ff34c6274f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a36335b55f0e0bc1b19003d7801570d1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a929739a63b4c31abe7858e939a9e6ba0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a230b94578d69e9039301791bc9960713</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a0e3461980abd3e882713f02b3fb81222</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a4b9a8609d38dd6f072efa3891d94fe5c</anchor>
      <arglist>(DifferenceType n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a9eaf21448ea447c4d99b6d8b8a733073</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>aab2bc2b550f84387064a9575a3b0de25</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BlockConstIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a076290d3ee3ddca5051414cd65acfdf7</anchor>
      <arglist>(const __FirstBlock &amp;block, unsigned int idx, unsigned int size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myIdx</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a269a9abf2fe87e9baa795726e4f264f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myNbDatas</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a1dc3ee25901ea059ecd001d8c80ad294</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Data *</type>
      <name>myDatas</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a27a3e429c092145fb20022fec6ba4f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const __AnyBlock *</type>
      <name>myNext</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>a1d12248dc44b298956ba9bdeae63d1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>LabelledMap</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockConstIterator.html</anchorfile>
      <anchor>acf67a502e3100a3f7211e1cd4012bbcc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LabelledMap::BlockIterator</name>
    <filename>classDGtal_1_1LabelledMap_1_1BlockIterator.html</filename>
    <member kind="typedef">
      <type>BlockIterator</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a71152a1a8921bd7f246368478e2690c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TData</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>af65d7242718b4020ceb4debae6143f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>aa58e1a7782d84916836a3f33af32076f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a7fba8320468b740e3f9a723d1fbc2153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a9f45d13cbe1a4980f6f771690310d361</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a83711387c26391e404c222a9bb79557a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a3b9b13475a17eb117914fe0d401cfd42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferenceType</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>aa32928eb20fa33b3b3d38844aca3a1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>ac27b7da1f57ee98325e64b22f9a50f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>ac57c57bf57968738d29b8ebacd6eb493</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a113b356a1f0f19631dea19104ba1035e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BlockIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>ae13972a0254c56e84b7cd0925e1618e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a999e38c04d153e5598b9f9d958e83b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>aeff2151da40d578e5312260f419ad4c1</anchor>
      <arglist>(const BlockIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a6f933b39f38416b880103c60a006f6fa</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a4bbe7386854a19eb8a907840dbf69b6f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a23921ebd470f44980136ee3fab31d758</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a2e365c28d1c616096061cbd6d4497222</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>ac2323c11155481c2dc1ff5acc687b43d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>aa9a6a462814229a9d0c86c928aec9062</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a988825264a32d752cd1086b0eaf8c019</anchor>
      <arglist>(DifferenceType n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>afaa4585143dbd5bc810164cc160bf943</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a00305bce0e8d5d12f190e3ade9d09821</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BlockIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a149d1bf500ffa05637985bdd5c08ee20</anchor>
      <arglist>(__FirstBlock &amp;block, unsigned int idx, unsigned int size)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myIdx</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a79cd588ff3fdfc829aeab03a870228cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myNbDatas</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>a2478d0117e5ab7362d6aa3173c7b3b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Data *</type>
      <name>myDatas</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>aae189476e43319bebcffc77582286e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>__AnyBlock *</type>
      <name>myNext</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>acde7c54e3676f4a8db76b7ef1e8fc791</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>LabelledMap</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1BlockIterator.html</anchorfile>
      <anchor>acf67a502e3100a3f7211e1cd4012bbcc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>DGtal::LabelledMap::BlockPointer</name>
    <filename>unionDGtal_1_1LabelledMap_1_1BlockPointer.html</filename>
    <member kind="variable">
      <type>__FirstBlock *</type>
      <name>first</name>
      <anchorfile>unionDGtal_1_1LabelledMap_1_1BlockPointer.html</anchorfile>
      <anchor>afb0e3dabc22347e467f3dcef41370f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>__AnyBlock *</type>
      <name>any</name>
      <anchorfile>unionDGtal_1_1LabelledMap_1_1BlockPointer.html</anchorfile>
      <anchor>a7058b90b466add1e6a0b21b1e87a7a0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LabelledMap::ConstIterator</name>
    <filename>classDGtal_1_1LabelledMap_1_1ConstIterator.html</filename>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>ac06275cdf81af559e5e05dd6dbf0aec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a9c30a28e74ab0ade2e820c2dd0a8d3f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>Reference</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a9835f5c1e943db20ee2706417c4a3d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a72c2755e81b86547c10c386cc13fcdb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a4ba678e7232e3cad6a2a3030cd6bed92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>aa7e737027c039e01d90a91b0403a4a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferenceType</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a99ee1dbd57c79f84659030d02b099248</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>abe2be3c004230c366e5830ae65280a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a34302d15d14a744c0b7346ea79988e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>ad86b9583755c9bbc9002318dd594a2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a1666b6a3014f37880e1e02153b2ebf4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>aef1e88cf3cc58bfb95538d02d4117ace</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a9f3dd0398f0ab7f344db2628607c6b17</anchor>
      <arglist>(const ConstIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a3414c2feac7f369ea00fc8ea28fcaf3b</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>ae86e6898667e78f4af1c217088b49914</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a81928b0103ec3e4917ee07042e2e6495</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>ad515530afb775b494992b0fa680f4231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>af8169c74299e4cad4e337afb2d0b0e76</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>aa8628f0051d211c81e46be35e264b613</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a391c6c6fff16cef0e3a15e199b0c7d92</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Data &amp;</type>
      <name>_data</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a1b4afa126de8ea8d9ee1d544c860d655</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Data &amp;</type>
      <name>_const_data</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a9324965822006dbf86998af28e4581dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>ad1af15cf2602aa2462bcf7cfcda32952</anchor>
      <arglist>(LabelsConstIterator lIt, BlockConstIterator bIt)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>LabelsConstIterator</type>
      <name>myLabelsIt</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a5c0d4d99bb632295a3ee1fa2a0aa4456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BlockConstIterator</type>
      <name>myBlockIt</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>a14ac16dcb04c4d60a87d0d6134dc4348</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LabelledMap</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ConstIterator.html</anchorfile>
      <anchor>acf67a502e3100a3f7211e1cd4012bbcc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>DGtal::LabelledMap::DataOrBlockPointer</name>
    <filename>unionDGtal_1_1LabelledMap_1_1DataOrBlockPointer.html</filename>
    <member kind="variable">
      <type>Data</type>
      <name>lastData</name>
      <anchorfile>unionDGtal_1_1LabelledMap_1_1DataOrBlockPointer.html</anchorfile>
      <anchor>a3150bcd6afc894eae9353c91e3f71754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>__AnyBlock *</type>
      <name>nextBlock</name>
      <anchorfile>unionDGtal_1_1LabelledMap_1_1DataOrBlockPointer.html</anchorfile>
      <anchor>adec6679ce95f9adb91a2ad1d7878c6ed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LabelledMap::KeyCompare</name>
    <filename>classDGtal_1_1LabelledMap_1_1KeyCompare.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyCompare</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1KeyCompare.html</anchorfile>
      <anchor>a7aac056b8e8381d641e5f0a72529d44d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1KeyCompare.html</anchorfile>
      <anchor>a63623073aea0430a6cbe33393d63b0d7</anchor>
      <arglist>(Key k1, Key k2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LabelledMap::ValueCompare</name>
    <filename>classDGtal_1_1LabelledMap_1_1ValueCompare.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueCompare</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ValueCompare.html</anchorfile>
      <anchor>ab4c72ae36854f81167fae6bb62cbd100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1LabelledMap_1_1ValueCompare.html</anchorfile>
      <anchor>aa94e28ff47d8523a931e4e3a21217019</anchor>
      <arglist>(const Value &amp;v1, const Value &amp;v2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Labels</name>
    <filename>classDGtal_1_1Labels.html</filename>
    <templarg>L</templarg>
    <templarg>TWord</templarg>
    <class kind="class">DGtal::Labels::ConstEnumerator</class>
    <member kind="typedef">
      <type>TWord</type>
      <name>Word</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a59c198233d996b4872f5017025ce0860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Labels&lt; L, Word &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a6f356b249a772c5d3549d6e44d902a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Label</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>aa6fd9e49cbe8f29e9b34fdc81fa4776e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Label</type>
      <name>SizeType</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a784a9b6b042c3d18aee7eeaa5b266fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstEnumerator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>aacbe8a5c4e7a99140bb65f63f0f5e4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a3c531dc10e5ecd3266e26c98e7963512</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Labels</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>abae18c8e56e33a46e89389014881c2f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Labels</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a371a6da54a8970507e2c8f1d58c1cccf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Labels</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>af8941f5b3339d69282b70ab2bee50472</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a682678d645ecdc65ed766c4de143960e</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>ad767c343bfe5c7742ca8beb7b8c3ef7e</anchor>
      <arglist>(Label l) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>set</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>aef88fd54243522eb5b9662da625fc994</anchor>
      <arglist>(Label l, bool val=true)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>reset</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>ae8ba6ba44a38cac9f58b5077fec86448</anchor>
      <arglist>(Label l)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>flip</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a5367d41d5c6df437c264382203a4fae9</anchor>
      <arglist>(Label l)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>reset</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>ac4118b6b89568e350bf915483a7a9653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>count</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a4eaef8cf7e9fd67a510aa9173d0c13be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getLabels</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a9e02aa5c0dfce7f99493d29b76c7e852</anchor>
      <arglist>(std::vector&lt; Label &gt; &amp;labels) const </arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>index</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a9e315e737750e6bf7e8b14000e1efe8a</anchor>
      <arglist>(Label l) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a80d0d83eae9388bc2aa2c6abae3de4d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a0c490668fe1c9fedcb3c4c11f6005194</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>af7a60d613ccd00e02247f8db7630fb71</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a2e63f793dff4ab3ab1d77fb03b7fbd7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SizeType</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a0eff3ae849275deecc6641df586583a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SizeType</type>
      <name>_word</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a06139741f97ead32c20325caa701fcc8</anchor>
      <arglist>(Label l)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SizeType</type>
      <name>_digit</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a7b0bb15096006f757cc7a8999e633a47</anchor>
      <arglist>(Label l)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Word</type>
      <name>_mask</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>a99de218572c43f139df9f08ee57b9d8f</anchor>
      <arglist>(Label l)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Word</type>
      <name>myLabels</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>ab14f828f83c3003ba9f8d5bb4df702fe</anchor>
      <arglist>[__DGTAL_LABELS_NBWORDS]</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1Labels.html</anchorfile>
      <anchor>afa673fa4d077d3cfa15b7048c36d0324</anchor>
      <arglist>((L &gt;=1))</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Labels::ConstEnumerator</name>
    <filename>classDGtal_1_1Labels_1_1ConstEnumerator.html</filename>
    <member kind="typedef">
      <type>ConstEnumerator</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a44605880ad4f83a45330433655e4b80f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Label</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>aebfd03a64899114e0b2dd7c58aa8aa9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a7e383dcfbc45ddf820573a989c3f6052</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Value &amp;</type>
      <name>Reference</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a8fcae9b7b5a735eb4e0b9d1d2a919e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a0786d5eb1e1cc6f67ebf41120dec775a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>aded8bb88ef80f93daf1a0edb944a75fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a5cc904db5efe34618dbc750a6732e642</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DifferenceType</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>aa47fe14969a2db907ad14173732cada7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pointer</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a057735e62f929eb14d7748a5f41af9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Reference</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a66b017662fb1c229554ca458ff772fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>ae903a3100c4a3bbee88a1955241f04c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstEnumerator</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a68d9243157f79b94b7039af7182c845d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstEnumerator</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a564af8e52d74795e7877cf9bb55dd161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstEnumerator</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>ab7d190b51e8756bfdbe121d5d59790b1</anchor>
      <arglist>(const Word *address, SizeType firstWord)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstEnumerator</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>afc6b7bd2cc4e1ccce56e7be727c4961c</anchor>
      <arglist>(const ConstEnumerator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>ad559cd45cc15b8c0aca09bf10eab1865</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>aea535d1a5afee302b4f8ccbedffa528d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>acfdd53d34074f97586f74d1927e1cd3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a63ce178475742ec123998acc7628eaf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a1ef4fce4e6b208243e19836b8f156c2a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a8afcc2b7e5ce7417df0ec71a60963828</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a1f6cd9058b5cae8d1f21b72db2447e3c</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Word *</type>
      <name>myWordAddress</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>a76efc099aadfe41e83a6cbafe0776d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Label</type>
      <name>myWordLabel</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>ae42a69ea6c950943128fe70a7a99d67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Label</type>
      <name>myLabel</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>ad42afb5ba847b13833a3ca59132672fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Word</type>
      <name>myWord</name>
      <anchorfile>classDGtal_1_1Labels_1_1ConstEnumerator.html</anchorfile>
      <anchor>ac272717029936902ec030b9ae53ab31c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::OpInSTLContainers</name>
    <filename>structDGtal_1_1OpInSTLContainers.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>erase</name>
      <anchorfile>structDGtal_1_1OpInSTLContainers.html</anchorfile>
      <anchor>aff50ede917ef5a36cad911176b1abfa2</anchor>
      <arglist>(Container &amp;aContainer, Iterator &amp;anIterator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>insert</name>
      <anchorfile>structDGtal_1_1OpInSTLContainers.html</anchorfile>
      <anchor>a484a814226a7c456e967bd23aaafde9e</anchor>
      <arglist>(Container &amp;aContainer, Iterator &amp;anIterator)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::OpInSTLContainers&lt; Container, std::reverse_iterator&lt; typename Container::iterator &gt; &gt;</name>
    <filename>structDGtal_1_1OpInSTLContainers_3_01Container_00_01std_1_1reverse__iterator_3_01typename_01Container_1_1iterator_01_4_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Container::iterator</type>
      <name>Iterator</name>
      <anchorfile>structDGtal_1_1OpInSTLContainers_3_01Container_00_01std_1_1reverse__iterator_3_01typename_01Container_1_1iterator_01_4_01_4.html</anchorfile>
      <anchor>a1bc06b53e78c30a9bfa93cfc10e32445</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; typename Container::iterator &gt;</type>
      <name>ReverseIterator</name>
      <anchorfile>structDGtal_1_1OpInSTLContainers_3_01Container_00_01std_1_1reverse__iterator_3_01typename_01Container_1_1iterator_01_4_01_4.html</anchorfile>
      <anchor>a15076074249b1a29c8af473ccd72c340</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReverseIterator</type>
      <name>erase</name>
      <anchorfile>structDGtal_1_1OpInSTLContainers_3_01Container_00_01std_1_1reverse__iterator_3_01typename_01Container_1_1iterator_01_4_01_4.html</anchorfile>
      <anchor>a4437149afb5eec069fedee633f498293</anchor>
      <arglist>(Container &amp;aContainer, ReverseIterator &amp;anIterator)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReverseIterator</type>
      <name>insert</name>
      <anchorfile>structDGtal_1_1OpInSTLContainers_3_01Container_00_01std_1_1reverse__iterator_3_01typename_01Container_1_1iterator_01_4_01_4.html</anchorfile>
      <anchor>a5724f45023fb96dd8cd0ca4830de1ca8</anchor>
      <arglist>(Container &amp;aContainer, ReverseIterator &amp;anIterator, const typename Container::value_type &amp;aValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::OrderedAlphabet</name>
    <filename>classDGtal_1_1OrderedAlphabet.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>abe76006837384dd33132453b52fd0d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>index_t</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a0001300f1c18c46943c02c53589d22eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>size_t</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a3bdd48b971df2b5d05dab3ed9aaff17f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OrderedAlphabet</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a0dc8c95c4f9fc32cfcab8dd7fe561b8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrderedAlphabet</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a1ee20b22c0ce764d48fc442021e49c2b</anchor>
      <arglist>(char first, unsigned int nb)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>orderedAlphabet</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a427f3400ae71a680975365eb00e01fd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shiftLeft</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a2861a9193385ce66e56c0e602c6b315a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shiftRight</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a4568d1c68012dfeaf77e0b23b0a2bb53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverse</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a76fb2a9e17a5c7a39ca2bcce75555a6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseAround12</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a5ed50fb9e674312a1a4daa5a05c50c6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a29632e27e454dba0feadb1855342596a</anchor>
      <arglist>(char c) const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>letter</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a486e5e778daa837f64634e6e60e5f6c9</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>less</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a20f352a29f7a92259deaac1da9c57ee7</anchor>
      <arglist>(char c1, char c2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lessOrEqual</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a407aff8c32476c2db195f408e12d1f38</anchor>
      <arglist>(char c1, char c2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a1a90ea5aa357451adf235e179ca9c5bb</anchor>
      <arglist>(char c1, char c2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstLyndonFactor</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a6fa6851408bf41586a69a69042fda3fa</anchor>
      <arglist>(size_t &amp;len, size_t &amp;nb, const std::string &amp;w, index_t s, index_t e) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>firstLyndonFactorMod</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a5d2313bf38e2273d7dde476be2878a93</anchor>
      <arglist>(size_t &amp;len, size_t &amp;nb, const std::string &amp;w, index_t s, index_t e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>duvalPP</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a475079107d61f9d63ee9ed64c2dc2c10</anchor>
      <arglist>(size_t &amp;len, size_t &amp;nb, const std::string &amp;w, index_t s, index_t e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>duvalPPMod</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a5540ac76528a05113e026bab9f1a9015</anchor>
      <arglist>(size_t &amp;len, size_t &amp;nb, const std::string &amp;w, index_t s, index_t e) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>duvalPPtoDSS</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a7137ee1fc8055f3b66ae3259c0186830</anchor>
      <arglist>(size_t &amp;len, size_t &amp;nb, unsigned int &amp;n1, unsigned int &amp;n2, unsigned int &amp;Lf1, unsigned int &amp;Lf2, const std::string &amp;w, index_t s, index_t e) const </arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nextEdge</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a2cdd30e48cd1ef8aaf7fb0517f8b3054</anchor>
      <arglist>(size_t &amp;nb_a1, size_t &amp;nb_a2, std::string &amp;w, index_t &amp;s, bool &amp;cvx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a4c8304ed53cce4b6411c4f3a5b9aacf6</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a5dd35763161bc1401c9de6d0ed4c9791</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>OrderedAlphabet</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>adfe6cfc7f6b295afca85f7c102ddc331</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>OrderedAlphabet</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>acc82a3cecfa6452501a44a7ba5d6f8dc</anchor>
      <arglist>(const OrderedAlphabet &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>OrderedAlphabet &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>aed564d832771af2222a60dc18684f102</anchor>
      <arglist>(const OrderedAlphabet &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>char</type>
      <name>myFirst</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a7e25d18f3bf996b410f478e079ff8e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myNb</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>a291a4b5bdb9a8cbbf1724c81bc0b5214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int *</type>
      <name>myOrder</name>
      <anchorfile>classDGtal_1_1OrderedAlphabet.html</anchorfile>
      <anchor>aada4c8c586db4a8ebce1b25a6708d2a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::OutputIteratorAdapter</name>
    <filename>classDGtal_1_1OutputIteratorAdapter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TIterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>ad8fe6cb16e27a674081cc07c33ae041d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>aed91d37c0b9e448885077726e05aebc1</anchor>
      <arglist>((boost::ForwardIterator&lt; Iterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>adc7cfb428bcf9b6e8aa9917c91117f99</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctor, typename iterator_traits&lt; Iterator &gt;::value_type &amp;, TInputValue &amp; &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutputIteratorAdapter</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>a7c38cc20ec5bd6dfba0759426fcb3ef9</anchor>
      <arglist>(const Iterator &amp;it, const TFunctor &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OutputIteratorAdapter</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>a4abe99a71b4f6ee819a995814c37ce6b</anchor>
      <arglist>(const OutputIteratorAdapter &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OutputIteratorAdapter</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>af6711268ba9466c9074dadde905bfa27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutputIteratorAdapter &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>a79b27ecf708e0d84088e030141aeac38</anchor>
      <arglist>(const TInputValue &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>OutputIteratorAdapter &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>aab64df752d348cd7e6251afd6639afff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutputIteratorAdapter &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>a134547b2973982dede0e5b278bb07918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutputIteratorAdapter</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>ab6b2ec0dfcaec6c7047c33e767f36a97</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myIt</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>aab6f163bcc8f15acb0667a54dd1513e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TFunctor *</type>
      <name>myF</name>
      <anchorfile>classDGtal_1_1OutputIteratorAdapter.html</anchorfile>
      <anchor>a3cae1cad1ee84c1619bb397c382c8bb9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::OwningOrAliasingPtr</name>
    <filename>classDGtal_1_1OwningOrAliasingPtr.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>a2daa73fe64c86663bce37e894123a5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>a76cf9dcc58ae373a354f13ae464bb983</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>a852c47a6f7d96c96810300ef7813a637</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwningOrAliasingPtr</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>a36361e4584b085a8a5dfc82ffeb58855</anchor>
      <arglist>(const T &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwningOrAliasingPtr</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>a104d5207c537410a3ea0298fdf5087ff</anchor>
      <arglist>(Pointer aPtr, bool isOwning=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwningOrAliasingPtr</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>ad17a2c047804ed6f2b83a76caa52f60c</anchor>
      <arglist>(const OwningOrAliasingPtr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>OwningOrAliasingPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>a4e96cdac59a0face6b6af96622f4e2c3</anchor>
      <arglist>(const OwningOrAliasingPtr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OwningOrAliasingPtr</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>aef935d28ca53e94e520d38334eaf049a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>ae00698ab80d30dd6439cdcf60100407c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>a40ba90bb6f4e4ecd4b184ab1ed642ffb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>a6d0b2c03c298442407de559d082d8505</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOwning</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>a837ee9dc20b319d566629c959277aa52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>ab439686965a7a1fc9da5c6da28634422</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>ab7b48407db3e7e91a7661f36d7d90df2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>aa2d23f0647f7b1429276f9b5234743b5</anchor>
      <arglist>((boost::CopyConstructible&lt; T &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Pointer</type>
      <name>myPtr</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>ab0129fbf6ff50f1fe2e18bd97d2ae53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsOwning</name>
      <anchorfile>classDGtal_1_1OwningOrAliasingPtr.html</anchorfile>
      <anchor>acb8817e729ea80248396dccd6dcb6953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ReverseIterator</name>
    <filename>classDGtal_1_1ReverseIterator.html</filename>
    <templarg>Iterator</templarg>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; Iterator &gt;::Type</type>
      <name>Type</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>a6704a49d5d200d7fcc694d05aacb4e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseIterator</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>a645065ec8af5e77374426f5311ae07e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseIterator</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>a5e399e6d5df138729bb1af5f5d1b7399</anchor>
      <arglist>(Iterator x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseIterator</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>a290834ac3dba40974bdefc78e403560e</anchor>
      <arglist>(ReverseIterator&lt; OtherIterator &gt; const &amp;r, typename boost::enable_if_convertible&lt; OtherIterator, Iterator &gt;::type *=0)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>boost::iterator_adaptor&lt; ReverseIterator&lt; Iterator &gt;, Iterator &gt;</type>
      <name>super_t</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>ae7ef857aab7d1a7e89f1e145c252bf33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>super_t::reference</type>
      <name>dereference</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>a70c79f015701ea83d929c5bf340daf22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>increment</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>af8291450dbe6e07babd4c1ebde248b52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>ab47578270a6573dc3878187d96dccb5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>advance</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>a996cbee8cdbb5c04ffb49495b108212b</anchor>
      <arglist>(typename super_t::difference_type n)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>super_t::difference_type</type>
      <name>distance_to</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>aa0c44e9380a00a5308e4f3c2522b89a5</anchor>
      <arglist>(ReverseIterator&lt; OtherIterator &gt; const &amp;y) const </arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::iterator_core_access</name>
      <anchorfile>classDGtal_1_1ReverseIterator.html</anchorfile>
      <anchor>ac09f73e325921cc50ebcd96bed0f8096</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SimpleConstRange</name>
    <filename>classDGtal_1_1SimpleConstRange.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>ab99e411ed9f88bed52835d17d7d50592</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstIterator &gt;</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a74d87c485688909c1ba34d048fad031c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Circulator&lt; ConstIterator &gt;</type>
      <name>ConstCirculator</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a75798175b370e9fe97bbc60746d14b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstCirculator &gt;</type>
      <name>ConstReverseCirculator</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a228a15538950f0dbafc4a999abd22ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstRange</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a95f9c01c6ee04aa2edf89563ce1859b1</anchor>
      <arglist>(const TConstIterator &amp;itb, const TConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleConstRange</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a2493b3f6722f8339c824ae6f37277141</anchor>
      <arglist>(const SimpleConstRange &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SimpleConstRange &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a5609e3516a59137bd80a2c50c1a0d39d</anchor>
      <arglist>(const SimpleConstRange &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleConstRange</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a64a6a2d7cc13ee90c182f8e27a9b1f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>ab7aba14d072b3112a409d4418edb57fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a2216dbaa293a6342f0689f0082a00038</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>abe7e2a3a5dadb24175253a5e55d9b73d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a998bd414b6c7e84ec1b30707f2879141</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a6c6fb9c55d0e3933452074bc988a524c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>afb9c50fd1133cf4325a73eedde25f503</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>aee0d47970133f5e7d1c7508933ce076e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstCirculator</type>
      <name>c</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a19cc6dad7d2ea61570d2ff9267a48074</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseCirculator</type>
      <name>rc</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a36629240ecdeebaa8429ee3fad5f3fbf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a09962a213476f5e986cc974c960cb631</anchor>
      <arglist>((boost::BidirectionalIterator&lt; TConstIterator &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>a69c98fd7babcdda843c86eccf93bc7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1SimpleConstRange.html</anchorfile>
      <anchor>aefa8127e5853e4c3b92288aed4c59fb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SimpleRandomAccessConstRangeFromPoint</name>
    <filename>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DistanceFunctor::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a6ea05c1c63ab7f424c285a18a589391b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a8795e5e07c00b939bb6ace6589b73713</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstIterator &gt;</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a7f5a0c440d543512d95e5512435091af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Circulator&lt; ConstIterator &gt;</type>
      <name>ConstCirculator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a7911eadd237e749b648a74d4b4db8c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstCirculator &gt;</type>
      <name>ConstReverseCirculator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a6ccd726880c428729dfd42715bbd69bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleRandomAccessConstRangeFromPoint</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a25ef49b80f7dbcabbba4ff9aafc4cab7</anchor>
      <arglist>(const TConstIterator &amp;itb, const TConstIterator &amp;ite, const DistanceFunctor &amp;aDistance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleRandomAccessConstRangeFromPoint</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>ac4407cb20918969c0afdb9e3f9d1b15d</anchor>
      <arglist>(const SimpleRandomAccessConstRangeFromPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SimpleRandomAccessConstRangeFromPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a819db5de32732a68d8e32b57dfda6acf</anchor>
      <arglist>(const SimpleRandomAccessConstRangeFromPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleRandomAccessConstRangeFromPoint</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a17237fe5d973b4a9aa4b0dba3da17368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a292b3592a38a8bd8bf5a4346f252d948</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>ac035c7812640539c751f53f365366852</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a455c6c57e2521b484300e5333647925f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a60bd1b3ce7fa39b8a88ddceab7975311</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a45d3cdbf3d6678be002ef8d074688ebd</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a0c84b3fb3a427992698463e21bc45dec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>ab28a7750a70f99f31c23d32c15485bc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>af689bcb7d703e14295b1660ee6b8c892</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a081dcd3921ec90b090ebd00281f7b225</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstCirculator</type>
      <name>c</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a7368b3019b9c1bff42bb28d00d859b67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseCirculator</type>
      <name>rc</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a684bd10d33e75e11ddd52aaeace82712</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a9cc418c56aaea07e80f04f2efd2fd4fc</anchor>
      <arglist>((boost::RandomAccessIterator&lt; TConstIterator &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a724a004e42520112c4d1f4b53c306126</anchor>
      <arglist>((boost::UnaryFunction&lt; DistanceFunctor, typename DistanceFunctor::Difference, typename DistanceFunctor::Point &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a3a34dc777d6c7c6403879607eae32b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>aa999c711106156debd58c6b0333de976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceFunctor</type>
      <name>myDistance</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessConstRangeFromPoint.html</anchorfile>
      <anchor>a1f6c65948e0dfa7c81b51af3d965731f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SimpleRandomAccessRangeFromPoint</name>
    <filename>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DistanceFunctor::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>ab4388f18b068eebf56abd6694dc5d20d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TIterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>ae1780d8dcf7297b8d379149ca506593f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>add5c504648ac126ae8f897f2064da44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; Iterator &gt;</type>
      <name>ReverseIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a4670d413eca3ecd6fafd899ef402d512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstIterator &gt;</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>aeaa678cba54eb073acd6a15adc2ea4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TIterator</type>
      <name>OutputIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a2a8c8435cabdaf6d0866d4f3232d5e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; Iterator &gt;</type>
      <name>ReverseOutputIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a850ba600c3c0a0c28c6034852f6977f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleRandomAccessRangeFromPoint</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>ac8a6f7af40c46fd2518e618f31620cfb</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite, const DistanceFunctor &amp;aDistance)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleRandomAccessRangeFromPoint</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>aad001875dd707eeb1d7b9bf8482fef32</anchor>
      <arglist>(const SimpleRandomAccessRangeFromPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SimpleRandomAccessRangeFromPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>af896f06bbd1cb8032019b54397381475</anchor>
      <arglist>(const SimpleRandomAccessRangeFromPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleRandomAccessRangeFromPoint</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a6a14cb3dc5104bebbb9c994d596bd0c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a05b956a2222fb40702eb606278fcb6d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a6932f939ba3e6b9a64bc6ae49cab14a7</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>ae96ea516274371213bb554ce32083d8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a3f3127761d5c822c16368719929eb07e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a557fff1bde8314477d7e30a62a00ee90</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a0538f47d0b2b69de804379552c85ca13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a864af0299e5e243d1a1a1638965e7ef6</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>aeff6def66f4bbd73d61afb27e3f23035</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>aff18defb16adc2dfa448cb0df71c5d8b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>outputIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>af7d6685787f769e93e2dafcf3daa0b36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>outputIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a76c5e14b65116d36f78448c47af35d0e</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>ReverseOutputIterator</type>
      <name>routputIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>aecf436ce3f8f0da848de0aadcd5c554b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReverseOutputIterator</type>
      <name>routputIterator</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>abd1c3e9d9d20a17000ce70edd10cfc0d</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>ReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>ad73efeb4270b6af18c1ca1c19b170a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>afc524b1581b572c9289039321ff3c083</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>ReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>ad7356fa905011a1ac92a8cfa87ad1eb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a7bdc6bd757f954b00c49c065994c8746</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a9973e52c3bea85afdbe42cc4adf0d0c4</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a255d13a2905250aad50a2d36d6790542</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>ad26c3b5262739478910c6c6cf5d5cbe7</anchor>
      <arglist>((boost::RandomAccessIterator&lt; TIterator &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a46f21decf5cccdf0178a523dbb0e1598</anchor>
      <arglist>((boost::RandomAccessIterator&lt; TConstIterator &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a128003e41f06c647df69a8a50533bb0b</anchor>
      <arglist>((boost::UnaryFunction&lt; DistanceFunctor, typename DistanceFunctor::Difference, typename DistanceFunctor::Point &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a55fa67164ec8274e91fbf17484d8e0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a1f20a58e3e35123c74fdfd934c899eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DistanceFunctor</type>
      <name>myDistance</name>
      <anchorfile>classDGtal_1_1SimpleRandomAccessRangeFromPoint.html</anchorfile>
      <anchor>a20a8f827b383502d0f7debe1b389aa55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Statistic</name>
    <filename>classDGtal_1_1Statistic.html</filename>
    <templarg>RealNumberType</templarg>
    <member kind="function">
      <type></type>
      <name>~Statistic</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>adb3faa8a0f2b3b7ae825f19d32832c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Statistic</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a563ba22cbca63fb2d280a871836d5331</anchor>
      <arglist>(bool storeSample=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Statistic</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a1b66f422a6dd977548427ffcac1f0405</anchor>
      <arglist>(const Statistic &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Statistic &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>ac2648d014019641db13e3dc7b4a5b0da</anchor>
      <arglist>(const Statistic &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Statistic &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a60584de388d805cfc23e9b64a4f0bfa4</anchor>
      <arglist>(const Statistic &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Statistic</type>
      <name>operator+</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>ac82ee1d1195f39fb3fbc3c1a02f8db44</anchor>
      <arglist>(const Statistic &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>samples</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>af8eab7827a7448faa53b48edf4a60cdc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealNumberType</type>
      <name>mean</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>aa35ae658a22217b07b37e16a312197ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealNumberType</type>
      <name>variance</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>acaece42cd3c247b434e7fe3cfd3835ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealNumberType</type>
      <name>unbiasedVariance</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>ae079a4ebd790af3ad1a69c9eb0be0162</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealNumberType</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>ad1e61cb2ab5d14ca17d0517cb97ee121</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealNumberType</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a15f4550e1adcc9c3d81e5424200fe947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealNumberType</type>
      <name>median</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>af4f9e7b5955bf29379dc855b5f52fe67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValue</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a0d63e92fef0aa315a7d104aa082c5e61</anchor>
      <arglist>(RealNumberType v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addValues</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>acded5c284d3c5ac5641d4d3166f5a920</anchor>
      <arglist>(Iter b, Iter e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a0b67ad7c59c6f03c3b052015fc2cbebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a5f1165809c78d5fdecf078143473a3af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>ab16d4093979f93d409e41cccec2d6dd5</anchor>
      <arglist>(std::ostream &amp;that_stream) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>OK</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a2be9a8cfbc4e1426fbb55452569dc298</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>mySamples</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a1948de39b2d3fecba871995a8d9ab2f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealNumberType</type>
      <name>myExp</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a6e75a3e74dc79e0d0946134988f82f14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealNumberType</type>
      <name>myExp2</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>aa16b078d5233dfde59d7cb986c38f79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealNumberType</type>
      <name>myMax</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a3336896efed907c69bd7c25f88187a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealNumberType</type>
      <name>myMin</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a29d09563af14a1149684252c1486bdd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealNumberType</type>
      <name>myMedian</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>a55f800b53771388071f434728d024d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; RealNumberType &gt;</type>
      <name>myValues</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>aa9b2cd8dea9460ef4c90c6f424a7abdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myStoreSamples</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>adb7dff2163f401015ee0ea1836ae7b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myIsTerminated</name>
      <anchorfile>classDGtal_1_1Statistic.html</anchorfile>
      <anchor>af62881bb47908aa33e2307e90d37492d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::StdMapRebinder</name>
    <filename>structDGtal_1_1StdMapRebinder.html</filename>
    <class kind="struct">DGtal::StdMapRebinder::Rebinder</class>
  </compound>
  <compound kind="struct">
    <name>DGtal::StdMapRebinder::Rebinder</name>
    <filename>structDGtal_1_1StdMapRebinder_1_1Rebinder.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; Key, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1StdMapRebinder_1_1Rebinder.html</anchorfile>
      <anchor>a79c01cd37f245a64504d6ac01eb10b0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Trace</name>
    <filename>classDGtal_1_1Trace.html</filename>
    <member kind="function">
      <type></type>
      <name>Trace</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a104c38a830bced51e59a29864a1ad15a</anchor>
      <arglist>(TraceWriter &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Trace</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a9d007b6608800ae8be46b5887f77d0ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a1cc58345eeca299cc29b43abc26948c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginBlock</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a352b7160bf722e2f0bcbee5d0bad6ef3</anchor>
      <arglist>(const std::string &amp;keyword=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>endBlock</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a6c28382776be9139655b4851fabe4dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>info</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a33ae7cd58d47594cee54640946c6b859</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>warning</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a2b3ffa7f1ec8f5e3dc7666dce25440ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>error</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a330cf110a400dbffd45c8b8e335237c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>emphase</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a14032da581210b6fdf8ee16a68cc9ab3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>progressBar</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>ae0e6b6056c649e47b340dc426680c910</anchor>
      <arglist>(const double currentValue, const double maximalValue) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>adb301a0e27c684d021269ae96e738f9e</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a5e3ba73d31a5b50544191353f95b7993</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Trace</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a62dd6af30059519863f88718183e7549</anchor>
      <arglist>(const Trace &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Trace &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a1782ad971e5d3e24c2a5b951726d2bff</anchor>
      <arglist>(const Trace &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myCurrentLevel</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a6d7a9f1200b6b39051a5e8af1bf9d462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>myCurrentPrefix</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a6371a9b7f0be86220db1bd57dea292c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::stack&lt; std::string &gt;</type>
      <name>myKeywordStack</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a734a9bb777f9c6c2107b594bc9a70e3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TraceWriter &amp;</type>
      <name>myWriter</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>af4c928bba1746470e05596ae516c9ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::stack&lt; Clock * &gt;</type>
      <name>myClockStack</name>
      <anchorfile>classDGtal_1_1Trace.html</anchorfile>
      <anchor>a003faef5c698b1d95a35e6f75877d64d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TraceWriter</name>
    <filename>classDGtal_1_1TraceWriter.html</filename>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a0ab9ba1ba00d81b02dae908f9285c557</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>aee2f644f0271088e4c21973bd78cb6e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>prefixWarning</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a8c670e7ddd432ada7a1afaf0ce8dfdfa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>prefixInfo</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>ab28d1f06e006518d9242ec0f4702d36a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>prefixError</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a081bd407c471109c98a991ab41c3039b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>prefixEmphase</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a857cf7f36ee5c7dbce89ac33e0df61ea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>postfixReset</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a5a06f7ddac1eab41d04e2389fb9e9a5d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>outputStream</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>aad05dc2d89acc65bc1654cd761b4b9ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TraceWriter</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a07d0fc3cb4f86c8037268910836f6179</anchor>
      <arglist>(std::ostream &amp;aoutputStream)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream &amp;</type>
      <name>myOutputStream</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a9a52a0719c2119de4e361cd00ab2184d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TraceWriter</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>aa2e7003719b455831831458fb036cfda</anchor>
      <arglist>(const TraceWriter &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TraceWriter &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a38a46ebc4db8d67f5bf774ffd6f281d2</anchor>
      <arglist>(const TraceWriter &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TraceWriterFile</name>
    <filename>classDGtal_1_1TraceWriterFile.html</filename>
    <base>DGtal::TraceWriter</base>
    <member kind="function">
      <type></type>
      <name>TraceWriterFile</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>a53cbbe38f6596687b0c4febc9830bc0e</anchor>
      <arglist>(std::ostream &amp;aoutputStream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraceWriterFile</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>a430e715520c0ffdc29fce53961e49d77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>adc8ce6af44adc080023ea0832a5cfc06</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>a4734d031173ac7c285ffb42e23dc3ef8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prefixWarning</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>af8a0772184119341169269d36d618987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prefixInfo</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>a035873901d1c64e5354d592ffa39d1e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prefixError</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>ac10fc9b23e46fdef65487d7e9c73ba32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prefixEmphase</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>a7807a9ba485a965e111fa6ff50184e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>postfixReset</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>a2e015e163a731210598fcaf2adbc34f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>outputStream</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>aad05dc2d89acc65bc1654cd761b4b9ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TraceWriterFile</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>a3faa2f6b14d5133859557a84bdb73b80</anchor>
      <arglist>(const TraceWriterFile &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TraceWriterFile &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1TraceWriterFile.html</anchorfile>
      <anchor>ae2162f05ad1ec2e81bf3ca1b84a68ed0</anchor>
      <arglist>(const TraceWriterFile &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TraceWriter</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a07d0fc3cb4f86c8037268910836f6179</anchor>
      <arglist>(std::ostream &amp;aoutputStream)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream &amp;</type>
      <name>myOutputStream</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a9a52a0719c2119de4e361cd00ab2184d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TraceWriterTerm</name>
    <filename>classDGtal_1_1TraceWriterTerm.html</filename>
    <base>DGtal::TraceWriter</base>
    <member kind="function">
      <type></type>
      <name>TraceWriterTerm</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>ae4372d0cc03cd8ceda06bdb9453c450c</anchor>
      <arglist>(std::ostream &amp;aoutputStream=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TraceWriterTerm</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>aa3fc9759bffede3dca041fd71b4c7dff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>a9693a06cb14d2f5bdbffa7da011e1a39</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>a6476bd52a11b4243ebb31ec6c9b83e56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prefixWarning</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>ac912424ccc2816980a6da1d380b531e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prefixInfo</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>ab6850f3318298376f1d5ab56a171774d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prefixError</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>ab213b65e659f2232528dc1daff2dd23f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prefixEmphase</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>af658a63e4bc86d02603395c408d79c18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>postfixReset</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>a1c1cf6c0d89cfba395117a987c6fd810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>outputStream</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>aad05dc2d89acc65bc1654cd761b4b9ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TraceWriterTerm</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>a12d4b479f63a6bfe51bf7e21a505e678</anchor>
      <arglist>(const TraceWriterTerm &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TraceWriterTerm &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1TraceWriterTerm.html</anchorfile>
      <anchor>ac5ddf7bfea3235828a46d886da7ac266</anchor>
      <arglist>(const TraceWriterTerm &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TraceWriter</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a07d0fc3cb4f86c8037268910836f6179</anchor>
      <arglist>(std::ostream &amp;aoutputStream)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::ostream &amp;</type>
      <name>myOutputStream</name>
      <anchorfile>classDGtal_1_1TraceWriter.html</anchorfile>
      <anchor>a9a52a0719c2119de4e361cd00ab2184d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ArithmeticalDSS</name>
    <filename>classDGtal_1_1ArithmeticalDSS.html</filename>
    <templarg>TIterator</templarg>
    <templarg>TInteger</templarg>
    <templarg>connectivity</templarg>
    <class kind="struct">DGtal::ArithmeticalDSS::Tools</class>
    <class kind="struct">DGtal::ArithmeticalDSS::Tools&lt; TInt, 4 &gt;</class>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>aaf378c25f34c783903686b522ccd3b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>afc45345436ff143bd7dc4a350b538791</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArithmeticalDSS&lt; ConstIterator, TInteger, connectivity &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>af8bc009f66df38476f50819070759af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArithmeticalDSS&lt; ReverseIterator&lt; ConstIterator &gt;, TInteger, connectivity &gt;</type>
      <name>Reverse</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ab3f20e1fdc68912cfbfe45b4590cd051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; ConstIterator &gt;::Value</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a3a592bb3630702843fad5b640a0b5c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; ConstIterator &gt;::Value</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>af2d73ff5df76fd703c4bc8ab526a1e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; 2, double &gt;</type>
      <name>PointD</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a28d206a22667b545ded9883b5f2280e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ab23d03a72134298ffc0cd0003fe0ab10</anchor>
      <arglist>((CInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a42e089aacc5b95717fddd126eb6e199a</anchor>
      <arglist>((Point::dimension==2))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArithmeticalDSS</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>aaf5edc890311ea40ff013e0c92deec26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArithmeticalDSS</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a2a8495f74a7f2f5bd32ba488384f953d</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>aa1e0f5a7216e0d18f92c1193da12b84e</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArithmeticalDSS</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a5dd7581a7d46e03e7c19e5ecb68df4ec</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a2271df2efe4436c786b6b670b8f13a84</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>getSelf</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ac2041c442f30ae109b705bb5f179d199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Reverse</type>
      <name>getReverse</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a6ee6ee0ce37339196c7b7aa57aadb889</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a5729e2a41ed30c097007739ea13de24a</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a8ebb0018b19657d3de00c135c455968c</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArithmeticalDSS</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a36b86dc54ba3c430637706226b01057a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a433815d9671303069defabefcf91295d</anchor>
      <arglist>(const ConstIterator &amp;itf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a34da4ce1e1ad5c828c54272fef253cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableBackward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a0e042f11c68fc37ce1444612da2644f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a83acfee6618d7796cbe0f9e43355dcd3</anchor>
      <arglist>(const ConstIterator &amp;itf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendBackward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a311963b1addc0fd45c4be3a329c69e37</anchor>
      <arglist>(const ConstIterator &amp;itb)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>aad34d078e17b03121546b876d48697b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendBackward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a73bc2fe7481b6d98515cbd01e2a181fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retractForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>af892c0ecf71be12a04a06d3dcff71b08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retractBackward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>aa4e35bd403e22d4573c8e24d78d32146</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getA</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>af78b1c537b13c0b8c04e27c026ff1756</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getB</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a9c27e6354fc164536f1d8752fa088b6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getMu</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>af3e4af531766ac3cbeb3222711977f24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getOmega</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a8435b7c6f35629b8e0c59e52b79803ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getUf</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a4f018ea05eb73bd4e4949fd0209d655c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getUl</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>aad81a3ca8b8f05efe7989c1319387998</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLf</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a47c080d0c3aa042728aa2127bb5aaeb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLl</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ab6725411b91aca6740385964b781fa59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getBackPoint</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ab44fc5060e00097ec4dc2ddbf685b29e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getFrontPoint</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ac04fddce565410673cedd40bd23f234c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getFirstPoint</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ab7f0c3e808441489e37160054a361955</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLastPoint</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a08f263e64f256dcbb11dd1e3aa65f596</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>getBack</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a3eca405ff4990c3ed187e86d5fb3823f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>getFront</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a5e655503da3ac79d35da5e894d953dbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a7825611ad6efda99974a80c89451fe9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a499de18c67547b283d5464dc25ad32d7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a9ea3abb872c7c034af3358fd06b04c03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getRemainder</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a78da3ed80f349fd20940c6f17f80bc32</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getRemainder</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a821a78f7b2dc5d7b39cff59c8d1a6343</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getPosition</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a25893620b6b04a301bbb33510330d488</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getPosition</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>aba2c0a255190bc9564525a9992c3dbff</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInDSL</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a971394eb429851628fe09ea7f52743f9</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInDSL</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a4a7509a47d096926a5e573b5eec1eca7</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInDSS</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a75773f6e1f74c158a8d9720df0c19007</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInDSS</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ac6b53487b731e23b6135d0a1c51d9e86</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>PointD</type>
      <name>project</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a6b1c2875b165532debbaabcbc734e52c</anchor>
      <arglist>(const Point &amp;m) const </arglist>
    </member>
    <member kind="function">
      <type>PointD</type>
      <name>project</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a0841d099d8305db8a3bd3d462900a306</anchor>
      <arglist>(const Point &amp;m, double r) const </arglist>
    </member>
    <member kind="function">
      <type>PointD</type>
      <name>project</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a3cbe038406db2dc65351a283f1c1a4d0</anchor>
      <arglist>(const Point &amp;m, const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>projectedSegmentLength</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ab01aa2a1c2145ef55d6e2db38c0ebcc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ae94175eb17ca5c390ba2d9a207350eaf</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ac96f037d373ad19b3ede0b0a403d96ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myUf</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ac69ae4e021c9688d6bd9044586def65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myUl</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a5ec6593e1541d819bfebb0e38d404cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myLf</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>af2e614c21d71d03da6ce64b46c758107</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myLl</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>af7f6545e085adc388bd17d9244cfec41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myF</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>af93f198d39e7bacd3aca0e08768d047c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myL</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a2f9306e940e7ead9fda760728e5c4ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Integer</type>
      <name>myA</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a00379b09533f0fddc72a34cdccca55df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Integer</type>
      <name>myB</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a666cc15118da0ab0a3cd2afa1bf8bcfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Integer</type>
      <name>myMu</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>aae7dbbd70143a45bf1420d1c7b42e3bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Integer</type>
      <name>myOmega</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>aff6a89085336d819731ced92578bad80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Integer</type>
      <name>myNbUpPat</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a5250ec1acafb88fe2aecc194f438ce72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Integer</type>
      <name>myNbLowPat</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>afa31969feb9f032cdf4807eba4831264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Vector &gt;</type>
      <name>mySteps</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a9551c6a366ccaac2a6459b14a5160b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isExtendableForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a66a2a0f18bb6f1c6c1cebc229495614b</anchor>
      <arglist>(const Point &amp;lastPoint, const Vector &amp;lastMove)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>extendForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a41f0acb78a605835f4940dce5fda7c88</anchor>
      <arglist>(const ConstIterator &amp;it, ConstIterator &amp;lastIt, const Vector &amp;lastMove, Point &amp;Uf, Point &amp;Ul, Point &amp;Lf, Point &amp;Ll)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>retractForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a7514dcf4ec656430e4ad4ba2c86977d5</anchor>
      <arglist>(ConstIterator &amp;firstIt, ConstIterator &amp;lastIt, ConstIterator &amp;nextIt, Point &amp;Uf, Point &amp;Ul, Point &amp;Lf, Point &amp;Ll, const Integer &amp;s)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>hasLessThanTwoSteps</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>ad28656257dcb6a1e9706340f60b18a45</anchor>
      <arglist>(const Vector &amp;aStep) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Vector</type>
      <name>vectorFrom0ToOmega</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS.html</anchorfile>
      <anchor>a5e83a3fca324ded11f13a843900ed1d4</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ArithmeticalDSS::Tools</name>
    <filename>structDGtal_1_1ArithmeticalDSS_1_1Tools.html</filename>
    <templarg></templarg>
    <templarg>c</templarg>
    <member kind="function" static="yes">
      <type>static TInt</type>
      <name>norm</name>
      <anchorfile>structDGtal_1_1ArithmeticalDSS_1_1Tools.html</anchorfile>
      <anchor>a2213507f812ca48342691593b5538c69</anchor>
      <arglist>(const TInt &amp;a, const TInt &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TInt</type>
      <name>dualNorm</name>
      <anchorfile>structDGtal_1_1ArithmeticalDSS_1_1Tools.html</anchorfile>
      <anchor>a112de99ff6e7b45def9c007ea0a31175</anchor>
      <arglist>(const TInt &amp;a, const TInt &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ArithmeticalDSS::Tools&lt; TInt, 4 &gt;</name>
    <filename>structDGtal_1_1ArithmeticalDSS_1_1Tools_3_01TInt_00_014_01_4.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static TInt</type>
      <name>norm</name>
      <anchorfile>structDGtal_1_1ArithmeticalDSS_1_1Tools_3_01TInt_00_014_01_4.html</anchorfile>
      <anchor>ad176b817b7605af02092e8857ac3f028</anchor>
      <arglist>(const TInt &amp;a, const TInt &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TInt</type>
      <name>dualNorm</name>
      <anchorfile>structDGtal_1_1ArithmeticalDSS_1_1Tools_3_01TInt_00_014_01_4.html</anchorfile>
      <anchor>aad24af3e7f97c1eb9b3281e1751e7dbf</anchor>
      <arglist>(const TInt &amp;a, const TInt &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ArithmeticalDSS3d</name>
    <filename>classDGtal_1_1ArithmeticalDSS3d.html</filename>
    <templarg>TIterator</templarg>
    <templarg>TInteger</templarg>
    <templarg>connectivity</templarg>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>acd2601a68588dcf906c4db7995c9d35e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a908def47cf76c65d3461acaf984bf1bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArithmeticalDSS3d&lt; ConstIterator, TInteger, connectivity &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a8da981757720a62353c0cbf4448d0d70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArithmeticalDSS3d&lt; ReverseIterator&lt; ConstIterator &gt;, TInteger, connectivity &gt;</type>
      <name>Reverse</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>abf9513b53ccbe53ab82561b091c0e812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; ConstIterator &gt;::Value</type>
      <name>Point3d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>afac44b2c140b8cad1528de9277349e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; ConstIterator &gt;::Value</type>
      <name>Vector3d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>ae63bddb0aee6b924b56547b2f849f16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point3d::Coordinate</type>
      <name>Coordinate</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>aa9a16d20716e9294828c14fdca0c5f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, Coordinate &gt;</type>
      <name>Point2d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a04f8cd4ec6b5f571e8f01c802ba593ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, Coordinate &gt;</type>
      <name>Vector2d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a5ed56078c48d6f646e66cf0e67bfed0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, double &gt;</type>
      <name>PointD2d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a0575a627d65f40a3d595fca8c3270735</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 3, double &gt;</type>
      <name>PointD3d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a1ba2a322d1b9c51be76e57f6248837e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 3, double &gt;</type>
      <name>VectorD3d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>ab603eb1233aa096d6ad514110ec1777d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Projector&lt; SpaceND&lt; 2, Coordinate &gt; &gt;</type>
      <name>Projector2d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>acb796de92d39fd29798d33d670317377</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIteratorAdapter&lt; ConstIterator, Projector2d, Point2d &gt;</type>
      <name>IteratorAdapter</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a0915f510740179698bf6c54c2abb5f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::ArithmeticalDSS&lt; IteratorAdapter, TInteger, connectivity &gt;</type>
      <name>ArithmeticalDSS2d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a130b97d09f987519d7b0dd65b922f7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a08f41a43e37b2c770e430c4265ba1b87</anchor>
      <arglist>((CInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArithmeticalDSS3d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>addf7f14f62dd1fd1dbfeaa0d746f6d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArithmeticalDSS3d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a31246439103c6eed623246ad3fc1b2ce</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>ad6a367c154409b2eb15a8538caf797f7</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArithmeticalDSS3d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a18b1fb60d1cc7a0970376d0144e4ed98</anchor>
      <arglist>(const ArithmeticalDSS3d &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArithmeticalDSS3d &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>aad8580ee60b3bd1491ca64391ea8c561</anchor>
      <arglist>(const ArithmeticalDSS3d &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>getSelf</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>abd851b239b2e4e1cc7083b53e87b923f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Reverse</type>
      <name>getReverse</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a2dbf21582eff3d3cdc37e4c80cb96e23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a3c84bd75667c750c771c408d998bb0f6</anchor>
      <arglist>(const ArithmeticalDSS3d &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a3cffee87a69c8649b200248fe5391eb8</anchor>
      <arglist>(const ArithmeticalDSS3d &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ArithmeticalDSS3d</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>ad2fe1114c3e319fadd19cd8963be837a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a77d51fbaf3ee4584be84a642ffa998fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableForward</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a11cd7bfeb0df3cfc8a71bd298484a1ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameters</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a6b59c4e3cbcc8ed8cc4301e86b35b253</anchor>
      <arglist>(Vector3d &amp;direction, PointD3d &amp;intercept, PointD3d &amp;thickness) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a375957d6f601b5e0b7b660f280db5386</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a7f0e70156460ca1bbc342a3138f33587</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>aad137fbd8561f3b98c8a0985e36ad454</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>aef49bdc6738ea6f50b6f0a33a2aedd62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>afb6009372a00ed52f42b1afb71b063a0</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Projector2d</type>
      <name>myProjXY</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>adf9d91457c4f312a0781d6e94182a0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Projector2d</type>
      <name>myProjXZ</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>ac9e930575c7912f64dd53595b1c99775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Projector2d</type>
      <name>myProjYZ</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>af4dca1065920693c2a39c3b9981d1d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArithmeticalDSS2d</type>
      <name>myXYalgo</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a673b372e8c99c02fafb9aba9fb608e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArithmeticalDSS2d</type>
      <name>myXZalgo</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a9ac268edd7c74d089680e9cf273b94ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArithmeticalDSS2d</type>
      <name>myYZalgo</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>aa34a9d4a4ab2c7fa0a629c7e7463b103</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>adc49436e25b428b0b8f037773d528f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1ArithmeticalDSS3d.html</anchorfile>
      <anchor>a9a7dcc30d93d75d6623f359b211dc03e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::BinomialConvolver</name>
    <filename>classDGtal_1_1BinomialConvolver.html</filename>
    <templarg>TConstIteratorOnPoints</templarg>
    <templarg>TValue</templarg>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a6c50181ac841d2fd7f1f4243a8e4684d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TConstIteratorOnPoints</type>
      <name>ConstIteratorOnPoints</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>afd66b1458762349e09c60eb2dab627c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIteratorOnPoints::value_type</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a0e8f80c423e23d2a493765e038a32ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinomialConvolver</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a86c8b26202e5a98bbb8279fe275ea817</anchor>
      <arglist>(unsigned int n=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BinomialConvolver</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a2f6035dd53019847b2d5ad055d4f4654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a9cf6c9ff0f6e9fabd3f99ced2055e76c</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>ab76095c14384ece1d99e758cc9ae6edf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a3aba025d245c1bd1d3784ebde3e34a93</anchor>
      <arglist>(const double h, const ConstIteratorOnPoints &amp;itb, const ConstIteratorOnPoints &amp;ite, const bool isClosed)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a11d60f9622e413cc9ae6f6bd46e3e105</anchor>
      <arglist>(const ConstIteratorOnPoints &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Value, Value &gt;</type>
      <name>x</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>acf58a7e3058b37b7fbe2d8bd4142b57e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Value, Value &gt;</type>
      <name>dx</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a699bc1bfdfa9215fbde6e52d82e89a00</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Value, Value &gt;</type>
      <name>d2x</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a50c7093220818024d27c5d709cc6c798</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Value, Value &gt;</type>
      <name>tangent</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a1605d86b8f1878679848789aa118ab83</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>curvature</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a1c6d61d14436de91ebd38e48a24eac6e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>adb28c7166da9e1ca37d0d05dd5b4eaa1</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a12e4675945f76d5da39a8b72d0257588</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>suggestedSize</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a8951cd8ac7440ed5e3f9b7139ffbff2f</anchor>
      <arglist>(const double h, const ConstIteratorOnPoints &amp;itb, const ConstIteratorOnPoints &amp;ite)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myN</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a343bb1331629c82b3682b600748f758d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a95e8c3ccdd96a8e003bd6bd4d36cb43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal&lt; Value &gt;</type>
      <name>myX</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>af333a631de986f349283eceb4c7780a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal&lt; Value &gt;</type>
      <name>myY</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a6f89558acd1efa6ef063554f7ac33249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal&lt; Value &gt;</type>
      <name>myDX</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>af7cdd3b6242e994fa5ac89756b9009fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal&lt; Value &gt;</type>
      <name>myDY</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>ab5da4884f186ac93f729d5e58d55a200</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal&lt; Value &gt;</type>
      <name>myDDX</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>ac0fab146b3e80053c632e03f79446948</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Signal&lt; Value &gt;</type>
      <name>myDDY</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>afb773578db4a622028c2b36c5e40e9a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstIteratorOnPoints</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a83d4c5481843c47e24922d5b1549cd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstIteratorOnPoints</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a8d4ffbb142ef745a25b014314c71e750</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; ConstIteratorOnPoints, int &gt;</type>
      <name>myMapIt2Idx</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>acbc9c907923a9aa59c728b2951099972</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BinomialConvolver</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a803e85db5488ebce7cd1e6fdffc35d55</anchor>
      <arglist>(const BinomialConvolver &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BinomialConvolver &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1BinomialConvolver.html</anchorfile>
      <anchor>a28708af039273df87a23df07092101f6</anchor>
      <arglist>(const BinomialConvolver &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::TangentFromBinomialConvolverFunctor</name>
    <filename>structDGtal_1_1TangentFromBinomialConvolverFunctor.html</filename>
    <templarg>TBinomialConvolver</templarg>
    <templarg>TRealPoint</templarg>
    <member kind="typedef">
      <type>TRealPoint</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1TangentFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>a8a2f1436372816a61b59e9c514db7334</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TRealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1TangentFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>add9fe63b8d18bab6fe984af5d7e8d922</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TBinomialConvolver</type>
      <name>BinomialConvolver</name>
      <anchorfile>structDGtal_1_1TangentFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>aefc8fe3a12003fba1cbde0f86e08fc73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TBinomialConvolver::Value</type>
      <name>SignalValue</name>
      <anchorfile>structDGtal_1_1TangentFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>a695ffea1c54f6a9b07ddd9b033036a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TBinomialConvolver::ConstIteratorOnPoints</type>
      <name>ConstIteratorOnPoints</name>
      <anchorfile>structDGtal_1_1TangentFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>a8778100422be4fb5c275fec4671f93f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1TangentFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>a6a03a2c9b9e486c5faecf86990ee22b5</anchor>
      <arglist>(const BinomialConvolver &amp;bc, const ConstIteratorOnPoints &amp;it) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CurvatureFromBinomialConvolverFunctor</name>
    <filename>structDGtal_1_1CurvatureFromBinomialConvolverFunctor.html</filename>
    <templarg>TBinomialConvolver</templarg>
    <templarg>TReal</templarg>
    <member kind="typedef">
      <type>TReal</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CurvatureFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>a63789b5a1a77ae0b3668394ab044d647</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TReal</type>
      <name>Real</name>
      <anchorfile>structDGtal_1_1CurvatureFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>a413cc0146e78b725656e5cd1594388d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TBinomialConvolver</type>
      <name>BinomialConvolver</name>
      <anchorfile>structDGtal_1_1CurvatureFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>ac21e5e2e6c8d6ccb07781691c02d8a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TBinomialConvolver::Value</type>
      <name>SignalValue</name>
      <anchorfile>structDGtal_1_1CurvatureFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>ad12de0a2cb9f2e825413739f02368d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TBinomialConvolver::ConstIteratorOnPoints</type>
      <name>ConstIteratorOnPoints</name>
      <anchorfile>structDGtal_1_1CurvatureFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>aeac83e198544064bcaa0e7109c327088</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1CurvatureFromBinomialConvolverFunctor.html</anchorfile>
      <anchor>af8134d48e5f7ade33d3262877b152ab0</anchor>
      <arglist>(const BinomialConvolver &amp;bc, const ConstIteratorOnPoints &amp;it) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::BinomialConvolverEstimator</name>
    <filename>classDGtal_1_1BinomialConvolverEstimator.html</filename>
    <templarg>TBinomialConvolver</templarg>
    <templarg>TBinomialConvolverFunctor</templarg>
    <member kind="typedef">
      <type>TBinomialConvolver</type>
      <name>BinomialConvolver</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a107cbe8a305a4a20e6b9a750eeae631b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TBinomialConvolverFunctor</type>
      <name>BinomialConvolverFunctor</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a88163c1625e85c5430c68d6d8e13927c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinomialConvolver::ConstIteratorOnPoints</type>
      <name>ConstIteratorOnPoints</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a7fa81cbffb0b1dc67c6be36e38bb4f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIteratorOnPoints</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>af02f13084488189ea0c422a34a65e8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BinomialConvolverFunctor::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a9d902f04d3c66300dc19bdbf7adc2820</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a07169f3f9b1ebd29efbcfa29cc0876d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinomialConvolverEstimator</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a06feb6a142c241dca87616e80fa5c982</anchor>
      <arglist>(unsigned int n=0, const BinomialConvolverFunctor &amp;f=BinomialConvolverFunctor())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a50258fdc97fb5dace1fee757136336f3</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite, const bool isClosed)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a2f517a8ab7375acf804d5701bd28f751</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a57c579c30285d160f08dae00a5cb737a</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BinomialConvolver</type>
      <name>myBC</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>a662029886b2807dd048173a36a6f275a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>BinomialConvolverFunctor</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1BinomialConvolverEstimator.html</anchorfile>
      <anchor>ab98546981b7bbf3da9d67a1e2c3dec81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CBidirectionalSegmentComputer</name>
    <filename>structDGtal_1_1CBidirectionalSegmentComputer.html</filename>
    <templarg></templarg>
    <base>DGtal::CForwardSegmentComputer</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBidirectionalSegmentComputer.html</anchorfile>
      <anchor>a08b6075d3c61565d4901b85aa9a2cc2d</anchor>
      <arglist>(CBidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CBidirectionalSegmentComputer.html</anchorfile>
      <anchor>a9f858732221fe668e57c0b9d802aa8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1CBidirectionalSegmentComputer.html</anchorfile>
      <anchor>a626bd6e1030f1a988f11113dff9f8e7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDynamicBidirectionalSegmentComputer</name>
    <filename>structDGtal_1_1CDynamicBidirectionalSegmentComputer.html</filename>
    <templarg></templarg>
    <base>DGtal::CBidirectionalSegmentComputer</base>
    <base>DGtal::CDynamicSegmentComputer</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDynamicBidirectionalSegmentComputer.html</anchorfile>
      <anchor>a907ec94ae8f39bac7ff4eccae9c1788f</anchor>
      <arglist>(CDynamicSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBidirectionalSegmentComputer.html</anchorfile>
      <anchor>a08b6075d3c61565d4901b85aa9a2cc2d</anchor>
      <arglist>(CBidirectionalSegmentComputer)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CDynamicBidirectionalSegmentComputer.html</anchorfile>
      <anchor>ae44b3d0488adb3352b0d97ae42c8aa8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1CDynamicBidirectionalSegmentComputer.html</anchorfile>
      <anchor>a28c6fb040b66c2993cffc6471da88419</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDynamicSegmentComputer</name>
    <filename>structDGtal_1_1CDynamicSegmentComputer.html</filename>
    <templarg></templarg>
    <base>DGtal::CForwardSegmentComputer</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDynamicSegmentComputer.html</anchorfile>
      <anchor>a46caaf6ccc67f5136cce679b4aaab159</anchor>
      <arglist>(CDynamicSegmentComputer)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CDynamicSegmentComputer.html</anchorfile>
      <anchor>a996539e8e010a00c76aaac25bae4b5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1CDynamicSegmentComputer.html</anchorfile>
      <anchor>afb7a0d52ca208d3e9fc92b49b29e2f50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CForwardSegmentComputer</name>
    <filename>structDGtal_1_1CForwardSegmentComputer.html</filename>
    <templarg></templarg>
    <base>DGtal::CIncrementalSegmentComputer</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CIncrementalSegmentComputer.html</anchorfile>
      <anchor>ae4bc4c0d6c50ed924d46cf6e3ff483e6</anchor>
      <arglist>(CIncrementalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a823d51097b0337155548ad8ff57b2b83</anchor>
      <arglist>((boost::is_same&lt; T, Self &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a2ac770f71a37addc99a0e951f8317494</anchor>
      <arglist>(CSegmentFactory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSegment.html</anchorfile>
      <anchor>a440764faddc4a06beed8ab167b6ef862</anchor>
      <arglist>(CSegment)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CIncrementalSegmentComputer</name>
    <filename>structDGtal_1_1CIncrementalSegmentComputer.html</filename>
    <templarg></templarg>
    <base>DGtal::CSegmentFactory</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CIncrementalSegmentComputer.html</anchorfile>
      <anchor>ae4bc4c0d6c50ed924d46cf6e3ff483e6</anchor>
      <arglist>(CIncrementalSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a823d51097b0337155548ad8ff57b2b83</anchor>
      <arglist>((boost::is_same&lt; T, Self &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a2ac770f71a37addc99a0e951f8317494</anchor>
      <arglist>(CSegmentFactory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSegment.html</anchorfile>
      <anchor>a440764faddc4a06beed8ab167b6ef862</anchor>
      <arglist>(CSegment)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CIncrementalSegmentComputer.html</anchorfile>
      <anchor>a7b329d85838e682e06af4c8b53746840</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T::ConstIterator</type>
      <name>myI</name>
      <anchorfile>structDGtal_1_1CIncrementalSegmentComputer.html</anchorfile>
      <anchor>a81b83a9e7c9cc6c375a4a827a173262c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1CIncrementalSegmentComputer.html</anchorfile>
      <anchor>ad9b07f640a30f3983801f426d9e72c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Self</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>ab0f71f2284bb62b2201ba41da4a5ff6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Reverse</type>
      <name>Reverse</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a61fe0cf55687273da9962889ee4b2eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CSegment.html</anchorfile>
      <anchor>a595c9da60c57e950f29915934dcf073c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CombinatorialDSS</name>
    <filename>classDGtal_1_1CombinatorialDSS.html</filename>
    <templarg>TConstIterator</templarg>
    <templarg>TInteger</templarg>
    <class kind="class">DGtal::CombinatorialDSS::CodeHandler</class>
    <class kind="class">DGtal::CombinatorialDSS::CodeHandler&lt; TIterator, bidirectional_iterator_tag &gt;</class>
    <class kind="class">DGtal::CombinatorialDSS::CodeHandler&lt; TIterator, random_access_iterator_tag &gt;</class>
    <class kind="struct">DGtal::CombinatorialDSS::ConstPointIterator</class>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a508da6c61fa8ce05caf32828d18906f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a971e873410cc0bb666155e745c827cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FreemanChain&lt; TInteger &gt;</type>
      <name>FreemanChainCode</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ac38e06d1fa8b73e1be94b2b1398e387b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CombinatorialDSS&lt; ConstIterator, Integer &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a4b6c99b6535b4c84f2cb1d554cdf0bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CombinatorialDSS&lt; ConstIterator, Integer &gt;</type>
      <name>Reverse</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a128a7413d0ac5766bb999811f0d1170b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, Integer &gt;</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a277ec1a14671876aa757da931a81f0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, Integer &gt;</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>af5d7a820ee9dee98f826a194ccc58b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator_traits&lt; ConstIterator &gt;::value_type</type>
      <name>Code</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a1c71792f428bf784bce3cb912d992e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a7846828bce6ca75f56820d3f6853a3c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Index</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>afad48d6ba6a3ef81316ed8dc2ec36fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector(*</type>
      <name>DisplacementFct</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ac0f340ca8593190a7679c439322bef80</anchor>
      <arglist>)(Code)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a6e922f29165d61649cb33d8ea3d57218</anchor>
      <arglist>((CInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombinatorialDSS</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a6b5a56a4a045bd38f35657e4a40de692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CombinatorialDSS</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a72c45f4eea7b66390ce445ac2243297b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a83f01e915e65c06720ff01c1ea5a7d03</anchor>
      <arglist>(const ConstIterator &amp;it, const Point &amp;start=Point(0, 0), Vector(*displacements)(Code)=defaultMoves)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a1805b355e6f021662df4ae21e15bcc66</anchor>
      <arglist>(const ConstPointIterator &amp;i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a4e1cd43ed8694c94cf75de615e2d7e3c</anchor>
      <arglist>(const FreemanChainCode &amp;fc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>adee7054f77e9e7ea8982f4b2382c3f7f</anchor>
      <arglist>(const typename FreemanChainCode::ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombinatorialDSS</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ae4b1ce6fcd32da4bfeb52c24baa3a828</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CombinatorialDSS &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ac7c44808b89d457e0d11360ac610c60f</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>getSelf</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a4f97f9ca1780ef3b05b6695ce9ff2122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a44a2dac6a9e4c25bbc125e6581b90c80</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>acd28fbd0ed5392608182723855287ad6</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Reverse</type>
      <name>getReverse</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aa9ec82a7e0c714fbe5fb6ae7f92befca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableForward</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ac9b46800a63b7f5400595b25ef79e5ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendForward</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>afc1f3a2a3acce6a0122bf48cec1ed21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendBackward</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a56058a73dc5e51944a476a8e351c6919</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableBackward</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a2198efa13892c1d934c06ca363b3956d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retractForward</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a1bf16b3ae488d37ce4b3cc6ffbff917b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>retractBackward</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aaff34c35cf38648e85ed3fbd49cd0d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a03371c300d9a8d325ce8f80c3aaddfac</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translate</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a4a45c3ec3d986537661f833884da5608</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getArithmeticalDescription</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a1d351fca083ac77296e3e4ee328360a5</anchor>
      <arglist>(Integer &amp;a, Integer &amp;b, Integer &amp;mu, Integer &amp;omega) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getA</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a0b356483a9740cace7549b330ad0d081</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getB</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a16fc5f97b3a6ef9b19517720e2bc25f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getMu</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aea5bcce889fadba9eff9e40cc53ac937</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getOmega</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a7ae395c40f356a9f22f334c077d1bdd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>getRemainder</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ab9dd7a80bc71e9ed3adcd107de722f02</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeLeaningPoints</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a08f20e2e6406ed3b0a74525e305244c3</anchor>
      <arglist>(Point &amp;uf, Point &amp;ul, Point &amp;lf, Point &amp;ll) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getUf</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a8c973266c46c6f49d7155b7270861535</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getUl</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a232a1cb4e087f8be23d39da3876198b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLf</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a46f63b009305188f2e1f4dcf3c81429e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLl</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aadb5aa1bf50690ebcfb51a27c587c201</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a6de674bc99361eacbc86572393d7d17d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>longestChristoffelPrefix</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aeed5d70ed60d1757dfd2fb286f86180f</anchor>
      <arglist>(ConstIterator it, const OrderedAlphabet &amp;aOA)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getFirstPoint</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a90010169b078d3224fee74b27091ba71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLastPoint</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a3234434d619aa101cbc1b05b7298fa91</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstPointIterator</type>
      <name>pointBegin</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a349c637d281b8d92361e17f0efe8b5cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstPointIterator</type>
      <name>pointEnd</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a7216b67628a740e9ba23841d8425c0a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a13d564fa54f49a32883b9fad0bfabaea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a44be5278eff1e71ad5e872128b374996</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ab5cec255378dc360e03a06aff76e5234</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getSmallLetter</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a1fe2bd52e404ff72e2d0a31dff86047d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getBigLetter</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ac363536e6cdf8745e1a5ebc40128d355</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getCode</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a657637a1cb24106813bdfb6ca0f52a53</anchor>
      <arglist>(Index pos)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getCode</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aaf32d6d3fc35899942f2083efc15c751</anchor>
      <arglist>(Index pos) const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>mainPatternLength</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>abd80969dd24710e2b087f0987dc19fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>mainPatternVector</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aa500b5869ad3164ac3c34225b02eacc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>suffixLength</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ae6ceb4f073cdbb55de92e125e0f964af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>prefixLength</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a7ef134b984ce2b90698737be3e773112</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUL</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a8e0024598f7242edf73f7109b72f219e</anchor>
      <arglist>(Index pos) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextIsLL</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a70e55b2e364b2b2393694c69c209bbcc</anchor>
      <arglist>(Index pos) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>previousIsLL</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ac08d8f7ee6d8ac896c770f8d900828fd</anchor>
      <arglist>(Index pos) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrivial</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ab34a55cff9221f2f8e165aa1309920ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>displacement</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a5454f11f17db53a9d1de8727d201a37f</anchor>
      <arglist>(Code c) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>defaultMoves</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ae19fa2a7f60869214c1b4e8a2845d6a9</anchor>
      <arglist>(Code c)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CodeHandler&lt; ConstIterator &gt;</type>
      <name>myCodeHandler</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a8176fb9d7036e29d6cfc9c1e9aa34030</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aec978fad74643cf42a59336b75342cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a3e39a790a69c7f176b73cfcf9252b735</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>myFirstPoint</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a6e37835d3d6cd93c97eda7f5cc549211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>myLastPoint</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aa011565ac4af48e594bb221f622c7534</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>myFirstLetter</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a21bf80bfe203e279f9a557dacdd3f969</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>myLastLetter</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a844b498b8bbd44e9a1aa17cd4e6c28df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myNbRepeat</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a382a2d9f3dd0de5a369ddf343ea5fef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>myPatternBegin</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a6f1afb87c93cdd413ee3cf3622e846a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>myPatternEnd</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>aed1b5b7af7a5c12503b319344102ef93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Size</type>
      <name>myLeftPatternLength</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a95774d2a0db8e277e5ca1eeee2ef06df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>myNextBefore</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>a70344016554d92093a83fe90423da1ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Index</type>
      <name>myNextAfter</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ac9bc678d2857e8213b77e13ae3c317aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector(*</type>
      <name>myDisplacements</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS.html</anchorfile>
      <anchor>ab8f152bdf518d7e797e0922fc23bd836</anchor>
      <arglist>)(Code)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CombinatorialDSS::CodeHandler</name>
    <filename>classDGtal_1_1CombinatorialDSS_1_1CodeHandler.html</filename>
    <templarg>TIterator</templarg>
    <templarg>iterator_type</templarg>
    <member kind="function">
      <type></type>
      <name>CodeHandler</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler.html</anchorfile>
      <anchor>adaed78e4800a01a634577da78a0fa841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler.html</anchorfile>
      <anchor>ad251589535b2118c233ce2f1f0ff8458</anchor>
      <arglist>(const TIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getCode</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler.html</anchorfile>
      <anchor>a1aba31b83545616abee348cbc2506003</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getCode</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler.html</anchorfile>
      <anchor>aee2f8fb553094842552e37852f548493</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Code &gt;</type>
      <name>myCodes</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler.html</anchorfile>
      <anchor>af6ca651c49cd4c2ff6826759286fea7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIterator</type>
      <name>myIter</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler.html</anchorfile>
      <anchor>abfebe4aaeaefaafa6705a49cf604a71c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CombinatorialDSS::CodeHandler&lt; TIterator, bidirectional_iterator_tag &gt;</name>
    <filename>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01bidirectional__iterator__tag_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CodeHandler</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01bidirectional__iterator__tag_01_4.html</anchorfile>
      <anchor>a5892cb3426644bdd4a736bbeb1e115a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01bidirectional__iterator__tag_01_4.html</anchorfile>
      <anchor>ad096a15e619b150e139b7b9b7198d39e</anchor>
      <arglist>(const TIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getCode</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01bidirectional__iterator__tag_01_4.html</anchorfile>
      <anchor>a83c4daa861bd92045053014aa99f7c29</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getCode</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01bidirectional__iterator__tag_01_4.html</anchorfile>
      <anchor>a708eb9db780836198a88aa47375644e4</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Code &gt;</type>
      <name>myPosCodes</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01bidirectional__iterator__tag_01_4.html</anchorfile>
      <anchor>a2eb8c73d2b067f204c6437862ffa90c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>vector&lt; Code &gt;</type>
      <name>myNegCodes</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01bidirectional__iterator__tag_01_4.html</anchorfile>
      <anchor>a3008b2c22a0a3c91722a11a5a4900583</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIterator</type>
      <name>myFirst</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01bidirectional__iterator__tag_01_4.html</anchorfile>
      <anchor>ac515c28fbb37dc1c4be65cc4bb2cabc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIterator</type>
      <name>myLast</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01bidirectional__iterator__tag_01_4.html</anchorfile>
      <anchor>a8d99d0a67bdc699900b3a78198ad9e56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CombinatorialDSS::CodeHandler&lt; TIterator, random_access_iterator_tag &gt;</name>
    <filename>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01random__access__iterator__tag_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CodeHandler</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01random__access__iterator__tag_01_4.html</anchorfile>
      <anchor>a17ac2ec442b05f460d0833103e079ab5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01random__access__iterator__tag_01_4.html</anchorfile>
      <anchor>a75ce5c1cad0bac31d7d55db16abca2d2</anchor>
      <arglist>(const TIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getCode</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01random__access__iterator__tag_01_4.html</anchorfile>
      <anchor>aa81ebee2465e4d40a65e190e68840259</anchor>
      <arglist>(Index n) const </arglist>
    </member>
    <member kind="function">
      <type>Code</type>
      <name>getCode</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01random__access__iterator__tag_01_4.html</anchorfile>
      <anchor>a55eb0fa41b75204b7882fba53cdd74f0</anchor>
      <arglist>(Index n)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIterator</type>
      <name>myIter</name>
      <anchorfile>classDGtal_1_1CombinatorialDSS_1_1CodeHandler_3_01TIterator_00_01random__access__iterator__tag_01_4.html</anchorfile>
      <anchor>a5725f28bcbfc7194e5d460e23e8575f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CombinatorialDSS::ConstPointIterator</name>
    <filename>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</filename>
    <member kind="typedef">
      <type>bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>aa887e1a5a4f51f7224e4eb9900e6e2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a25d6a1ef5837ce160f3d015cc4f827a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Index</type>
      <name>difference_type</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a177b087a89cd222aee0c950207c7c915</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point *</type>
      <name>pointer</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a84b327d4fb0d818061d92f73537b1718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point &amp;</type>
      <name>reference</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a52765741ec7ff58691da1efdbe91a4be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstPointIterator</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>abe915ce24cfbef7365cc88f93a35335f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstPointIterator</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>afdee35c90a63b8a5bf4923c82e5e115c</anchor>
      <arglist>(const CombinatorialDSS *dss, Index ind, Point pt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstPointIterator</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>aa3b01820bb88c5e1fb57ea15d2e5f8cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a17c8ec888ae624546307b97d57ee6607</anchor>
      <arglist>(const ConstPointIterator other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a7987c8e497f9fdf8a3f8deea08cd490c</anchor>
      <arglist>(const ConstPointIterator other) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator-</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>abef5869fb5083d0e76222d12cc665c67</anchor>
      <arglist>(const ConstPointIterator other) const </arglist>
    </member>
    <member kind="function">
      <type>ConstPointIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>aa8a261516aa0a8cfaf0de3e8407e9a6c</anchor>
      <arglist>(const ConstPointIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator*</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>ade489d65ffb58428042e62e2a411a76b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstPointIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>acdf996a52a602bfd0e09f40ccdc31dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstPointIterator</type>
      <name>operator++</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a5aef15594a8967374ffab1c8de9fa202</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>ConstPointIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a86787388cc02ba21491318cef75c11dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstPointIterator</type>
      <name>operator--</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>ad6e9e4be2aebb0dd22f83adeeee94e39</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a38662dd0958c8340f0abc19d3d0eaaa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prev</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a93887d5c38d6674345575408b29d8cf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CombinatorialDSS *</type>
      <name>getDSS</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a3d34408d9619f5e56debe05f7b537e2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getIndex</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>aae8bb9bc5fbae9de82b977734f109ee4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>const CombinatorialDSS *</type>
      <name>myDSS</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a8073ba5dffcab24609cfb448e0a0c860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>i</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a074193ff86280fa6559f597e2190c502</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1CombinatorialDSS_1_1ConstPointIterator.html</anchorfile>
      <anchor>a9de28440db7048e00d15b57540dcd71f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSegment</name>
    <filename>structDGtal_1_1CSegment.html</filename>
    <templarg></templarg>
    <base>boost::Assignable</base>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CSegment.html</anchorfile>
      <anchor>a595c9da60c57e950f29915934dcf073c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSegment.html</anchorfile>
      <anchor>a440764faddc4a06beed8ab167b6ef862</anchor>
      <arglist>(CSegment)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CSegment.html</anchorfile>
      <anchor>a4c6285fab75e9c1b8427da19ad669096</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>it</name>
      <anchorfile>structDGtal_1_1CSegment.html</anchorfile>
      <anchor>acbc78273520dfad3134c20d16015588c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSegmentFactory</name>
    <filename>structDGtal_1_1CSegmentFactory.html</filename>
    <templarg></templarg>
    <base>DGtal::CSegment</base>
    <member kind="typedef">
      <type>T::Self</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>ab0f71f2284bb62b2201ba41da4a5ff6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Reverse</type>
      <name>Reverse</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a61fe0cf55687273da9962889ee4b2eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CSegment.html</anchorfile>
      <anchor>a595c9da60c57e950f29915934dcf073c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a823d51097b0337155548ad8ff57b2b83</anchor>
      <arglist>((boost::is_same&lt; T, Self &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a2ac770f71a37addc99a0e951f8317494</anchor>
      <arglist>(CSegmentFactory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSegment.html</anchorfile>
      <anchor>a440764faddc4a06beed8ab167b6ef862</anchor>
      <arglist>(CSegment)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a751f3d1cda237d3f653fc0938680bef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Reverse</type>
      <name>myRT</name>
      <anchorfile>structDGtal_1_1CSegmentFactory.html</anchorfile>
      <anchor>a565dc51aea71be69757bf79ccb95d620</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::BLUELocalLengthEstimator</name>
    <filename>classDGtal_1_1BLUELocalLengthEstimator.html</filename>
    <templarg>TConstIterator</templarg>
    <base>DGtal::TwoStepLocalLengthEstimator</base>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1BLUELocalLengthEstimator.html</anchorfile>
      <anchor>a05fbf955d9763eb2e9a3a38f13b68b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1BLUELocalLengthEstimator.html</anchorfile>
      <anchor>a5ec0dd599769283dd8140f7eeb4b445f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BLUELocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1BLUELocalLengthEstimator.html</anchorfile>
      <anchor>a0e6756f649cb83b73bbc5470459b2d4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1BLUELocalLengthEstimator.html</anchorfile>
      <anchor>a5fe0089f1f11efa31389408973fe6102</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoStepLocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>add4f3e429839b74c173c4d2d36b70fc5</anchor>
      <arglist>(const double wdirect, const double wdiag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoStepLocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>acbc3e5461a484ea340033d8b99178d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a8f701b744dda5c6f5a50ea0d7ff25277</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite, const bool &amp;isClosed)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a8920c6f476cc64a5edeb5f1ac803d445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a948949852aaecddfe95e5f1330a32bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BLUELocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1BLUELocalLengthEstimator.html</anchorfile>
      <anchor>ac9bf6e1bb92e27d102ef481c04acc37e</anchor>
      <arglist>(const BLUELocalLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BLUELocalLengthEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1BLUELocalLengthEstimator.html</anchorfile>
      <anchor>a01e8ba6f99504fa1316f0ff1fd49eebc</anchor>
      <arglist>(const BLUELocalLengthEstimator &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CGlobalGeometricEstimator</name>
    <filename>structDGtal_1_1CGlobalGeometricEstimator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::Quantity</type>
      <name>Quantity</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>a700ef1aabb5be258b87f7ec362a28678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>af56a66b89a32c07a52508bb3c92ba8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>a1e81078a67a762f7a550fbb146a52db2</anchor>
      <arglist>((CQuantity&lt; Quantity &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>a76f1b88f496e09f9d66954a8c10f9f6d</anchor>
      <arglist>((boost_concepts::ReadableIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>ade356886aa5dd001ce458e5b7f774d78</anchor>
      <arglist>((boost_concepts::ForwardTraversalConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>a23190fa8436792dbbe5c8ebf5ba64bef</anchor>
      <arglist>(CGlobalGeometricEstimator)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>a95756c1cd0ca3afe11a1a4c8c2af7ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>a3fa4bb9062b3217a2b10099582e2157b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myItb</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>adffd9cb1bbb7189d2a115b6b448a95be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myIte</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>a6ce36d3ebaeaee8d30cd8af14591e88d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quantity</type>
      <name>myQ</name>
      <anchorfile>structDGtal_1_1CGlobalGeometricEstimator.html</anchorfile>
      <anchor>a569e67d6c42362971724094a9a8a1d5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CLocalGeometricEstimator</name>
    <filename>structDGtal_1_1CLocalGeometricEstimator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::Quantity</type>
      <name>Quantity</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a1c1dc7b13ca70d6d127876039adde32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a4fed9f1261e391e6936f67cfe7c72d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>ab45f1fc723bb5b922aec3c9c8b651461</anchor>
      <arglist>((CQuantity&lt; Quantity &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a8d7dd29e76a42d48acf79fa53e91469b</anchor>
      <arglist>((boost_concepts::ReadableIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>af27d96052eb00ead8af0e62438cf1578</anchor>
      <arglist>((boost_concepts::ForwardTraversalConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a8335b8f6113fd7c9b59f33b75698b827</anchor>
      <arglist>(CLocalGeometricEstimator)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>af98354017e707fbf19184cabe822806b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>aa11c57d1797d0ce8f50b76727a9b96fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myItb</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a42b680c207c59b9fd581de51976185d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myIte</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>ac878d37670bd1de5e189fe5606ea79bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quantity</type>
      <name>myQ</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a116c51735697f28724ecb3a2ea1e3ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::iterator_archetype&lt; Quantity, boost::iterator_archetypes::writable_iterator_t, boost::incrementable_traversal_tag &gt;</type>
      <name>myIto</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a9f0044b5c8da32eeeb8c0871c1886424</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CompareLocalEstimators</name>
    <filename>structDGtal_1_1CompareLocalEstimators.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TFirstEsimator</type>
      <name>FirstEstimator</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>a89339be78841c2649eefda6f2a3c91b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSecondEstimator</type>
      <name>SecondEstimator</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>a28bca06f0e119c18bc28a38261fe7116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FirstEstimator::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>ace8527a7a722e612a9cb277d6e6a0411</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FirstEstimator::Quantity</type>
      <name>Quantity</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>a94790699bc0056f0a75ad4a0b82d69a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Statistic&lt; Quantity &gt;</type>
      <name>OutputStatistic</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>a9145a309beea417b8db14e1e8922955a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Statistic&lt; double &gt;</type>
      <name>OutputVectorStatistic</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>a362960e5c04e7b016093e26eb48d5814</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quantity</type>
      <name>compare</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>a0d540e6ea5ba0362b9b586e04a6213eb</anchor>
      <arglist>(FirstEstimator &amp;aFirstEstimator, SecondEstimator &amp;aSecondEstimator, const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OutputStatistic</type>
      <name>compare</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>aef95e9cbf41d85e588cfb216abbe769d</anchor>
      <arglist>(FirstEstimator &amp;aFirstEstimator, SecondEstimator &amp;aSecondEstimator, const ConstIterator &amp;itb, const ConstIterator &amp;ite, const bool storeSamples=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>compareVectors</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>a68447b81c3838fe2a493ebee1b984a8d</anchor>
      <arglist>(FirstEstimator &amp;aFirstEstimator, SecondEstimator &amp;aSecondEstimator, const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OutputVectorStatistic</type>
      <name>compareVectors</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>a79324b2da90bed86b203bd6b0b19a4f0</anchor>
      <arglist>(FirstEstimator &amp;aFirstEstimator, SecondEstimator &amp;aSecondEstimator, const ConstIterator &amp;itb, const ConstIterator &amp;ite, const bool storeSamples=false)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>CompareLocalEstimators</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>acde22144514a7e023ec7ed9a8052ddc8</anchor>
      <arglist>(const CompareLocalEstimators &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>CompareLocalEstimators &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1CompareLocalEstimators.html</anchorfile>
      <anchor>aa5dfd565e7b086a08ae61b9714943571</anchor>
      <arglist>(const CompareLocalEstimators &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSegmentComputerEstimator</name>
    <filename>structDGtal_1_1CSegmentComputerEstimator.html</filename>
    <templarg></templarg>
    <base>DGtal::CLocalGeometricEstimator</base>
    <base>boost::Assignable</base>
    <member kind="typedef">
      <type>T::SegmentComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>structDGtal_1_1CSegmentComputerEstimator.html</anchorfile>
      <anchor>a390c97146306d5e8e06e80ac9ab96117</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Quantity</type>
      <name>Quantity</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a1c1dc7b13ca70d6d127876039adde32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a4fed9f1261e391e6936f67cfe7c72d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSegmentComputerEstimator.html</anchorfile>
      <anchor>abb033e1942a313254b279dde53b6d07e</anchor>
      <arglist>((CSegment&lt; SegmentComputer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSegmentComputerEstimator.html</anchorfile>
      <anchor>a3221a70d7bc04d3c1edd40fed7e90c9f</anchor>
      <arglist>(CSegmentComputerEstimator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>ab45f1fc723bb5b922aec3c9c8b651461</anchor>
      <arglist>((CQuantity&lt; Quantity &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a8d7dd29e76a42d48acf79fa53e91469b</anchor>
      <arglist>((boost_concepts::ReadableIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>af27d96052eb00ead8af0e62438cf1578</anchor>
      <arglist>((boost_concepts::ForwardTraversalConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CLocalGeometricEstimator.html</anchorfile>
      <anchor>a8335b8f6113fd7c9b59f33b75698b827</anchor>
      <arglist>(CLocalGeometricEstimator)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CSegmentComputerEstimator.html</anchorfile>
      <anchor>ade523a2ca88fdaf06ec3a3a5eccb650d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SegmentComputer</type>
      <name>mySC</name>
      <anchorfile>structDGtal_1_1CSegmentComputerEstimator.html</anchorfile>
      <anchor>a10d97c07d285ff150eb87a71595e888c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DSSLengthEstimator</name>
    <filename>classDGtal_1_1DSSLengthEstimator.html</filename>
    <templarg>TConstIterator</templarg>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>a0c75fae7520728575e1e94de4cb3be5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>a9c3611862449f9579517aac6e0439f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArithmeticalDSS&lt; ConstIterator, int, 4 &gt;</type>
      <name>DSSComputer</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>af83120157577cb666ca42cfa254dd87d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>a441ffed23e8202c74ef678df37eb5829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>ad48ed7ebb9d5bae6c99086ec15a53e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSSLengthEstimator</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>a0e9dba5549cee6f2a2a98c1879a647ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DSSLengthEstimator</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>a4c9fc9417a7106cd6c58d0a96fa04078</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>a917943a9d60b80c48a2d928f715b2cd3</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite, const bool &amp;isClosed)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>adee58eb3d779c8768f9bb770451c40b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>affad27fccadf8035ba92a7a0cdd833a0</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>a7cb7f370caa835b2a9716c4ff86b7e9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DSSLengthEstimator</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>a32ec9b489f567670b14fef23cd42a1e3</anchor>
      <arglist>(const DSSLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DSSLengthEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>a1ad7a3baf5bd354dbb0d746daea9aa0f</anchor>
      <arglist>(const DSSLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>ace3a00427972b1bad2e41fef20249a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Point &gt;</type>
      <name>myRep</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>adc4d2a391b4e1ccf497ea76a393604c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myIsInitBefore</name>
      <anchorfile>classDGtal_1_1DSSLengthEstimator.html</anchorfile>
      <anchor>abdbf20304c2b6bd8e78053507a4a23c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FPLengthEstimator</name>
    <filename>classDGtal_1_1FPLengthEstimator.html</filename>
    <templarg>TConstIterator</templarg>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a96f60785dafc5f4e01123c3806721869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a8fee002afd82c6e09e5150997eb30214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FP&lt; ConstIterator, int, 4 &gt;</type>
      <name>FaithfulPolygon</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a427ff90d7f263640772b22cf97528199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaithfulPolygon::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a9c093eb0503cc10432fbead4a5378240</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaithfulPolygon::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>aa4574fa3a9a04f2df634cfd690eb4ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FPLengthEstimator</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a2b26476188eec9f1c9d19ee3cee23a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FPLengthEstimator</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>aa5479ca79372dfec80221a5c0aa1ed3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a71d3173de6966f43e00bc88524347b8a</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite, const bool &amp;isClosed)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a731b0ee207ae064ee6b391ce781acff6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>ab8ca15993ec41c71e68a5c0d64afab93</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>aef8e23fdf2a881943e4585b6f77c54f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FPLengthEstimator</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a5190d5b7d0cfdcb3c814b1a12c208b95</anchor>
      <arglist>(const FPLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>FPLengthEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a8c2a24566ef2fb51085f2f6073e388a8</anchor>
      <arglist>(const FPLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a85e9d099075faa7be01fa9918db6a89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Point &gt;</type>
      <name>myRep</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>a6e4d0559ff6eb2dbb05f295a7b267fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myIsInitBefore</name>
      <anchorfile>classDGtal_1_1FPLengthEstimator.html</anchorfile>
      <anchor>aa1e27e523096114a7ff312dd76587920</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::L1LengthEstimator</name>
    <filename>classDGtal_1_1L1LengthEstimator.html</filename>
    <templarg>TConstIterator</templarg>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>ae581b30a09ab6e972e39ad17d2ddd085</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>a75decb5b1d5283040d9e5e1cd3aad517</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L1LengthEstimator</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>a2f175f4933ef37f43d7217770bb990b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~L1LengthEstimator</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>ac0a87c9ed7c5e1a956db5f434010d625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>a0f33f60abc8d9bef2eea69d2772e9c4c</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>a830b062ae9d789c9060ac4e689da28cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>aaca335660936f68a0201ff38ac20fc83</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>a437e9af251e66b177ceb8168dce7a05b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>L1LengthEstimator</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>a2965c2a75d74ed5a1443f0bc1e837d4b</anchor>
      <arglist>(const L1LengthEstimator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>L1LengthEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>aac8b83a9cd6d031a26038df1417a59ef</anchor>
      <arglist>(const L1LengthEstimator &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>ae77ea221dc8a189ba6c87de5ae5efa33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myBeginIt</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>ae920399a4e505c45c68c6eda71cd1c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myEndIt</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>a99aab1d97958290190c0246ef5768db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myIsInitBefore</name>
      <anchorfile>classDGtal_1_1L1LengthEstimator.html</anchorfile>
      <anchor>a9b56f9f01afcd6e858adf2ff5a04333e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MLPLengthEstimator</name>
    <filename>classDGtal_1_1MLPLengthEstimator.html</filename>
    <templarg>TConstIterator</templarg>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a404946bf5d79386d902320e5ca0eabae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>ae4b252043e3bf08d34cc74da49f16732</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FP&lt; ConstIterator, int, 4 &gt;</type>
      <name>FaithfulPolygon</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a791d85163d7afb17144a0b4b97c52043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaithfulPolygon::RealPoint</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a5e3de08ae50b7991c84b533020f9a2ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaithfulPolygon::RealVector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a33cd946e486b235c2eeea6fa4dcafe21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MLPLengthEstimator</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a63e7a99d51f1f3003ead78ce505fb50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MLPLengthEstimator</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a16c107750b782453cdaa0f9df9ec7764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a24f6e18788e7944c0b1a80d38aec9948</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite, const bool &amp;isClosed)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>af8c14861ca846c17d738f6ef0d86df84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a1a101c92049de324b8c9f2f2eb309223</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a18d6a1eac4f13610b768b58f2819d21f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MLPLengthEstimator</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a0a5ca80f4263070ecd73d179abb2808f</anchor>
      <arglist>(const MLPLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MLPLengthEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>ac7195b3a129d7acd0311344cfc8473b5</anchor>
      <arglist>(const MLPLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>abadc21c3ff75360af9e85f6c333aea49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Point &gt;</type>
      <name>myRep</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a89b9a7c48b2466c57a728cc7c0a07002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myIsInitBefore</name>
      <anchorfile>classDGtal_1_1MLPLengthEstimator.html</anchorfile>
      <anchor>a405be49ddfe0f9f8f6ebd3d2c0d2a45c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MostCenteredMaximalSegmentEstimator</name>
    <filename>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</filename>
    <templarg>SegmentComputer</templarg>
    <templarg>SCEstimator</templarg>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a5cecbb3f87fa41e335a78f989122031a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCEstimator::Quantity</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a92e8e2c3caac8a568e8c17e9e87d9f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SaturatedSegmentation&lt; SegmentComputer &gt;</type>
      <name>Segmentation</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a2b3db02393f8a52faa610fad6bf55639</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Segmentation::SegmentComputerIterator</type>
      <name>SegmentIterator</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a27f93b5628b4fa36d2a00badbaabef2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MostCenteredMaximalSegmentEstimator</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a6c108528a3cf30d34518b61594978b32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MostCenteredMaximalSegmentEstimator</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>ab8849fe7b77b51afb32eb572b648fba3</anchor>
      <arglist>(const SegmentComputer &amp;aSegmentComputer, const SCEstimator &amp;aSCEstimator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MostCenteredMaximalSegmentEstimator</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a511a6932f71aebe6bb71eaff4ed10bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a76b3a8b3ad9b4d3ec559e619613df3e6</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>af142f15c5b1cb0f75a912b9db53c0bed</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>af25879dea4bae202cc7cdea31e0b6bc9</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>ace78b198fdddbfab8998c19da9fae8f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a370fa8fb1b3688d681e391b32d8d04e7</anchor>
      <arglist>((CForwardSegmentComputer&lt; SegmentComputer &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a592f343263b53614c5ee4046f4c838f6</anchor>
      <arglist>((CSegmentComputerEstimator&lt; SCEstimator &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a213d8aeb3730ae67f13dd8ac68ba0bba</anchor>
      <arglist>((boost::is_same&lt; SegmentComputer, typename SCEstimator::SegmentComputer &gt;::value))</arglist>
    </member>
    <member kind="function" protection="private">
      <type>OutputIterator</type>
      <name>endEval</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>ab2a36543faa23aacf9afddcfe5850f0a</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, ConstIterator &amp;itCurrent, SegmentIterator &amp;first, SegmentIterator &amp;last, OutputIterator result)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>OutputIterator</type>
      <name>endEval</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>af9831249dc51512d963a370b4f75af30</anchor>
      <arglist>(const ConstIterator &amp;, const ConstIterator &amp;ite, ConstIterator &amp;itCurrent, SegmentIterator &amp;, SegmentIterator &amp;last, OutputIterator result, IteratorType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>OutputIterator</type>
      <name>endEval</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a326c4e18cbd9d708c2a87168e927eb90</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, ConstIterator &amp;itCurrent, SegmentIterator &amp;first, SegmentIterator &amp;last, OutputIterator result, CirculatorType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MostCenteredMaximalSegmentEstimator</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>aa9d662c9ce7036948874f81c496d24eb</anchor>
      <arglist>(const MostCenteredMaximalSegmentEstimator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MostCenteredMaximalSegmentEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a8e6fa00a8f7e6fa356a7e5145e3db406</anchor>
      <arglist>(const MostCenteredMaximalSegmentEstimator &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a12929e4847d269b1b8089a05e7d75361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a88f080e8a7e2a0575b7c6c5986d352b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>a1e94ddd57fca212edce50e3bca2f0351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SegmentComputer</type>
      <name>mySC</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>ac8c86d3e86fffd1c390531694a723044</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCEstimator</type>
      <name>mySCEstimator</name>
      <anchorfile>classDGtal_1_1MostCenteredMaximalSegmentEstimator.html</anchorfile>
      <anchor>af9e24044b968adbaa7f2c9bfebefe355</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ParametricShapeArcLengthFunctor</name>
    <filename>classDGtal_1_1ParametricShapeArcLengthFunctor.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TParametricShape</type>
      <name>ParametricShape</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>a2cd37a2c4995549d4a56cd34488336a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShape::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>adc0a6e3f2ee7c0f46f4f01c9e7dc4312</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShape::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>ab841a9bd70f33eff322e3697c0bf825f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShape::Point</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>a0a62e50178b01050c08d757c6c1bfdd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point::Coordinate</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>a88a60be77b7b312648027343244f107e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>af15dff302c32444a3e915a5a0d707e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametricShapeArcLengthFunctor</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>af2cd2cdb1da4b73e88530b9ed7d2e9dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametricShapeArcLengthFunctor</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>a6c4becf6d87dc501df1679e43e5d0f60</anchor>
      <arglist>(ParametricShape *aShape)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParametricShapeArcLengthFunctor</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>ad7db7467f101e2f8481618e2f4d0fdd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParametricShapeArcLengthFunctor &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>a61c4cda46339c8c86bfa14a11e840f02</anchor>
      <arglist>(const ParametricShapeArcLengthFunctor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>a4bf31230388a5798cc814a483dc7557d</anchor>
      <arglist>(const RealPoint &amp;aFirstPoint, const RealPoint &amp;aSecondPoint)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>ac33a3e8b6549ff0e2935f81b8075a0aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParametricShape *</type>
      <name>myShape</name>
      <anchorfile>classDGtal_1_1ParametricShapeArcLengthFunctor.html</anchorfile>
      <anchor>af5f8c88760f11c84caf47496ad82229d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ParametricShapeCurvatureFunctor</name>
    <filename>classDGtal_1_1ParametricShapeCurvatureFunctor.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TParametricShape</type>
      <name>ParametricShape</name>
      <anchorfile>classDGtal_1_1ParametricShapeCurvatureFunctor.html</anchorfile>
      <anchor>a24ce5649371c0b987928b24127f7d596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShape::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ParametricShapeCurvatureFunctor.html</anchorfile>
      <anchor>aa896d3c069daae59205426c539d4795c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1ParametricShapeCurvatureFunctor.html</anchorfile>
      <anchor>a8326a3178c896bbf173f116dd6560260</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametricShapeCurvatureFunctor</name>
      <anchorfile>classDGtal_1_1ParametricShapeCurvatureFunctor.html</anchorfile>
      <anchor>a002792695a6fb2e4aed1e73c425e4bd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametricShapeCurvatureFunctor</name>
      <anchorfile>classDGtal_1_1ParametricShapeCurvatureFunctor.html</anchorfile>
      <anchor>a9a3250d281679343baf1481bf759b4af</anchor>
      <arglist>(ParametricShape *aShape)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParametricShapeCurvatureFunctor</name>
      <anchorfile>classDGtal_1_1ParametricShapeCurvatureFunctor.html</anchorfile>
      <anchor>a3ec62e75daa7f5a7eaf2c0d07496046e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParametricShapeCurvatureFunctor &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ParametricShapeCurvatureFunctor.html</anchorfile>
      <anchor>afa345cb6caedd5a4ebd4da7e175da87d</anchor>
      <arglist>(const ParametricShapeCurvatureFunctor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ParametricShapeCurvatureFunctor.html</anchorfile>
      <anchor>a377ee49803086bd2128ab5dff04859ee</anchor>
      <arglist>(const RealPoint &amp;aPoint)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParametricShape *</type>
      <name>myShape</name>
      <anchorfile>classDGtal_1_1ParametricShapeCurvatureFunctor.html</anchorfile>
      <anchor>adc83f085acdefd83a1cc9dd012730e69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ParametricShapeTangentFunctor</name>
    <filename>classDGtal_1_1ParametricShapeTangentFunctor.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TParametricShape</type>
      <name>ParametricShape</name>
      <anchorfile>classDGtal_1_1ParametricShapeTangentFunctor.html</anchorfile>
      <anchor>af55231e02df3491ce387603fa891a4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShape::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ParametricShapeTangentFunctor.html</anchorfile>
      <anchor>af3ad4540a8730bf56df962cf84de53fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShape::RealPoint</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1ParametricShapeTangentFunctor.html</anchorfile>
      <anchor>a39c0342b7fb5a4a487eac1b96582be8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametricShapeTangentFunctor</name>
      <anchorfile>classDGtal_1_1ParametricShapeTangentFunctor.html</anchorfile>
      <anchor>ae37c98a15ec2a054994ebd9cb0f0dece</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametricShapeTangentFunctor</name>
      <anchorfile>classDGtal_1_1ParametricShapeTangentFunctor.html</anchorfile>
      <anchor>a09fec374d7cb32b8d5790262befbbc26</anchor>
      <arglist>(ParametricShape *aShape)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ParametricShapeTangentFunctor</name>
      <anchorfile>classDGtal_1_1ParametricShapeTangentFunctor.html</anchorfile>
      <anchor>a1fee99180983b12cf70ef51514cec1a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParametricShapeTangentFunctor &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ParametricShapeTangentFunctor.html</anchorfile>
      <anchor>a6210ba1c0b0a278245fed8bf210ab05b</anchor>
      <arglist>(const ParametricShapeTangentFunctor &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ParametricShapeTangentFunctor.html</anchorfile>
      <anchor>a5872c13ed32c1ce2b0af46b13abb15c5</anchor>
      <arglist>(const RealPoint &amp;aPoint)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParametricShape *</type>
      <name>myShape</name>
      <anchorfile>classDGtal_1_1ParametricShapeTangentFunctor.html</anchorfile>
      <anchor>a443b76b96322dd64cde3d0f74c50222b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::RosenProffittLocalLengthEstimator</name>
    <filename>classDGtal_1_1RosenProffittLocalLengthEstimator.html</filename>
    <templarg>TConstIterator</templarg>
    <base>DGtal::TwoStepLocalLengthEstimator</base>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1RosenProffittLocalLengthEstimator.html</anchorfile>
      <anchor>ae7e45f4343596adf393eaa2d29306cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1RosenProffittLocalLengthEstimator.html</anchorfile>
      <anchor>ad49a35117e57a3506edb0cb5f654e280</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RosenProffittLocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1RosenProffittLocalLengthEstimator.html</anchorfile>
      <anchor>a42e64f4ad17fcd29fdbca663b564ed6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1RosenProffittLocalLengthEstimator.html</anchorfile>
      <anchor>a6d7f6b3ac9dba4a7df8b19644b6cd804</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoStepLocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>add4f3e429839b74c173c4d2d36b70fc5</anchor>
      <arglist>(const double wdirect, const double wdiag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoStepLocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>acbc3e5461a484ea340033d8b99178d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a8f701b744dda5c6f5a50ea0d7ff25277</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite, const bool &amp;isClosed)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a8920c6f476cc64a5edeb5f1ac803d445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a948949852aaecddfe95e5f1330a32bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>RosenProffittLocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1RosenProffittLocalLengthEstimator.html</anchorfile>
      <anchor>a8151d2934d1b3e0156c81787378e8c9e</anchor>
      <arglist>(const RosenProffittLocalLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RosenProffittLocalLengthEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1RosenProffittLocalLengthEstimator.html</anchorfile>
      <anchor>a112f3ab9699c71935b55cded568531c4</anchor>
      <arglist>(const RosenProffittLocalLengthEstimator &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TangentFromDSSEstimator</name>
    <filename>classDGtal_1_1TangentFromDSSEstimator.html</filename>
    <templarg>DSSComputer</templarg>
    <base>PosIndepScaleIndepSCEstimator&lt; DSSComputer, detail::NormalizedTangentVectorFromDSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>TangentFromDSSEstimator</name>
      <anchorfile>classDGtal_1_1TangentFromDSSEstimator.html</anchorfile>
      <anchor>a93dbcd263f0ad68905bbc8cff4e026a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TangentFromDSSEstimator</name>
      <anchorfile>classDGtal_1_1TangentFromDSSEstimator.html</anchorfile>
      <anchor>a80dc108117e24212ae589418e449e22f</anchor>
      <arglist>(const TangentFromDSSEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>afa29d45723c7e933929497bbd1b44ba3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosIndepScaleIndepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a0a30627d9381ea4b96d7ec819f1e0da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ac7fc5918522c698d646bf8bf14a280a3</anchor>
      <arglist>(const double, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a0d832412c9adc62b70ef9eb6fe58b900</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a6f82b603ec6a15a3a9685ccffd219910</anchor>
      <arglist>(const ConstIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ace23724b28e9078079482107236bea41</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>detail::PosIndepScaleIndepSCEstimator&lt; DSSComputer, detail::NormalizedTangentVectorFromDSS &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1TangentFromDSSEstimator.html</anchorfile>
      <anchor>a4d6dd414df6cb46079b9d0bfef90d0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>af0a43e906305bebcf6849eedc85ef505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a04f2dd8ae21af66fc51f9f874f40b0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::NormalizedTangentVectorFromDSS::Value</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a441ee2de78634c64af65671208415e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a31642c35ff25195925f1f72ee02e8329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a8bad91ac70845458022a7d4fae23f57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a653baa60e0215d7881adb9f0bbe669d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>detail::NormalizedTangentVectorFromDSS</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a1020afea497fb691273e363e585aa6f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TangentVectorFromDSSEstimator</name>
    <filename>classDGtal_1_1TangentVectorFromDSSEstimator.html</filename>
    <templarg>DSSComputer</templarg>
    <base>PosIndepScaleIndepSCEstimator&lt; DSSComputer, detail::TangentVectorFromDSS&lt; DSSComputer &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>TangentVectorFromDSSEstimator</name>
      <anchorfile>classDGtal_1_1TangentVectorFromDSSEstimator.html</anchorfile>
      <anchor>a3b62576348cc096c78c73516c162de6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TangentVectorFromDSSEstimator</name>
      <anchorfile>classDGtal_1_1TangentVectorFromDSSEstimator.html</anchorfile>
      <anchor>a0df91564aecf9bc902664f4cb172a8b0</anchor>
      <arglist>(const TangentVectorFromDSSEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>afa29d45723c7e933929497bbd1b44ba3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosIndepScaleIndepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a0a30627d9381ea4b96d7ec819f1e0da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ac7fc5918522c698d646bf8bf14a280a3</anchor>
      <arglist>(const double, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a0d832412c9adc62b70ef9eb6fe58b900</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a6f82b603ec6a15a3a9685ccffd219910</anchor>
      <arglist>(const ConstIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ace23724b28e9078079482107236bea41</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>detail::PosIndepScaleIndepSCEstimator&lt; DSSComputer, detail::TangentVectorFromDSS&lt; DSSComputer &gt; &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1TangentVectorFromDSSEstimator.html</anchorfile>
      <anchor>a3f96bb39250da90d4854f6ac25058b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>af0a43e906305bebcf6849eedc85ef505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a04f2dd8ae21af66fc51f9f874f40b0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::TangentVectorFromDSS&lt; DSSComputer &gt;::Value</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a441ee2de78634c64af65671208415e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a31642c35ff25195925f1f72ee02e8329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a8bad91ac70845458022a7d4fae23f57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a653baa60e0215d7881adb9f0bbe669d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>detail::TangentVectorFromDSS&lt; DSSComputer &gt;</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a1020afea497fb691273e363e585aa6f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TangentAngleFromDSSEstimator</name>
    <filename>classDGtal_1_1TangentAngleFromDSSEstimator.html</filename>
    <templarg>DSSComputer</templarg>
    <base>PosIndepScaleIndepSCEstimator&lt; DSSComputer, detail::TangentAngleFromDSS &gt;</base>
    <member kind="function">
      <type></type>
      <name>TangentAngleFromDSSEstimator</name>
      <anchorfile>classDGtal_1_1TangentAngleFromDSSEstimator.html</anchorfile>
      <anchor>a05a7a2a6d14feca876e4928d7582ffb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TangentAngleFromDSSEstimator</name>
      <anchorfile>classDGtal_1_1TangentAngleFromDSSEstimator.html</anchorfile>
      <anchor>a58fd5b226b36860bfc3f917a5d5fe44a</anchor>
      <arglist>(const TangentAngleFromDSSEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>afa29d45723c7e933929497bbd1b44ba3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosIndepScaleIndepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a0a30627d9381ea4b96d7ec819f1e0da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ac7fc5918522c698d646bf8bf14a280a3</anchor>
      <arglist>(const double, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a0d832412c9adc62b70ef9eb6fe58b900</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a6f82b603ec6a15a3a9685ccffd219910</anchor>
      <arglist>(const ConstIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ace23724b28e9078079482107236bea41</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>detail::PosIndepScaleIndepSCEstimator&lt; DSSComputer, detail::TangentAngleFromDSS &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1TangentAngleFromDSSEstimator.html</anchorfile>
      <anchor>add42151185bf0ee70b4ccea29e3ba83b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>af0a43e906305bebcf6849eedc85ef505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a04f2dd8ae21af66fc51f9f874f40b0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::TangentAngleFromDSS::Value</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a441ee2de78634c64af65671208415e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a31642c35ff25195925f1f72ee02e8329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a8bad91ac70845458022a7d4fae23f57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a653baa60e0215d7881adb9f0bbe669d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>detail::TangentAngleFromDSS</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a1020afea497fb691273e363e585aa6f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CurvatureFromDCAEstimator</name>
    <filename>classDGtal_1_1CurvatureFromDCAEstimator.html</filename>
    <templarg>DCAComputer</templarg>
    <templarg>isCCW</templarg>
    <base>PosIndepScaleDepSCEstimator&lt; DCAComputer, detail::CurvatureFromDCA&lt; isCCW &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDCAEstimator</name>
      <anchorfile>classDGtal_1_1CurvatureFromDCAEstimator.html</anchorfile>
      <anchor>ae38130209bfc0e9c325add211381ba50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDCAEstimator</name>
      <anchorfile>classDGtal_1_1CurvatureFromDCAEstimator.html</anchorfile>
      <anchor>a20d897b4a1f75df6ca5570fd941d0375</anchor>
      <arglist>(const CurvatureFromDCAEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosIndepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a9f12617912b2a290282ff96c8078da77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosIndepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>af551abbcebd8a3f5b19937437e8df095</anchor>
      <arglist>(const PosIndepScaleDepSCEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PosIndepScaleDepSCEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ab2661917486eadc5ca457aeb89ab8e19</anchor>
      <arglist>(const PosIndepScaleDepSCEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PosIndepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a413c63c6d6db6d9ae9590967322b0004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a856a1bd04592496f742991d0ae6a3ef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ac23b30470b729d2e7733071ec540b038</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ab0b6fbe60569fd461a2fb362b0d6fc72</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a5e8956c50a189ce505dc0c5cceb036fa</anchor>
      <arglist>(const ConstIterator &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>aa75d7439479b71aff291a3121b3bdb51</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>detail::PosIndepScaleDepSCEstimator&lt; DCAComputer, detail::CurvatureFromDCA&lt; isCCW &gt; &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1CurvatureFromDCAEstimator.html</anchorfile>
      <anchor>a04edf275a8c4e7e88a9fdb243b626b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DCAComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ab1f1d608527f4d0bcc2f12b44039b0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ac1678db92f3f134fc073b9d340677429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::CurvatureFromDCA&lt; isCCW &gt;::Value</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ac412baecf14d6092846344ad7f4731e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a3ac166f4052c77534b6cdffa4332e283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ae3b9d6b856caef74947eae3cabd1e01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a4048ec4b98ad0e479088477c0ebc606a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ae739a4a6ecaffa3492a21bb6d8f935db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>detail::CurvatureFromDCA&lt; isCCW &gt;</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>af953ad483406774ac67cd9e9bb900203</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::NormalFromDCAEstimator</name>
    <filename>classDGtal_1_1NormalFromDCAEstimator.html</filename>
    <templarg></templarg>
    <base>PosDepScaleIndepSCEstimator&lt; DCAComputer, detail::NormalVectorFromDCA &gt;</base>
    <member kind="function">
      <type></type>
      <name>NormalFromDCAEstimator</name>
      <anchorfile>classDGtal_1_1NormalFromDCAEstimator.html</anchorfile>
      <anchor>a7330a0e5c951ef3d7a3a99acbb46893c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalFromDCAEstimator</name>
      <anchorfile>classDGtal_1_1NormalFromDCAEstimator.html</anchorfile>
      <anchor>aedbb3a2d071afa6a8c629140c7b219b5</anchor>
      <arglist>(const NormalFromDCAEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a9a11b109e1224d145b89829ed7fd9677</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosDepScaleIndepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>afc2789e119896b74f7ae8420ce3119fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a3cc1728cdd5701ee142b7d3bc313870b</anchor>
      <arglist>(const double, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a54fa1bd65c151a02daabfb4bcd909920</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a8588efa89a398cadd33924d44a354a48</anchor>
      <arglist>(const ConstIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a61a5184d89a163ad6440ffd29456da5a</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>detail::PosDepScaleIndepSCEstimator&lt; DCAComputer, detail::NormalVectorFromDCA &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1NormalFromDCAEstimator.html</anchorfile>
      <anchor>a1d4cded5a07cf5d84c2044c86ea518f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DCAComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ae53c18dd09abf562567db1b30cefef39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a1aaa2f2b9b3db05d5a811277df98129b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::NormalVectorFromDCA::Value</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ab86712abc7bca320abeed801272586fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a058222a4834495d7e9e5b97b518f3208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a5a0a69f4fb6755f8c5eebe56d918352d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a65e8eb861d1bd919876ab092bb6109c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>detail::NormalVectorFromDCA</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ac365608f647659508a2eee7208692541</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TangentFromDCAEstimator</name>
    <filename>classDGtal_1_1TangentFromDCAEstimator.html</filename>
    <templarg>DCAComputer</templarg>
    <base>PosDepScaleIndepSCEstimator&lt; DCAComputer, detail::TangentVectorFromDCA &gt;</base>
    <member kind="function">
      <type></type>
      <name>TangentFromDCAEstimator</name>
      <anchorfile>classDGtal_1_1TangentFromDCAEstimator.html</anchorfile>
      <anchor>afb756ff1f8542e53d65b277512823f29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TangentFromDCAEstimator</name>
      <anchorfile>classDGtal_1_1TangentFromDCAEstimator.html</anchorfile>
      <anchor>a17dd4711b6f2225e1b6e7fd2fc5db022</anchor>
      <arglist>(const TangentFromDCAEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a9a11b109e1224d145b89829ed7fd9677</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosDepScaleIndepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>afc2789e119896b74f7ae8420ce3119fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a3cc1728cdd5701ee142b7d3bc313870b</anchor>
      <arglist>(const double, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a54fa1bd65c151a02daabfb4bcd909920</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a8588efa89a398cadd33924d44a354a48</anchor>
      <arglist>(const ConstIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a61a5184d89a163ad6440ffd29456da5a</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>detail::PosDepScaleIndepSCEstimator&lt; DCAComputer, detail::TangentVectorFromDCA &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1TangentFromDCAEstimator.html</anchorfile>
      <anchor>a66792325fd5bc5ddd8f55d98c7484705</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DCAComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ae53c18dd09abf562567db1b30cefef39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a1aaa2f2b9b3db05d5a811277df98129b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::TangentVectorFromDCA::Value</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ab86712abc7bca320abeed801272586fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a058222a4834495d7e9e5b97b518f3208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a5a0a69f4fb6755f8c5eebe56d918352d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a65e8eb861d1bd919876ab092bb6109c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>detail::TangentVectorFromDCA</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ac365608f647659508a2eee7208692541</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DistanceFromDCAEstimator</name>
    <filename>classDGtal_1_1DistanceFromDCAEstimator.html</filename>
    <templarg>DCAComputer</templarg>
    <base>PosDepScaleDepSCEstimator&lt; DCAComputer, detail::DistanceFromDCA &gt;</base>
    <member kind="function">
      <type></type>
      <name>DistanceFromDCAEstimator</name>
      <anchorfile>classDGtal_1_1DistanceFromDCAEstimator.html</anchorfile>
      <anchor>aa5dc4b5a636bf0c49c0e8e10554ee272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceFromDCAEstimator</name>
      <anchorfile>classDGtal_1_1DistanceFromDCAEstimator.html</anchorfile>
      <anchor>a82d9e471edc2aaec93de599606a99d96</anchor>
      <arglist>(const DistanceFromDCAEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosDepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a7be99be13d905245a519bf7a02b3e4e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosDepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a63f66f89a44f629ace1054b2b150bb9c</anchor>
      <arglist>(const PosDepScaleDepSCEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PosDepScaleDepSCEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>ab02aa3faf3089a7b91f2e56c972af2ff</anchor>
      <arglist>(const PosDepScaleDepSCEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PosDepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a28d44529654cfdecbeca7c63b4735011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a30af234036074800f968c1d9e2de0e07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a6345df3438a39dc6a2e59dc44b761f4e</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a8c225afc8dd02c96acbff5996a5827f2</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a10e3bf7d2ab6c889a2ac2f6aacde38d4</anchor>
      <arglist>(const ConstIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a58cf12e6359d4601f82e7dd24e5546f2</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>detail::PosDepScaleDepSCEstimator&lt; DCAComputer, detail::DistanceFromDCA &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1DistanceFromDCAEstimator.html</anchorfile>
      <anchor>adfbe6577f6714b30fc8f9e1d578dd7aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DCAComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>aceb9654478477e1474d4daa0ab8a746b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a1862147a73aa5c67eac1bd5b1e38213f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::DistanceFromDCA::Value</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a2f04c4e46aec5a374f63624f3a76bb7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>ad366d17d1256691fb530f389af342f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>af6e26e916b040edcbcb4f859265a47d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a0201376a120da9d7e9b3538c0751b109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>abae0c36f4b5dabd4e7b9ce1cd29fe1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>detail::DistanceFromDCA</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>acaed10f4de284e9c16f031160ab38af4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CurvatureFromDSSLengthEstimator</name>
    <filename>classDGtal_1_1CurvatureFromDSSLengthEstimator.html</filename>
    <templarg></templarg>
    <base>CurvatureFromDSSBaseEstimator&lt; DSSComputer, detail::CurvatureFromDSSLength &gt;</base>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSLengthEstimator</name>
      <anchorfile>classDGtal_1_1CurvatureFromDSSLengthEstimator.html</anchorfile>
      <anchor>ac80e7488073bb6a7f54872f48531129a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSLengthEstimator</name>
      <anchorfile>classDGtal_1_1CurvatureFromDSSLengthEstimator.html</anchorfile>
      <anchor>afe81d5fcbdfbb9248ba792601f4edb24</anchor>
      <arglist>(const CurvatureFromDSSLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ae3177bef0ae6cbf8f2f63e38758c46af</anchor>
      <arglist>((CUnaryFunctor&lt; detail::CurvatureFromDSSLength, SegmentComputer, Quantity &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSBaseEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ac809346b9b1ceb96c095a6b61826ea9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSBaseEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a75adc2445c88d230209f4c8ebbc73eb5</anchor>
      <arglist>(const CurvatureFromDSSBaseEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CurvatureFromDSSBaseEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ad1980700c89cc34d1022156aaf27e964</anchor>
      <arglist>(const CurvatureFromDSSBaseEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CurvatureFromDSSBaseEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a58877107cec3392126793e489fd434eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a9af558050806f3e9c443896e6d50be5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a5adf995e948ef9253739ce271a39be06</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a52cb79108e6105b0ba6c6dcf43b230e2</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ab6b916c426d8ad13d3e1e2d1c09e954b</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ad293ec3dd58f0ed0c623ef1b96dd4b3f</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>detail::CurvatureFromDSSBaseEstimator&lt; DSSComputer, detail::CurvatureFromDSSLength &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1CurvatureFromDSSLengthEstimator.html</anchorfile>
      <anchor>a460f2ca2fdfccc0a6ec156de9be9def2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>af6165f8e99e21fcf1cc01ab326a08696</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a2cb72baaf0dd0f1351248444867f12db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ac6268b11a3b06aba31a497741363bd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>af4d3e897df4a5bcecd1ccfa5698f7ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a2961b014c6e35bbacbfb3527423b002a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a198a5c5bea5fcb052d5010d7e4d85a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ac511af52e84e0324dd275d4f490cad0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>detail::CurvatureFromDSSLength</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a317ce147dcf78ccec15ee94a1773b64c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CurvatureFromDSSEstimator</name>
    <filename>classDGtal_1_1CurvatureFromDSSEstimator.html</filename>
    <templarg></templarg>
    <base>CurvatureFromDSSBaseEstimator&lt; DSSComputer, detail::CurvatureFromDSSLengthAndWidth &gt;</base>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSEstimator</name>
      <anchorfile>classDGtal_1_1CurvatureFromDSSEstimator.html</anchorfile>
      <anchor>a64d2932d52a884c69202f42528929e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSEstimator</name>
      <anchorfile>classDGtal_1_1CurvatureFromDSSEstimator.html</anchorfile>
      <anchor>a1ba2667887f313418fe16b7e2de69280</anchor>
      <arglist>(const CurvatureFromDSSEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ae3177bef0ae6cbf8f2f63e38758c46af</anchor>
      <arglist>((CUnaryFunctor&lt; detail::CurvatureFromDSSLengthAndWidth, SegmentComputer, Quantity &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSBaseEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ac809346b9b1ceb96c095a6b61826ea9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSBaseEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a75adc2445c88d230209f4c8ebbc73eb5</anchor>
      <arglist>(const CurvatureFromDSSBaseEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CurvatureFromDSSBaseEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ad1980700c89cc34d1022156aaf27e964</anchor>
      <arglist>(const CurvatureFromDSSBaseEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CurvatureFromDSSBaseEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a58877107cec3392126793e489fd434eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a9af558050806f3e9c443896e6d50be5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a5adf995e948ef9253739ce271a39be06</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a52cb79108e6105b0ba6c6dcf43b230e2</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ab6b916c426d8ad13d3e1e2d1c09e954b</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ad293ec3dd58f0ed0c623ef1b96dd4b3f</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>detail::CurvatureFromDSSBaseEstimator&lt; DSSComputer, detail::CurvatureFromDSSLengthAndWidth &gt;</type>
      <name>Super</name>
      <anchorfile>classDGtal_1_1CurvatureFromDSSEstimator.html</anchorfile>
      <anchor>ab3091576b025f41b113f17da1852c479</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>af6165f8e99e21fcf1cc01ab326a08696</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a2cb72baaf0dd0f1351248444867f12db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ac6268b11a3b06aba31a497741363bd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>af4d3e897df4a5bcecd1ccfa5698f7ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a2961b014c6e35bbacbfb3527423b002a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a198a5c5bea5fcb052d5010d7e4d85a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ac511af52e84e0324dd275d4f490cad0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>detail::CurvatureFromDSSLengthAndWidth</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a317ce147dcf78ccec15ee94a1773b64c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TrueGlobalEstimatorOnPoints</name>
    <filename>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</filename>
    <templarg>TConstIteratorOnPoints</templarg>
    <templarg>TParametricShape</templarg>
    <templarg>TParametricShapeFunctor</templarg>
    <member kind="typedef">
      <type>TConstIteratorOnPoints</type>
      <name>ConstIteratorOnPoints</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>ae97dea81153c371ec793cfc750d13e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShape</type>
      <name>ParametricShape</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a3e7c516a54e831aeae9c7d93211ebea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParametricShape::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a4cb2e943798d77e6933502b54e39a8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShapeFunctor</type>
      <name>ParametricShapeFunctor</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>acb1f5247b6fcd71b02a59bf265211a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParametricShapeFunctor::Quantity</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a2b59b7e22df8c5d4f8d3b791c9f65a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrueGlobalEstimatorOnPoints</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a78c4f69bec918da5d923088d5850b1ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrueGlobalEstimatorOnPoints</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a6a9f82e6cc8a56a903d0c06ec219cf58</anchor>
      <arglist>(const double h, const ConstIteratorOnPoints &amp;itb, const ConstIteratorOnPoints &amp;ite, ParametricShape *aShape, const bool &amp;isClosed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrueGlobalEstimatorOnPoints</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>ab410961cea56386d066d23225ac26c73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a4e32084e4fba7cb54ba397b185859a5c</anchor>
      <arglist>(const double h, const ConstIteratorOnPoints &amp;itb, const ConstIteratorOnPoints &amp;ite, ParametricShape *aShape, const bool &amp;isClosed)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a4a50f8ac170ce473180729ff5972dc3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a844d4dbde2539a0e3801b9d3b8deaee5</anchor>
      <arglist>(const ConstIteratorOnPoints &amp;itb, const ConstIteratorOnPoints &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a3f0dcdfbc0bc3b61628db0442e46df06</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TrueGlobalEstimatorOnPoints</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>ace5ba161f4f61d27ded2246fb14e142e</anchor>
      <arglist>(const TrueGlobalEstimatorOnPoints &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TrueGlobalEstimatorOnPoints &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>aab77f8e95c1d20c2eb598c41d7b83750</anchor>
      <arglist>(const TrueGlobalEstimatorOnPoints &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a406fcb36f973cb74f855326536ccdc6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsClosed</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a79f7316fb8b121ea9b7b4cea77040003</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsInit</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>abafcf07a3ce74aa2bbf71c08b2005e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParametricShapeFunctor</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>a89f92620b8db13dab4b9af41a1df3e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIteratorOnPoints</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>ac0055a8b4e87f39748c9da6fde66a9e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIteratorOnPoints</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1TrueGlobalEstimatorOnPoints.html</anchorfile>
      <anchor>af29a50078649bc3b6f9adcf569b21abb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TrueLocalEstimatorOnPoints</name>
    <filename>classDGtal_1_1TrueLocalEstimatorOnPoints.html</filename>
    <templarg>TConstIteratorOnPoints</templarg>
    <templarg>TParametricShape</templarg>
    <templarg>TParametricShapeFunctor</templarg>
    <member kind="typedef">
      <type>TConstIteratorOnPoints</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>ad480c71ada70903d923dee5343feadcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShape</type>
      <name>ParametricShape</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a062c664523b3a071616c81e450d71a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShape::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a31b59096dedef81abbe6479cb89dc964</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TParametricShapeFunctor</type>
      <name>ParametricShapeFunctor</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a79801a856d156c312c4efd14145fab43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParametricShapeFunctor::Quantity</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a62a6949b3ab8f2c37d2e15ac9dcf5693</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrueLocalEstimatorOnPoints</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>aeee19060d2add7e946722dd52813b830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrueLocalEstimatorOnPoints</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a757416559c71826b972223fe10d6e1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a771d9a68e395a6288025f375b3440212</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>ab408c880b3ca10b3ca3df0ef682d4657</anchor>
      <arglist>(ParametricShape *aShapePtr)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>ad93f9cbe3b2100ffc5eb471a259845cc</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a804c60379a8238b332a018be2b0fe031</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a61ecc42c057a107c64c1e6c547dd729d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TrueLocalEstimatorOnPoints</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a3470024f31f65f8e6d340a10bc34e637</anchor>
      <arglist>(const TrueLocalEstimatorOnPoints &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TrueLocalEstimatorOnPoints &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>abda4a0b56d06b20ea376985fcb3b146d</anchor>
      <arglist>(const TrueLocalEstimatorOnPoints &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a740385256ac60c1795749dfe37281e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a30d3cc8fd55fcac8a24302a252561968</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>a75c371627a3f97a2e29cd22172b1c439</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ParametricShapeFunctor *</type>
      <name>myFunctorPtr</name>
      <anchorfile>classDGtal_1_1TrueLocalEstimatorOnPoints.html</anchorfile>
      <anchor>ac66fbfd53d9b0d2b5b527b7f910c3af6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::TwoStepLocalLengthEstimator</name>
    <filename>classDGtal_1_1TwoStepLocalLengthEstimator.html</filename>
    <templarg>TConstIterator</templarg>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>ad7d99fc10d4cd9e2e114a01a0bca4d99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a62962708447bb5a3c3c6894746a36221</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoStepLocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>add4f3e429839b74c173c4d2d36b70fc5</anchor>
      <arglist>(const double wdirect, const double wdiag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoStepLocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>acbc3e5461a484ea340033d8b99178d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a8f701b744dda5c6f5a50ea0d7ff25277</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite, const bool &amp;isClosed)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a8920c6f476cc64a5edeb5f1ac803d445</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a967c461d030965d9b319e27026d0c396</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a948949852aaecddfe95e5f1330a32bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>TwoStepLocalLengthEstimator</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a11f428347f24ba1bfc8648d2d2d04d52</anchor>
      <arglist>(const TwoStepLocalLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>TwoStepLocalLengthEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a8384168cbd52d26abe20e28436b52a8d</anchor>
      <arglist>(const TwoStepLocalLengthEstimator &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>acd474c000a4e8767fc0e283813a4644c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myBeginIt</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>ae463636e3efb02102d768525ec9c1801</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myEndIt</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a6faee899fce079bc2e55f491f499533b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myIsInitBefore</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>ac6480c6767fede717656508b65ecc0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myWeightDirect</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a566f28aa8613d03b4e52fe7647db4ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myWeightDiagonal</name>
      <anchorfile>classDGtal_1_1TwoStepLocalLengthEstimator.html</anchorfile>
      <anchor>a5601705626b075286ba6c0b72c828098</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Adapter</name>
    <filename>classDGtal_1_1Adapter.html</filename>
    <templarg>ArithmeticalDSS</templarg>
    <member kind="function" virtualness="pure">
      <type>virtual ArithmeticalDSS::Point</type>
      <name>firstLeaningPoint</name>
      <anchorfile>classDGtal_1_1Adapter.html</anchorfile>
      <anchor>a609e3054db8a085c7599552530a269da</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ArithmeticalDSS::Point</type>
      <name>lastLeaningPoint</name>
      <anchorfile>classDGtal_1_1Adapter.html</anchorfile>
      <anchor>a8d4ca4e2c5be3455e32adc557b59be49</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArithmeticalDSS *</type>
      <name>myDSS</name>
      <anchorfile>classDGtal_1_1Adapter.html</anchorfile>
      <anchor>a1f5b8aa93a59553d7a8621207bb8ab05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Adapter4ConvexPart</name>
    <filename>classDGtal_1_1Adapter4ConvexPart.html</filename>
    <templarg>ArithmeticalDSS</templarg>
    <base>DGtal::Adapter</base>
    <member kind="function">
      <type></type>
      <name>Adapter4ConvexPart</name>
      <anchorfile>classDGtal_1_1Adapter4ConvexPart.html</anchorfile>
      <anchor>a783f8cab6a0aa528b2ecc49b7d530b06</anchor>
      <arglist>(ArithmeticalDSS &amp;aDSS)</arglist>
    </member>
    <member kind="function">
      <type>ArithmeticalDSS::Point</type>
      <name>firstLeaningPoint</name>
      <anchorfile>classDGtal_1_1Adapter4ConvexPart.html</anchorfile>
      <anchor>af595d0f3c1bb18d201d0b70e599c213e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArithmeticalDSS::Point</type>
      <name>lastLeaningPoint</name>
      <anchorfile>classDGtal_1_1Adapter4ConvexPart.html</anchorfile>
      <anchor>ad908df79b9d1733666eb3540dae953eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArithmeticalDSS *</type>
      <name>myDSS</name>
      <anchorfile>classDGtal_1_1Adapter.html</anchorfile>
      <anchor>a1f5b8aa93a59553d7a8621207bb8ab05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Adapter4ConcavePart</name>
    <filename>classDGtal_1_1Adapter4ConcavePart.html</filename>
    <templarg></templarg>
    <base>DGtal::Adapter</base>
    <member kind="function">
      <type></type>
      <name>Adapter4ConcavePart</name>
      <anchorfile>classDGtal_1_1Adapter4ConcavePart.html</anchorfile>
      <anchor>abb18657f5772fd188126a51e848cb00c</anchor>
      <arglist>(ArithmeticalDSS &amp;aDSS)</arglist>
    </member>
    <member kind="function">
      <type>ArithmeticalDSS::Point</type>
      <name>firstLeaningPoint</name>
      <anchorfile>classDGtal_1_1Adapter4ConcavePart.html</anchorfile>
      <anchor>ae1a87d64b41c2046ac5faf4486b040fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArithmeticalDSS::Point</type>
      <name>lastLeaningPoint</name>
      <anchorfile>classDGtal_1_1Adapter4ConcavePart.html</anchorfile>
      <anchor>a906c56574026d5678b2f236efa83a189</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ArithmeticalDSS *</type>
      <name>myDSS</name>
      <anchorfile>classDGtal_1_1Adapter.html</anchorfile>
      <anchor>a1f5b8aa93a59553d7a8621207bb8ab05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FP</name>
    <filename>classDGtal_1_1FP.html</filename>
    <templarg>TIterator</templarg>
    <templarg>TInteger</templarg>
    <templarg>connectivity</templarg>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, TInteger &gt;</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a48554d9b9df34830318d9208645a81da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, TInteger &gt;</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a2ba786bbe0e7f1ea7aaeb69a5c5d9e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, double &gt;</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a228817f46fc1c7ea48ccb1047bb80fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, double &gt;</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a4918c58bba6acb9711463f9f654ee918</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::ArithmeticalDSS&lt; TIterator, TInteger, connectivity &gt;</type>
      <name>DSSComputer</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>ae79676496d65f9250eb2c8aad18e0c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::ArithmeticalDSS&lt; DGtal::Circulator&lt; TIterator &gt;, TInteger, connectivity &gt;</type>
      <name>DSSComputerInLoop</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a558460e93fbf8e8d6af50fbd3231d446</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; Point &gt;</type>
      <name>Polygon</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a649537ec4177fdcbde1ce68bf080ca46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a5762f2c5fb7d2d23c541782d71d7db5a</anchor>
      <arglist>((CInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FP</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>ac807a5ee2174ac5f98d6628f8d9cac25</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FP</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>ac11158d6453ba0efa52dc82b2e3e1cb2</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite, const bool &amp;isClosed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FP</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>aa1004151b918128fcde82e8227d2181d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Polygon &amp;</type>
      <name>polygon</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>ab2c5b46d63950946d7cbb0a15d50926b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>flagIsClosed</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>ae1c98327db20abe384bcf1a291a0421a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a5a8c101500e0334a8d957ae27ffca379</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Polygon::size_type</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>ad0263b2e4f3d7046f49ab7fe43ba3f11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>copyFP</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a816385c1d6366e78cd0ec7293d3491fc</anchor>
      <arglist>(OutputIterator result) const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>copyMLP</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>abebea7bc6dcb5837a78a6081f833530d</anchor>
      <arglist>(OutputIterator result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>ac05ed744ebdb2667f93cfaf309a5ebf2</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a1134b8fa2d9f038fd7ce3f9766de4651</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>initConvexityConcavity</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>abfb4cb60b78ecbe9411c15eb50c0b6a5</anchor>
      <arglist>(DSS &amp;aDSS, Adapter *&amp;anAdapter, const typename DSS::ConstIterator &amp;i)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>mainAlgorithm</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a70ed6a155ae1b34234751b712eb2411e</anchor>
      <arglist>(DSS &amp;currentDSS, Adapter *adapter, bool isConvex, typename DSS::ConstIterator i, const typename DSS::ConstIterator &amp;end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>RealPoint</type>
      <name>getRealPoint</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>afefdac86b24219aaed65e6a547f5e6ba</anchor>
      <arglist>(const Point &amp;a, const Point &amp;b, const Point &amp;c) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>quadrant</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>aaecd47825d2fbe1d99fbafd12facdb28</anchor>
      <arglist>(const Vector &amp;v, const int &amp;q) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FP</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>ab1c2ec7ef3aa13b3f20a707a751fef30</anchor>
      <arglist>(const FP &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>FP &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a7e9649d4c97e75e67cb258bd6c8c4a29</anchor>
      <arglist>(const FP &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polygon</type>
      <name>myPolygon</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a79f884d9b0c0acaa0f694d5e74fb5cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsClosed</name>
      <anchorfile>classDGtal_1_1FP.html</anchorfile>
      <anchor>a6cce87b6182a658330ff636124ef2684</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FrechetShortcut</name>
    <filename>classDGtal_1_1FrechetShortcut.html</filename>
    <templarg>TIterator</templarg>
    <templarg>TInteger</templarg>
    <class kind="class">DGtal::FrechetShortcut::Backpath</class>
    <class kind="class">DGtal::FrechetShortcut::Cone</class>
    <class kind="struct">DGtal::FrechetShortcut::Tools</class>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a50c1f17334aa39359540ecdf89e98467</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>adfa63ec888f5e1d2da76e27538b70c4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FrechetShortcut&lt; ConstIterator, Integer &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>ac3a4b9e7a098e036c2473c61165abfd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FrechetShortcut&lt; std::reverse_iterator&lt; ConstIterator &gt;, Integer &gt;</type>
      <name>Reverse</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a263d44164f0a7247bcbcf5968ceb603c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; ConstIterator &gt;::Value</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a380b9f901b0d81594b99df2e5cce84d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; ConstIterator &gt;::Value</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a589d8e0c4b9f484ea1a8dccc340e2e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::Coordinate</type>
      <name>Coordinate</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a493b024e061791008cdafb9bf7f9b38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>adc58c434530b40470cbf4adf05452b9f</anchor>
      <arglist>((CInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrechetShortcut</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a01bb6b8bbcd1157b1ea43520d2df2346</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrechetShortcut</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a7eb6b73c198f9dcb2664aa3399bdbd73</anchor>
      <arglist>(double error)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a7e4f5bdd55cbfc0e0fefcfb7f8464cc4</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>FrechetShortcut</type>
      <name>getSelf</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a3e228e8e022fb40b57304655c555b158</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrechetShortcut</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a648d8f1e279dc168de538ceace760ef4</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>FrechetShortcut &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a7ae06433d517411dd7f974bb0f78de19</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Reverse</type>
      <name>getReverse</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a1d0890e37a01c125a97c6a3d5add29dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>ab0d311376d65caa0b22d5d33a6c32070</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a84d50b8eb330aae299a8e262fd306235</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FrechetShortcut</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>aa66d86210d9a2d4e9be66e21e700d251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableForward</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a293163644a3dd697321d8f105a21d0a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendForward</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a2523fa362d834bd812f76015d80c9a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>ad71d3f65179cbbac7eb7afa266f492e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a6182d78f704422d2966827b0c32f02dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a763749ed4ef7ecbdd5403c4038872c14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>ac0756df8f2eb8f2181067dac0d077710</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateBackpath</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a81765392e396d27887936b188dec78ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testUpdateBackpath</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a5a2df9f1dc201651308fff06e6e7bde9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBackpathOk</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a6cb08802bd293d9fa5038ce13aecc672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetBackpath</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a38ef039df763406bb66932a196356ec5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCone</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a1cfa02ca0b32f558d10d17f907c5a7f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>testUpdateWidth</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a4cf4e0a697b102838262a72869fc4c02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cone</type>
      <name>computeNewCone</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a738f0903a8cec6c94163e10f999c118e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>updateWidth</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>aa4c41abcf69826987341fa76fd562404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a92bcd38979bb4bb74795e8dbc498519e</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myError</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a4c18c8c089d30dda9b96181350b2f747</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Backpath &gt;</type>
      <name>myBackpath</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>aa7335b1ad842a11ce0bde7d547482827</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cone</type>
      <name>myCone</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a63243d785888e7517ec21b077cc3c76c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>ab54af8a640dbbd4fb8456980b3a0c3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1FrechetShortcut.html</anchorfile>
      <anchor>a01c874b00c9b8cb85a213fc6d341ef34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FrechetShortcut::Backpath</name>
    <filename>classDGtal_1_1FrechetShortcut_1_1Backpath.html</filename>
    <class kind="struct">DGtal::FrechetShortcut::Backpath::occulter_attributes</class>
    <member kind="function">
      <type></type>
      <name>Backpath</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>ace4d7d1f3a100b1ad3ddd26a49d535e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Backpath</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>ae1804da34e8b53bae883c2b4a7a064dd</anchor>
      <arglist>(const FrechetShortcut&lt; ConstIterator, Integer &gt; *s, int q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Backpath</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>ae0d6f357efdd7663258e780cabd06f3d</anchor>
      <arglist>(const Backpath &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Backpath</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>aba3358f91b99bf119f6079dc2f9701d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>aa58bcdb04210f1665255f17036ca52a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPositivePoint</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>ae4f4c72bde709c060d3ca943a2a9ed46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addNegativePoint</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>afae1ee4c6f2546462c4aa1d014c13652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBackPathFirstQuad</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>a851e58666633a0d32f48b51be0f372d3</anchor>
      <arglist>(int d, const ConstIterator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOcculters</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>a87636293904d561c0d05154472694ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateIntervals</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>aa29bfbf02f5e88939689494fea1f21f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myQuad</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>aa53187611932f13a1a8d6c354be7832a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myFlag</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>a851800d95320d9538107e78f781bac48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>occulter_list</type>
      <name>myOcculters</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>aed565b5ff02618a291e95d8028a3241d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::icl::interval_set&lt; double &gt;</type>
      <name>myForbiddenIntervals</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>a1aab30992a5fa5db754d67087fd0236a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myIt</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>ac13bbcd99e21f832fc93408d88d24a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>struct DGtal::FrechetShortcut::Backpath::occulter_attributes</type>
      <name>occulter_attributes</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>a8521db822a21a2119d96251ea619b963</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>map&lt; ConstIterator, occulter_attributes &gt;</type>
      <name>occulter_list</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>a2d2b51d4a515a0fc0e904912609db79b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const FrechetShortcut&lt; ConstIterator, Integer &gt; *</type>
      <name>myS</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>a0d080c0efd733c4f4a8d4081659d15d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>FrechetShortcut&lt; ConstIterator, Integer &gt;</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Backpath.html</anchorfile>
      <anchor>a9b5256588ea070bc16b71b3c659c2bbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::FrechetShortcut::Backpath::occulter_attributes</name>
    <filename>structDGtal_1_1FrechetShortcut_1_1Backpath_1_1occulter__attributes.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>angle_min</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Backpath_1_1occulter__attributes.html</anchorfile>
      <anchor>a5c6bc2af69b1b08344ad6a0adb4337ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>angle_max</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Backpath_1_1occulter__attributes.html</anchorfile>
      <anchor>a2e596fc5bb8e780e855aec60fa593e62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FrechetShortcut::Cone</name>
    <filename>classDGtal_1_1FrechetShortcut_1_1Cone.html</filename>
    <member kind="function">
      <type></type>
      <name>Cone</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>ace3763693c42d09b6af5a96fce3a92b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cone</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>a8c7b863c5774c6574c2fbfce9e1f13f9</anchor>
      <arglist>(double a0, double a1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cone</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>ab695593baeb7b0df011c7e0bbb034c99</anchor>
      <arglist>(double x, double y, double x0, double y0, double x1, double y1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>a6d5691fd3af6803b40d6b7b8bbbf0eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Cone &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>a8b4c12d6ffc6d1e90d7cb6d2d44ba9d9</anchor>
      <arglist>(const Cone &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>intersectCones</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>a2edc60e0b9678106021ddb5a0cf9692d</anchor>
      <arglist>(Cone c)</arglist>
    </member>
    <member kind="function">
      <type>Cone</type>
      <name>intersectConesSimple</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>a833b6560f3e144438dae970c3a8ebaa3</anchor>
      <arglist>(Cone c)</arglist>
    </member>
    <member kind="function">
      <type>Cone</type>
      <name>symmetricalCone</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>a96ebc2f76b2fe180f32d98347d04a4c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>a26e295e901e99b1115488771aca832e4</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myMin</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>adca5ef98919b6495bd9c9ec7fca1b0a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myMax</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>a06b15c0bc94d3c3ab9e80ccb4e4d3e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myInf</name>
      <anchorfile>classDGtal_1_1FrechetShortcut_1_1Cone.html</anchorfile>
      <anchor>a6a44b20768cb580a60b2ae88f366d56c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::FrechetShortcut::Tools</name>
    <filename>structDGtal_1_1FrechetShortcut_1_1Tools.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isBetween</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Tools.html</anchorfile>
      <anchor>a886894e4867212844719a8acea724222</anchor>
      <arglist>(double i, double a, double b, double n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>circle_circle_intersection</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Tools.html</anchorfile>
      <anchor>a2744ae32d706fd6602750918d73caf6f</anchor>
      <arglist>(double x0, double y0, double r0, double x1, double y1, double r1, double *xi, double *yi, double *xi_prime, double *yi_prime)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>circleTangentPoints</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Tools.html</anchorfile>
      <anchor>a7ffc90094105ba179c95f42ca45cbb80</anchor>
      <arglist>(double x, double y, double x1, double y1, double r1, double *xi, double *yi, double *xi_prime, double *yi_prime)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>computeAngle</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Tools.html</anchorfile>
      <anchor>a98bc087d378a29df1ed8471c8c2c8f40</anchor>
      <arglist>(double x0, double y0, double x1, double y1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>angleVectVect</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Tools.html</anchorfile>
      <anchor>a612c1f40221d1f1e8317264fd639d31f</anchor>
      <arglist>(Vector u, Vector v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>computeChainCode</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Tools.html</anchorfile>
      <anchor>aa6f6209556390a5390fd6ca3a4050cf6</anchor>
      <arglist>(Point p, Point q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>computeQuadrant</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Tools.html</anchorfile>
      <anchor>ad8b040ddc17b4824552dae022963898c</anchor>
      <arglist>(Point p, Point q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>rot</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Tools.html</anchorfile>
      <anchor>aa4fb5fce47906a7fb9293c7dad8c7a40</anchor>
      <arglist>(int d, int quad)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>chainCode2Vect</name>
      <anchorfile>structDGtal_1_1FrechetShortcut_1_1Tools.html</anchorfile>
      <anchor>a65c7c705ce2d3e12fa7ce394a4b8b375</anchor>
      <arglist>(int d)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FreemanChain</name>
    <filename>classDGtal_1_1FreemanChain.html</filename>
    <templarg>TInteger</templarg>
    <class kind="class">DGtal::FreemanChain::CodesRange</class>
    <class kind="class">DGtal::FreemanChain::ConstIterator</class>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a5bc7f8250a9f9c1fb4d0a1e1f650f4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FreemanChain&lt; Integer &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a6faadcbf8f2196a8c81494e042041f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; 2, Integer &gt;</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a68b4f0665e6ceae1c57d671fa36baaf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; 2, Integer &gt;</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a1031ee5e339f8db01a86f556d3d47b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a1dcd9faf6367ae82933d816f08c97c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Index</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a8bc0757d892ca366e4b563361f5b8575</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ab16d2fa72e33eb70ed3e805acddf7070</anchor>
      <arglist>((CInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type>CodesRange</type>
      <name>getCodesRange</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a508b35e2c6f96026e566fafecc421fa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FreemanChain</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a537af69c4d8cbe24ebc411e12f8c7837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreemanChain</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a2d5b3e9a3b0e0b4932be9ac2d63697d5</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, TInteger x=0, TInteger y=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreemanChain</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a0ef3ba8228de369880d0e82761d6bc48</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;vectPoints)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreemanChain</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ac4e3badc87626dd9aa0e1a7c58f34cba</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FreemanChain</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>acc0313a569abb08113b9e19820f7274e</anchor>
      <arglist>(const FreemanChain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>FreemanChain &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a0bbba2459c87487322ee24d9570d622c</anchor>
      <arglist>(const FreemanChain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a6b1cf43c48042935e7560a42562fc3b5</anchor>
      <arglist>(const FreemanChain &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a1eb1a6879ed93a96d39c299fcb6c3a5a</anchor>
      <arglist>(const FreemanChain &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>code</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a8347360975de4558a9400e1402095d4e</anchor>
      <arglist>(Index pos) const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a0a551c5a6efe54a378b7ada926d6e889</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FreemanChain</type>
      <name>subChain</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>aa29725f472d381f651d631cd66792533</anchor>
      <arglist>(Index pos, Size n) const </arglist>
    </member>
    <member kind="function">
      <type>FreemanChain</type>
      <name>operator+</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a7fe9481c3892b28c507ea8087439df92</anchor>
      <arglist>(const FreemanChain &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>FreemanChain &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a322414b4135f730d6e2c5ff5f7115be7</anchor>
      <arglist>(const FreemanChain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoundingBox</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a299aee5caffb99480d0ecd065de1a623</anchor>
      <arglist>(TInteger &amp;min_x, TInteger &amp;min_y, TInteger &amp;max_x, TInteger &amp;max_y) const </arglist>
    </member>
    <member kind="function">
      <type>Self::ConstIterator</type>
      <name>findQuadrantChange</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a3eaaa93bbbd526619e8ba3d9a56a6bcb</anchor>
      <arglist>(OrderedAlphabet &amp;A) const </arglist>
    </member>
    <member kind="function">
      <type>Self::ConstIterator</type>
      <name>findQuadrantChange4</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ab928d143f86f8c9c972ee50020191b41</anchor>
      <arglist>(OrderedAlphabet &amp;A) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isClosed</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>af49671ad27946ad41fdfe7e71e8cadfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ccwLoops</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a83078578bf99acc97116a19f659b1092</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getPoint</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a9b69d58e8338376f2ba350c50276a859</anchor>
      <arglist>(Index pos) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>firstPoint</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a310c08259ff1539c774e43d15d050886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>lastPoint</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a03c39d4912b68acd4c4737a39ea52b26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>totalDisplacement</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ad9181b5638d1bc4f2d82ab69f91e0a94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FreemanChain &amp;</type>
      <name>extend</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a934ba223b3734ef8022aa38a61bc13e7</anchor>
      <arglist>(char code)</arglist>
    </member>
    <member kind="function">
      <type>FreemanChain &amp;</type>
      <name>retract</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a4ac72350d20289f1717c0a2ee017a03b</anchor>
      <arglist>(Size n=1)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>adadc3381807f63d38d0a3bc468b972b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>aeb64e50f10e798c9db8ffcc972af4844</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a323e5b916a906a246e5a2fd78bf5caf7</anchor>
      <arglist>(Index pos) const </arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>previous</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a2f6596f608c9ecd99685ca38a8da2f72</anchor>
      <arglist>(Index pos) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a339adb297beea4e15a6ba012e6b1745a</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ad2d075450aeabfff3546de53f671667c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a01955351b0d482c4b1c40142b3ff7798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>write</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a37928746609243f18387c6c44fdc134e</anchor>
      <arglist>(std::ostream &amp;out, const FreemanChain &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a7993cf154e4382aec973fd78beb68252</anchor>
      <arglist>(std::istream &amp;in, FreemanChain &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readFromPointsRange</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a7a7aa7f00ecf0e0a6783b88805a33e86</anchor>
      <arglist>(const TConstIterator &amp;itBegin, const TConstIterator &amp;itEnd, FreemanChain &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readFromPointsRange</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a45897c96d09d9984ca59f6f9ada510df</anchor>
      <arglist>(const TRange &amp;aRange, FreemanChain &amp;c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>getContourPoints</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>aa7cf4f347548c8a77d50721461185b25</anchor>
      <arglist>(const FreemanChain &amp;fc, std::vector&lt; Point &gt; &amp;aVContour)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>movePointFromFC</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a2111f6bb340056bb864befd4232b90d3</anchor>
      <arglist>(Point &amp;aPoint, char aCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>movement</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a5dcc528286fca550b4151546cb55b2f0</anchor>
      <arglist>(char aCode1, char aCode2, bool ccw=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>addToCode</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ab8156df6f33d9dcdc585276f3819579e</anchor>
      <arglist>(char code, int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>displacement</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a202abab043db3e2b0c72e0cd7e084592</anchor>
      <arglist>(int &amp;dx, int &amp;dy, char aCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point</type>
      <name>displacement</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>abee2a965c9d95f916d1b07ca3f97a54d</anchor>
      <arglist>(char aCode)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char</type>
      <name>turnedCode</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>acc20f6a3a904eef5b8608b4ee111ef1c</anchor>
      <arglist>(char aCode, bool ccw=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>pointel2pixel</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ae4c8ab0c2ed2932d46ff6c4acb7cd520</anchor>
      <arglist>(FreemanChain &amp;aPixChain, std::vector&lt; unsigned int &gt; &amp;aPl2pix, std::vector&lt; unsigned int &gt; &amp;aPix2pl, const FreemanChain &amp;aPlChain)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>innerContour</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a7dfb0a029f93d87f049c50a5c7f43261</anchor>
      <arglist>(FreemanChain &amp;aInnerChain, std::vector&lt; unsigned int &gt; &amp;aOuter2inner, std::vector&lt; unsigned int &gt; &amp;aInner2outer, const FreemanChain &amp;aOuterChain, bool ccw=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>cleanContour</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ab27d7b85c348d6844d975e4385bd0350</anchor>
      <arglist>(std::vector&lt; FreemanChain &gt; &amp;aCleanCs, std::vector&lt; std::pair&lt; unsigned int, unsigned int &gt; &gt; &amp;aC2clean, std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;aClean2c, const FreemanChain &amp;c, bool ccw=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>cleanOuterSpikes</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ae3a343f70d1f29eea1106a0dffc47b79</anchor>
      <arglist>(FreemanChain &amp;aCleanC, std::vector&lt; unsigned int &gt; &amp;aC2clean, std::vector&lt; unsigned int &gt; &amp;aClean2c, const FreemanChain &amp;c, bool ccw=true)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>chain</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a93af5d1b79efd43adaa30507cae01b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>x0</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a76d11c8e324b17313bc0f600868d29be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>y0</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a84910ab9acf6ecfd564b7ad43e70e26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>xn</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a55caebc2a6a013c3064cc3e58fefebff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Integer</type>
      <name>yn</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>ac24380bf3a3370dcf04112e531f3ff5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeLastPoint</name>
      <anchorfile>classDGtal_1_1FreemanChain.html</anchorfile>
      <anchor>a94efdf10668d43699ae27885f2481d93</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FreemanChain::CodesRange</name>
    <filename>classDGtal_1_1FreemanChain_1_1CodesRange.html</filename>
    <member kind="typedef">
      <type>std::string::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>af6e410d12b0b70eea1e53952165f73ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string::const_reverse_iterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>ade0a39ced21ffb01880029900779197b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Circulator&lt; ConstIterator &gt;</type>
      <name>ConstCirculator</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a32fee5511a4b00f9cdd5048668bf69c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstCirculator &gt;</type>
      <name>ConstReverseCirculator</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>ac7b67625bf1809aac66c907f2a5a6fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CodesRange</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>aeed4d8ce62c2f7f13cec11b7fd74f48b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CodesRange</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>ad6bf41592634e702d0e24de9ae5efea9</anchor>
      <arglist>(const std::string &amp;aChain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CodesRange</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a7ddd1417b755cc56eb744d5019441a6d</anchor>
      <arglist>(const CodesRange &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type>CodesRange &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a7a05870440e8e538b66814ea7e79ac49</anchor>
      <arglist>(const CodesRange &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CodesRange</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a02e777f205d7970123d9c2fbceff0a87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string::size_type</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>aebb78bd3b77164104288b7773c366771</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a10c23c242288bb418cc0506bd949615f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>ac745f929995ea38921eef550c42ebbf9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a2ae7fdbd79609a1b019fbd605b2d946d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a26f2dd3cbb96d735e18241c149eb747b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a48a0b3cafe71e7c84b6d97df7be80491</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a52edc0d43fb26cceb136c89d47ae12e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstCirculator</type>
      <name>c</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>af72ac97d631e85948a20d44fb795a5ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseCirculator</type>
      <name>rc</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>ab00997083814c20205f9379800f10705</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const std::string</type>
      <name>myChain</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a80dff6859a577076830a45f491cdd6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1CodesRange.html</anchorfile>
      <anchor>a4e49ac036df6dbf07387b69b3af02d7e</anchor>
      <arglist>(ostream &amp;out, const CodesRange &amp;object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FreemanChain::ConstIterator</name>
    <filename>classDGtal_1_1FreemanChain_1_1ConstIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>ae620dd83eed088474c5350135ad4c070</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>abaac1550f144ed22c27c447c8c9e589a</anchor>
      <arglist>(const FreemanChain &amp;aChain, Index n=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a134e9abf958dec7111e44db429e010de</anchor>
      <arglist>(const FreemanChain &amp;aChain, Index n, const Point &amp;XY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a0fe19bd89b0357d5cd4b9ad1e3e50343</anchor>
      <arglist>(const ConstIterator &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a7ee7bfe4c7b6637d7444b4a1a77b578b</anchor>
      <arglist>(const ConstIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstIterator</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>ae6005e56ad994453781c7a33b23730e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a7f63755bbdb69afe10a94e8593d734af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a9ae5990e0a204a0d1122b21505c0332a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a4a187af0fc195c7f583dcba785cd45f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>aebdb54ad64d4c33abc1a5877bc472d82</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>ab27eea4ea2331495f569501782d592a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextInLoop</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a471e99f9d64bfb1c9c21968f1f8390f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getPosition</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>afb37fdda225086c779e51ed44ab267f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const FreemanChain *</type>
      <name>getChain</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a55fda88e18ea7d82d0d8b3f11d63ed13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getCode</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>ae654c61e07425553a6b4c8808fd9990e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>ad0bd96e8deabe1983e084684c331d77f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a86a1ef1a04e94a2af26a31addaf034b8</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>previous</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>ab8a3b61b76756bead6d7f9e326049e6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>previousInLoop</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a32a99e93d1435decba2b66220dc9b7c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a996d8d2546556fff462e105632a3bc11</anchor>
      <arglist>(const ConstIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a0187f93697b71e2a3311f7e22cae8dec</anchor>
      <arglist>(const ConstIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>af3fe7b6a651491ed3310fd11fc7f85ec</anchor>
      <arglist>(const ConstIterator &amp;aOther) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const FreemanChain *</type>
      <name>myFc</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a343825a3eea6e72261d642935bf8190f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Index</type>
      <name>myPos</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>a1047db2b3ca9a5cb1192e414d0184e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myXY</name>
      <anchorfile>classDGtal_1_1FreemanChain_1_1ConstIterator.html</anchorfile>
      <anchor>ae963ff83bffa3e257d1f2ecd395a8767</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::GeometricalDCA</name>
    <filename>classDGtal_1_1GeometricalDCA.html</filename>
    <templarg>TConstIterator</templarg>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a6b8a11c832433f599a9ba0071605679c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeometricalDCA&lt; ConstIterator &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a38ed74d18bb39ca4651107530eca3ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeometricalDCA&lt; ReverseIterator&lt; ConstIterator &gt; &gt;</type>
      <name>Reverse</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>abd2840a5b71271cf2ed8c2cc2236b469</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; ConstIterator &gt;::Value</type>
      <name>Pair</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>aa432c1560dde4c2723e7b82e27e55352</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pair::first_type</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a7732661a075f6b9cb1a978e4536b6198</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>aab463edce737dfd755cd8dfee2d6bc43</anchor>
      <arglist>((ConceptUtils::SameType&lt; typename Pair::first_type, typename Pair::second_type &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a8bd29c5fc91ef3b0706d7f43fe52599b</anchor>
      <arglist>((Point::dimension==2))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometricalDCA</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a0ce37b18a608df121e891067d5173047</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometricalDCA</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>aab1937b154056eb7d92429cffbc9a24b</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a90c20dcdc0d655b5c325e16d5bf1958e</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeometricalDCA</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>aadcca2ed9e7e9cb0b71f6751e4d51831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>ad1dd693cb086b7727dde732da058b3b3</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>ae848f925476bd6c1d13857e994def895</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>getSelf</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>af074dde446a5633f7a64e21a638bd081</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Reverse</type>
      <name>getReverse</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a01a427bf87aa7b83e5513b9ea9ad5586</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a336895081e8d21fdb2a10eeecb9ea4fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a617c4d51c94d4b6e6cfef09ea7d45953</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>af7ed15a52e2708cc1bc754d9b2ac54cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStraight</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>ab9fe98c42518a3627b544947a91f4b53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GeometricalDSSPtr</type>
      <name>getGeometricalDSSPtr</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>acb8c2eef3db21b5fc1b2b9db78eebb9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Circle</type>
      <name>getSeparatingCircle</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>ad9ac907f9269326e229bbad9b2856c53</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a21fddf2bfb3d51017cab4933b01689bd</anchor>
      <arglist>(const ConstIterator &amp;anIt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendForward</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a2afefc3f84f0a95c36670d3e7482f2ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableForward</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a00012231e98167e70a970ef09019e0ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendBackward</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>acffd34f9d6868768692ea5411e173c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableBackward</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>ac8991eabf8d872f24f548fcd8676bb3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>aef15666887447328fe24ca797af81e34</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a1f46f778e1784e7e09dccc897854a89e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>CowPtr&lt; GeometricalDSS&lt; ConstIterator &gt; &gt;</type>
      <name>GeometricalDSSPtr</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a4b6e26183953e9fc95b764909f29b19e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>CircleFrom3Points&lt; Point &gt;</type>
      <name>Circle</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>ae9ea20e008ef6e714b7b8d5aa02fd450</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Circle, false, true &gt;</type>
      <name>PInCirclePred</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a436218de90627d48822e71faf085ed14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Circle, true, true &gt;</type>
      <name>QInCirclePred</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a183910cc873a85332174d97292a140b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isCircularlySeparable</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a7a347080418bb93033b481ca446fe752</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite, const Point &amp;aPole, Point &amp;Pf, Point &amp;Pl, Point &amp;Qf, Point &amp;Ql)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>aeff221b3c6af20caeb140ee58e979c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a402c2442d1fc703a7cd2bc8126347d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GeometricalDSSPtr</type>
      <name>mySegPtr</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a50e13d79f98e89d6d530c22c23ba4757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Circle</type>
      <name>myCircle</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>a140bc8006acad46c938a901f649cefbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsInit</name>
      <anchorfile>classDGtal_1_1GeometricalDCA.html</anchorfile>
      <anchor>adc2c803afdbf098a32b2b12f83dfdaa2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::GeometricalDSS</name>
    <filename>classDGtal_1_1GeometricalDSS.html</filename>
    <templarg>TConstIterator</templarg>
    <member kind="typedef">
      <type>TConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>aae8b273da03a4c19939f57d477262561</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeometricalDSS&lt; ConstIterator &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a3aa812bfba66c6a8c109b22ce2e06253</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeometricalDSS&lt; ReverseIterator&lt; ConstIterator &gt; &gt;</type>
      <name>Reverse</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a58926d1eb7367cf9f2a9cbcc1779e55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorCirculatorTraits&lt; ConstIterator &gt;::Value</type>
      <name>Pair</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>ac22d6a20410ba532a5003cb3d7986efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pair::first_type</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>aff1284b86295d499df75d0e846f400cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StraightLineFrom2Points&lt; Point &gt;</type>
      <name>StraightLine</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>af18366a4f10d04676755e4c78e3f4204</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Preimage2D&lt; StraightLine &gt;</type>
      <name>Preimage</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a6c7c034d07d9befe6741ee1d03aca2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CowPtr&lt; Preimage &gt;</type>
      <name>PreimagePtr</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a418d37cc218346e33806ea3a4890e2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a55005156ae97c2df5476a2b628e4c68f</anchor>
      <arglist>((ConceptUtils::SameType&lt; typename Pair::first_type, typename Pair::second_type &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometricalDSS</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a4d2a30f22b20a06ce2ad1ad29d3f17e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometricalDSS</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a04276c76a4234833e6de75cee7975911</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a4ac98557d634be5aaa19e42078ec175c</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeometricalDSS</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a9e124967334a6ba6ffadf56db5876246</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a4e35809b8ee23ed2694f22e8eed7c22d</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>aff5b557ac60d2308f7fa4b5fee56e1d2</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>getSelf</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a6ceef75da45c16649f2deb8f17e3126f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Reverse</type>
      <name>getReverse</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a26ec1f1eac1fe8fcd925bf45ae14d1b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a12ef3190dfa09f08fc3049a3433fc081</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a981d8a4e1c717f24ab7dc8cdf2c1a64b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a2c3b67b0c2a434b9f573b49f46c806bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getUf</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a70f320435742b874c6b655703de1e0d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getUl</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a0bc83d8b05443b409fbfe07da2b648bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLf</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a739f96fbc7a789eb7e68a8927233cdd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLl</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>aea1dafe772679723f00d85bc0eb1b03b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClockwiseOriented</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a2ade564c297ee506bc0e2c2aec464473</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameters</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a088429052bb5248172f7eab691fe649a</anchor>
      <arglist>(double &amp;alpha, double &amp;beta, double &amp;gamma) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projects</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a002b43515e6bcf393462b2d0b4c257c1</anchor>
      <arglist>(double &amp;x, double &amp;y, const double &amp;alpha, const double &amp;beta, const double &amp;gamma) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>ad698e5ebf0cad5f9df3c156993579e78</anchor>
      <arglist>(const ConstIterator &amp;anIt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendForward</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a04b2e638f35473962fcd0a6abf4a4f9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableForward</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a03fbe029623084ae871e759ccd380284</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConcave</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a38c2d95fb974d78720776161f652a5db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConvex</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>af0be1e8d3e08cecde81c5a84286fe2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendBackward</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a1914871ad60a84289cb473c7308d4dc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendableBackward</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>ad806dd58512a3560f6f0df6053147a15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOppositeEndConcave</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a37d48c3169b11b8c70f551caf14a2556</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOppositeEndConvex</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a8e2a3857f851033892934a472d30ffd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>abad32a6b55f66437437f38805a311195</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a85d891b7c11223c5790e3ee96c8df925</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a99a7c26392fc2596e8f8676063c442c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a266abb61c2119aff42466abfbec8f31b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PreimagePtr</type>
      <name>myPreimagePtr</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>abc4d6734a9d7fb397193d0e91544c820</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsInit</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>a696f4f96cb77c9df513e6df203feb8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsCW</name>
      <anchorfile>classDGtal_1_1GeometricalDSS.html</anchorfile>
      <anchor>ab7834d169afb63780a55b320d9b706bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::GreedySegmentation</name>
    <filename>classDGtal_1_1GreedySegmentation.html</filename>
    <templarg>TSegmentComputer</templarg>
    <class kind="class">DGtal::GreedySegmentation::SegmentComputerIterator</class>
    <member kind="typedef">
      <type>TSegmentComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>a48dddaede8dd6951c54350ffa772a485</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>ae19e89b4c6f44579a21f810d5eb75178</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>a1c605efa017208801a8744576d94ec81</anchor>
      <arglist>((CForwardSegmentComputer&lt; TSegmentComputer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GreedySegmentation</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>aaf63ba6392b57db4b699e2fc0ba1b908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GreedySegmentation</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>a53bab6a5ba2a68ae37d2fe93d4bbd22b</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, const SegmentComputer &amp;aSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubRange</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>ade5c7ccc33f7c00ffbae8a82d5742dfa</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMode</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>a20f6079b224f5805458b2f965e8187fe</anchor>
      <arglist>(const std::string &amp;aMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GreedySegmentation</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>a16015f1bae6117c63daf8e1d3d8e45b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GreedySegmentation::SegmentComputerIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>af52ca427496a12718648946808c18ce1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GreedySegmentation::SegmentComputerIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>aedd5192d38c78f8010d45519627b2a12</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>aa2edac887c15155e9fdb65d459157225</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>ac2065a6f435e0b8c15f1312de880fccf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GreedySegmentation</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>afc88d3d3247fd551fd5f0675783c8c92</anchor>
      <arglist>(const GreedySegmentation &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GreedySegmentation &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>a2209f9ad8044678aa0c8bef3361e4880</anchor>
      <arglist>(const GreedySegmentation &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>abd537eb0748ebdd37b285491add39528</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>a438585fe549bd3eac2fb8cacc964cf95</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myStart</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>af20069876f65b9fee3b0983ee15d3567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myStop</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>ac8c68c4f0f03836ce7ebe23d5ed92c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>myMode</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>a39e766317d420b14ed856a9ed221946a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SegmentComputer</type>
      <name>mySegmentComputer</name>
      <anchorfile>classDGtal_1_1GreedySegmentation.html</anchorfile>
      <anchor>a9becad70ce01749bd7f351f057df06dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::GreedySegmentation::SegmentComputerIterator</name>
    <filename>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</filename>
    <member kind="typedef">
      <type>GreedySegmentation::SegmentComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>afb0ef4d581b61d1ba8854c1ab9b54d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a154c7c4350c68c81e347ab9f2646781c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentComputerIterator</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>aada77c7c8d3a34444542aaa45bb78a63</anchor>
      <arglist>(const GreedySegmentation&lt; TSegmentComputer &gt; *aSegmentation, const TSegmentComputer &amp;aSegmentComputer, const bool &amp;aFlag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentComputerIterator</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a8dde1abb608a9beaac8fc177d68ef5cf</anchor>
      <arglist>(const SegmentComputerIterator &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type>SegmentComputerIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a4bb88e1cc52f8333bdf4c1f6b26eb767</anchor>
      <arglist>(const SegmentComputerIterator &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SegmentComputerIterator</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a84dc60bf00eeca3191a06c1e1041f76b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>afc05232aa9b97a038c704b8cab910d90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SegmentComputer &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>acdd8e6fb686fb24a973394efd972fa2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentComputer</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>aad89dfac794d4ef88d0dbfab2cad68a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SegmentComputer *</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>add90970e0b87c3f384fa3303493abd77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentComputerIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>af037354aef345da406f1c3a4b46a063a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a3f07da57bee9765130b9c2d0cf347c56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a59286cdbb0ed7a2c9128ef6ea6016f4a</anchor>
      <arglist>(const SegmentComputerIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ad898dab0b8a36b0e589bae94af0a2538</anchor>
      <arglist>(const SegmentComputerIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectNext</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a2be6d11ae9d80214d58a8c2d47d7db78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectPrevious</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a8c0f27ed3d33abdee8dfa1597de8d3cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a1ad50ea2589dad608b69cc40dbfd9cb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a2ee8d1b92b5aa4142c914d13ba607563</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>longestSegment</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a80479542e5ea87110a9562bb4fe51c65</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a12a5b31c030ce430a064281dd80a982c</anchor>
      <arglist>(const ConstIterator &amp;it, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a248f0f4145c698491587e97d9ed4e293</anchor>
      <arglist>(const ConstIterator &amp;it, const ConstIterator &amp;itb, const ConstIterator &amp;ite, IteratorType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a3ef37c58d88009adb9e3344e2167e6fe</anchor>
      <arglist>(const ConstIterator &amp;it, const ConstIterator &amp;itb, const ConstIterator &amp;ite, CirculatorType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a05f592a7784a64c9096ca731a8c62eff</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const GreedySegmentation&lt; TSegmentComputer &gt; *</type>
      <name>myS</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ac50ce0a9d25735a88541719171905b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SegmentComputer</type>
      <name>mySegmentComputer</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a36f6042c63648101623d6bd96e45c2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsValid</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a15940a57ba8393f6f65433a4e0ac66db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIntersectNext</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ac91ca2d683f192041c91bce4a89565e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIntersectPrevious</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ae0cd933a06d229a9099ba9494fff5a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsLast</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a28b6eaaa65e4aba401d5091b5a28fed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GreedySegmentation&lt; TSegmentComputer &gt;</name>
      <anchorfile>classDGtal_1_1GreedySegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>afa9e7dc4baf767cddbcc37d223babdea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::GridCurve</name>
    <filename>classDGtal_1_1GridCurve.html</filename>
    <templarg>TKSpace</templarg>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>aee0f0cdeae7501e1ef47d3025664204d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ad0f64d2afad2c8f49e5e893e26c5133d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a5446272301ae5f45c1ae427bab949595</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a895096449949c8f38e7c9dabad4e60c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; SCell &gt;</type>
      <name>Storage</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a825ca04448fbe5872a64f78c2793a9e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Storage::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a59e6772fbb93506f0a92aeb061b559af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Storage::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ad8a48ee566bff4e7810a81dd8f80eea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Storage::const_reverse_iterator</type>
      <name>const_reverse_iterator</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a187adae1771695c3743752553058477f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Storage::const_reverse_iterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a0b562e48746b9f271d9626aa32fec92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstRangeAdapter&lt; typename Storage::const_iterator, DefaultFunctor, SCell &gt;</type>
      <name>SCellsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a323f237525a2b54073aae6a221f93569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstRangeAdapter&lt; typename Storage::const_iterator, SCellToPoint&lt; KSpace &gt;, Point &gt;</type>
      <name>PointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a50cca69275b449fc0b8b9d601a1f90a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstRangeAdapter&lt; typename Storage::const_iterator, SCellToMidPoint&lt; KSpace &gt;, typename KSpace::Space::RealPoint &gt;</type>
      <name>MidPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>adadb4593ce04fd55b2620be07a99b41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstRangeAdapter&lt; typename Storage::const_iterator, SCellToArrow&lt; KSpace &gt;, std::pair&lt; Point, Vector &gt; &gt;</type>
      <name>ArrowsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a35e3f1113b872b005649627ce1679a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstRangeAdapter&lt; typename Storage::const_iterator, SCellToInnerPoint&lt; KSpace &gt;, Point &gt;</type>
      <name>InnerPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>af98a25e72c24644dc0fc2cf372d15621</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstRangeAdapter&lt; typename Storage::const_iterator, SCellToOuterPoint&lt; KSpace &gt;, Point &gt;</type>
      <name>OuterPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a57caf0956e013627ffb9f047b4eb77e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstRangeAdapter&lt; typename Storage::const_iterator, SCellToIncidentPoints&lt; KSpace &gt;, std::pair&lt; Point, Point &gt; &gt;</type>
      <name>IncidentPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a80dfd07d40b533191eedb5155e00b325</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstRangeAdapter&lt; typename Storage::const_iterator, SCellToCode&lt; KSpace &gt;, char &gt;</type>
      <name>CodesRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ab14db6e25b9ccabcef128d5d09935358</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a0440939851d607b96deadb3fee446bca</anchor>
      <arglist>((CCellularGridSpaceND&lt; KSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GridCurve</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a1d19413b7f1da3a6c6a50c88869c3b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCurve</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>aa480c292ffeab9aef9dd76816707d6c7</anchor>
      <arglist>(const KSpace &amp;aKSpace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCurve</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a259f272325184ef123ff78b8f9ee1fd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridCurve</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ac5f583b8837bdc0da8a30bad0f801d30</anchor>
      <arglist>(const GridCurve &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GridCurve &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ae9fa64d72c2d8a0e3b7a8c7a7810d895</anchor>
      <arglist>(const GridCurve &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a666684daddb4f960d41c5707f1ca9f00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a0261b452d3987ea013feb4fc886b4f57</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>af0c36b89d3834771800959646e027c6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initFromVectorStream</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a49b99d0ed6fe5b8ab0565911766f8c4c</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeVectorToStream</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a95bcac6f23b65da8de198ec3d4787851</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initFromVector</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>af8c8d2dab500a134fc1f92551596eebc</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;aVectorOfPoints)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initFromPointsVector</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a03ba6e66dbf1272ce1ab55cdbc5dcbd0</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;aVectorOfPoints)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initFromPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ab2ee4f51e7b385c5de354b84e08748f4</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initFromSCellsVector</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a8aad1a8925c2d5209a5196b17d779bb9</anchor>
      <arglist>(const std::vector&lt; SCell &gt; &amp;aVectorOfSCells)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>initFromSCellsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ac970c057115dfe31da102f2869b556d7</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ac0e734d40cba021da3c229157c21e652</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ac5d89d94eb18a75330b9fa52a215e359</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a50bce8ea2a8f85dba816a7bf93c123e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>abf052d4410ba687c54f1b66c4b1d6858</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a1dd4edef585017ee969327c2eca29257</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ac1b6471385253b519740e6dab60b6fc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>back</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a8ead22c860208ed6d421d121fbf43b71</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>af3c6b0bbab4a3e7ea6dba39047fc76f7</anchor>
      <arglist>(const SCell &amp;aSCell)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushBack</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a58a1d4564a1bfc4c70074f9c82d486b8</anchor>
      <arglist>(const SCell &amp;aSCell)</arglist>
    </member>
    <member kind="function">
      <type>Storage::size_type</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ae2229887eaf1ce1c26e60409eea23ee3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCellsRange</type>
      <name>getSCellsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a2e768d0b67863d4a2182416f3d903868</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PointsRange</type>
      <name>getPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>aad9c1235e01d71ce67da1fb3e4cd621f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MidPointsRange</type>
      <name>getMidPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>aa1bd212e7fb89e09b72d2d6d2b1507f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ArrowsRange</type>
      <name>getArrowsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a2518af31f69ee265168b3e4a5835f3bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>InnerPointsRange</type>
      <name>getInnerPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a083707a4b07301a0a4bea28d3109f1d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OuterPointsRange</type>
      <name>getOuterPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a1b7729fd454f0d7440bbab85795461ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>IncidentPointsRange</type>
      <name>getIncidentPointsRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a45fe8d1a26a004d615e526ab5b5d8cc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GridCurve::CodesRange</type>
      <name>getCodesRange</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a759295ae54b89daf78e1177479b87f8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>SCell</type>
      <name>PointVectorTo1SCell</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ab68567cab789e274782aacf3197b1b62</anchor>
      <arglist>(const Point &amp;aPoint, const Vector &amp;aVector)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>aa093603e257a0f9bac9dd3a7276b600b</anchor>
      <arglist>(const SCell &amp;aSCell) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myKPtr</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a7ae8b7d421f583f80704866f98961236</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsOwned</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>a775e236a804bf7fc47e560764baf4e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Storage</type>
      <name>mySCells</name>
      <anchorfile>classDGtal_1_1GridCurve.html</anchorfile>
      <anchor>ac6acbbbf208f4d5dbf1d94fc56d8ed14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SaturatedSegmentation</name>
    <filename>classDGtal_1_1SaturatedSegmentation.html</filename>
    <templarg>TSegmentComputer</templarg>
    <class kind="class">DGtal::SaturatedSegmentation::SegmentComputerIterator</class>
    <member kind="typedef">
      <type>TSegmentComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a3dd3ae471390e3741a9839fd89bcf069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a7384002c1222976fe5ca937ba2353a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>ab6db0336ed1496cb3fe3008daa58ba29</anchor>
      <arglist>((CForwardSegmentComputer&lt; TSegmentComputer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SaturatedSegmentation</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>acc1935d09d44e8ce8c239e291675e2dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SaturatedSegmentation</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a3848c0084acbcbd15259b9c4186478ac</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, const SegmentComputer &amp;aSegmentComputer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubRange</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a8924e1791a02d79edf09ab23ede70c54</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMode</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a785c207d84e1e4f1639700c4ed1e7396</anchor>
      <arglist>(const std::string &amp;aMode)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SaturatedSegmentation</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a6e0aa3c8677ff3c34407880fba0200bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SaturatedSegmentation::SegmentComputerIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>abff57b565b8446682204ff9944e38798</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SaturatedSegmentation::SegmentComputerIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a47cbcfc7f77b9d5e0daa84e1853c8551</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>ac570222c06e1f687ee9d1ce9365540c6</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a4e4ed2f6c4f2ba4c5b4c33a4d3876680</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>TSegmentComputer::Reverse</type>
      <name>ReverseSegmentComputer</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a432b8b0d9e1020b0d6b1e1b066f6777c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ReverseSegmentComputer::ConstIterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a95395b0628785c5fecf3ea96a8737d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SaturatedSegmentation</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a819d646e5a8b902bbb64d87047fb9b91</anchor>
      <arglist>(const SaturatedSegmentation &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SaturatedSegmentation &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a239b9dfea50a7e23afc68c43e771dab7</anchor>
      <arglist>(const SaturatedSegmentation &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>acc0b2d2bc36bffa76716b8397247bdcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a7bc8b636b1641f4ee8f98dc1f0f11494</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myStart</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>ac2b801ef6abaf5ceeb5d600909481ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myStop</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>af0646b6804686b1e6e0c6b364fcd5886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>myMode</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a4eaaa9cb41d55a1a4cb9c1e2f3bc2d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SegmentComputer</type>
      <name>mySegmentComputer</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation.html</anchorfile>
      <anchor>a92ba972277af3e0139a04c7af273a649</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SaturatedSegmentation::SegmentComputerIterator</name>
    <filename>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</filename>
    <member kind="typedef">
      <type>SaturatedSegmentation::SegmentComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a276fc91f49ea62ebaa890c77a355f1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ae85149449870c314717366fcf5c3ea2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentComputerIterator</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>adf7afb18e29c55dc96ec9b8eab7c4934</anchor>
      <arglist>(const SaturatedSegmentation&lt; TSegmentComputer &gt; *aSegmentation, const TSegmentComputer &amp;aSegmentComputer, const bool &amp;aFlag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentComputerIterator</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a6c2769053148980148d6744eb719ced0</anchor>
      <arglist>(const SegmentComputerIterator &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type>SegmentComputerIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a352a519340364273aa5230991f8f7baa</anchor>
      <arglist>(const SegmentComputerIterator &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SegmentComputerIterator</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a1742c7dd3300fea1f3e137bf1ac4fc02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a7ecbc7273548e57264241b199bca108b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SegmentComputer &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a1bf20d190ab471a9909bc9428e9166f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentComputer</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>af5ed4ce8e002182e802aa9425887214a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const SegmentComputer *</type>
      <name>operator-&gt;</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a32d1df3179d7416511eb2f40c154bfaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentComputerIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ae89d5c59062781f61c4aa6f5125b446a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>abf37548310490ff2ac61da4d3f313afb</anchor>
      <arglist>(const SegmentComputerIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>acd0f92c1a80d8d48bcc28f5bb40bf6a2</anchor>
      <arglist>(const SegmentComputerIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectNext</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a056d6cc1fec3a4e73761c08fe4637178</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectPrevious</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ae7b623c8342e622a17182ae2a615ef27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>adb207d443dfb6567369780af3a14bb03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a0d0891227841c17ff28911867ab4c774</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a32fcd647c0ea1ce6b8848917bd71eff3</anchor>
      <arglist>(const ConstIterator &amp;it, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a989de78f50a6d89e737702703f4a2f18</anchor>
      <arglist>(const ConstIterator &amp;it, const ConstIterator &amp;itb, const ConstIterator &amp;ite, IteratorType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ad79d53d3d5674f9b7c6b3314c399b3a9</anchor>
      <arglist>(const ConstIterator &amp;it, const ConstIterator &amp;itb, const ConstIterator &amp;ite, CirculatorType)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ad3cd8b547bf0ed50c7528d0b28846368</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>nextMaximalSegment</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a341750d73512761b0df435758f5c3d26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initFirstMaximalSegment</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>ac1fdc0257c71390ada7c6eda879c316c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>initLastMaximalSegment</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a15fa9f0777d714f5d4d4b2dbc8800dc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SaturatedSegmentation&lt; TSegmentComputer &gt; *</type>
      <name>myS</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a43e29afe01b86d7d0326f75622c22898</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SegmentComputer</type>
      <name>mySegmentComputer</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a8667ac4cd92b9aeb75b0d9dabcfc7201</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsValid</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a3fead8abbaab85b4db742559d89b69ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myLastMaximalSegmentBegin</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a3cf66641ad8b907579f160b69c8b44cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myLastMaximalSegmentEnd</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a4bdbb19b6615320a569ae7289f962d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIntersectNext</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>afbbe16fe500c6f089f8e2d7fe8432d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIntersectPrevious</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>af9950768acaccdd46ecf0e0d98c4aa1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsLast</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a3976f032eb6d31ad178f4293eebb5514</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>SaturatedSegmentation&lt; TSegmentComputer &gt;</name>
      <anchorfile>classDGtal_1_1SaturatedSegmentation_1_1SegmentComputerIterator.html</anchorfile>
      <anchor>a2e7353fcb25ae68120540be5076df531</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ForwardSegmentComputer</name>
    <filename>structDGtal_1_1ForwardSegmentComputer.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::BidirectionalSegmentComputer</name>
    <filename>structDGtal_1_1BidirectionalSegmentComputer.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::DynamicSegmentComputer</name>
    <filename>structDGtal_1_1DynamicSegmentComputer.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::DynamicBidirectionalSegmentComputer</name>
    <filename>structDGtal_1_1DynamicBidirectionalSegmentComputer.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::SegmentComputerTraits</name>
    <filename>structDGtal_1_1SegmentComputerTraits.html</filename>
    <templarg>SC</templarg>
    <member kind="typedef">
      <type>ForwardSegmentComputer</type>
      <name>Category</name>
      <anchorfile>structDGtal_1_1SegmentComputerTraits.html</anchorfile>
      <anchor>aec543e23f154c340dd52511204ed977f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ContourHelper</name>
    <filename>classDGtal_1_1ContourHelper.html</filename>
    <member kind="function">
      <type></type>
      <name>~ContourHelper</name>
      <anchorfile>classDGtal_1_1ContourHelper.html</anchorfile>
      <anchor>a8377d6cf0a9bfdf8593febf04bdcca2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ContourHelper.html</anchorfile>
      <anchor>a77a0b112eecc794e947c34a1e5e11d8c</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ContourHelper.html</anchorfile>
      <anchor>a442e557eddf039bc0c4cce47af32c783</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Z2i::Point</type>
      <name>getMeanPoint</name>
      <anchorfile>classDGtal_1_1ContourHelper.html</anchorfile>
      <anchor>a0323f4d0b0a11735b0bff5f502f11cd4</anchor>
      <arglist>(vector&lt; Z2i::Point &gt; contour)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ContourHelper</name>
      <anchorfile>classDGtal_1_1ContourHelper.html</anchorfile>
      <anchor>af1f9851e96bc9406e616ecc78851ada4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ContourHelper</name>
      <anchorfile>classDGtal_1_1ContourHelper.html</anchorfile>
      <anchor>ab7d6cb81bd29984c4d07b3bff8f7a844</anchor>
      <arglist>(const ContourHelper &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ContourHelper &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ContourHelper.html</anchorfile>
      <anchor>a86bc425b033eb2af0ed5f145fb9f3c4c</anchor>
      <arglist>(const ContourHelper &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::COBAGenericNaivePlane</name>
    <filename>classDGtal_1_1COBAGenericNaivePlane.html</filename>
    <templarg>TSpace</templarg>
    <templarg>TInternalInteger</templarg>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>ab5aaf8cda2c242c4a77d8da3129a092e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>aa6bae43f3abad6a5ffe97a7e025811fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Point &gt;</type>
      <name>PointSet</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>adcfd1512253dd23b1f2aacc2e718c245</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::size_type</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a8b8d12130efbb08ac2a1763b5db6381b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a76091bd7f8af1d871007344150e709d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::iterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a105ad574e154e15fca5cc0d7232a997d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInternalInteger</type>
      <name>InternalInteger</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a113eadcf8dd2233e2465999831fc2e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerComputer&lt; InternalInteger &gt;</type>
      <name>MyIntegerComputer</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>ac922915ea9aafd5fed395c72d8a4285b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a70e783f685c88c8d92c550145ba997dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>aee0660c5610f63e6cd3ae7cf4ba63ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a44df5159886146f9d669db41e6300677</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::value_type</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a27ad6248cd72f1ceb8b6a4da21c289e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>ad0f26073201f00e4a90f2b13cfc20c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::size_type</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a7b2f3774348de296defc7b3bd01487e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~COBAGenericNaivePlane</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a28d6aadaccf14e1a3c35a52a4cde20d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COBAGenericNaivePlane</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a94691f4dc3ef00725f0cee01be13aa23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COBAGenericNaivePlane</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a8b3ac988241a2a9f412f385aa147d8f0</anchor>
      <arglist>(const COBAGenericNaivePlane &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>COBAGenericNaivePlane &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>affa525225722afb43ee20b204ecf4e07</anchor>
      <arglist>(const COBAGenericNaivePlane &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MyIntegerComputer &amp;</type>
      <name>ic</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a02b286c9bb77226770ac691aef3d1843</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>active</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a9a4efd08c71087cae11063f7322673e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a816be2f6ca433673007d2145229152d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>ace1e7674a70603e953b6211ff3ee42a4</anchor>
      <arglist>(InternalInteger diameter, InternalInteger widthNumerator=NumberTraits&lt; InternalInteger &gt;::ONE, InternalInteger widthDenominator=NumberTraits&lt; InternalInteger &gt;::ONE)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>complexity</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>ac0debddee9a6eaad8f8f7b510893cbda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>ae19b2a7e6cfc97d4890ce3358cb58fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a5a7c6d0c148c46d05e5947288cb8b876</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>afbd54dcb801ccb97d6d49bd307e2f901</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a8dc22f8ff4313975cbc31b72f4e88a20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>max_size</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>ab06911f7f1523bab760eebe28d76dc09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>maxSize</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a8d94c266e2ec81c6da937fe8b42995ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>af76c117fbc5d1429767f8cb6429be480</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendAsIs</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>af12ccc7117aee66be9bf09a6445c058e</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extend</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a8fe495933f68af13176abe77b2b53fa1</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendable</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a9c45876f29fe37a96684977fae78ef47</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extend</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a165ac3ebe1254cbda0d5f05350dd7fef</anchor>
      <arglist>(TInputIterator it, TInputIterator itE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendable</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a23bce1ab22b59dad3d399403f1f8747e</anchor>
      <arglist>(TInputIterator it, TInputIterator itE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNormal</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>aa4ba7ea321ce35310afcbad43f736d54</anchor>
      <arglist>(Vector3D &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getUnitNormal</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a39d821412df12d5a299c9fea5aa68c1d</anchor>
      <arglist>(Vector3D &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a8f26f844da559912ef7c68cce283268d</anchor>
      <arglist>(double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>minimalPoint</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a1b4590f030b25de2f76d0936c7dcb1c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>maximalPoint</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>aedf9f5572bf46920eb540200b1c6f7c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a43c5afe0d0f51a0d48eec5e0b342a0db</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a273e0bdb5bff8abfcc3a6e28d0cb4b57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>COBANaivePlane&lt; Space, InternalInteger &gt;</type>
      <name>COBAComputer</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a787cf5f131516afd9dbe112e00c4ab4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Dimension &gt;::iterator</type>
      <name>AxisIterator</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a8973fe20658ca57141be5b2af3f0ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Dimension &gt;::const_iterator</type>
      <name>AxisConstIterator</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a8ee63db53768bc2761359e4cf44696e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a30261c5f90556958069c500a700efc37</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a787bce7322b88bff6e403fbbda7e9359</anchor>
      <arglist>((CInteger&lt; TInternalInteger &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a719f9f9e1cbda75dfe61eb73b852f47a</anchor>
      <arglist>((TSpace::dimension==3))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Dimension &gt;</type>
      <name>myAxes</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>aa64c91750e0736860165537b6520739f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>COBAComputer</type>
      <name>myComputers</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a1520f371ee0bfe32e5fae219a2735754</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Dimension &gt;</type>
      <name>_axesToErase</name>
      <anchorfile>classDGtal_1_1COBAGenericNaivePlane.html</anchorfile>
      <anchor>a73a13dc82c60afcbffbf78db5787d314</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::COBANaivePlane</name>
    <filename>classDGtal_1_1COBANaivePlane.html</filename>
    <templarg>TSpace</templarg>
    <templarg>TInternalInteger</templarg>
    <class kind="struct">DGtal::COBANaivePlane::State</class>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>ab2ede1a17681a736ed75d3b4e75c698c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>adbc9cdbf795d62d1d1f68e2b7f151563</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Point &gt;</type>
      <name>PointSet</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a233e8d6f019c45d178a38af1aa3063dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::size_type</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a0357589638e78bad7802fbcab56bf304</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a16176b1d0e52ac382b4b1722429fee9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::iterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>af5f3d819c8bb4d0442c1794db764172a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInternalInteger</type>
      <name>InternalInteger</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a4112baf38a5849df1180a511af1e124e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntegerComputer&lt; InternalInteger &gt;</type>
      <name>MyIntegerComputer</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a47a06234cb5801bd7d6ba893289aa2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>af252b1c158230afea5e949815a884924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::const_pointer</type>
      <name>const_pointer</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a770904c1e5083777ccaedd0219f6388f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::const_reference</type>
      <name>const_reference</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a4b3d4a6678c187bc3c395aa314b22097</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::value_type</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a4d9459ef098219679534f24f7ffb4cb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::difference_type</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a2ab9001f49bbd83e6660eae266f1caf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointSet::size_type</type>
      <name>size_type</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a7104654316a34c21c6aff388b8010147</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~COBANaivePlane</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a16052fd2ccb5407d02721ad47277842e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COBANaivePlane</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a1efc9e99a9a562fe2097157299853730</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>COBANaivePlane</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a945db50aaba0803f8a2fac601d72aa72</anchor>
      <arglist>(const COBANaivePlane &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>COBANaivePlane &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a36f95b573f5e3e896374e93f63d6bf92</anchor>
      <arglist>(const COBANaivePlane &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>MyIntegerComputer &amp;</type>
      <name>ic</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>ac1d0f4cbd286b4f4f7631c92b901df93</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a2597f517f8393ee6b5a3aab9a62d27ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a5079a90cd8a00262aacc109e747f83a2</anchor>
      <arglist>(Dimension axis, InternalInteger diameter, InternalInteger widthNumerator=NumberTraits&lt; InternalInteger &gt;::ONE, InternalInteger widthDenominator=NumberTraits&lt; InternalInteger &gt;::ONE)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>complexity</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a183e3474fac085427e2222aa11f666a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a694e2f4379a26175bea8a80feee19ca1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a206300c45f2026c5d2a4a4a3a7cf077b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a5a5ad8812f12f3dcf62ce5e52440b9a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>abe8ae686aaa3730c93670ffa1249b2cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>max_size</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>aeb0a8b8e3f2ee31618e2c175f5ad0978</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>maxSize</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>aa1f3cfc23bec952ddb85d179017f1893</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a26ef5cc634aadfee6559586837fc033d</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendAsIs</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a399693e1616d04a8fcfdc9b2fdfe1f03</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extend</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>ae1d21455f1bb45c5ca20560f5ccd94bc</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendable</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>ada6b42200d364edfbad8ebc40b638745</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extend</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a31a92144c062f427ebb4ecb379e6a158</anchor>
      <arglist>(TInputIterator it, TInputIterator itE)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExtendable</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a9cc8920b8b54e67b0d96ac57ee7ac7ff</anchor>
      <arglist>(TInputIterator it, TInputIterator itE) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNormal</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>ac9390f373446dc729680e74a6af4600f</anchor>
      <arglist>(Vector3D &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getUnitNormal</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a98a2cd757e737d7c91ed93c1669b3011</anchor>
      <arglist>(Vector3D &amp;normal) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBounds</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a17509926b5492861d67c9e907e9c43f5</anchor>
      <arglist>(double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>minimalPoint</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a9962e40b78a0ef02d9930b5cddeabb59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>maximalPoint</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a1116202e695dc2061d8aa862b452e133</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a1627bbc7dfe341a92e7242daaab7a994</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a200aeae2ff09e3a429628559f4b777be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>PointVector&lt; 3, InternalInteger &gt;</type>
      <name>InternalPoint3</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a26bc88fbcd22ae6d4edc5d014459f894</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>SpaceND&lt; 2, InternalInteger &gt;</type>
      <name>InternalSpace2</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>ab1e0923f42ab7ac6b54b24f6fb3dd987</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>InternalSpace2::Point</type>
      <name>InternalPoint2</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a6f9451012abded6c45e193a054665d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>LatticePolytope2D&lt; InternalSpace2 &gt;</type>
      <name>ConvexPolygonZ2</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a56f2883674827e7cbac0dc7cd7dbcee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ConvexPolygonZ2::HalfSpace</type>
      <name>HalfSpace</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a13a02d4db91191d79e28795ad2362ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a1eef2a2423f721c8e5373de7893d8ad7</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a5b5562331076b1b82d2029e08fda3dc4</anchor>
      <arglist>((CInteger&lt; TInternalInteger &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a495dda27bc3da9976491835c877e4bb4</anchor>
      <arglist>((TSpace::dimension==3))</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeCentroidAndNormal</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a1cca415c8ffbdce09c0c79d8e9121f60</anchor>
      <arglist>(State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>doubleCut</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>ada61951645d0bcf7431afeb2936a542c</anchor>
      <arglist>(InternalPoint2 &amp;grad, State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeMinMax</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a90d86250fb084c4c1d45d6d9a82190b9</anchor>
      <arglist>(State &amp;state, TInputIterator itB, TInputIterator itE) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>updateMinMax</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>abb9c9f13018b553d40b1ae14b0552211</anchor>
      <arglist>(State &amp;state, TInputIterator itB, TInputIterator itE) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>checkPlaneWidth</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>ad982cf8ae18fb270e1a284400df3183f</anchor>
      <arglist>(const State &amp;state) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeGradient</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>af522e8021eaca7f1f0cbd77a4daf937e</anchor>
      <arglist>(InternalPoint2 &amp;grad, const State &amp;state) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Dimension</type>
      <name>myAxis</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>ac6b839b75d2ad0f1dd56f608a44bbdc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InternalInteger</type>
      <name>myG</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>adedb8a6b43b9db2647865dab3f83d39a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InternalPoint2</type>
      <name>myWidth</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>aa6bc928a46d350f2f55a075bae9867c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PointSet</type>
      <name>myPointSet</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>aaa5b8fd38f77d250737432b29ebde730</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>aef03ee749b52d0f716102122ab53b584</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InternalInteger</type>
      <name>myCst1</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a1f32f470469f28f6fcd281f7a70e7275</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InternalInteger</type>
      <name>myCst2</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a58d5c1e11f5e81462ed7d768d058e9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InternalInteger</type>
      <name>_v</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a21b4e0ef582b8b537235643f37abba7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State</type>
      <name>_state</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>aabdea970f9d67d6339091f99aa8d00ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InternalPoint2</type>
      <name>_grad</name>
      <anchorfile>classDGtal_1_1COBANaivePlane.html</anchorfile>
      <anchor>a88e5c01b32985232a6a6e4512b471d8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::COBANaivePlane::State</name>
    <filename>structDGtal_1_1COBANaivePlane_1_1State.html</filename>
    <member kind="variable">
      <type>InternalInteger</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1COBANaivePlane_1_1State.html</anchorfile>
      <anchor>a2ed47bf9fc3085ab0249572341e8cbda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InternalInteger</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1COBANaivePlane_1_1State.html</anchorfile>
      <anchor>a8e87f28dab8aa6a040adce4bba4d9ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>ptMax</name>
      <anchorfile>structDGtal_1_1COBANaivePlane_1_1State.html</anchorfile>
      <anchor>a4c707ed3bdadadf6c2177a8f3bb37d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>ptMin</name>
      <anchorfile>structDGtal_1_1COBANaivePlane_1_1State.html</anchorfile>
      <anchor>a9521d18c37415020fdec493820cac6e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConvexPolygonZ2</type>
      <name>cip</name>
      <anchorfile>structDGtal_1_1COBANaivePlane_1_1State.html</anchorfile>
      <anchor>a9032280061867403f2be6a767c8eca94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InternalPoint3</type>
      <name>centroid</name>
      <anchorfile>structDGtal_1_1COBANaivePlane_1_1State.html</anchorfile>
      <anchor>a47dd9037e02be12b58d99221927afdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InternalPoint3</type>
      <name>N</name>
      <anchorfile>structDGtal_1_1COBANaivePlane_1_1State.html</anchorfile>
      <anchor>a6778736a90d6f24ceaa822ab697fb7b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ConstantConvolutionWeights</name>
    <filename>classDGtal_1_1ConstantConvolutionWeights.html</filename>
    <templarg>TDistance</templarg>
    <member kind="typedef">
      <type>TDistance</type>
      <name>Distance</name>
      <anchorfile>classDGtal_1_1ConstantConvolutionWeights.html</anchorfile>
      <anchor>a1b5b942cbfc9220f3547a4cb19c1cc40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ConstantConvolutionWeights.html</anchorfile>
      <anchor>adb3817d5dccfe31ecb444aeb423e4a5e</anchor>
      <arglist>(const Distance &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::GaussianConvolutionWeights</name>
    <filename>classDGtal_1_1GaussianConvolutionWeights.html</filename>
    <templarg>TDistance</templarg>
    <member kind="typedef">
      <type>TDistance</type>
      <name>Distance</name>
      <anchorfile>classDGtal_1_1GaussianConvolutionWeights.html</anchorfile>
      <anchor>a59e56148f6919df948c95a141fcc731b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConvolutionWeights</name>
      <anchorfile>classDGtal_1_1GaussianConvolutionWeights.html</anchorfile>
      <anchor>a669c28a8d1e629797a26f0fdf70f22df</anchor>
      <arglist>(const double sigma)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1GaussianConvolutionWeights.html</anchorfile>
      <anchor>a3c29c9bd7afcbf675264812df75607af</anchor>
      <arglist>(const Distance &amp;aDisplacment) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mySigma</name>
      <anchorfile>classDGtal_1_1GaussianConvolutionWeights.html</anchorfile>
      <anchor>a590ed39f11dfe819bd7e6468e6f2d61d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myCoef</name>
      <anchorfile>classDGtal_1_1GaussianConvolutionWeights.html</anchorfile>
      <anchor>a4b4c477ecd71dc1ddd059c6619824679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myCoef2</name>
      <anchorfile>classDGtal_1_1GaussianConvolutionWeights.html</anchorfile>
      <anchor>a712aaade9821e2883ab79abd977ea015</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CConvolutionWeights</name>
    <filename>structDGtal_1_1CConvolutionWeights.html</filename>
    <templarg></templarg>
    <base>boost::Assignable</base>
    <member kind="typedef">
      <type>T::Distance</type>
      <name>Distance</name>
      <anchorfile>structDGtal_1_1CConvolutionWeights.html</anchorfile>
      <anchor>ab4bb86b28b43f3fc1447a32167bfa386</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConvolutionWeights.html</anchorfile>
      <anchor>aa375e5a7bec56d9eff61a387b24ee0af</anchor>
      <arglist>(CConvolutionWeights)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CConvolutionWeights.html</anchorfile>
      <anchor>ae054a453390fd1f0a63ad12715bb2bcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Distance</type>
      <name>myA</name>
      <anchorfile>structDGtal_1_1CConvolutionWeights.html</anchorfile>
      <anchor>a3203d2ec9fca2bc8a8e0c17c7a27ec23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1CConvolutionWeights.html</anchorfile>
      <anchor>a84f3f27207949e749fc6a724addcafce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CNormalVectorEstimator</name>
    <filename>structDGtal_1_1CNormalVectorEstimator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::Surface</type>
      <name>Surface</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>a07a24f072d3824ad40255839862bf151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::SCell</type>
      <name>SCell</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>a52c7eb532f74ef26018af696b42ac149</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>a393e8cc9a9434bf156e2978b3ef489e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Quantity</type>
      <name>Quantity</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>a49ad2b113c5908d9e4e52f1e23cd3ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>aecbd484b66d9b9d737a973461f290a83</anchor>
      <arglist>((CCellularGridSpaceND&lt; typename Surface::KSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>af7c018efe655057d39debf9d10b32c07</anchor>
      <arglist>((ConceptUtils::SameType&lt; SCell, typename Surface::SCell &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>ad06cef9efc2f7ccb0294da87faa9157d</anchor>
      <arglist>((boost::InputIterator&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>ae26d2a1d41a51b909a17c59710508815</anchor>
      <arglist>(CNormalVectorEstimator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>a6faebfabeedb1cd5998af898f59f20b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>aeead80d0742820b9b01e62a7daf92fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Surface</type>
      <name>mySurface</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>a33082182232755846c62141f543a61f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCell</type>
      <name>mySCell</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>ad0cadfeb2e3f44428122a6da866f5b44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quantity</type>
      <name>myQuantity</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>a337c215eebc5a7023dc66329eaf5aeb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::output_iterator_archetype&lt; Quantity &gt;</type>
      <name>myOutIt</name>
      <anchorfile>structDGtal_1_1CNormalVectorEstimator.html</anchorfile>
      <anchor>a993b2f9eab551895ec8d177fdc637868</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSurfaceEmbedderWithNormalVectorEstimator</name>
    <filename>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</filename>
    <templarg>TDigitalSurfaceEmbedder</templarg>
    <templarg>TNormalVectorEstimator</templarg>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedderWithNormalVectorEstimator&lt; TDigitalSurfaceEmbedder, TNormalVectorEstimator &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a990bc0205b7a71ab24847d80d5c25574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDigitalSurfaceEmbedder</type>
      <name>DigitalSurfaceEmbedder</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>afecc017c91195dcfdf5ee25976b39ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TNormalVectorEstimator</type>
      <name>NormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a76b3e9cefa141429bfed5106748b4986</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedder::KSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a720a635825a04774ab8f8838098149d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedder::Surface</type>
      <name>Surface</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>ae75a66dbdce4649d1ac24bc9ea3fa7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedder::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a5737d40242ec3dd3ab08d2c578fbe8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedder::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a8f3090c6aa4650866613c6dfca701589</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedder::Argument</type>
      <name>Argument</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a487b809ec801fd90addb8b38f43386a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedder::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a19e9b0caab8552a686c3ab0b7e839c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a600d58b279d5f77f7175af322e2d5895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>abe13184cc897d74b2791be27b49c6519</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NormalVectorEstimator::Quantity</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a4cb213053dbabfcdf8265062074070c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NormalVectorEstimator::DigitalSurface</type>
      <name>NVESurface</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a414d6a8b2b663b5f2c6a318b613accda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap&lt; DigitalSurfaceEmbedder, NormalVectorEstimator &gt;</type>
      <name>GradientMap</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a357b9bf06064c6673161304e49aaf89e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a773e349cd676cecc47edaca0da22ef09</anchor>
      <arglist>((CDigitalSurfaceEmbedder&lt; TDigitalSurfaceEmbedder &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>ae7e1b587ac58aa5e5afbca0410df7d39</anchor>
      <arglist>((ConceptUtils::SameType&lt; RealVector, Quantity &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a3f2948113775590e7fbc64b4a1b6c63c</anchor>
      <arglist>((ConceptUtils::SameType&lt; Surface, NVESurface &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurfaceEmbedderWithNormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a9be379fb5028909e44ca985be8ea9ca7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>ae4c76440c894b3ddd41743918b50a947</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurfaceEmbedderWithNormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a7d77e0d0d725646940f1cabca4f541fd</anchor>
      <arglist>(const DigitalSurfaceEmbedder &amp;aDSEmbedder, const NormalVectorEstimator &amp;anEstimator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurfaceEmbedderWithNormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a8a3bcf304e26000e14610c9de126e4e0</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalSurfaceEmbedderWithNormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a89216df345db6c8a95395d8f06ac995a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a5bdf7f211ed6cd942f82c7a5d6d14cad</anchor>
      <arglist>(const SCell &amp;scell) const </arglist>
    </member>
    <member kind="function">
      <type>const Surface &amp;</type>
      <name>surface</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a0615d8371a0a630539fc0509e1f2dd8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GradientMap</type>
      <name>gradientMap</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>ab4249d24ea46d587bd68f8f5938caa5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>gradient</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a45eb42aef2116c0943d71261c363be22</anchor>
      <arglist>(const SCell &amp;scell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a07f7518d28a0f896f218b7b2d5792679</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>ab77c0178417f9fb1e37f64f8f95bfd4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSurfaceEmbedder *</type>
      <name>myDSEmbedder</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>a8bb1e8beaef1e901b9f5dc6c616c44c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const NormalVectorEstimator *</type>
      <name>myEstimator</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimator.html</anchorfile>
      <anchor>ad8b1335eea0e01ee58e793f25b1c3c42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap</name>
    <filename>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</filename>
    <templarg>TDigitalSurfaceEmbedder</templarg>
    <templarg>TNormalVectorEstimator</templarg>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap&lt; TDigitalSurfaceEmbedder, TNormalVectorEstimator &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>aa621f94784c9acc1e341bdecab11b904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDigitalSurfaceEmbedder</type>
      <name>DigitalSurfaceEmbedder</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>a241d95d9d68a82a6b3e5883ec2fc50db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TNormalVectorEstimator</type>
      <name>NormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>a63912b81bea1897d8077c3c3f5be0940</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceEmbedderWithNormalVectorEstimator&lt; DigitalSurfaceEmbedder, NormalVectorEstimator &gt;</type>
      <name>Embedder</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>a4b2bb5ad6c982cd5edd28ed4f712187b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Embedder::SCell</type>
      <name>Argument</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>a156a12ccd4521e47b6839ad4c9d8caac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Embedder::RealVector</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>ad8aca5792261810023374bf655c5d30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>a7cb07313f949b0809598dc21f5498936</anchor>
      <arglist>((CDigitalSurfaceEmbedder&lt; TDigitalSurfaceEmbedder &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>afccc08a226216cf4d1eccb4cfef9f9d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>ad9eb6c9590114f74fee510f78a75cb81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>ae2ecb9a3c175891baba0f8156eab6f97</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>a3ff78b31c9e55e03801c1eec1694b120</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>adfdc5c9da59ef131a78a25dc441fc121</anchor>
      <arglist>(const Embedder &amp;embedder)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>aa79b7fbcbbae55d1bea48fb3947dbb55</anchor>
      <arglist>(const Argument &amp;arg) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Embedder *</type>
      <name>myEmbedder</name>
      <anchorfile>classDGtal_1_1DigitalSurfaceEmbedderWithNormalVectorEstimatorGradientMap.html</anchorfile>
      <anchor>aa9245882afdcdb3e8ad6f65d7473b108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LocalConvolutionNormalVectorEstimator</name>
    <filename>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</filename>
    <templarg>TDigitalSurface</templarg>
    <templarg>TKernelFunctor</templarg>
    <member kind="typedef">
      <type>TDigitalSurface</type>
      <name>DigitalSurface</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>ac601b63dce6150a7b5fc442f1b7bbf86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKernelFunctor</type>
      <name>KernelFunctor</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>ae9c5af4ac2b7cb540e801080a3d59a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurface</type>
      <name>Surface</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>aebe536b97ebe4c160867d5881954bb9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Surface::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a9d51adf6003c7cbcde084f106d971a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Surface::KSpace::Space::RealVector</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a2ed1c3fea3f70780940f8d6172ecfea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Surface::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a7f915e780914c582f949374ca0121831</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a803abdef9a0c1392069558e2e0858971</anchor>
      <arglist>((CConvolutionWeights&lt; TKernelFunctor &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalConvolutionNormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a8f11a9c27df11323d8ef86ee74ce2a30</anchor>
      <arglist>(const DigitalSurface &amp;aSurface, const KernelFunctor &amp;aFunctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalConvolutionNormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a61c6fe4d90fad3acde55bbb00cbda361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Surface &amp;</type>
      <name>surface</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a33f8636ddf6c43872308f8fdb4222834</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a541374b17e9d09f80c3075d8ca6d02f3</anchor>
      <arglist>(const double h, const unsigned int radius)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>af03edf27d62c6b1ca0959a1e325b0f38</anchor>
      <arglist>(const SCell &amp;scell) const </arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a827c3631794c40fc28e46670dbd302ac</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a305512df5f976b80db149367dad83cc2</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>evalAll</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a72d882e5571fef8f89867e14266c55c9</anchor>
      <arglist>(OutputIterator result) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a0fa37f07cdc4fb35aedae2922f40f9eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalConvolutionNormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a2bab595c98f28887d180743422bdab18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>LocalConvolutionNormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>ac940a6700f99ab8568ae9a6e8c39f2e9</anchor>
      <arglist>(const LocalConvolutionNormalVectorEstimator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>LocalConvolutionNormalVectorEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a5f16933c4921631e6e6c67d558061a55</anchor>
      <arglist>(const LocalConvolutionNormalVectorEstimator &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a15f1ea2b1c62c0a4a9bca12e2a0f2ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIsInit</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>ac4fb9d166189f16bbe9e11bb95bf54dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myRadius</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a1b94684eadd30506a98db1cd87e259a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSurface &amp;</type>
      <name>mySurface</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>adbe7c54608be384dff01e9e59785e8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KernelFunctor &amp;</type>
      <name>myKernelFunctor</name>
      <anchorfile>classDGtal_1_1LocalConvolutionNormalVectorEstimator.html</anchorfile>
      <anchor>a603676f00530125d8782f40bf76d296b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::NormalVectorEstimatorLinearCellEmbedder</name>
    <filename>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</filename>
    <templarg>TDigitalSurface</templarg>
    <templarg>TNormalVectorEstimator</templarg>
    <templarg>TEmbedder</templarg>
    <member kind="typedef">
      <type>TDigitalSurface</type>
      <name>DigitalSurface</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a342bcfa642a099db439b57fb41101432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TNormalVectorEstimator</type>
      <name>NormalVectorEstimator</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a7f29807e7471956712f0329a45af866a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEmbedder</type>
      <name>Embedder</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>aa4a1c761b3a2cd7bd3490508f6109cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurface::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a164ca7459da7e54aa66ab856a853ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurface::KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a0bc0845d09379fde78f240429453e097</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurface::KSpace::Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a10ac026a36c62cc47b4857d58dab8050</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurface::KSpace::Space::RealVector</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a9959c7e6359a256e5663aebc29538edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NormalVectorEstimator::Quantity</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>ae885ae06f896e73d727e81006d3cb8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormalVectorEstimatorLinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>adc59084836a0bbbc041eb3a32ea10a18</anchor>
      <arglist>(const DigitalSurface &amp;digSurf, const NormalVectorEstimator &amp;estimator, const Embedder &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NormalVectorEstimatorLinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>ab8c0d4ed578a88f5bdeebd73967d3a18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a5ca56d55a149752737caf94b4b0d4b6f</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embedSurfel</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a61a9101b51a0da388f529b7e75cfb3ab</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>embedSurfel</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a17180a548870c38d8f83cf841f17d028</anchor>
      <arglist>(const ConstIterator &amp;surfelIt, RealPoint &amp;x, RealVector &amp;grad) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a185e41758fae5bf7c4ba267412b529d6</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a0d6fbbcb9756e5f2b1adc814524b9524</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NormalVectorEstimatorLinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a220bf29e4d4c66c902b7e833f1ba71df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSurface &amp;</type>
      <name>mySurface</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a52c4c6e4a0b6cfb3aa3acfc825ed93a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const NormalVectorEstimator &amp;</type>
      <name>myPtrFct</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>ac422e99839f997fa4146e91932805ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Embedder &amp;</type>
      <name>myPtrEmbedder</name>
      <anchorfile>classDGtal_1_1NormalVectorEstimatorLinearCellEmbedder.html</anchorfile>
      <anchor>a434b4ca0e0781fdb9894224ed69ed045</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Preimage2D</name>
    <filename>classDGtal_1_1Preimage2D.html</filename>
    <templarg>Shape</templarg>
    <member kind="typedef">
      <type>Shape::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a75f5385d49f736af284ac9683e988f21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Shape::Point</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>aabaeb7e9b367ecc302353666bfb8c4be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Preimage2D</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a45b87da460f28e2a9ad2458c6b2a127d</anchor>
      <arglist>(const Point &amp;firstPoint, const Point &amp;secondPoint, const Shape &amp;aShape)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Preimage2D</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a95c0fd4f9f84e70e09b54ff1607f4bfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Preimage2D</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a22050bcbb9ee35bbf92f3b39f5c018a7</anchor>
      <arglist>(const Preimage2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Preimage2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a772c54498fe20ac85476f7b4dc9de4a6</anchor>
      <arglist>(const Preimage2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a67b8170cf9c1cf5a0677564a713c93b4</anchor>
      <arglist>(const Preimage2D &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a98c623eb2dcd498b4ca4d9379a7f647d</anchor>
      <arglist>(const Preimage2D &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeftExteriorAtTheFront</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>aaab3ded8d4587166076a4179fa278b60</anchor>
      <arglist>(const Point &amp;aP, const Point &amp;aQ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeftExteriorAtTheBack</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>ae23dbadc5a0fd296358eda3e038ba1ac</anchor>
      <arglist>(const Point &amp;aP, const Point &amp;aQ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRightExteriorAtTheFront</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a3647264071ec2b0ebbd6629959b98f7a</anchor>
      <arglist>(const Point &amp;aP, const Point &amp;aQ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRightExteriorAtTheBack</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>add4b33e9bfe67ee3fb5c3f7dc339fb0c</anchor>
      <arglist>(const Point &amp;aP, const Point &amp;aQ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canBeAddedAtTheFront</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a744a1ce560cac44282de0bc3eff5b0cc</anchor>
      <arglist>(const Point &amp;aP, const Point &amp;aQ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canBeAddedAtTheBack</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>aaf21278e7dd9d275ee91ed7be72eb703</anchor>
      <arglist>(const Point &amp;aP, const Point &amp;aQ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addFront</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a27a78bc81ddd7feb1829127786a13ca8</anchor>
      <arglist>(const Point &amp;aP, const Point &amp;aQ)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addBack</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a1c4c9745770236bb33e58d828bfe9901</anchor>
      <arglist>(const Point &amp;aP, const Point &amp;aQ)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a66356baf7daca167161665c4ea3b7e56</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a55003004d693208261e0c3f596f21bd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getUf</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a605e4e8fbe3f9162c2beddabe0abb2b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getUl</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>acedda28c00c9a6c093a25e236af7a88f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLf</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>ac3e5f27104b744fa83c89f35974aa045</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>getLl</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>afe3b39118fbf2dc2d59c69e2e3796d6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSeparatingStraightLine</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a93ee529302ccff8f8900f963c48c5234</anchor>
      <arglist>(double &amp;alpha, double &amp;beta, double &amp;gamma) const </arglist>
    </member>
    <member kind="function">
      <type>const Shape &amp;</type>
      <name>shape</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a6dd816c1b72fc508fcdbd1f29f3712c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>pHull</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a06a7f238b79eceff9baac2b9443eeb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Container &amp;</type>
      <name>qHull</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>ab5c768ce03a5d468ffc97930b95b1699</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a0379c77ebc6ca5e7aa013b4f56105323</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Point &gt;</type>
      <name>Container</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a634e779382b56677c5688a4cbb4e5e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Point &gt;::iterator</type>
      <name>ForwardIterator</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a270954e85d68f591ae8c7c19ba8ecea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Point &gt;::reverse_iterator</type>
      <name>BackwardIterator</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>abfa6c1006dec293efcc681a8a4cffcf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Point &gt;::const_iterator</type>
      <name>ConstForwardIterator</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>abed81a08c897d6929d3b7c6c744d9099</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::list&lt; Point &gt;::const_reverse_iterator</type>
      <name>ConstBackwardIterator</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>ae56a753dda5a31f3c87129b399b0dabc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Shape, false, true &gt;</type>
      <name>PHullBackQHullFrontPred</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a8068e3e07c10b438d77d8558ffeb3ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Shape, true, true &gt;</type>
      <name>QHullBackPHullFrontPred</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>afcc3f0b4239b4221cf223cd4e4e15d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Shape, true, true &gt;</type>
      <name>PHullFrontQHullBackPred</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a04224f76f3b5e99b7e22c48427c43dac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Shape, false, true &gt;</type>
      <name>QHullFrontPHullBackPred</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a89af0683d2de0a8440db8f04eecf1ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Shape, true, false &gt;</type>
      <name>FrontPHullUpdatePred</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>ab9cf85e2ad24a3e862931d74aa2001d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Shape, false, false &gt;</type>
      <name>FrontQHullUpdatePred</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a1b2f56b781e13a2495dd12dea4fa2759</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Shape, false, false &gt;</type>
      <name>BackPHullUpdatePred</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a69167f6d393878c3b75dd70723ee46a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Point2ShapePredicate&lt; Shape, true, false &gt;</type>
      <name>BackQHullUpdatePred</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a6891c2e56366d6f14181a3ebf69cef94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a2f026c3941a1234365f131c5fde51a59</anchor>
      <arglist>(const Point &amp;aPoint, Container &amp;aContainer, Iterator &amp;anIterator, const Iterator &amp;anEndIterator)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Shape</type>
      <name>myShape</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a895e22d583a4b88708d6f4a2cdf8d0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Container</type>
      <name>myPHull</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>afaeb71ffb45a67b0dc1e2df4998a245f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Container</type>
      <name>myQHull</name>
      <anchorfile>classDGtal_1_1Preimage2D.html</anchorfile>
      <anchor>a2dcf8311661d9b94d09c3f7d7f509d21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SphericalAccumulator</name>
    <filename>classDGtal_1_1SphericalAccumulator.html</filename>
    <templarg>TVector</templarg>
    <member kind="typedef">
      <type>TVector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a8bfd0405cc2b857a64d4f4e78bb7a5b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::int32_t</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a8da7846e843a44854f7be223a28db998</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::uint32_t</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a4af3d65543e9381217f4915dce883c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Quantity &gt;::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a1d914d7b2db022cde8992056814c1bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; 3, double &gt;</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>aac7771adc2cd237c1dbefbdb1b543719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a767f43a60c4ae0f883164b2f9207db9f</anchor>
      <arglist>(Vector::dimension==3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SphericalAccumulator</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a8113e69494079c9bbc76285ed96dc626</anchor>
      <arglist>(const Size aNphi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SphericalAccumulator</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>aeeda68f83771829efb894c3cf7e55155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDirection</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>ad3ad94e12a90ed741442c225ff3c8227</anchor>
      <arglist>(const Vector &amp;aDir)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>binCoordinates</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a72804dbf6164f51ffb5598ec5ec30332</anchor>
      <arglist>(const Vector &amp;aDir, Size &amp;posPhi, Size &amp;posTheta) const </arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>count</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a82b166503c908f8adcd3f67bbaa60019</anchor>
      <arglist>(const Size &amp;posPhi, const Size &amp;posTheta) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>representativeDirection</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a6d6910940fa1d859796052fc51531070</anchor>
      <arglist>(const Size &amp;posPhi, const Size &amp;posTheta) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>representativeDirection</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>aa1b0adf5a37968b94fc6b77a09ff1572</anchor>
      <arglist>(ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>samples</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a337a62e9a5f35cde370c3ce6bf339e25</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>binNumber</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>abcffdf2fce05638a82692cb279e55a62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>maxCountBin</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a5e89c4ef7a0da0a80990e9fd1c37c2a7</anchor>
      <arglist>(Size &amp;posPhi, Size &amp;posTheta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>aba7dfdf2e3183e6ce772dbfd87253c5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a45fa5ed889ad03e99fdf0e2a8aed495c</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a6d41d4a2f676ee63a47cdf72e27deb59</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a258e6bfebd03b42381bb622455487485</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidBin</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a7377a30ec8fdc47e6c4e1b97d3cead44</anchor>
      <arglist>(const Size &amp;posPhi, const Size &amp;posTheta) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBinGeometry</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>afee1d9e86d742bba5f6a76c704532d8a</anchor>
      <arglist>(const Size &amp;posPhi, const Size &amp;posTheta, RealVector &amp;a, RealVector &amp;b, RealVector &amp;c, RealVector &amp;d) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a47af2bb12a027828479216d70deba618</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a3d622a9abf6712fd4e3e80160e7990d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>binCoordinates</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a9ec330797a88ca5416d92f052abb8e80</anchor>
      <arglist>(ConstIterator &amp;aDir, Size &amp;posPhi, Size &amp;posTheta) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SphericalAccumulator</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a7d5f7cc2eb05491fa63cd0e807ed7478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SphericalAccumulator</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>aa05b2b4eb3aa74ef550cc3bce5213d6f</anchor>
      <arglist>(const SphericalAccumulator &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SphericalAccumulator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>aa8e5872bffb45a7f294b2dea9ba946fd</anchor>
      <arglist>(const SphericalAccumulator &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>myNphi</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a91923c10b0edda3efded00ae681ea15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>myNtheta</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>abdc19f4f8c5486ed4a0444cdef63c664</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Quantity &gt;</type>
      <name>myAccumulator</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>aca29a731f07579d90b32228a17e54a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Vector &gt;</type>
      <name>myAccumulatorDir</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a3d0c1d60e78580003cf7add0b53d66a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quantity</type>
      <name>myTotal</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a9f33ce6a34bf2583883d8f7626e95576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Quantity</type>
      <name>myBinNumber</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a1c1ba5a0e078951c4cb5a7baf3855a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>myMaxBinPhi</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>af50e20580c5fc8b204078d436550cab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>myMaxBinTheta</name>
      <anchorfile>classDGtal_1_1SphericalAccumulator.html</anchorfile>
      <anchor>a60ff92c22fd686765ea872d80252b5ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSeparableMetric</name>
    <filename>structDGtal_1_1CSeparableMetric.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::InternalValue</type>
      <name>InternalValue</name>
      <anchorfile>structDGtal_1_1CSeparableMetric.html</anchorfile>
      <anchor>a07478020bc6c9d6e38eedaf59342f76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CSeparableMetric.html</anchorfile>
      <anchor>a0d32895064071608a33661eb98b1e340</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Abscissa</type>
      <name>Abscissa</name>
      <anchorfile>structDGtal_1_1CSeparableMetric.html</anchorfile>
      <anchor>a5a0578ad7740a96e66652e4d864af413</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSeparableMetric.html</anchorfile>
      <anchor>add586e70fccc97b865e329ae8196bb15</anchor>
      <arglist>(CSeparableMetric)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1CSeparableMetric.html</anchorfile>
      <anchor>a1eae05c61233939752d360da6347f425</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Abscissa</type>
      <name>a</name>
      <anchorfile>structDGtal_1_1CSeparableMetric.html</anchorfile>
      <anchor>a1c8e0cc2342ecda4d3d9fbe21b2d1c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InternalValue</type>
      <name>h</name>
      <anchorfile>structDGtal_1_1CSeparableMetric.html</anchorfile>
      <anchor>afc59d54e4cd205027202f6ce63faf012</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DistanceTransformation</name>
    <filename>classDGtal_1_1DistanceTransformation.html</filename>
    <templarg>TSpace</templarg>
    <templarg>TPointPredicate</templarg>
    <templarg>p</templarg>
    <templarg>IntegerLong</templarg>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>ab72969b520fa14972f6b86da8cffadb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPointPredicate</type>
      <name>PointPredicate</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a25843193eb4581010ee0cafce92698ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyperRectDomain&lt; Space &gt;</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>aad450113a46a8ac31873bf80d2d4cb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageContainerBySTLVector&lt; Domain, IntegerLong &gt;</type>
      <name>OutputImage</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a5ffaa4c4cc7c6c239087e7e13bdcf4b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a4c7c17ac63721a73ffeb25861f168997</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a2149985bbaeb6506004321cc31251551</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a81fbebd3625aeebe095ca3926df74a96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a786f5b7355ca985ae7302c5ddf800361</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point::Coordinate</type>
      <name>Abscissa</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a90d16a06cd5a8eb56f370ebdc66c117c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeparableMetricHelper&lt; Point, IntegerLong, p &gt;</type>
      <name>SeparableMetric</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a39173665d18eacd7ed598f6896a869ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a70dee262306a92dc273fa68c6eba7024</anchor>
      <arglist>((CSignedInteger&lt; IntegerLong &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a7d95c87a215c01c72f1af549bf057f6b</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>ab2fef896d4c2d495719bbbd7778c1c10</anchor>
      <arglist>((CPointPredicate&lt; TPointPredicate &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceTransformation</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a972a4d7ab5a157730147235a4a4a50b6</anchor>
      <arglist>(const Domain &amp;aDomain, const PointPredicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DistanceTransformation</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>afc1c3a94503d499c3c1add2e88af2444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutputImage</type>
      <name>compute</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a4c841d64128f83d9d8e4a078f5ce3d80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkTypesValidity</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>ac59cfc467835520fac12fd12ed853609</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DistanceTransformation</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a91b29c1e148b2095097d5abafced154b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeFirstStep</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>ac49395e1f93506372bb1851d9a8a27ef</anchor>
      <arglist>(OutputImage &amp;output) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeFirstStep1D</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a08a150385f25e1ce5898b628005d9b19</anchor>
      <arglist>(OutputImage &amp;output, const Point &amp;startingPoint) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeOtherSteps</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a3da9312f0a700404cca541a03b103c1a</anchor>
      <arglist>(const OutputImage &amp;inputImage, OutputImage &amp;output, const Dimension dim) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeOtherStep1D</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a45405238a384a2feb7e29870b971cc9a</anchor>
      <arglist>(const OutputImage &amp;input, OutputImage &amp;output, const Point &amp;row, const Size dim, Abscissa s[], Abscissa t[]) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SeparableMetric</type>
      <name>myMetric</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>aab9de8b5b01e24b7645b8113ea64e09d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Domain &amp;</type>
      <name>myDomain</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a1fab575e1e0f79eb7fde6b14a1ff384e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const PointPredicate &amp;</type>
      <name>myPointPredicate</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a0d6844ec2418b5b823c9f0b6c217a23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myLowerBoundCopy</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>ab27bcde2cfbca687417a316e6480dc32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myUpperBoundCopy</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a77a9d314184a433b09f3c085ccd9b255</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector</type>
      <name>myDisplacementVector</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a729716e7f109fe844609d254dec1e5ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myExtent</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>a8ff58df38602b46fedef182fd4b59388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IntegerLong</type>
      <name>myInfinity</name>
      <anchorfile>classDGtal_1_1DistanceTransformation.html</anchorfile>
      <anchor>ac615b3ac95c9ab5a831252aa87a664a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FMM</name>
    <filename>classDGtal_1_1FMM.html</filename>
    <templarg>TImage</templarg>
    <templarg>TSet</templarg>
    <templarg>TPointPredicate</templarg>
    <templarg>TPointFunctor</templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a28c6d76a8a0c6d1d509ec611a3d7d1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSet</type>
      <name>AcceptedPointSet</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a58d1c864335c88ab103335b9ff525f09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPointPredicate</type>
      <name>PointPredicate</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a104595a3d7aa1b91214446881168ed29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Point</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>aab7b43e7d9905a9722ca7f22e7abf3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a383e8aa3b6a855469481c8276982a9d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>ada91adfe7637683dcce8110082ccde2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPointFunctor</type>
      <name>PointFunctor</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a110ea012386edb6afc5e1119cc1b0a90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointFunctor::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a6eaa7319baaa2c0776e3bf0c3c23a7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a7976a34913af1954e78781b14b9a90a1</anchor>
      <arglist>((CImage&lt; TImage &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a6ecfd194c746fefe590d82066a5e6981</anchor>
      <arglist>((CDigitalSet&lt; TSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a8fb6569892b4269daa5675cd47349fdb</anchor>
      <arglist>((CPointPredicate&lt; TPointPredicate &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a5172f0e9240fb8654f8757ec780bb501</anchor>
      <arglist>((CPointFunctor&lt; TPointFunctor &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>ad6071088e69f6a69f6bcfb4992f1fd07</anchor>
      <arglist>((boost::is_same&lt; Point, typename AcceptedPointSet::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>ad08ae3f3a52357a7e9e5fbd321e2f524</anchor>
      <arglist>((boost::is_same&lt; Point, typename PointPredicate::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FMM</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>ace447fa0961e2f283a1774ee6550d4eb</anchor>
      <arglist>(Image &amp;aImg, AcceptedPointSet &amp;aSet, const PointPredicate &amp;aPointPredicate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FMM</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>ae64b999b76cf947bf255bcde5d79f365</anchor>
      <arglist>(Image &amp;aImg, AcceptedPointSet &amp;aSet, const PointPredicate &amp;aPointPredicate, const Area &amp;aAreaThreshold, const Value &amp;aValueThreshold)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FMM</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>aa6f6c1a822957c26fcfbd153c4672982</anchor>
      <arglist>(Image &amp;aImg, AcceptedPointSet &amp;aSet, const PointPredicate &amp;aPointPredicate, PointFunctor &amp;aPointFunctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FMM</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a97517fff5e46b3db64a2c308c212bc03</anchor>
      <arglist>(Image &amp;aImg, AcceptedPointSet &amp;aSet, const PointPredicate &amp;aPointPredicate, const Area &amp;aAreaThreshold, const Value &amp;aValueThreshold, PointFunctor &amp;aPointFunctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FMM</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a2a487d99570dfddfb22abedd737e5050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a2f99dbe7f15b0f95997112e9d7027f44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeOneStep</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a38c8a40dcdd3c1728824deb8e86b758d</anchor>
      <arglist>(Point &amp;aPoint, Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a48c367ee14e197f6748cb681f2af2252</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a642142b5148df90632b1320350ebb549</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getMin</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a59304baa6861ebc4a85fa5a9423be826</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getMax</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>adddc56baf9597d5087c3a20a5c266856</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>afe6558cd5cd376763ac40c826b50aeb2</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a8d8fd3e01d776fed5dec473f988c3204</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initFromPointsRange</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a2972c9a7ea8a5e235e0eac846c0c56a2</anchor>
      <arglist>(const TIteratorOnPoints &amp;itb, const TIteratorOnPoints &amp;ite, Image &amp;aImg, AcceptedPointSet &amp;aSet, const Value &amp;aValue)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initFromBelsRange</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>ae045075b921de542fabad008107acaab</anchor>
      <arglist>(const KSpace &amp;aK, const TIteratorOnBels &amp;itb, const TIteratorOnBels &amp;ite, Image &amp;aImg, AcceptedPointSet &amp;aSet, const Value &amp;aValue, bool aFlagIsPositive=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initFromBelsRange</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a77e6f83bc439ff42f814b81a101e3e44</anchor>
      <arglist>(const KSpace &amp;aK, const TIteratorOnBels &amp;itb, const TIteratorOnBels &amp;ite, const TImplicitFunction &amp;aF, Image &amp;aImg, AcceptedPointSet &amp;aSet, bool aFlagIsPositive=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>initFromIncidentPointsRange</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a5191b691bce6ae8a0235e1d0067a034b</anchor>
      <arglist>(const TIteratorOnPairs &amp;itb, const TIteratorOnPairs &amp;ite, Image &amp;aImg, AcceptedPointSet &amp;aSet, const Value &amp;aValue, bool aFlagIsPositive=false)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>afeb66bc33b9aecb5c74f523a36831d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; Point, Value &gt;</type>
      <name>PointValue</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>aaad49a9394a9bac42f4314440d73aa56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::set&lt; PointValue, details::PointValueCompare&lt; PointValue &gt; &gt;</type>
      <name>CandidatePointSet</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>aa0a582591c0ab76f1a82d03615b6f394</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>unsigned long</type>
      <name>Area</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a2320bab810dc1ce2803d59df013dbc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>FMM</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>ab3fd6d2fd2e017d63eb7508007d28a5d</anchor>
      <arglist>(const FMM &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>FMM &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>af55d30994f7e6113497d897011d58ed6</anchor>
      <arglist>(const FMM &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a64b9b961c268e17b1eb8cfb1f79509d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addNewAcceptedPoint</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a20c574381330d25f1d2efd6f199ac5fb</anchor>
      <arglist>(Point &amp;aPoint, Value &amp;aValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>update</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a1dd281ec4517b72b6f7d5ac41f5c9b8f</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>addNewCandidate</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a2a279682c6e580f1a5e61d6a099b77e6</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Image &amp;</type>
      <name>myImage</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a066563d00f3eb82709e74460acf8acba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>AcceptedPointSet &amp;</type>
      <name>myAcceptedPoints</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a059de240b3bc6b7b9a9f8d477c7f6436</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CandidatePointSet</type>
      <name>myCandidatePoints</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a9e58e915a9f9e0c75a07eb92ff2e73f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>PointFunctor *</type>
      <name>myPointFunctorPtr</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a7fc089c58ea70a45b83cd31722663e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const bool</type>
      <name>myFlagIsOwning</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>ac2b2f56b0a2d2128cd2a160c72fbd0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const PointPredicate &amp;</type>
      <name>myPointPredicate</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a1eef5bac8212bef6e6bb354e3a89f893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Area</type>
      <name>myAreaThreshold</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>aed499f86d559aaccd43ef7f192cfed0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myValueThreshold</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a7b2d803f65813989eb41915b9768d8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myMinValue</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>a2ce49fcc0b2f226ec29231308b5e0ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myMaxValue</name>
      <anchorfile>classDGtal_1_1FMM.html</anchorfile>
      <anchor>ae9135702161810cbe75860523d77b14b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::L2FirstOrderLocalDistance</name>
    <filename>classDGtal_1_1L2FirstOrderLocalDistance.html</filename>
    <templarg>TImage</templarg>
    <templarg>TSet</templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>af1948324cd3d87f7003c497e26768764</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>a54e1767be2f3f8bd18efbc7a5d0d0090</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>ac8fc83472d95f8cfd385363fb875da56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSet</type>
      <name>Set</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>aa6b8b077fa1d491ac93c92fbe5a1b891</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>a301dc869f965de41778c73d36c2444ad</anchor>
      <arglist>((CImage&lt; TImage &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>a032302cc37b7f891a41711251980473e</anchor>
      <arglist>((CDigitalSet&lt; TSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>ab2c597bd0eee98386fb914d9f1744cd9</anchor>
      <arglist>((boost::is_same&lt; Point, typename TSet::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2FirstOrderLocalDistance</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>a3f3fd9cd183d2eb96c4e56e70bbc48b2</anchor>
      <arglist>(Image &amp;aImg, TSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2FirstOrderLocalDistance</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>af1eed5963af0bedddbe362bed9b4f9d2</anchor>
      <arglist>(const L2FirstOrderLocalDistance &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>L2FirstOrderLocalDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>a100ce52b452c83ecc7fa7a9a655137f0</anchor>
      <arglist>(const L2FirstOrderLocalDistance &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~L2FirstOrderLocalDistance</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>a3a37219639faa61191572a6b247c6932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>ad40fcb783f3ea0e24ccc8f3cbdd52c85</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>a9522dbe4b77664ff33e8e6b53360a175</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable">
      <type>Image *</type>
      <name>myImgPtr</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>aae4624d7c28ca9590ad04a23b7ffe444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Set *</type>
      <name>mySetPtr</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>aa5f418fb347ee77d41a6a451aad75b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Value &gt;</type>
      <name>Values</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>af7facf2c53391772f3674f8d2ed9e402</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Value</type>
      <name>compute</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>ad9dd09127bab8561cbbad5135491de13</anchor>
      <arglist>(Values &amp;aValueList) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Value</type>
      <name>gradientNorm</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistance.html</anchorfile>
      <anchor>a7950d897172dad76c2744be1a307a332</anchor>
      <arglist>(const Value &amp;aValue, const Values &amp;aValueList) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::L2SecondOrderLocalDistance</name>
    <filename>classDGtal_1_1L2SecondOrderLocalDistance.html</filename>
    <templarg>TImage</templarg>
    <templarg>TSet</templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a84066f84ec7883add61c74d790dfc260</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a92ec6863015fb93b8e98051079c64d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a2eb8d76412592061908d0e7e23cec81a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSet</type>
      <name>Set</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>afe6640b68a8e2fbdda1aa731080b12ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>af38335c1c0e89d09f4b95a1d3d43cc2e</anchor>
      <arglist>((CImage&lt; TImage &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a473e3880cbd7563c2c6f01316a6d11ec</anchor>
      <arglist>((CDigitalSet&lt; TSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a7273b4e58bd6f8ac02a2cb5a765ae0e8</anchor>
      <arglist>((boost::is_same&lt; Point, typename TSet::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2SecondOrderLocalDistance</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>ae4f9f5cb04596ad84e46cff6d2195500</anchor>
      <arglist>(Image &amp;aImg, TSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2SecondOrderLocalDistance</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>ab681c05ecd3c0544dc78d386cb8a852e</anchor>
      <arglist>(const L2SecondOrderLocalDistance &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>L2SecondOrderLocalDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a5aedbdc846c91016324f9668b7f38754</anchor>
      <arglist>(const L2SecondOrderLocalDistance &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~L2SecondOrderLocalDistance</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a8ec9727b492ebdde6f0d77b07b0a07ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a2ff7ed89f27590ef2284456d3f892a09</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>aa87871ebe6eddcb97ae2d652738256a7</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable">
      <type>Image *</type>
      <name>myImgPtr</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>ae737bd5d45c00447dac9b2d748210482</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Set *</type>
      <name>mySetPtr</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a2ea9ee313314ecad6fd5b2682652022c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::pair&lt; double, Value &gt;</type>
      <name>CoeffValue</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a20c7186dfb39b1178b7999bf5ac1dc8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; CoeffValue &gt;</type>
      <name>List</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a4e9ab9e9dc44d6650705d6e20611ad79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Value</type>
      <name>compute</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>a79e20cfbfd9feb3d0706fcbb752c7805</anchor>
      <arglist>(List &amp;aList) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>Value</type>
      <name>getValue</name>
      <anchorfile>classDGtal_1_1L2SecondOrderLocalDistance.html</anchorfile>
      <anchor>aeb4143cb5e7893c7300a1cbd6287a80f</anchor>
      <arglist>(const Value &amp;aValue1, const Value &amp;aValue2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LInfLocalDistance</name>
    <filename>classDGtal_1_1LInfLocalDistance.html</filename>
    <templarg>TImage</templarg>
    <templarg>TSet</templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a4636034af68cc1eee8fac840033bcea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a83490c20a09a6dba144699d11570dfee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>abc3b09dfea9b0be8bddd5cda5e4f0934</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSet</type>
      <name>Set</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a63a65fe4fbf98bd69d6cafebf3e2a2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>af0ec0ae5ed2d318075943b8d72017bb0</anchor>
      <arglist>((CImage&lt; TImage &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>aa0c681fb8aa234fdd183b9c866f8714d</anchor>
      <arglist>((CDigitalSet&lt; TSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a7decd3fb61a7a8798d934ef480fa454b</anchor>
      <arglist>((boost::is_same&lt; Point, typename TSet::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LInfLocalDistance</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a357a59b0298d063be8729ff7c95a0d44</anchor>
      <arglist>(Image &amp;aImg, TSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LInfLocalDistance</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>afdeaff914ac5e93f0642038a1ca2dd6e</anchor>
      <arglist>(const LInfLocalDistance &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LInfLocalDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a4652012b8e24a835b51055b2de0e44fa</anchor>
      <arglist>(const LInfLocalDistance &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LInfLocalDistance</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>aa3dfa2a7e7b68635ccf4f4aaf91e35d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>aee91e654ad269b10a77c9638ff4826f1</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a3d6f35af13ee02723fd20352760b2705</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable">
      <type>Image *</type>
      <name>myImgPtr</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>af25b65772b257e71eb217dd569af53e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Set *</type>
      <name>mySetPtr</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a6bc0a7f3d98c8addc0420f4663f2723f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Value &gt;</type>
      <name>Values</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a407ef431c19fee3bfd9eddb0eae34188</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Value</type>
      <name>compute</name>
      <anchorfile>classDGtal_1_1LInfLocalDistance.html</anchorfile>
      <anchor>a2e4a9f53da92a75a6b6ba94bb4adea3c</anchor>
      <arglist>(Values &amp;aValueList) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::L1LocalDistance</name>
    <filename>classDGtal_1_1L1LocalDistance.html</filename>
    <templarg>TImage</templarg>
    <templarg>TSet</templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a142b64dc63a5f8d59a40c2e927aca47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>ad25d01b7ad4668acf02ac1de3eced94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a85519e8120edb5f379cb04341101e2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSet</type>
      <name>Set</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a751e6f16f05df0bca6005695b212161a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a258ef7583af29e180f8f17b07747c1c4</anchor>
      <arglist>((CImage&lt; TImage &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>acce376cde01ff0d23c7dec4c3dcd33a5</anchor>
      <arglist>((CDigitalSet&lt; TSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a67365729f9a8ce6efb4870f4786e545b</anchor>
      <arglist>((boost::is_same&lt; Point, typename TSet::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L1LocalDistance</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>aec6b2209f251a322e822d1360c6ea3a9</anchor>
      <arglist>(Image &amp;aImg, TSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L1LocalDistance</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a1341024a299a36f1bb6c34c67fa353f4</anchor>
      <arglist>(const L1LocalDistance &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>L1LocalDistance &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a11f68c0d29f31ee71bec78031885f67e</anchor>
      <arglist>(const L1LocalDistance &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~L1LocalDistance</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a5f34b34afbbb347d6cf58efed3d4c60b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>afd5443bcb8758c800938c1566c1e9a96</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a5dcd4ac21a877285601bd2d38391ca29</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable">
      <type>Image *</type>
      <name>myImgPtr</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a6a24969ae2a0f0a0d43a11fc8ed271cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Set *</type>
      <name>mySetPtr</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a39969dfa5677e82449deb176628e6992</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Value &gt;</type>
      <name>Values</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>a66a1e2f9ef8599e2bdf26ff6cbd402a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Value</type>
      <name>compute</name>
      <anchorfile>classDGtal_1_1L1LocalDistance.html</anchorfile>
      <anchor>ab91a58ceb8def541bee9cf28ce07f2e4</anchor>
      <arglist>(Values &amp;aValueList) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::L2FirstOrderLocalDistanceFromCells</name>
    <filename>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TMap</templarg>
    <templarg>isIndirect</templarg>
    <member kind="typedef">
      <type>TMap</type>
      <name>Map</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>ae9d159a7ef369f9ee3ee026daedc4224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::mapped_type</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>aa33d8cb67c38ee24385a6db78d228372</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>a741b2516c4a9c92a2cacfba53ce9eb86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>ad58bd77b2834fcde6a155ae4300dc8dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>a804424052bdf3f4cbfefa5de7ad8900f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2FirstOrderLocalDistanceFromCells</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>a1498348ea264b98f423659213761ee43</anchor>
      <arglist>(const KSpace &amp;aK, Map &amp;aMap)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2FirstOrderLocalDistanceFromCells</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>aa8f57970df9a38c185003db98654f90a</anchor>
      <arglist>(const L2FirstOrderLocalDistanceFromCells &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>L2FirstOrderLocalDistanceFromCells &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>a04c6a5e7a66889c253b5e1c0dde55aa2</anchor>
      <arglist>(const L2FirstOrderLocalDistanceFromCells &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~L2FirstOrderLocalDistanceFromCells</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>a7ddbb14d4f099144988a3ca4ea8aeba3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>ad5484e7b8f4bac424e4e30b7b78357dd</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>a3942c133c756408003fd276443766354</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="variable">
      <type>const KSpace *</type>
      <name>myKSpace</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>ad56b9428464448ccfa0a57b5d10f8456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Map *</type>
      <name>myMap</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>ad8385b01b5794c9941464931268d9b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>std::vector&lt; Value &gt;</type>
      <name>Values</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>a56ab1aff015a33c2f9caf4950540169f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>Value</type>
      <name>compute</name>
      <anchorfile>classDGtal_1_1L2FirstOrderLocalDistanceFromCells.html</anchorfile>
      <anchor>a0f06c1a0c13a483ee80cc6674446db32</anchor>
      <arglist>(Values &amp;aValueList) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SpeedExtrapolator</name>
    <filename>classDGtal_1_1SpeedExtrapolator.html</filename>
    <templarg>TDistanceImage</templarg>
    <templarg>TSet</templarg>
    <templarg>TSpeedFunctor</templarg>
    <member kind="typedef">
      <type>TDistanceImage</type>
      <name>DistanceImage</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>aee1685adeaf5be73de85bc8c5bc8769a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistanceImage::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>aea8c3845a1cf706de0c1e9d1931731e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DistanceImage::Value</type>
      <name>DistanceValue</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>ab15b34a19dafa23cbab5184024e6c32a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpeedFunctor</type>
      <name>SpeedFunctor</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>abe471963bba064a2749c637df51488d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpeedFunctor::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a1b44e2edbe022b103c8feaeb9de17e02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSet</type>
      <name>Set</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a1e85cf92a719ae3b0e0ff14a4e4717a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a2abd6da2d49358df196dee624267c108</anchor>
      <arglist>((CImage&lt; TDistanceImage &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a187d21616eb6fb70c49cce5c9d6c98a9</anchor>
      <arglist>((CPointFunctor&lt; TSpeedFunctor &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a42666666994f89568be4162a8ec75810</anchor>
      <arglist>((boost::is_same&lt; Point, typename SpeedFunctor::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a72708c99ea36dfa2a00e7adef607fe9b</anchor>
      <arglist>((CDigitalSet&lt; TSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a9f3c47b827374081cd86a14e246ea19e</anchor>
      <arglist>((boost::is_same&lt; Point, typename TSet::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeedExtrapolator</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a7491c35e26420dd08d480b2232053517</anchor>
      <arglist>(const DistanceImage &amp;aDistImg, const TSet &amp;aSet, SpeedFunctor &amp;aSpeedFunc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpeedExtrapolator</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>aca95616d5ee4f53a90c308c116a4c2fc</anchor>
      <arglist>(const SpeedExtrapolator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SpeedExtrapolator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a1258477c8fa3214adea5bdc476ee18bf</anchor>
      <arglist>(const SpeedExtrapolator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpeedExtrapolator</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a3583f8b9510db6ea1b568703c2a038b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a8e52fb0aaff55fe83b0c2ef8c47c5c75</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="variable">
      <type>const DistanceImage *</type>
      <name>myDistImgPtr</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a9a130b9747125d914cb97410e2f45c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Set *</type>
      <name>mySetPtr</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>aae60f5de0cf9ade5121441973fab3d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SpeedFunctor *</type>
      <name>mySpeedFuncPtr</name>
      <anchorfile>classDGtal_1_1SpeedExtrapolator.html</anchorfile>
      <anchor>a3bedf8b1ccc8e65110b3d8212ee8a815</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ReverseDistanceTransformation</name>
    <filename>classDGtal_1_1ReverseDistanceTransformation.html</filename>
    <templarg>Image</templarg>
    <templarg>p</templarg>
    <templarg>IntegerShort</templarg>
    <member kind="typedef">
      <type>ImageContainerBySTLVector&lt; HyperRectDomain&lt; typename Image::Domain::Space &gt;, IntegerShort &gt;</type>
      <name>OutputImage</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>ab8cadc7de3dee596addfb871095cc7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a238700bc7a3fd148260ee5a61346572c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>aeea23b9c8159bda5420fa983797d704a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a5818033ba1ca8fb86507c19849a7aa02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a33dcb7fdbc646491e23bff11425dc366</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a420efa837eb11483486de8646ab196da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a3036d5d3c2154a49530872bc22bb7dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a48f44a431fab959d1314956a7317e1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Domain::Space::Point::Coordinate</type>
      <name>Coordinate</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a7ec6a034911795329286f8b302dece13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeparableMetricHelper&lt; Point, Integer, p &gt;</type>
      <name>SeparableMetric</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>aea5ad45db47eaf06d248db494ab87adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a88d4e7f045d751e20a2b43800d63e3d3</anchor>
      <arglist>((CBoundedInteger&lt; IntegerShort &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReverseDistanceTransformation</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a3d8cb97070a63413938af902139c7497</anchor>
      <arglist>(const IntegerShort defaultForeground=NumberTraits&lt; IntegerShort &gt;::ONE, const IntegerShort defaultBackground=NumberTraits&lt; IntegerShort &gt;::ZERO)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ReverseDistanceTransformation</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>af336bb234f5d08c7295d0b14e39a86e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutputImage</type>
      <name>reconstruction</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a5efffcdb85f471ccff2a59cab7ab4416</anchor>
      <arglist>(const Image &amp;inputImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconstructionAsSet</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>afd355be4e5ddc07e2750669e7137481b</anchor>
      <arglist>(DigitalSet &amp;aSet, const Image &amp;inputImage)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconstructionAsSet</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a958d294b1accc8309938955214af495d</anchor>
      <arglist>(Set &amp;aSet, const I &amp;aImage)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>reconstructionInternal</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a8bcd67e27ff4a7e1d325c6557ed7fc97</anchor>
      <arglist>(const Image &amp;aImage, Image &amp;output, Image &amp;swap)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>OutputImage</type>
      <name>castValues</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>ad4caae0f1d44b2872e78e582a3cb6746</anchor>
      <arglist>(const Image &amp;input) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeSteps</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a7a132e95e426747b5dbfbf0dfd2bfb62</anchor>
      <arglist>(const Image &amp;inputImage, Image &amp;output, const Dimension dim) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeSteps1D</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a893b7b0eafae0e0eea3f869a14aaf34d</anchor>
      <arglist>(const Image &amp;input, Image &amp;output, const Point &amp;startingPoint, const Size dim, Integer s[], Integer t[]) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SeparableMetric</type>
      <name>myMetric</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a1cda10c120b3563966c0313c39573da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myLowerBoundCopy</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>aaf2940ec29a164e12de8d8562c5b1d00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myUpperBoundCopy</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a3ccd2eedbd2414d041b5c4f325f10775</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myExtent</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>af65f223b4992cc97330bbc33e968ef5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector</type>
      <name>myDisplacementVector</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>acfe88d941ab9c38bef52b298e52ae810</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IntegerShort</type>
      <name>myForegroundValue</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a98d951393f9d5dcd08d8d4a1946962af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>IntegerShort</type>
      <name>myBackgroundValue</name>
      <anchorfile>classDGtal_1_1ReverseDistanceTransformation.html</anchorfile>
      <anchor>a65e6b6c9a5feca923274e45d415751c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SeparableMetricHelper</name>
    <filename>structDGtal_1_1SeparableMetricHelper.html</filename>
    <templarg>TPoint</templarg>
    <templarg>TInternalValue</templarg>
    <templarg>tp</templarg>
    <member kind="enumeration">
      <name>Closest</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>af7114016436f0e42235a332238b8b1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>af7114016436f0e42235a332238b8b1baa49e97e457c93a3f3bd37fe19333c65d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECOND</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>af7114016436f0e42235a332238b8b1baa1a4a5bd61e211e1cf1164fb02fc5c707</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOTH</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>af7114016436f0e42235a332238b8b1baaa64360080e82a9e1cd85875cd8bfae18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInternalValue</type>
      <name>InternalValue</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a0e0410a33f2cf78321af288ecf03188b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint::Coordinate</type>
      <name>Abscissa</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a856120afe3ee02d080109417aed854c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a64ea9124e1be67b1d6f446f878979fb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>aa0785ad7d7926a13060e83c780e5b565</anchor>
      <arglist>((CBoundedInteger&lt; Abscissa &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a8ce2b38ebb7a407f80aed562c357cc14</anchor>
      <arglist>((CBoundedInteger&lt; TInternalValue &gt;))</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getApproxValue</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a4c1bf31ca663da5f511539bc4853900a</anchor>
      <arglist>(const InternalValue &amp;aInternalValue) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>F</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a346288d76b3b7c553bd8b418b1c0bf33</anchor>
      <arglist>(const Abscissa pos, const Abscissa ci, const InternalValue hi) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>reversedF</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a7838241388bef1e5154d45a74bb5c5e6</anchor>
      <arglist>(const Abscissa pos, const Abscissa ci, const InternalValue hi) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>power</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a4f7aa5b7e09b106c3cf014452bf386b1</anchor>
      <arglist>(const Abscissa pos) const </arglist>
    </member>
    <member kind="function">
      <type>Abscissa</type>
      <name>reversedSep</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>ad8db956cde3a8512a8cd2f561edcf78d</anchor>
      <arglist>(const Abscissa i, const InternalValue hi, const Abscissa j, const InternalValue hj) const </arglist>
    </member>
    <member kind="function">
      <type>Abscissa</type>
      <name>Sep</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a8ac406d0ab6d3edd5631be4e137c08fe</anchor>
      <arglist>(const Abscissa i, const InternalValue hi, const Abscissa j, const InternalValue hj) const </arglist>
    </member>
    <member kind="function">
      <type>Closest</type>
      <name>closest</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a9b275e2b9d6ba1281554170e2d5465e8</anchor>
      <arglist>(const Point &amp;origin, const Point &amp;first, const Point &amp;second) const </arglist>
    </member>
    <member kind="function">
      <type>Abscissa</type>
      <name>binarySearchHidden</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>af5d417935f17311fa7dc13bbf30b8586</anchor>
      <arglist>(const Abscissa &amp;udim, const Abscissa &amp;vdim, const InternalValue &amp;nu, const InternalValue &amp;nv, const Abscissa &amp;lower, const Abscissa &amp;upper) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hiddenBy</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a124d11a261a440c284c819b47806b063</anchor>
      <arglist>(const Point &amp;u, const Point &amp;v, const Point &amp;w, const Point &amp;startingPoint, const Point &amp;endPoint, const typename Point::UnsignedComponent dim) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DGtal::uint32_t</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper.html</anchorfile>
      <anchor>a1e195345a595fa9a98044c7f4c67e9b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SeparableMetricHelper&lt; TPoint, TInternalValue, 2 &gt;</name>
    <filename>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <name>Closest</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a2158b942f4e08345fee7c394fe7973b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a2158b942f4e08345fee7c394fe7973b1ab6db5885df5c5c4605c10d7eca0f6180</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECOND</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a2158b942f4e08345fee7c394fe7973b1aa1a80543f84d710697984e3d21263dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOTH</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a2158b942f4e08345fee7c394fe7973b1af04846236d4bde440bfb12201886cfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInternalValue</type>
      <name>InternalValue</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a2d5c3ac3884ac27f286f37e7a04fa4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint::Coordinate</type>
      <name>Abscissa</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>ab5e6946aa3197a43ede557356a7f9e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a72c396e6583e091268ee3649eb9f46e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getApproxValue</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>acdb7352b356bcff84da97e78540034b2</anchor>
      <arglist>(const InternalValue &amp;aInternalValue) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>F</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a4431ceced8dde47c111ab5cd58910055</anchor>
      <arglist>(const Abscissa pos, const Abscissa ci, const InternalValue hi) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>reversedF</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a27f4988b1171d52ad2745141bca2035b</anchor>
      <arglist>(const Abscissa pos, const Abscissa ci, const InternalValue hi) const </arglist>
    </member>
    <member kind="function">
      <type>Abscissa</type>
      <name>Sep</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a2c3295522fe91e15faf8ed2b1c50dd09</anchor>
      <arglist>(const Abscissa i, const InternalValue hi, const Abscissa j, const InternalValue hj) const </arglist>
    </member>
    <member kind="function">
      <type>Abscissa</type>
      <name>reversedSep</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a64a2af00803ddd1513e96a179192902a</anchor>
      <arglist>(const Abscissa i, const InternalValue hi, const Abscissa j, const InternalValue hj) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>power</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>aa0e06e9bace9b1a845468f34d212c2a6</anchor>
      <arglist>(const Abscissa i) const </arglist>
    </member>
    <member kind="function">
      <type>Closest</type>
      <name>closest</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a71ac1f849e0c42c4b9d42da359e0aca9</anchor>
      <arglist>(const Point &amp;origin, const Point &amp;first, const Point &amp;second) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hiddenBy</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>aa41ddd2415fade912681f66b1f0e389f</anchor>
      <arglist>(const Point &amp;u, const Point &amp;v, const Point &amp;w, const Point &amp;startingPoint, const Point &amp;, const typename Point::UnsignedComponent dim) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DGtal::uint32_t</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_012_01_4.html</anchorfile>
      <anchor>a6fccc7f7484a5d46666e6eb3a3c5e12d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SeparableMetricHelper&lt; TPoint, TInternalValue, 1 &gt;</name>
    <filename>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <name>Closest</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a17a38fee40d663c4b27bfff632d05083</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a17a38fee40d663c4b27bfff632d05083a9d73a3c065f2ad7e12c17b91b189673e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECOND</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a17a38fee40d663c4b27bfff632d05083aae570f2f5422644641e934543e86a504</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOTH</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a17a38fee40d663c4b27bfff632d05083ab2c3b160b40a3542896ff20117ef2584</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInternalValue</type>
      <name>InternalValue</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a84af14c1fdb5e46d63bef93580339ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint::Coordinate</type>
      <name>Abscissa</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>aa920c880b3f2ae5f22ec8888b432ae0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a3dfe9fa945fe1a4d64b3314a8ed62de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getApproxValue</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>af90b3eff6538132feb556b5f274246a2</anchor>
      <arglist>(const InternalValue &amp;aInternalValue) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>F</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a65b092371b9e07d46f37628ca7be6bd2</anchor>
      <arglist>(const Abscissa pos, const Abscissa ci, const InternalValue hi) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>reversedF</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a45e08f4baf49f5306d2409abc6fc4d43</anchor>
      <arglist>(const Abscissa pos, const Abscissa ci, const InternalValue hi) const </arglist>
    </member>
    <member kind="function">
      <type>Abscissa</type>
      <name>Sep</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>ad76d3d2919acaa905dad51e49904d850</anchor>
      <arglist>(const Abscissa i, const InternalValue hi, const Abscissa j, const InternalValue hj) const </arglist>
    </member>
    <member kind="function">
      <type>Abscissa</type>
      <name>reversedSep</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a381e85cb96eb83c4486c1d51f5c20969</anchor>
      <arglist>(const Abscissa i, const InternalValue hi, const Abscissa j, const InternalValue hj) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>power</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a54ed49d1b3da85dbe4ed4ea705ac1df4</anchor>
      <arglist>(const Abscissa i) const </arglist>
    </member>
    <member kind="function">
      <type>Closest</type>
      <name>closest</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>a3b3a01dadcb2f4cab3798450cfac23bc</anchor>
      <arglist>(const Point &amp;origin, const Point &amp;first, const Point &amp;second) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hiddenBy</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>af9a50bd49b8bff5e6ac3b73b2e09abd6</anchor>
      <arglist>(const Point &amp;u, const Point &amp;v, const Point &amp;w, const Point &amp;startingPoint, const Point &amp;endPoint, const typename Point::UnsignedComponent dim) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DGtal::uint32_t</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_011_01_4.html</anchorfile>
      <anchor>ab010ae00aafe679c960d2e4a7747a233</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SeparableMetricHelper&lt; TPoint, TInternalValue, 0 &gt;</name>
    <filename>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <name>Closest</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>af6064f8b75e47352a29b395cff995c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FIRST</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>af6064f8b75e47352a29b395cff995c37a82afb0b0a387e4746443f884cd7f9398</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SECOND</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>af6064f8b75e47352a29b395cff995c37aa8d62cfbe30aeeeeaf98c102020d5e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOTH</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>af6064f8b75e47352a29b395cff995c37ac3c93fd782178ac0a11c561439b2fd39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TInternalValue</type>
      <name>InternalValue</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>a22ac1e2b9d1724c13c0870f938da1506</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint::Coordinate</type>
      <name>Abscissa</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>afd6c3d39123c3fe4820025cd0d090bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>a7554c1e407a93ca95663e9a0eff93087</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getApproxValue</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>aad4ee7bdbc6838511601f509d4a49467</anchor>
      <arglist>(const InternalValue &amp;aInternalValue) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>F</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>a195d21da25f590db204331266a677100</anchor>
      <arglist>(const Abscissa pos, const Abscissa ci, const InternalValue hi) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>reversedF</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>aaa7e0b8d6b1f9cedad3b9127a03a4718</anchor>
      <arglist>(const Abscissa pos, const Abscissa ci, const InternalValue hi) const </arglist>
    </member>
    <member kind="function">
      <type>Abscissa</type>
      <name>Sep</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>a8453acfa6154ce4b22e1fcdebee41919</anchor>
      <arglist>(const Abscissa i, const InternalValue hi, const Abscissa j, const InternalValue hj) const </arglist>
    </member>
    <member kind="function">
      <type>Abscissa</type>
      <name>reversedSep</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>afec8568d3a2e1467b0bcc04ee3feeb37</anchor>
      <arglist>(const Abscissa i, const InternalValue hi, const Abscissa j, const InternalValue hj) const </arglist>
    </member>
    <member kind="function">
      <type>InternalValue</type>
      <name>power</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>a577d7a407b99264eaccb0594b145613d</anchor>
      <arglist>(const Abscissa i) const </arglist>
    </member>
    <member kind="function">
      <type>Closest</type>
      <name>closest</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>ad3cd23db17fe02a4f6e07c71e74aac86</anchor>
      <arglist>(const Point &amp;origin, const Point &amp;first, const Point &amp;second) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hiddenBy</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>aca9bd7ad7413fae358290a46bff8d063</anchor>
      <arglist>(const Point &amp;a, const Point &amp;b, const Point &amp;c, const Point &amp;startingPoint, const Point &amp;endPoint, const typename Point::UnsignedComponent dim) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DGtal::uint32_t</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1SeparableMetricHelper_3_01TPoint_00_01TInternalValue_00_010_01_4.html</anchorfile>
      <anchor>a8d68d03cc4afe5092f816fda3ea130c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::VoronoiMap</name>
    <filename>classDGtal_1_1VoronoiMap.html</filename>
    <templarg>TSpace</templarg>
    <templarg>TPointPredicate</templarg>
    <templarg>p</templarg>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>ae16240c51a8284f27cd798f485ac6ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPointPredicate</type>
      <name>PointPredicate</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>aff3f89f04873b211a776cb97b5e28856</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyperRectDomain&lt; Space &gt;</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>af136e20bea8313dcb9da561711f37974</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::int64_t</type>
      <name>IntegerLong</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a9bf67817e10614b2cc9f9cc88b08f1ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a99818796ee1e4026dd04deb481428ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a4f912830f106c866ab856aed20a43837</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a71b7d801c3f3c08232b3c408f1643be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a4609188e61b9fea5099b8ae19b12e172</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point::Coordinate</type>
      <name>Abscissa</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>ab8e7b64114e25181d5c7d7707103ba8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeparableMetricHelper&lt; Point, IntegerLong, p &gt;</type>
      <name>SeparableMetric</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a2e209bd549da38b89225b1657e765b27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImageContainerBySTLVector&lt; Domain, Point &gt;</type>
      <name>OutputImage</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a1d460745fd4945f5572946198c501ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>ab6f270b4cb6b908bf7ca59c7eb1e0674</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a4c578cd514c368c211361f9f2b86ac66</anchor>
      <arglist>((CPointPredicate&lt; TPointPredicate &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>aa111dfdc2d325d0e669b54a3fa754e60</anchor>
      <arglist>((boost::is_same&lt; typename TSpace::Point, typename TPointPredicate::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VoronoiMap</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a577aaaae563d7c918d8b78d0ff2c029d</anchor>
      <arglist>(const Domain &amp;aDomain, const PointPredicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VoronoiMap</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>afcff9a9992c3811bb002d3d6c961ff1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OutputImage</type>
      <name>compute</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a6f800dff839a7ab26916c18c4d463cc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VoronoiMap</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a9d582f410830c893566c63225a629e9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeOtherSteps</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>ab5778f362f3797cfb9ada57eb6b0311f</anchor>
      <arglist>(OutputImage &amp;output, const Dimension dim) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>computeOtherStep1D</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a60a78d23bf8005640721fc8d37f246c3</anchor>
      <arglist>(OutputImage &amp;output, const Point &amp;row, const Size dim, std::vector&lt; Point &gt; &amp;Sites) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SeparableMetric</type>
      <name>myMetric</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a7c7e247da03b41e8c889d4a4ca90340d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Domain &amp;</type>
      <name>myDomain</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>af3dfac1dae27e4ad626f7ef46d42629d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const PointPredicate &amp;</type>
      <name>myPointPredicate</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>ab34c441026e126e53a388e93feceecaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myLowerBoundCopy</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>a69f96ce02d5181dd5d2506faf4ca448a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myUpperBoundCopy</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>ada87f00a9e1e9aa63d9044b0762ab44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myInfinity</name>
      <anchorfile>classDGtal_1_1VoronoiMap.html</anchorfile>
      <anchor>af58c7fa31614964720e45f9a2fb9b726</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Measure</name>
    <filename>classDGtal_1_1Measure.html</filename>
    <templarg>TSet</templarg>
    <member kind="typedef">
      <type>TSet</type>
      <name>Set</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>a4df1377581a638331acccb01e8438685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSet::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>acad6ef0d10a2546e3be303c8a6b7ce8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>a9029c53d162b3525f77ec08861221dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Measure</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>acdc2c8907b973e18816f0dbc4c3053cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Measure</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>aa64b069ddbf2ef0f8461f1c3bd8a940d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>adfaed9bfc8711301fc1056374df1af07</anchor>
      <arglist>(const double h, const Set &amp;aSetPointer)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>ac3aea221ad234acc0056661bece99fad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>a952fe815729df9ac151a5899237855e1</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>adce545f4443699d887f618ca847f9b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Measure</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>af041f704aecc1b4a7be9497cb1fb4eb1</anchor>
      <arglist>(const Measure &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Measure &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>a66fc62ec51f9b97b1fdb8d8101701979</anchor>
      <arglist>(const Measure &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>a23d1c3bea18e68f32e70b9978dfaad1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Set::Size</type>
      <name>mySetSize</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>a3dbd95d440129bdbb0d082624cdc680c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myIsInitBefore</name>
      <anchorfile>classDGtal_1_1Measure.html</anchorfile>
      <anchor>a485b31da14eb13513fa5f26ee43beae2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CConstImage</name>
    <filename>structDGtal_1_1CConstImage.html</filename>
    <templarg></templarg>
    <base>DGtal::CTrivialConstImage</base>
    <member kind="typedef">
      <type>I::Domain</type>
      <name>Domain</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>a36362e7fd8da1bcfb4ab3f9e661065ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::ConstRange</type>
      <name>ConstRange</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>ab20402c8c90a34f9a97ae837293a1d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a9051e5372a8c0b4b0e7e1269ed025cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a7aef28724a4795f41e5e8a508c1edd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>ae16155931fea599554960eee27cea932</anchor>
      <arglist>((CDomain&lt; Domain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>a3ec1ff652cc4ca8bb9a987c2a8fc6d6e</anchor>
      <arglist>((CConstBidirectionalRangeFromPoint&lt; ConstRange &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>a694e4a37926468864d30754789a898ea</anchor>
      <arglist>(CConstImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>ab1b51f351e01f31a079cbe67b62be005</anchor>
      <arglist>((CLabel&lt; typename I::Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>a736897819bfab603f68da97bc9eddfef</anchor>
      <arglist>(CTrivialConstImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a523c2617ea6a79e9f8bf5f9e16a81e20</anchor>
      <arglist>((CUnaryFunctor&lt; I, Point, Value &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I</type>
      <name>i</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>adc7f64837609f4556abf7f50ab29181f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Domain</type>
      <name>d</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>a39b3c94707342afc14f20a82c6902b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstRange</type>
      <name>r</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>a6cf44e1865531946079a3b8d81664d61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CImage</name>
    <filename>structDGtal_1_1CImage.html</filename>
    <templarg></templarg>
    <base>DGtal::CConstImage</base>
    <base>DGtal::CTrivialImage</base>
    <member kind="typedef">
      <type>I::Range</type>
      <name>Range</name>
      <anchorfile>structDGtal_1_1CImage.html</anchorfile>
      <anchor>af04e8ed451f6db8ca69106b401aae23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Domain</type>
      <name>Domain</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>a36362e7fd8da1bcfb4ab3f9e661065ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::ConstRange</type>
      <name>ConstRange</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>ab20402c8c90a34f9a97ae837293a1d12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a9051e5372a8c0b4b0e7e1269ed025cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a7aef28724a4795f41e5e8a508c1edd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CImage.html</anchorfile>
      <anchor>a24592de339877da04ea29407cbe56e2b</anchor>
      <arglist>((CConstBidirectionalRangeFromPoint&lt; Range &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CImage.html</anchorfile>
      <anchor>a7abca9c463af6882b8b38c344f451c9d</anchor>
      <arglist>((CBidirectionalOutputRangeFromPoint&lt; Range, typenameI::Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CImage.html</anchorfile>
      <anchor>a20f3072edbd2f08ed934bde843db90b2</anchor>
      <arglist>(CImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>ae16155931fea599554960eee27cea932</anchor>
      <arglist>((CDomain&lt; Domain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>a3ec1ff652cc4ca8bb9a987c2a8fc6d6e</anchor>
      <arglist>((CConstBidirectionalRangeFromPoint&lt; ConstRange &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstImage.html</anchorfile>
      <anchor>a694e4a37926468864d30754789a898ea</anchor>
      <arglist>(CConstImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>ab1b51f351e01f31a079cbe67b62be005</anchor>
      <arglist>((CLabel&lt; typename I::Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>a736897819bfab603f68da97bc9eddfef</anchor>
      <arglist>(CTrivialConstImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a523c2617ea6a79e9f8bf5f9e16a81e20</anchor>
      <arglist>((CUnaryFunctor&lt; I, Point, Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CTrivialImage.html</anchorfile>
      <anchor>a16ca27804bb02fc1810dbec8b36b6858</anchor>
      <arglist>(CTrivialImage)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I</type>
      <name>myI</name>
      <anchorfile>structDGtal_1_1CImage.html</anchorfile>
      <anchor>a509930176669977832e6bb42cbb29b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Range</type>
      <name>myR</name>
      <anchorfile>structDGtal_1_1CImage.html</anchorfile>
      <anchor>ab064a236f4a368c22cf9fb24ee385000</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ConstImageAdapter</name>
    <filename>classDGtal_1_1ConstImageAdapter.html</filename>
    <templarg>TImageContainer</templarg>
    <templarg>TNewDomain</templarg>
    <templarg>TFunctorD</templarg>
    <templarg>TNewValue</templarg>
    <templarg>TFunctorV</templarg>
    <member kind="typedef">
      <type>ConstImageAdapter&lt; TImageContainer, TNewDomain, TFunctorD, TNewValue, TFunctorV &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a7c3753aaec607f27fb757a7400fa8cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TNewDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a2a2ba6880a4582ae7d9a93c6f1dd9116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TNewDomain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>ae6638c5a8d32d9f18669aa24f5c1e8d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TNewValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a64e10f2959c8540b2bc712d710e97e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer</type>
      <name>ImageContainer</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>ae8018ac49ad8b34c76afa1a5e3384b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultConstImageRange&lt; Self &gt;</type>
      <name>ConstRange</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a7e9cabba0beea42e57a5812b05c06f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a4e3713b8cbec948c26651779cf17c519</anchor>
      <arglist>((CImage&lt; TImageContainer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a71bda36b0cf32fdd3691492b006916ed</anchor>
      <arglist>((CDomain&lt; TNewDomain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>ac051169a87be203d84bdcc1716d4b703</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctorD, typename TImageContainer::Point, Point &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a6386063ad182184391bdf038982a2782</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctorV, typename TImageContainer::Value, Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstImageAdapter</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>af5292c63c5caacbb992e2816b1e5d539</anchor>
      <arglist>(ImageContainer &amp;anImage, const Domain &amp;aDomain, const TFunctorD &amp;aFD, const TFunctorV &amp;aFV)</arglist>
    </member>
    <member kind="function">
      <type>ConstImageAdapter &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a56d23f689d3f3a976b208db1317a0257</anchor>
      <arglist>(const ConstImageAdapter &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConstImageAdapter</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a535ee7652036ae4a69dd53278605af37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a52192862c60d5a674b5bb9f84f09cf81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstRange</type>
      <name>constRange</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>ad1f967d5f527b6f1aed71cabf126e934</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>ae48a99c2ae1f990db20d3315a1f820bc</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>afd1172ecfa4bf40ca435912784345734</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a6056ef6c28836730988908b43a4939e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ImageContainer *</type>
      <name>getPointer</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a0df2318a6f0f83652d12433127d088d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ImageContainer *</type>
      <name>myImagePtr</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a287bd5b8633c6571e3ab2d959bb82b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Domain *</type>
      <name>mySubDomainPtr</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a58b746282c66dacfc2dd60a703bc2f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TFunctorD *</type>
      <name>myFD</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a9343feeef09d34cebb8b2cf95eca89cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TFunctorV *</type>
      <name>myFV</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a711c9e07b4d41bd63b0d073022c65bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ConstImageAdapter</name>
      <anchorfile>classDGtal_1_1ConstImageAdapter.html</anchorfile>
      <anchor>a27b65a7a972e301660892aa2ac91f1d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CTrivialConstImage</name>
    <filename>structDGtal_1_1CTrivialConstImage.html</filename>
    <templarg></templarg>
    <base>CPointFunctor&lt; I &gt;</base>
    <member kind="typedef">
      <type>I::Domain</type>
      <name>Domain</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>af9f6259ac175b544aa0717b4c731617a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a9051e5372a8c0b4b0e7e1269ed025cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a7aef28724a4795f41e5e8a508c1edd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>ab1b51f351e01f31a079cbe67b62be005</anchor>
      <arglist>((CLabel&lt; typename I::Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>acd5ab85891678d44f2f77638d92acf85</anchor>
      <arglist>((CDomain&lt; Domain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>a736897819bfab603f68da97bc9eddfef</anchor>
      <arglist>(CTrivialConstImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a523c2617ea6a79e9f8bf5f9e16a81e20</anchor>
      <arglist>((CUnaryFunctor&lt; I, Point, Value &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I</type>
      <name>i</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>a0adf9fd49753e551cff6e02dc3485ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Domain</type>
      <name>d</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>a624a4ad37857dc07dac3cf44cbd23ca3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CTrivialImage</name>
    <filename>structDGtal_1_1CTrivialImage.html</filename>
    <templarg></templarg>
    <base>DGtal::CTrivialConstImage</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CTrivialImage.html</anchorfile>
      <anchor>a16ca27804bb02fc1810dbec8b36b6858</anchor>
      <arglist>(CTrivialImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>ab1b51f351e01f31a079cbe67b62be005</anchor>
      <arglist>((CLabel&lt; typename I::Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>acd5ab85891678d44f2f77638d92acf85</anchor>
      <arglist>((CDomain&lt; Domain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>a736897819bfab603f68da97bc9eddfef</anchor>
      <arglist>(CTrivialConstImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a523c2617ea6a79e9f8bf5f9e16a81e20</anchor>
      <arglist>((CUnaryFunctor&lt; I, Point, Value &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I</type>
      <name>myI</name>
      <anchorfile>structDGtal_1_1CTrivialImage.html</anchorfile>
      <anchor>aa7edcbbbe846d06823494a871cb115e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I::Point</type>
      <name>myPoint</name>
      <anchorfile>structDGtal_1_1CTrivialImage.html</anchorfile>
      <anchor>a775061c14a10d5704b513ae4523eaf1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>I::Value</type>
      <name>myValue</name>
      <anchorfile>structDGtal_1_1CTrivialImage.html</anchorfile>
      <anchor>a4dfb70a5e889d1b3751473af76106f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Domain</type>
      <name>Domain</name>
      <anchorfile>structDGtal_1_1CTrivialConstImage.html</anchorfile>
      <anchor>af9f6259ac175b544aa0717b4c731617a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a9051e5372a8c0b4b0e7e1269ed025cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a7aef28724a4795f41e5e8a508c1edd37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DefaultConstImageRange</name>
    <filename>classDGtal_1_1DefaultConstImageRange.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>ae0379852b639bbd9f8280d3a4c42e1fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>abc215134b3b34b00c6f487a651dff6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>aa7e26436171abc02c58365370cca2fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIteratorAdapter&lt; typename Domain::ConstIterator, TImage, Value &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a8c7199395e81b005cbd1a61ef8d3ad03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstIterator &gt;</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a4a1d1951a4e88fb5a4a8e9f90039d1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>acb52e64d5396885dcc64e8b32e222445</anchor>
      <arglist>((CTrivialConstImage&lt; TImage &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>af114bf6de81f2129b8effd58deca71c2</anchor>
      <arglist>((CDomain&lt; Domain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultConstImageRange</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a7ee1f39c2f0049fd413fb4365b9df9cf</anchor>
      <arglist>(const TImage &amp;aImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultConstImageRange</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a72ce1135d07b926bab3c0a81e9d24bb6</anchor>
      <arglist>(const DefaultConstImageRange &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DefaultConstImageRange &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a9b2fe8bab5941bca3edfc39204b29251</anchor>
      <arglist>(const DefaultConstImageRange &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DefaultConstImageRange</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>af2e325f622780b23467858f767e41c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>ae4f77003cfae5c2022f72779b1017d88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>acb5caac25d51458ac8275f0c172f43f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a5e144d7436f1b9a4db9f20f011382073</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>afc6ae76b670d57dddcf09cc0f114b4b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a757452b093cc08dd5acbc726501174d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a80733aa6a4878f77c35248bfc76133b2</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a3168b4fbad87c99a8159b63eed7be6c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TImage *</type>
      <name>myImagePtr</name>
      <anchorfile>classDGtal_1_1DefaultConstImageRange.html</anchorfile>
      <anchor>a8229e341e8ea0c8273e1882e98de0638</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DefaultImageRange</name>
    <filename>classDGtal_1_1DefaultImageRange.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>aa1ab39ee8ba80496154243a981502c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>ab64cf0b116064d0e30f7a10965b00717</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a070754fe62cc44f0bb67a2a3a7123d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIteratorAdapter&lt; typename Domain::ConstIterator, TImage, Value &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>ae270fb6666e8e414ce3201fc509d9808</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::reverse_iterator&lt; ConstIterator &gt;</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a231012885a2944f3ed46d0a4f9621798</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetValueIterator&lt; TImage &gt;</type>
      <name>OutputIterator</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a4196c61202d6f48dcc32ed259697a0dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetValueIterator&lt; TImage, typename Domain::ConstReverseIterator &gt;</type>
      <name>ReverseOutputIterator</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a5452885d1de8458e393e40b1454974d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a3d0f85ee372ec7fa3a6755aa1ecf9d48</anchor>
      <arglist>((CTrivialImage&lt; TImage &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a54c32fdd73f925fb88398428bd60b862</anchor>
      <arglist>((CDomain&lt; Domain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultImageRange</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a34b8df881bf8cda0b6a09f40cc0eeee6</anchor>
      <arglist>(TImage &amp;aImage)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultImageRange</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a98d3980691d7963f20ff96dc52791813</anchor>
      <arglist>(const DefaultImageRange &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DefaultImageRange &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>aea752edcdd6c1673bb95fdf2dec3a70d</anchor>
      <arglist>(const DefaultImageRange &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DefaultImageRange</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a189b5f3dde2da77a4c50e7e5a00b43b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a05b55526987a4db2d29629357a53fa03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>ac225029f9bec16b669bc41ffa92d1ad5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>ab82bc665ae41cbac49128a4ada65ea6f</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a464debce4a5ff944b3f703c6ebb3ef27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a93701f0d9ae86532194240f2172661ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>af99e577a9c2c3b14fbc7bd209e151a13</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>af3a67dfc2eb230a06747809e081dd54e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>outputIterator</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>ad6d054230d61a8871db7653db590a7d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>outputIterator</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>aeabdffaaa7cbb5ed139ce414149e43aa</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ReverseOutputIterator</type>
      <name>routputIterator</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>ab09d19c02355b87d72c134d6c44d7fc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ReverseOutputIterator</type>
      <name>routputIterator</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>ab74db89d146fc1a9caf10a1e84ba12f0</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TImage *</type>
      <name>myImagePtr</name>
      <anchorfile>classDGtal_1_1DefaultImageRange.html</anchorfile>
      <anchor>a66ef4bcba67f3fcf271559e09d68f6dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Image</name>
    <filename>classDGtal_1_1Image.html</filename>
    <templarg>TImageContainer</templarg>
    <member kind="typedef">
      <type>TImageContainer</type>
      <name>ImageContainer</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>ac087ec407a76aed579484057f8dab67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>ace481f886b37a80824817b5f1494df58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a80569d63d178a1778609611d7532c42d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>ad56b43a36c897e64398934c8f7a3b01c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer::ConstRange</type>
      <name>ConstRange</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a0f2c0b68fdedee9231353fc0900e94b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer::Range</type>
      <name>Range</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>ae6fed39eb72f60bddeb9fb6c1e636ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer::OutputIterator</type>
      <name>OutputIterator</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>aef682a4577cda5e3e03bd5b2941a5628</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CowPtr&lt; TImageContainer &gt;</type>
      <name>ImagePointer</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a10e735a765ac40bfd25793f45fb03b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a9fa6d885fa7a25270636d86ec43c5beb</anchor>
      <arglist>((CImage&lt; TImageContainer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>aaa42bf04b96bc30fd632bc9d792e377e</anchor>
      <arglist>((CVertexMap&lt; TImageContainer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a475cefade83619827786739db921f256</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a3ce3c7d7ce68c7c28a8b8aa25804bbaf</anchor>
      <arglist>(ImageContainer *anImageContainer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a20db7ab0ed04e8abbff9c69c5a9c7ad6</anchor>
      <arglist>(const CowPtr&lt; ImageContainer &gt; &amp;anImageContainerCowPointer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>aaace31e860a5ff07c99a342ce2a56f8d</anchor>
      <arglist>(const ImageContainer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a1671331bc30c7d1155b04d63c8bd18a2</anchor>
      <arglist>(const Image &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Image &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>aab66e3be9438fc3c6ee3ab32584d3cd9</anchor>
      <arglist>(const Image &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Image</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a0787c3980768e3e7799242eb323c9f7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a28a1c55de323d0d0ec62d2db03eaf180</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstRange</type>
      <name>constRange</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a55ce90eb0a9cdb6a28d765133a718bfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>range</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a3abb2c84311101e5d23fa9445ecd2076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a50834c3878e8a30b0066d498edf180fe</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>aa8311abef76b0ca25c4b2becba995dcc</anchor>
      <arglist>(const Point &amp;aPoint, const Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>ad8070ad11eb9b4c878fec978972bd687</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>aecd1494196282aad52a7e3737223ce27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ImagePointer</type>
      <name>getPointer</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>a9218722ad33ec6531a7efae53ee6ddc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImagePointer</type>
      <name>myImagePointer</name>
      <anchorfile>classDGtal_1_1Image.html</anchorfile>
      <anchor>ad010e8e7a6fc8650c123ed9c97718e22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImageAdapter</name>
    <filename>classDGtal_1_1ImageAdapter.html</filename>
    <templarg>TImageContainer</templarg>
    <templarg>TNewDomain</templarg>
    <templarg>TFunctorD</templarg>
    <templarg>TNewValue</templarg>
    <templarg>TFunctorV</templarg>
    <templarg>TFunctorVm1</templarg>
    <member kind="typedef">
      <type>ImageAdapter&lt; TImageContainer, TNewDomain, TFunctorD, TNewValue, TFunctorV, TFunctorVm1 &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a17c50a9952e559fd0375247cedc88c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TNewDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>aeaa747d46d333a9cda38f1401a678874</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TNewDomain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a5e83b19d50343dd7dd87ee8ca90b139c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TNewValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>afc124b516a86e69de228de655832669f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer</type>
      <name>ImageContainer</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a32c6c9db3c3dd83f4a0890132003dc0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultConstImageRange&lt; Self &gt;</type>
      <name>ConstRange</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a269bcb8e70971b3307be007c0fbabdd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultImageRange&lt; Self &gt;</type>
      <name>Range</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a20072cb2d286c52c58b1cd75a4258041</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a92aca8a34579080992ea34fdd014046a</anchor>
      <arglist>((CImage&lt; TImageContainer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a3d1640c53552acc450dea5776e4b53d3</anchor>
      <arglist>((CDomain&lt; TNewDomain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a0a217e53f57b95450f4ec52793b49a1c</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctorD, typename TImageContainer::Point, Point &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>ac78e22c02f2083745b798fbb081227f8</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctorVm1, typename TImageContainer::Value, Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageAdapter</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a0e8407876e8c66c219f6dadddddab074</anchor>
      <arglist>(ImageContainer &amp;anImage, const Domain &amp;aDomain, const TFunctorD &amp;aFD, const TFunctorV &amp;aFV, const TFunctorVm1 &amp;aFVm1)</arglist>
    </member>
    <member kind="function">
      <type>ImageAdapter &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>ae497d0519abe5c7c8661eb8c4dff0f68</anchor>
      <arglist>(const ImageAdapter &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageAdapter</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a043f2a5866f8eac4e3c0bf65bd5faecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a0c44e2325aa7c74e37ab4a6eef45089a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstRange</type>
      <name>constRange</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a990fc50ded5dff4e240337cf6b42aee2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>range</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a27c4517d998726c7d075e66dd0dfb67c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>aff48121432c6fc652c5eb27ffc99a39d</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>af875e7f003c1100dd226b3a9d050da8c</anchor>
      <arglist>(const Point &amp;aPoint, const typename TImageContainer::Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a6ec2821361fd834646ff08d88bef1c67</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a79a4d094eef43cf5aa916f320d55746f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ImageContainer *</type>
      <name>getPointer</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a0cb729f553a1c1d77c635d6bce8829e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ImageContainer *</type>
      <name>myImagePtr</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a68f1607cd6b8a22d7816b9b73395c9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Domain *</type>
      <name>mySubDomainPtr</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>ac89646bba6ea0e2099bd3d860cbeb1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TFunctorD *</type>
      <name>myFD</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>af2c8396791f6961278b4353e0c3713d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TFunctorV *</type>
      <name>myFV</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>ad18ecdd3c0049e2953ff58ab13e01d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const TFunctorVm1 *</type>
      <name>myFVm1</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a5768763b9e962d1bcd8b98a674d3de04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ImageAdapter</name>
      <anchorfile>classDGtal_1_1ImageAdapter.html</anchorfile>
      <anchor>a143f631998d9ee9bbab17d959a366dd4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImageContainerByHashTree</name>
    <filename>classDGtal_1_1ImageContainerByHashTree.html</filename>
    <templarg>TDomain</templarg>
    <templarg>TValue</templarg>
    <templarg>THashKey</templarg>
    <class kind="class">DGtal::ImageContainerByHashTree::Iterator</class>
    <class kind="class">DGtal::ImageContainerByHashTree::Node</class>
    <member kind="typedef">
      <type>ImageContainerByHashTree&lt; TDomain, TValue, THashKey &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a914d1eee8d9d73b34338ee76da9e1d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>THashKey</type>
      <name>HashKey</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>aef9332d545e4383966d95ba8e14dfc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>ac7a0467ee7607598d481255fcb427234</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>ab2e45ae0809826578e94cad008fd3d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a2c45284f253707d64c2467f95092273e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a96129842c9dd85a9c50afd72c17c9e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a9613f6b7a8944562a9ed7fc01b2af711</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a9a7a75e12cb9acc0a9e8bf27f1f9227c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a5cc5aff47c5569d18c473e677bfc677b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a13ab62937addd6e3f62444ccbe5aab6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstRangeAdapter&lt; typename Domain::ConstIterator, Self, Value &gt;</type>
      <name>ConstRange</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>aaeba264745d5958374bf0c47cfd818e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetValueIterator&lt; Self &gt;</type>
      <name>OutputIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a33a9c6a1daa56f4927a87152eb6bc376</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>ab57e628033ecf04b8d960022a0cbc024</anchor>
      <arglist>((CDomain&lt; TDomain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>ab604d3d05f83c566707c6102ee5fe41e</anchor>
      <arglist>((boost::is_same&lt; Domain, HyperRectDomain&lt; SpaceND&lt; dimension, Integer &gt; &gt; &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a7379fa73ba675dbe52bdbd2a655f25f5</anchor>
      <arglist>((CLabel&lt; TValue &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageContainerByHashTree</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a97612840434b573a25fc13a95a02ed77</anchor>
      <arglist>(const unsigned int hashKeySize, const unsigned int depth, const Value defaultValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageContainerByHashTree</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>af26ced852ff08c898736466f0be21939</anchor>
      <arglist>(const unsigned int hashKeySize, const Point &amp;p1, const Point &amp;p2, const Value defaultValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageContainerByHashTree</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a4c95605813673e47879d24cd4a393631</anchor>
      <arglist>(const Domain &amp;aDomain, const unsigned int hashKeySize=3, const Value defaultValue=NumberTraits&lt; Value &gt;::ZERO)</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a1d377ae17d49eca9af01b7f0e9872b13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstRange</type>
      <name>range</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a571d163fb9d72efa0c75b365afdda101</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>outputIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a1e4be9c3618bdcf3d892262031bf4526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a4374eb7e653c1efb8136fd0b65320ea5</anchor>
      <arglist>(const HashKey key) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a49003e07348d103339fdbfbc2ac4dd6c</anchor>
      <arglist>(const HashKey key) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a14e7d8e949cd8a699e79a06a65d0cbbe</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a18302c638ae9ca7fe794167b0a8bb4c8</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>upwardGet</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a4d74c7ac50d19b3838c36fbfa3a2a05d</anchor>
      <arglist>(const HashKey key) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>reverseGet</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a29aaadc8b611c8f6be4cae3f408ac14a</anchor>
      <arglist>(const HashKey key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a67fc5c6c31092fa5566f0064948936dc</anchor>
      <arglist>(const HashKey key, const Value object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a901b1bb183549d961d32ad9b0597e78c</anchor>
      <arglist>(const Point &amp;aPoint, const Value object)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSpanSize</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a30b3df065ce34ffe10449a602b2eae32</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDepth</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>aa41448649a91c90a75f0183afa07a432</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeyValid</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>aade717c24ac87066a4faf78928f91bc5</anchor>
      <arglist>(HashKey key) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIntegrity</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a06f74f1caf6eee5041c383c8dc477f9b</anchor>
      <arglist>(HashKey key=ROOT_KEY, bool leafAbove=false) const </arglist>
    </member>
    <member kind="function">
      <type>HashKey</type>
      <name>getKey</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>acd98b46355efc539e86c360b19510e44</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getKeyDepth</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>ac0eea29f147973d8107968adf4df87ff</anchor>
      <arglist>(HashKey key) const </arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getCoordinatesFromKey</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a2845d62d46732662e148c1b06fdd417a</anchor>
      <arglist>(HashKey key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printState</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>afbf6d89729d49645287e7b798dd026ab</anchor>
      <arglist>(std::ostream &amp;out, bool displayKeys=false) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printTree</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a230dea326d852b03b41aa83067845510</anchor>
      <arglist>(HashKey key, std::ostream &amp;out, bool displayKeys) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printInternalState</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>ada2bf4f4329bc4d20cfef2e518305562</anchor>
      <arglist>(std::ostream &amp;out, unsigned int nbBits=0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printInfo</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a668545523b5379fb21d328e64b2e1162</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNbEmptyLists</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a6fae5f9b4dd1e7e1f8a5811c0913de80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAverageCollisions</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a89db3a68d5f602dc5412aac1c7834da4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaxCollisions</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>abe106f6307af2e22ac39f5a71186072b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNbNodes</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a8bd931edec54111cb53ca20cd4ea8dc6</anchor>
      <arglist>(unsigned int intermediateKey) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getNbNodes</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>abcb79c7874b13e0e164488b704d8ddd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a62fb54c4aed3af74c7c9c9d1a1393312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a1ebc3a494a97201772276ebe77a9af3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>ab82b0f9208a955583a5f5eb09243a467</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a41c920dbe0aea3293564e8194b65babc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>acca7b8a80e68d5bb762756c789a44c90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNode</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>ae19cfdd1fa73b5af3b3df1dbfa966c37</anchor>
      <arglist>(const HashKey key) const </arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myDebugCounter</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a55d42276ddf08d56cc9ef2234b84de5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myOrigin</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a0ba7e08712457cea9c021cbbeb02032a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Morton&lt; HashKey, Point &gt;</type>
      <name>myMorton</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a6cac4c5653e0c32d030d71319d9bd7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Domain::Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a357ffcff44bf04ec86e8316cfabe0078</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Domain::Dimension</type>
      <name>dim</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a1384597f7114b7387f6aa93517d671b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>NbChildrenPerNode</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>ac6df49247548beef789be2e962d700df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const HashKey</type>
      <name>ROOT_KEY</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a70cbecb18891687aeb644b72076cc3b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recursiveDraw</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a7aaf875a88ff9cf7fa5690664934bf93</anchor>
      <arglist>(HashKey key, const double p1[2], const double len, Board2D &amp;board, const C &amp;cmap) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HashKey</type>
      <name>getIntermediateKey</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a04db7587b34adabcdd1960f6334ab098</anchor>
      <arglist>(const HashKey key) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Node *</type>
      <name>addNode</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a1593cf94a39798d181eaae36f3999243</anchor>
      <arglist>(const Value object, const HashKey key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>removeNode</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a8eb48c5050fd787162cbb3f2751d267c</anchor>
      <arglist>(HashKey key)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recursiveRemoveNode</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a4fcf52b749ed3e5f5a09474ea7a20b91</anchor>
      <arglist>(HashKey key, unsigned int nbRecursions)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDepth</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a3265a8d39bb2e0d10fb84ffad3445124</anchor>
      <arglist>(unsigned int depth)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Value</type>
      <name>blendChildren</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a9c97a01dab2551b6cde86e3dd8158727</anchor>
      <arglist>(HashKey key) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Domain</type>
      <name>myDomain</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a6bd736ce280e6f367026684a524503d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node **</type>
      <name>myData</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a728a22d04a83db14521768ec15120241</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myKeySize</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>afae3d80fe1e97dfed1403d434b6a1fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myArraySize</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a3b62f771292657c0934e543b95cf5d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myTreeDepth</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a1322777db8993fa7a43739b789900bb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mySpanSize</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>add7b28b01e1c4ad8c95ec992f0ecc9c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HashKey</type>
      <name>myDepthMask</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a40cd11ec8f72305ae615bf0a6d903f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HashKey</type>
      <name>myPreComputedIntermediateMask</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>af5c3d20ee5d434a441ac00c981a01031</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned int</type>
      <name>myN</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree.html</anchorfile>
      <anchor>a86ffd97b583cd18ae00b9747c660df04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImageContainerByHashTree::Iterator</name>
    <filename>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a3537bd6f1f12a682ad0139393ffc6cf7</anchor>
      <arglist>(Node **data, unsigned int position, unsigned int arraySize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAtEnd</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a056516fd2d25f95b774f007ec810b29b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a93feadb7cf5db023aaf0d3104b9b3f33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a9ce603713b36693ce46fa75847186f5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>aa00b7f4de97e5de9f45c3278b00c13a8</anchor>
      <arglist>(const Iterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>aa36322bc5d0049d18dddf7795089f0d4</anchor>
      <arglist>(const Iterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>HashKey</type>
      <name>getKey</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a8ae8ab80284479057a5c134cf4a3940f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a1abadc36f59cdee7888b904121c38cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>myNode</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a28fe8563defd1b8c326c8364eaf29268</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myCurrentCell</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a4d8fa4dfbfc7198085ee63d9d200bc63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myArraySize</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a9d49ab6c46e9dc1ed9fae775a7515576</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node **</type>
      <name>myContainerData</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Iterator.html</anchorfile>
      <anchor>a0afc73ba524a45216515b84bf5968cf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImageContainerByHashTree::Node</name>
    <filename>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</anchorfile>
      <anchor>a22c8eb39fdab4386181e51469358243e</anchor>
      <arglist>(Value aValue, HashKey key)</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getNext</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</anchorfile>
      <anchor>a09f970622d6e0e4a8d3887038536d8c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNext</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</anchorfile>
      <anchor>a5d5904f5321deec78456c8bcc19197b2</anchor>
      <arglist>(Node *next)</arglist>
    </member>
    <member kind="function">
      <type>HashKey</type>
      <name>getKey</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</anchorfile>
      <anchor>a03a90bcc65fcf85f70f656e0ca518935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>getObject</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</anchorfile>
      <anchor>a77a48b54cbedd9b4afe6e3abf600b88b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Node</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</anchorfile>
      <anchor>a2293888f2596702ae04f87bc71481414</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HashKey</type>
      <name>myKey</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</anchorfile>
      <anchor>a395a1bdd44d1056c049cda91788b404a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Node *</type>
      <name>myNext</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</anchorfile>
      <anchor>a8cb561a665d379544c1807c52813d033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Value</type>
      <name>myData</name>
      <anchorfile>classDGtal_1_1ImageContainerByHashTree_1_1Node.html</anchorfile>
      <anchor>a6d47c17d906a1d002b31179787120a86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImageContainerBySTLMap</name>
    <filename>classDGtal_1_1ImageContainerBySTLMap.html</filename>
    <templarg>TDomain</templarg>
    <templarg>TValue</templarg>
    <member kind="typedef">
      <type>ImageContainerBySTLMap&lt; TDomain, TValue &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>acacb8158beb9205f2b9623a5e8a796dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; typename TDomain::Point, TValue &gt;</type>
      <name>Parent</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a8012fef54b11003a82e1e61848f50dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a8fd7e1ea8457de8167a29f417d1de157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>afd2f06ffe1bb28b942ad65db58026b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>ab8699709a3ab9702ccc2ca88c6258166</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a55f3ad62dfe52fa9f33d1d1dda9cf991</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a02966555864341392245ba673f10cbbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a066aca7d3a5055f74fba5ea6c4191461</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>ad08aded758ee8fc7aa322b5173140b6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CountedPtr&lt; const Domain &gt;</type>
      <name>DomainPtr</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a12e2477c213cd1aabce05dc5310a18e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a9c4d83a277370590fe7875b58d46bb3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultConstImageRange&lt; Self &gt;</type>
      <name>ConstRange</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>aa56e7c9d2f490431ac834dfb6b98b93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultImageRange&lt; Self &gt;</type>
      <name>Range</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a36596e68cdbf4b94a13df465270d5eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetValueIterator&lt; Self &gt;</type>
      <name>OutputIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a1b4791be96018a4807bdef4bdd4febea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; Point, Value &gt;::iterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a6ac309c6915314e6d3da2c9f6c4b7de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; Point, Value &gt;::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a434514ce0996a5f20281f68ddbaaa951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; Point, Value &gt;::reverse_iterator</type>
      <name>ReverseIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>aa0035d2f29a2ebd0d739984fb19c4d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>map&lt; Point, Value &gt;::const_reverse_iterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a627e4f00e0e6486a286bc0d65f4ba0e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>aca64e7a8176f4508e0f9684e3edf5d26</anchor>
      <arglist>((CDomain&lt; TDomain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a3feb21f7511d362304c6dc6ac28859a9</anchor>
      <arglist>((CLabel&lt; TValue &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageContainerBySTLMap</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a0f7a6b60dea74b0054d55af17fbd66be</anchor>
      <arglist>(const Domain &amp;aDomain, const Value &amp;aValue=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageContainerBySTLMap</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>adc01180b77d6a228331006ab944f1565</anchor>
      <arglist>(const ImageContainerBySTLMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ImageContainerBySTLMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a2a993957cdd516160423fc0003feefed</anchor>
      <arglist>(const ImageContainerBySTLMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageContainerBySTLMap</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>ab0ed13fd0296ab58959f63c098b6b52e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>afaec5c707930606364d143226ee22dfd</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>aa41464ef23d3ffe98617177969c27f8c</anchor>
      <arglist>(const Point &amp;aPoint, const Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>abb7f97eb5fa9f16fe8e6e0d5dce665e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstRange</type>
      <name>constRange</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a486bb4c43522291dd1820c2591596035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>range</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a017023f8c362e25773ff937a35daf87e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a019972178ea262e7ff8cb13f03396244</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a9274a85709d34da3278f48be76201f8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>ad77f8d22d2fdaa769d4dfd9285a45c19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>outputIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a0974af8ef1c0af5e9571d9cb845423f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Domain::Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>ac96e979f960d997c385a62a8a7bb2e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DomainPtr</type>
      <name>myDomainPtr</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>af2fe16ce9aafeeede87ea1a4158506a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myDefaultValue</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLMap.html</anchorfile>
      <anchor>a46e0c0074542c4f8178feb59c9b1c593</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>K</type>
      <name>keys</name>
      <anchorfile>classstd_1_1map.html</anchorfile>
      <anchor>a8dc2b3ed44acf51fb2bd3eb30b237269</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>elements</name>
      <anchorfile>classstd_1_1map.html</anchorfile>
      <anchor>ac69fe575e214b796b8d9457b0c22469a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DistanceFunctorFromPoint</name>
    <filename>classDGtal_1_1DistanceFunctorFromPoint.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DistanceFunctorFromPoint.html</anchorfile>
      <anchor>a100e45b1526dae69565489942b24a658</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Difference</type>
      <name>Difference</name>
      <anchorfile>classDGtal_1_1DistanceFunctorFromPoint.html</anchorfile>
      <anchor>a2e634394240a66137e19b1dbf66da8cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DistanceFunctorFromPoint</name>
      <anchorfile>classDGtal_1_1DistanceFunctorFromPoint.html</anchorfile>
      <anchor>a8e453e4d9ed576a9ba22d8e92e58e30d</anchor>
      <arglist>(const TImage *aImagePtr)</arglist>
    </member>
    <member kind="function">
      <type>Difference</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1DistanceFunctorFromPoint.html</anchorfile>
      <anchor>a5bb0fa6ac2bbb5fd13b01186a84b0573</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const TImage *</type>
      <name>myImagePtr</name>
      <anchorfile>classDGtal_1_1DistanceFunctorFromPoint.html</anchorfile>
      <anchor>afe130c488c2d83bf01217fd8d67382fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImageContainerBySTLVector</name>
    <filename>classDGtal_1_1ImageContainerBySTLVector.html</filename>
    <templarg>TDomain</templarg>
    <templarg>TValue</templarg>
    <class kind="class">DGtal::ImageContainerBySTLVector::SpanIterator</class>
    <member kind="typedef">
      <type>ImageContainerBySTLVector&lt; TDomain, TValue &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a7c302fb31aacb21a1e9c99904b07bbb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a95d272d9ee40bcc6df56f49b8bd775ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>ab6706d0ef60555ebb7395b97bedc247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>aa1fd2975133174ccc5ac4f46fd5769e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a4a71bd40f4ac47b029708e0bdae8eb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>abbda8ca410539e338ab1907542b21eaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>afe361d84b433a30a1706111223ef6d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a5119d1316c1eab03f3a60b07bb08d38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a969107fe40d0efab29fe28f72813cb66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Value &gt;::iterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>ab49463009875251b6024a80477b3dd07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Value &gt;::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a78f21ae735bc4f3ce89d4796369544c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Value &gt;::reverse_iterator</type>
      <name>ReverseIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a46bca5c9902f6f5e31f40fb72e70de82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Value &gt;::const_reverse_iterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a77926ee2f1f060cfda3730f8007349cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Value &gt;::difference_type</type>
      <name>Difference</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>aaac188e3392318927b13f4df62a3e27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Value &gt;::iterator</type>
      <name>OutputIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a639c879e87c7559b3dc03c7d1abeba8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vector&lt; Value &gt;::reverse_iterator</type>
      <name>ReverseOutputIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a5e214838b9c82fd37bebba375b76c94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleRandomAccessConstRangeFromPoint&lt; ConstIterator, DistanceFunctorFromPoint&lt; Self &gt; &gt;</type>
      <name>ConstRange</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a7fe95c267f8c05f9ba595063f7c7150b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleRandomAccessRangeFromPoint&lt; ConstIterator, Iterator, DistanceFunctorFromPoint&lt; Self &gt; &gt;</type>
      <name>Range</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a7fd8c58807176fb036e74a03edcc3e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a481f017c973e2553f757e2bca8084124</anchor>
      <arglist>((CDomain&lt; TDomain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>ac7cc06e202329ed317e9f4ff809e8ce9</anchor>
      <arglist>((boost::is_same&lt; Domain, HyperRectDomain&lt; SpaceND&lt; dimension, Integer &gt; &gt; &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a5f9a415426b9b6440dec9b2564b39fbe</anchor>
      <arglist>((CLabel&lt; TValue &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageContainerBySTLVector</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>afc090bca2693c6d588c3ef6b0c5ee379</anchor>
      <arglist>(const Domain &amp;aDomain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageContainerBySTLVector</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a8f4900c1d351aa20999d28caae1238bc</anchor>
      <arglist>(const ImageContainerBySTLVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ImageContainerBySTLVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a9c358f44c9123e3419cd018d11995003</anchor>
      <arglist>(const ImageContainerBySTLVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageContainerBySTLVector</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>aabd2da6c1f42ea3e5f199141fb873bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a5f4684a4ab9d4775b8c2c7dd8a531a33</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a2d2319747496a8b74d6dd5aa8d196247</anchor>
      <arglist>(const Point &amp;aPoint, const Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a0d102290472728c86d7fca45e22b3e42</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>extent</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a6c9b14cee478ad19fd5e17691f140f37</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>translateDomain</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>ad0f01f45a9d0349cbf4d774226644520</anchor>
      <arglist>(const Vector &amp;aShift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>afc2029f45d6d29caac9845e6263a1005</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>ad47432e7bc706fbbd2b53010ad57d4fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a8663d4b8274dd348dba1e9cc2856c41b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstRange</type>
      <name>constRange</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a974c5d89345fa1d690cbf74b3c3c466d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Range</type>
      <name>range</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a11296feb439d1e4774766f4990595f87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a9e37b513836dc24114ff136de479c9d7</anchor>
      <arglist>(SpanIterator &amp;it, const Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>SpanIterator</type>
      <name>spanBegin</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>aba15f4f1dcb08f5b328e94f4b734d33b</anchor>
      <arglist>(const Point &amp;aPoint, const Dimension aDimension)</arglist>
    </member>
    <member kind="function">
      <type>SpanIterator</type>
      <name>spanEnd</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a7cec12305708e5a7f2ad6fe247e02f53</anchor>
      <arglist>(const Point &amp;aPoint, const Dimension aDimension)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>getValue</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>ab70f0d61928559ba4b4ec15b0029d655</anchor>
      <arglist>(SpanIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>linearized</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>aeb669aafbaa0826968e3ad648fb0d803</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Domain::Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a462e96e93e661a90e82750ee0a081fb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Domain</type>
      <name>myDomain</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>a0ec36343e226012a93daab7f35c92b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector</type>
      <name>myExtent</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector.html</anchorfile>
      <anchor>ab5f9e2636b90b79e277fbbdc00a0d28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>elements</name>
      <anchorfile>classstd_1_1vector.html</anchorfile>
      <anchor>a2396209900e8f592db1f0b2467f7d899</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImageContainerBySTLVector::SpanIterator</name>
    <filename>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</filename>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>ac6477912579b19c7677e4bf9de39d62f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a35bd4d096d637e2b4190273cdfa51224</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a87660dc4007d4245be7d6decf91860cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value *</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a60b007d5e6749328f6f8adde1d3c92ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a96e96dc0864d5a38ede10549909c12bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpanIterator</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>af995e36d4d49e62300328329e907b899</anchor>
      <arglist>(const Point &amp;p, const Dimension aDim, ImageContainerBySTLVector&lt; Domain, Value &gt; *aMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a866c2a850565cf1fce6bd29acb9dac14</anchor>
      <arglist>(const Value aVal)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a8000c4e84e6003b8a55cd36998f4408e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>aa2811daaa3e7c37d719684d20f8aab48</anchor>
      <arglist>(const SpanIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>ae79ac4e9806363a3c91f2d677b655008</anchor>
      <arglist>(const SpanIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a5dac04838e6a4489a8a7a351ebccc7b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prev</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a3b764b39632d0dfd0d830df0a6b29065</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpanIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a7d5781f6b53e87f4558e44381442896f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpanIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a7816549d24e55a5058a1f6c579b5fecb</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>SpanIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>aaeba17394316a323d41e34995d850b89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpanIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a1c66363904695b9242a4069b66295cca</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>myPos</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a974b9e1b024e2f551e4f70ff7ccd5ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ImageContainerBySTLVector&lt; Domain, Value &gt; *</type>
      <name>myMap</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a3aeff327b1406434d9b33be6022e37d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Dimension</type>
      <name>myDimension</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>a548e857f2468f72cf18d3465171594eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>myShift</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>ad1112d8f3e2c77ab0f88ea5d5ea705d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ImageContainerBySTLVector&lt; Domain, Value &gt;</name>
      <anchorfile>classDGtal_1_1ImageContainerBySTLVector_1_1SpanIterator.html</anchorfile>
      <anchor>acb1a22da65814f79285776e40826e8ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImageLinearCellEmbedder</name>
    <filename>classDGtal_1_1ImageLinearCellEmbedder.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TImage</templarg>
    <templarg>TEmbedder</templarg>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a5fa8a804513268f82fab094c0bf4661e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a2c338c3e071e77b9663038d163e97238</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEmbedder</type>
      <name>Embedder</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a7c683f9b7703e5ae7e01a5ecd751380f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a5317093ed6a02c0298db009a08849164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a67b47af2fd698055bd764201296798f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>aa1f4758aff7f590c8b1e22688554bd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>affbcc12e2acf273da4f3b819d093b2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>abdf15f8a21cd3701d2e27aff10c2bfa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>aa787c5a18a76567ce160e907e4831b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a60fe5f141974a749ee483eaad8c68e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>ImageValue</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a0e44f2b956725a1e312921f4c835bdbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Argument</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a77b89be57479ba6b7b76d84e63d166cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPoint</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a97519659dfa37c1459c795505ef4cef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageLinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a27c1a9e2565bfe525fcb618dc0f5eb97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageLinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>ad7e75ea5246cb52ed233a4fde02f7797</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageLinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a5d57f2da805df49c026bbfc4f2b5ede0</anchor>
      <arglist>(const ImageLinearCellEmbedder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ImageLinearCellEmbedder &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a7661afcf75c83e5b0b8474a58cfeb3ac</anchor>
      <arglist>(const ImageLinearCellEmbedder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>ad7a3fd4d5b251b375658157d75221829</anchor>
      <arglist>(const KSpace &amp;K, const Image &amp;f, const Embedder &amp;e, ImageValue iso_value)</arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a5ee7d2e5b5484744223f4b524223052c</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embedCell</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a1febb03f5ef215db4111dda5c7df1b47</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embedSCell</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>aacf6c26235e620392772ac6ffb903e83</anchor>
      <arglist>(const SCell &amp;scell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a70c357457d46662b23575d46304f7b97</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>affdbb086850fb8268127d15572cb22f9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a4a81e15631d4ad6054ef9b870463a9d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a675bb0471cab0863d7f09a432a972429</anchor>
      <arglist>((CImage&lt; TImage &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myPtrK</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a57f5732491371805aa1da94ea08b06c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Image *</type>
      <name>myPtrImage</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a7f3da078bd733e78c5afa6b8a22b386e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Embedder *</type>
      <name>myPtrEmbedder</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>a38356d5fd357604a30fd81508d6da1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ImageValue</type>
      <name>myIsoValue</name>
      <anchorfile>classDGtal_1_1ImageLinearCellEmbedder.html</anchorfile>
      <anchor>ad0133fa82693593edeb28f35a4613e4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ImageSelector</name>
    <filename>structDGtal_1_1ImageSelector.html</filename>
    <templarg>Domain</templarg>
    <templarg>Value</templarg>
    <templarg>Preferences</templarg>
    <member kind="typedef">
      <type>ImageContainerBySTLVector&lt; Domain, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1ImageSelector.html</anchorfile>
      <anchor>ade9e299930f5119de680d6308646613e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1ImageSelector.html</anchorfile>
      <anchor>a4a59e791d27dc9c3cc79db99034c6113</anchor>
      <arglist>((CLabel&lt; Value &gt;))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ImageSelector&lt; Domain, Value, LOW_ITER_I+LOW_BEL_I &gt;</name>
    <filename>structDGtal_1_1ImageSelector_3_01Domain_00_01Value_00_01LOW__ITER__I_09LOW__BEL__I_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ImageContainerBySTLMap&lt; Domain, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1ImageSelector_3_01Domain_00_01Value_00_01LOW__ITER__I_09LOW__BEL__I_01_4.html</anchorfile>
      <anchor>ac3fbc1b724ae8c4fb34fb4590138b483</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ImageFromSet</name>
    <filename>structDGtal_1_1ImageFromSet.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>structDGtal_1_1ImageFromSet.html</anchorfile>
      <anchor>ac1af5e9ffacee36a5deb33f81bfd0397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1ImageFromSet.html</anchorfile>
      <anchor>a5fd47781a295223fb59e10d6122cb03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>create</name>
      <anchorfile>structDGtal_1_1ImageFromSet.html</anchorfile>
      <anchor>ab52eb5344c69649be92435cb27ba3df8</anchor>
      <arglist>(const Set &amp;aSet, const Value &amp;defaultValue, const bool addBorder, typename Set::ConstIterator itBegin, typename Set::ConstIterator itEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Image</type>
      <name>create</name>
      <anchorfile>structDGtal_1_1ImageFromSet.html</anchorfile>
      <anchor>ab08f93d44dd0887b53d90b119f748069</anchor>
      <arglist>(const Set &amp;aSet, const Value &amp;defaultValue, const bool addBorder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>append</name>
      <anchorfile>structDGtal_1_1ImageFromSet.html</anchorfile>
      <anchor>a621d149c61d1332f515eaa75b9b21616</anchor>
      <arglist>(Image &amp;aImage, const Value &amp;defaultValue, typename Set::ConstIterator itBegin, typename Set::ConstIterator itEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>append</name>
      <anchorfile>structDGtal_1_1ImageFromSet.html</anchorfile>
      <anchor>a97879708e3a7d016e4b9485d172b3ed1</anchor>
      <arglist>(Image &amp;aImage, const Set &amp;aSet, const Value &amp;defaultValue)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IntervalForegroundPredicate</name>
    <filename>classDGtal_1_1IntervalForegroundPredicate.html</filename>
    <templarg>Image</templarg>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a8f0d48a51f6817888f5ff60643ab3217</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a5a037eb29124bd53f0f9e508756254ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a3cc7f36c52b489ffda2f0b22eaa9c537</anchor>
      <arglist>((CImage&lt; Image &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntervalForegroundPredicate</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a3359a2a6c6061f667a52baac17b98e00</anchor>
      <arglist>(const Image &amp;aImage, const Value minVal, const Value maxVal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a035444e6b2f5eab83a909c802efdd611</anchor>
      <arglist>(const typename Image::Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a5e1995cd84a2d8eafa40485f12e6a9ba</anchor>
      <arglist>(const typename Image::Iterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>ae37225cfb52758bb7c6b7da3c376d1a2</anchor>
      <arglist>(const typename Image::ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a7e596a8f98e6c3d4948af5871c144f87</anchor>
      <arglist>(const typename Image::SpanIterator &amp;it) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IntervalForegroundPredicate</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a7792869492c93e8df6531921864caf9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CountedPtr&lt; Image &gt;</type>
      <name>myImage</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a7736f6f8ad633dfc3e76dd5e813450a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myMaxVal</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>a97da0a5d61b1f9ea8718af4702fa1d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myMinVal</name>
      <anchorfile>classDGtal_1_1IntervalForegroundPredicate.html</anchorfile>
      <anchor>ae9ec2d9d9ad73044a808fbc35d38231f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SetFromImage</name>
    <filename>structDGtal_1_1SetFromImage.html</filename>
    <templarg>TSet</templarg>
    <member kind="typedef">
      <type>TSet</type>
      <name>Set</name>
      <anchorfile>structDGtal_1_1SetFromImage.html</anchorfile>
      <anchor>a8b6a982d36162e364257f572617b4ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>append</name>
      <anchorfile>structDGtal_1_1SetFromImage.html</anchorfile>
      <anchor>a7f206ff0da28cb67b671cfb9d49ec87b</anchor>
      <arglist>(Set &amp;aSet, const ForegroundPredicate &amp;isForeground, typename Image::Domain::ConstIterator itBegin, typename Image::Domain::ConstIterator itEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>append</name>
      <anchorfile>structDGtal_1_1SetFromImage.html</anchorfile>
      <anchor>a885b957d423d277ec94979f1388943d4</anchor>
      <arglist>(Set &amp;aSet, const Image &amp;aImage, const typename Image::Value minVal, const typename Image::Value maxVal, typename Image::Domain::ConstIterator itBegin, typename Image::Domain::ConstIterator itEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>append</name>
      <anchorfile>structDGtal_1_1SetFromImage.html</anchorfile>
      <anchor>a8dd600f10f1c3bf543e4f344b56e4050</anchor>
      <arglist>(Set &amp;aSet, const Image &amp;aImage, const ForegroundPredicate &amp;isForeground)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>append</name>
      <anchorfile>structDGtal_1_1SetFromImage.html</anchorfile>
      <anchor>a260f7eef5972b22f1e1f4b55a5aa419a</anchor>
      <arglist>(Set &amp;aSet, const Image &amp;aImage, const typename Image::Value minVal, const typename Image::Value maxVal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SimpleThresholdForegroundPredicate</name>
    <filename>classDGtal_1_1SimpleThresholdForegroundPredicate.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>abebb26f841b39260e0076abce5cba841</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>a8eba0d07ea93c0790a4a50e36f27b0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>a545c81e21efb8cf7b603b55f2a9487c9</anchor>
      <arglist>((CImage&lt; Image &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleThresholdForegroundPredicate</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>a59f6094488fd3d740fbfd7c58a988565</anchor>
      <arglist>(const Image &amp;aImage, const Value value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>abaf20d6ee2a00169be494bbaddef01ec</anchor>
      <arglist>(const typename Image::Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>a8b3582ad711b6fb971df1c7bbb5170b2</anchor>
      <arglist>(const typename Image::Iterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>aad5a956e4e4d2967a2af955da68099e0</anchor>
      <arglist>(const typename Image::ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>aef1f8a49f5e58b104f41dc0eb4661440</anchor>
      <arglist>(const typename Image::SpanIterator &amp;it) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SimpleThresholdForegroundPredicate</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>a7c208399a775df4795d4ce39a57df281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CountedPtr&lt; Image &gt;</type>
      <name>myImage</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>a7682fdafea5a2eff6b311a0dd83a5fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myVal</name>
      <anchorfile>classDGtal_1_1SimpleThresholdForegroundPredicate.html</anchorfile>
      <anchor>a85caf7f536bc47ce32379fe10a0f2fe9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Morton</name>
    <filename>classDGtal_1_1Morton.html</filename>
    <templarg>THashKey</templarg>
    <templarg>TPoint</templarg>
    <member kind="typedef">
      <type>THashKey</type>
      <name>HashKey</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>ae4273971ca28eabe5aecb71084aca182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>ab87ce3147bdf61db8324c265d97abf02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point::Coordinate</type>
      <name>Coordinate</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>add7a8801c894c9819f323a50f656d854</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>a78875307a255115841a51b0dcbe98bac</anchor>
      <arglist>((CUnsignedInteger&lt; THashKey &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>a600c8c3c991108b13268caa3111f9b8b</anchor>
      <arglist>((CInteger&lt; Coordinate &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Morton</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>a0aa44f03d69475b3ba71ad92df8b388f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interleaveBits</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>a18380fd8086b6deb89a7dab145bd7f21</anchor>
      <arglist>(const Point &amp;aPoint, HashKey &amp;output) const </arglist>
    </member>
    <member kind="function">
      <type>HashKey</type>
      <name>keyFromCoordinates</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>ad54d81afac23bfa3190f35ae835b16a7</anchor>
      <arglist>(const std::size_t treeDepth, const Point &amp;coordinates) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coordinatesFromKey</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>aefe165801472e8a09df5c2d0d9e780e5</anchor>
      <arglist>(const HashKey key, Point &amp;coordinates) const </arglist>
    </member>
    <member kind="function">
      <type>HashKey</type>
      <name>parentKey</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>ae1b6bbcc1bdabfbb87cf24c6bbbc9b2f</anchor>
      <arglist>(const HashKey key) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>brotherKeys</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>afb95253e2a7839b8e8f91ee6afa305b4</anchor>
      <arglist>(const HashKey key, HashKey *result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>childrenKeys</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>ad50bbdb7dd96cbf61f444de6407fac26</anchor>
      <arglist>(const HashKey key, HashKey *result) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1Morton.html</anchorfile>
      <anchor>a9c78b7a8c2d5ae79d73c82781e3e7396</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SetValueIterator</name>
    <filename>classDGtal_1_1SetValueIterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>a66699836d09ceddef10dddd6ca91e45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>ada5465e8e983533bd64af686d20c5322</anchor>
      <arglist>((CTrivialImage&lt; Image &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetValueIterator</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>aa0624eef308aae7391ef67d1018e53a4</anchor>
      <arglist>(const TIteratorOnPts &amp;aItOnPts, Image &amp;aImg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetValueIterator</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>ae5ff746b975f50b55d86f50bc7081f02</anchor>
      <arglist>(Image &amp;aImg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetValueIterator</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>a2bd437501b37214046930a6ed0480f2c</anchor>
      <arglist>(const SetValueIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SetValueIterator</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>a84e251a3348732382738e5633c2dea3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SetValueIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>ab27f8432a5160a2e94fa01b359999d89</anchor>
      <arglist>(const typename Image::Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>SetValueIterator &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>a928fdf37494fed58a55e748a4da6601e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SetValueIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>a8fb0ec51ae0700e1db5b04ac15bc1442</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SetValueIterator</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>af92005569a443ea542083416fdcc5cbd</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Image *</type>
      <name>myImg</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>ad9bafb3d06e29efb8b7c5425f74f8e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TIteratorOnPts</type>
      <name>myItOnPts</name>
      <anchorfile>classDGtal_1_1SetValueIterator.html</anchorfile>
      <anchor>ac31a8e630ff16835c3c7b14d49542844</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Board2D</name>
    <filename>classDGtal_1_1Board2D.html</filename>
    <base>LibBoard::Board</base>
    <member kind="typedef">
      <type>std::map&lt; std::string, CountedPtr&lt; DrawableWithBoard2D &gt; &gt;</type>
      <name>StyleMapping</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>aa459f929e54110e4f67920213b9d3331</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>ModeMapping</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>a1a1c6948b01a36f58788a074e63bc305</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LibBoard::Shape</type>
      <name>Shape</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>a8be821845d14d93bbdedef6589fc9f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoPDF</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9a373c0d03f710e13988d1dca82518724e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoPNG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9a3ebc8147863b5159ebf9de32f96ee62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoPS</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9afd17a70ef2c695325f85c443d6300bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoEPS</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9a49eb3902a5701434909f2939d74c94d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoSVG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9a171848d0fbc21c41e99f5e55ff2133cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BoundingBox</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a77cdb88a32ac2d3ad62baef58353bfc2af144212fe6448c8c8a41644a48c6c8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A4</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a77cdb88a32ac2d3ad62baef58353bfc2a7aade0ac5953fc749c575bb98532c53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Letter</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a77cdb88a32ac2d3ad62baef58353bfc2a0ccb6a7fbd7a9116af7bd17595ef84dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPoint</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3f79f876d837d6d427deb9e15e5589e5aa79140a63ba47fd8c895315d71b8c578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UInche</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3f79f876d837d6d427deb9e15e5589e5a6c46540288fb3c55ab8373edc8d92fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCentimeter</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3f79f876d837d6d427deb9e15e5589e5a584cabe1c19d9b128244ef55e712273e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMillimeter</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3f79f876d837d6d427deb9e15e5589e5a179790e8669753f69f7427bc8d504af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoPDF</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9a373c0d03f710e13988d1dca82518724e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoPNG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9a3ebc8147863b5159ebf9de32f96ee62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoPS</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9afd17a70ef2c695325f85c443d6300bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoEPS</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9a49eb3902a5701434909f2939d74c94d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoSVG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aced07ed24060f7a0e1262698af2b09a9a171848d0fbc21c41e99f5e55ff2133cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BoundingBox</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a77cdb88a32ac2d3ad62baef58353bfc2af144212fe6448c8c8a41644a48c6c8ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>A4</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a77cdb88a32ac2d3ad62baef58353bfc2a7aade0ac5953fc749c575bb98532c53c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Letter</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a77cdb88a32ac2d3ad62baef58353bfc2a0ccb6a7fbd7a9116af7bd17595ef84dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPoint</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3f79f876d837d6d427deb9e15e5589e5aa79140a63ba47fd8c895315d71b8c578</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UInche</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3f79f876d837d6d427deb9e15e5589e5a6c46540288fb3c55ab8373edc8d92fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UCentimeter</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3f79f876d837d6d427deb9e15e5589e5a584cabe1c19d9b128244ef55e712273e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UMillimeter</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3f79f876d837d6d427deb9e15e5589e5a179790e8669753f69f7427bc8d504af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Board2D</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>ad05c3e64e92b222ee352b8d0c07c3311</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Board2D</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>a53a27970f000cd24cc276a6e0a07aa7c</anchor>
      <arglist>(const Color &amp;backgroundColor=Color::None)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Board2D</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>a8dbe789fa977d58cc907203ce117525e</anchor>
      <arglist>(const Board2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Board2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>acc21a4b16965bac839a87bf2536141da</anchor>
      <arglist>(const Board2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMode</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>adae79e51f7324a37ffe08e986bdcf5d8</anchor>
      <arglist>(const std::string &amp;objectName) const </arglist>
    </member>
    <member kind="function">
      <type>Board2D &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>a5f9d583cfb954576a760360de4078447</anchor>
      <arglist>(const TDrawableWithBoard2D &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>a6f6c483825568bbab506fec1266b902a</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>aac83276508dfd7e2f8e683c5be38f836</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Board</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ad2e893042bec61c3925d3b7cbffe546f</anchor>
      <arglist>(const DGtal::Color &amp;backgroundColor=DGtal::Color::None)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Board</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a4c1dc41233d6866a560c9ac09ab606f6</anchor>
      <arglist>(const Board &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Board</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a75f0d71e18d24a832935de41c9ad8e93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>operator=</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a4684ae7a0a18e11d1967bb9db21e2621</anchor>
      <arglist>(const Board &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ae202cf6f8d25be1675af808364bda34f</anchor>
      <arglist>(const Shape &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>abe974017f71016eed1713a622ef5613f</anchor>
      <arglist>(Unit unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a8cdf5c9ba7420a26e25bf8382f367447</anchor>
      <arglist>(const DGtal::Color &amp;color=DGtal::Color::None)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a1e79b48398af7b435a5a40f028b332e7</anchor>
      <arglist>(unsigned char red, unsigned char green, unsigned char blue)</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>rotate</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a79684e0a2db8072f31dac7336359dc15</anchor>
      <arglist>(double angle, const Point &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>rotate</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aa06b3a70a8026b8ab8d8b053f19bc6a2</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>translate</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aac18ff0a5b65b4c25a6363311e290812</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>scale</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ab814dc608483c3f9d8b5a22aac212014</anchor>
      <arglist>(double sx, double sy)</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>scale</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a85a75abc70bd5ea2efc4aba574906633</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>Board</type>
      <name>rotated</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>af0603f0645e8616d2383979a67c80f5a</anchor>
      <arglist>(double angle, const Point &amp;center)</arglist>
    </member>
    <member kind="function">
      <type>Board</type>
      <name>rotated</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aa69e3c39c1164a8f2280f1d246c0c96d</anchor>
      <arglist>(double angle)</arglist>
    </member>
    <member kind="function">
      <type>Board</type>
      <name>translated</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aa7df13091722117706c9869cdd04755d</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function">
      <type>Board</type>
      <name>scaled</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ab3c2df5cfed6d5207c6ae49668935a1c</anchor>
      <arglist>(double sx, double sy)</arglist>
    </member>
    <member kind="function">
      <type>Board</type>
      <name>scaled</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ae377fb7691b635787217521bb9f580e5</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ad3f3f29633091b70b9e12452837f6c6c</anchor>
      <arglist>(Unit unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a1aff87c6bf6b011d0743831fc368387b</anchor>
      <arglist>(double factor, Unit unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawDot</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a7e4e62a0f349a1ec0ed89f09685c2f93</anchor>
      <arglist>(double x, double y, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawLine</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a64cfaa0d8e99ffe65b99c7be040fbbc5</anchor>
      <arglist>(double x1, double y1, double x2, double y2, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawArrow</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a91f02bfc3d6ba41c0e19fea2aab80472</anchor>
      <arglist>(double x1, double y1, double x2, double y2, bool filled=true, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTriangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a4c7005d95ef8d295b089ebfd1042992d</anchor>
      <arglist>(double x1, double y1, double x2, double y2, double x3, double y3, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawTriangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ac52332d8d522442501d9db133595b116</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2, const Point &amp;p3, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawArc</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a81af58e1bfa25797fd6f03930a8cdf1b</anchor>
      <arglist>(double x, double y, double radius, double angle1, double angle2, bool neg, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillTriangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a0c952f64633360db7aacb8476dd293a6</anchor>
      <arglist>(double x1, double y1, double x2, double y2, double x3, double y3, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillGouraudTriangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a8a6c8cf30f3327e38c10e5ab6b44a6c3</anchor>
      <arglist>(const Point &amp;p1, const DGtal::Color &amp;color1, const Point &amp;p2, const DGtal::Color &amp;color2, const Point &amp;p3, const DGtal::Color &amp;color3, unsigned char divisions=3, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillGouraudTriangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ac478388066aba52c26e14ef5d8d343bb</anchor>
      <arglist>(const double x1, const double y1, const DGtal::Color &amp;color1, const double x2, const double y2, const DGtal::Color &amp;color2, const double x3, const double y3, const DGtal::Color &amp;color3, unsigned char divisions=3, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillGouraudTriangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aac60263fffe52db59e0b8f77d68b6896</anchor>
      <arglist>(const Point &amp;p1, const float brightness1, const Point &amp;p2, const float brightness2, const Point &amp;p3, const float brightness3, unsigned char divisions=3, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillGouraudTriangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aa153d018af546add0dcc65fde2b4834d</anchor>
      <arglist>(const double x1, const double y1, const float brightness1, const double x2, const double y2, const float brightness2, const double x3, const double y3, const float brightness3, unsigned char divisions=3, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillTriangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a0024d8e472fa1eaa60a4ff38a276c7c0</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2, const Point &amp;p3, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawRectangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a02e945c6b75c2b3c43df97e1babc767f</anchor>
      <arglist>(double x, double y, double width, double height, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawImage</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ac88fe51eb3bc23805300d237ea361486</anchor>
      <arglist>(std::string filename, double x, double y, double width, double height, int depthValue=-1, double alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRectangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aa3d2480c8528aa0ed00e215c71d53236</anchor>
      <arglist>(double x, double y, double width, double height, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCircle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a970ab8dc215e1d4de695029bca56805b</anchor>
      <arglist>(double x, double y, double radius, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillCircle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a5b1a56ee2905ce8ba6fec0b0e459ee56</anchor>
      <arglist>(double x, double y, double radius, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawEllipse</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a235d598f09b12b81ded418d0bffc5b99</anchor>
      <arglist>(double x, double y, double xRadius, double yRadius, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillEllipse</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ac1e0f636e5080b1b605b3932bdbda222</anchor>
      <arglist>(double x, double y, double xRadius, double yRadius, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPolyline</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3245e1702f8cbedf86802c01b0c02235</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;points, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawClosedPolyline</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a80da45abe8e9b12f24913a71b7056b5a</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;points, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPolyline</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a6fc2ff5f86830de20d40364d13c83bcf</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;points, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawText</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ab40642b0fff9e5b8585793c8177d2901</anchor>
      <arglist>(double x, double y, const char *text, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawText</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a337f95036e1ac863d8be80f3cd2b011c</anchor>
      <arglist>(double x, double y, const std::string &amp;str, int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setFont</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ab5c7ce24f6533eafb25ea29290b5f46a</anchor>
      <arglist>(const Fonts::Font font, double fontSize)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setFontSize</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3993780edd2f437b1632830115f14e9a</anchor>
      <arglist>(double fontSize)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setPenColorRGBi</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ac7a22569556188df91da4553755710ec</anchor>
      <arglist>(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha=255)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setPenColorRGBf</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a25479f90fcf72ed25d99e114bd5fe82f</anchor>
      <arglist>(float red, float green, float blue, float alpha=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setPenColor</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3546fc5616e527c30f236b89ebaf9c09</anchor>
      <arglist>(const DGtal::Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setFillColorRGBi</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ae3c596490c288c46ec393fccae49a62f</anchor>
      <arglist>(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha=255)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setFillColorRGBf</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a2d99986716931d22475b8f95167fa6d8</anchor>
      <arglist>(float red, float green, float blue, float alpha=1.0f)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setFillColor</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a2c5742e0e37b3f664a042f44397b2112</anchor>
      <arglist>(const DGtal::Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setLineWidth</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ab31b27b7bb6a379a6bbf5bf0e96e0ed9</anchor>
      <arglist>(double width)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setLineStyle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a0294d06eb705554499da69d12233ee1a</anchor>
      <arglist>(Shape::LineStyle style)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setLineCap</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a4f3e9a0204475d2df842836ed0253ebc</anchor>
      <arglist>(Shape::LineCap cap)</arglist>
    </member>
    <member kind="function">
      <type>Board &amp;</type>
      <name>setLineJoin</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a551e5d05c625e284cc3494593575d0e6</anchor>
      <arglist>(Shape::LineJoin join)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backgroundColor</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ac7f39d154d28be28d30327e5ae3ecc22</anchor>
      <arglist>(const DGtal::Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawBoundingBox</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>af3bceb96db4bbefab6ef5d648c07382e</anchor>
      <arglist>(int depthValue=-1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClippingRectangle</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a0fce7f98f969fd25e663266ffdbff78b</anchor>
      <arglist>(double x, double y, double width, double height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClippingPath</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3df71108e3f3a7c739c69e2bd5e4d41a</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClippingPath</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ad3861e802093c7defecb48e014a05f65</anchor>
      <arglist>(const Path &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDuplicates</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>aacdd0bb95e17d41079ed9db0ce1f17df</anchor>
      <arglist>(const Shape &amp;shape, unsigned int times, double dx, double dy, double scale=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addDuplicates</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ada3d83c100c46c90ddaa51f79d8e6413</anchor>
      <arglist>(const Shape &amp;shape, unsigned int times, double dx, double dy, double scaleX, double scaleY, double angle=0.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a5a4fd57becbd1447b23e252ad25da674</anchor>
      <arglist>(const char *filename, PageSize size=Board::BoundingBox, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3db4e55badd8f074225af32d957d0703</anchor>
      <arglist>(const char *filename, double pageWidth, double pageHeight, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveEPS</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a0bb157ee0eb70eb9281634e9ed311818</anchor>
      <arglist>(const char *filename, PageSize size=Board::BoundingBox, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveEPS</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a91e1231fff597d9e56252c9e8b3a34dc</anchor>
      <arglist>(std::ostream &amp;out, PageSize size=Board::BoundingBox, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveEPS</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a5d2bd302a0febf34aadcfbb7a6f712e3</anchor>
      <arglist>(const char *filename, double pageWidth, double pageHeight, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveEPS</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>ae34b7e5f8f438760fd662f229c05ee4e</anchor>
      <arglist>(std::ostream &amp;out, double pageWidth, double pageHeight, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveFIG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a93feb7e2fdfea2dd8046cad77db385f4</anchor>
      <arglist>(const char *filename, PageSize size=Board::BoundingBox, double margin=10.0, bool includeFIGHeader=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveFIG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a5b39cebaf2aca5d474716be4bb00fc92</anchor>
      <arglist>(std::ostream &amp;out, PageSize size=Board::BoundingBox, double margin=10.0, bool includeFIGHeader=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveFIG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a9c52aa1be1385f1d25d15bb5e66e352c</anchor>
      <arglist>(const char *filename, double pageWidth, double pageHeight, double margin=10.0, bool includeFIGHeader=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveFIG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a448d5c8ac8b25b539fbd4e5abdaf69b4</anchor>
      <arglist>(std::ostream &amp;out, double pageWidth, double pageHeight, double margin=10.0, bool includeFIGHeader=true) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveSVG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>adab1403965fea54c0de9bfe38e1e6724</anchor>
      <arglist>(const char *filename, PageSize size=Board::BoundingBox, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveSVG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3d20445fdf89bea1acc5899e8f2c843f</anchor>
      <arglist>(std::ostream &amp;out, PageSize size=Board::BoundingBox, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveSVG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a5a0bc22e1d16a51d3a4da91e83c64457</anchor>
      <arglist>(const char *filename, double pageWidth, double pageHeight, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveSVG</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a755013fff24b96cf8b774ba8d036dd02</anchor>
      <arglist>(std::ostream &amp;out, double pageWidth, double pageHeight, double margin=10.0, string filename=&quot;output.svg&quot;) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveTikZ</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a2c945a7ac2a744cf7b204db2fa06f906</anchor>
      <arglist>(const char *filename, PageSize size=Board::BoundingBox, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveTikZ</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a7df9a2da687dc1ecc464075bd0280c5c</anchor>
      <arglist>(std::ostream &amp;out, PageSize size=Board::BoundingBox, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveTikZ</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>adcc4ca8f2832da4def202a774a4eec33</anchor>
      <arglist>(const char *filename, double pageWidth, double pageHeight, double margin=10.0) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveTikZ</name>
      <anchorfile>classLibBoard_1_1Board.html</anchorfile>
      <anchor>a3439b939a9bbc2b30078e99e10ed31fb</anchor>
      <arglist>(std::ostream &amp;out, double pageWidth, double pageHeight, double margin=10.0) const </arglist>
    </member>
    <member kind="variable">
      <type>DomainDrawMode</type>
      <name>myDomainDrawMode</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>aec05283a37f0c449b90f8bca1237c2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myDrawObjectAdjacencies</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>a6642068b4e77c5b66b8b159b467d5354</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StyleMapping</type>
      <name>myStyles</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>acfc67464b1834b224472a3bc6d15db5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ModeMapping</type>
      <name>myModes</name>
      <anchorfile>classDGtal_1_1Board2D.html</anchorfile>
      <anchor>ae8a34cb800bbecb5842a6dd372e6619e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DrawWithBoardModifier</name>
    <filename>structDGtal_1_1DrawWithBoardModifier.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithBoardModifier.html</anchorfile>
      <anchor>a9c2f23bc9d037084141a28e60cabf069</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CustomStyle</name>
    <filename>structDGtal_1_1CustomStyle.html</filename>
    <base>DGtal::DrawWithBoardModifier</base>
    <member kind="function">
      <type></type>
      <name>CustomStyle</name>
      <anchorfile>structDGtal_1_1CustomStyle.html</anchorfile>
      <anchor>af451350cf8a3a4adafe34312c030d66a</anchor>
      <arglist>(std::string classname, DrawableWithBoard2D *style)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1CustomStyle.html</anchorfile>
      <anchor>ab0f52bc98152ccf0c747be3e47dc1165</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myClassname</name>
      <anchorfile>structDGtal_1_1CustomStyle.html</anchorfile>
      <anchor>a57b5f61850249b46659a129e70fa0692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CountedPtr&lt; DrawableWithBoard2D &gt;</type>
      <name>myStyle</name>
      <anchorfile>structDGtal_1_1CustomStyle.html</anchorfile>
      <anchor>aa56b5edc46393c8ec3e1ce78e901e79b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SetMode</name>
    <filename>structDGtal_1_1SetMode.html</filename>
    <base>DGtal::DrawWithBoardModifier</base>
    <member kind="function">
      <type></type>
      <name>SetMode</name>
      <anchorfile>structDGtal_1_1SetMode.html</anchorfile>
      <anchor>af7e91dce1c62e4d82d3e349f16c9a846</anchor>
      <arglist>(std::string classname, std::string mode)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithBoardModifier.html</anchorfile>
      <anchor>a9c2f23bc9d037084141a28e60cabf069</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myClassname</name>
      <anchorfile>structDGtal_1_1SetMode.html</anchorfile>
      <anchor>adab0e15fcd75d3009a148b8336863c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myMode</name>
      <anchorfile>structDGtal_1_1SetMode.html</anchorfile>
      <anchor>a62e40d75a3f902ee71ea6759968f058e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CustomColors</name>
    <filename>structDGtal_1_1CustomColors.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function">
      <type></type>
      <name>CustomColors</name>
      <anchorfile>structDGtal_1_1CustomColors.html</anchorfile>
      <anchor>ae5822f3424b6c29b1f5872190d902296</anchor>
      <arglist>(const Color &amp;penColor, const Color &amp;fillColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1CustomColors.html</anchorfile>
      <anchor>a727bb97e8874b270e030f1ba1821b528</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myPenColor</name>
      <anchorfile>structDGtal_1_1CustomColors.html</anchorfile>
      <anchor>ab910b96708dd305fcd50af1951e55070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myFillColor</name>
      <anchorfile>structDGtal_1_1CustomColors.html</anchorfile>
      <anchor>a57cdbe91d86da3fc429786bec0d758f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CustomPenColor</name>
    <filename>structDGtal_1_1CustomPenColor.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function">
      <type></type>
      <name>CustomPenColor</name>
      <anchorfile>structDGtal_1_1CustomPenColor.html</anchorfile>
      <anchor>a73aa5583b354e48c5fc9e30b42d8f949</anchor>
      <arglist>(const Color &amp;penColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1CustomPenColor.html</anchorfile>
      <anchor>a5d1565bb58c91cf27105849eebef495e</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myPenColor</name>
      <anchorfile>structDGtal_1_1CustomPenColor.html</anchorfile>
      <anchor>a7b7f20d4c31cb5fd0a92d881e7e98720</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CustomFillColor</name>
    <filename>structDGtal_1_1CustomFillColor.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function">
      <type></type>
      <name>CustomFillColor</name>
      <anchorfile>structDGtal_1_1CustomFillColor.html</anchorfile>
      <anchor>adb6c7ba5be043a7b6abd74249d5cbd81</anchor>
      <arglist>(const Color &amp;fillColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1CustomFillColor.html</anchorfile>
      <anchor>a112a29de0ede973a16c3e45c3fe21d36</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myFillColor</name>
      <anchorfile>structDGtal_1_1CustomFillColor.html</anchorfile>
      <anchor>ac5172a9fb9936db7034e567c753ed76d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CustomPen</name>
    <filename>structDGtal_1_1CustomPen.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function">
      <type></type>
      <name>CustomPen</name>
      <anchorfile>structDGtal_1_1CustomPen.html</anchorfile>
      <anchor>a190fd0507ffbd6975e3ceed35dc9bf0e</anchor>
      <arglist>(const Color &amp;penColor, const Color &amp;fillColor, double lineWidth=1.0, Board2D::Shape::LineStyle lineStyle=Board2D::Shape::SolidStyle, Board2D::Shape::LineCap lineCap=Board2D::Shape::ButtCap, Board2D::Shape::LineJoin lineJoin=Board2D::Shape::MiterJoin)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1CustomPen.html</anchorfile>
      <anchor>a198bdb459506bf2b18cb8435f392612c</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myPenColor</name>
      <anchorfile>structDGtal_1_1CustomPen.html</anchorfile>
      <anchor>a5d31ab9cad5e6e437bf54b7d0ed1457e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myFillColor</name>
      <anchorfile>structDGtal_1_1CustomPen.html</anchorfile>
      <anchor>a374b0d1e950b1931e16c8c7433831530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myLineWidth</name>
      <anchorfile>structDGtal_1_1CustomPen.html</anchorfile>
      <anchor>add99ea78c819088d1475fe1ac938a2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Board2D::Shape::LineStyle</type>
      <name>myLineStyle</name>
      <anchorfile>structDGtal_1_1CustomPen.html</anchorfile>
      <anchor>a4c946b6180d1df657fc00a2fc5f9135a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Board2D::Shape::LineCap</type>
      <name>myLineCap</name>
      <anchorfile>structDGtal_1_1CustomPen.html</anchorfile>
      <anchor>ab9302812998a3ca1a684984782413957</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Board2D::Shape::LineJoin</type>
      <name>myLineJoin</name>
      <anchorfile>structDGtal_1_1CustomPen.html</anchorfile>
      <anchor>a4c9dc5f48bbbacf2e6cb3833250bd95a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>myDepth</name>
      <anchorfile>structDGtal_1_1CustomPen.html</anchorfile>
      <anchor>a2bf6effd425513778225233349a6653a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Board3DTo2D</name>
    <filename>classDGtal_1_1Board3DTo2D.html</filename>
    <base>DGtal::Display3D</base>
    <member kind="enumeration">
      <name>CairoType</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a9eb212d147ee076abd4de9ab5f30812b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoPDF</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a9eb212d147ee076abd4de9ab5f30812ba8e595b06d34ffe9bf824d4e2f116e7a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoPNG</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a9eb212d147ee076abd4de9ab5f30812ba34b8600e03c69bd768daf1b1cbcf612f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoPS</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a9eb212d147ee076abd4de9ab5f30812baaf8ef601079478ac91796a2d8a3c8656</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoEPS</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a9eb212d147ee076abd4de9ab5f30812ba61b2527c4959b44108a74b31ee23ad46</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CairoSVG</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a9eb212d147ee076abd4de9ab5f30812ba9a0b4e6676de73a2f0403690f248cf63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>StreamKey</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>addNewList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04accef40658b02697969ffc563316155a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>updateDisplay</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04a5b467643d3e44661ac96d7c3be38548a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shiftSurfelVisu</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04a4db609bbe1edad3885d830ca83394bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>ModeMapping</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a07629b8c7bd56b78830e01394043efe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, CountedPtr&lt; DrawableWithDisplay3D &gt; &gt;</type>
      <name>StyleMapping</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a5b5949a99fc5a45b42833cb19ec98ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Board3DTo2D</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>aeba8ef2f9465e283aa0a5be2a9f7b602</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Board3DTo2D</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>ab803d126a5d166fe5f683260a5555b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a062ee31d8629eb4c248aad394ff548b2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCameraPosition</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a417d6b4a61c50047dba1b1e6d6e8deb9</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCameraDirection</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a108ff8e4c611ef78a5a9b3dc9f37b6ec</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCameraUpVector</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a39748891aca7d06dff1f0016d0f18404</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNearFar</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>af14cff2353ef26bbdf0fb49e6f9ddc17</anchor>
      <arglist>(double _near, double _far)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveCairo</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a78c3225b740f70566abc5f791cf91906</anchor>
      <arglist>(const char *filename, CairoType type, int bWidth, int bHeight)</arglist>
    </member>
    <member kind="function">
      <type>Board3DTo2D &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>ae5d03a1b37784e9087ec5cd1875a9c12</anchor>
      <arglist>(const DGtal::Color &amp;aColor)</arglist>
    </member>
    <member kind="function">
      <type>Board3DTo2D &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a02baceaabbf8047be4caa0af96ccfe92</anchor>
      <arglist>(const TDrawableWithDisplay3D &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a200199fa9474942feffd414eea6d4e98</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>ab4da9ea92a428bf56c92c95e7ac678fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Display3D</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a49163af2a8dbd60d78de4482d6adcaec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Display3D</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a6048774bee81fc132670fd84d315b85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a1a99af9cef55d4df3b126f48e777ed0a</anchor>
      <arglist>(DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aac8a74be627cfcb51436516f2deaccfa</anchor>
      <arglist>(DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DGtal::Color</type>
      <name>getFillColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ac494d422a2ad5e7ebc64fbec1fb23008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DGtal::Color</type>
      <name>getLineColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>afc484eff14cc374e279bddd4cd21b7fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addClippingPlane</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a79ab96c1d96e87235ee863229cbbcdb4</anchor>
      <arglist>(double a, double b, double c, double d, bool drawPlane)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getMode</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a8a8e81e1147eda600a360d797976bc5b</anchor>
      <arglist>(const std::string &amp;objectName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createNewLineList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a5d4256d27b0e7e1d0bf9a48f782d02bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createNewPointList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a0e7cfa156859bf745ef6001d6950c226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createNewVoxelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aedbbf85fabe8d0a774ccc595ae9b6260</anchor>
      <arglist>(bool depthTest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addQuad</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a41db9d928f61d5fe30cf2d2150872cd7</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, double x4, double y4, double z4, DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addTriangle</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a255665e1ba371d5a108c3093c920451d</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPolygon</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a9f05500850782107d32169ce7eba75b5</anchor>
      <arglist>(std::vector&lt; pointD3D &gt; vectPointsPolygon, DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLine</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aeba629952b22613a9e1eaf51047afdaf</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, const DGtal::Color &amp;color=DGtal::Color(20, 20, 20, 200), double width=1.5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addVoxel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ac38d94b54b70f3af07a20acc58f8bf0c</anchor>
      <arglist>(DGtal::int64_t x, DGtal::int64_t y, DGtal::int64_t z, DGtal::Color color=DGtal::Color(220, 220, 220), double width=0.5, bool withWire=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPoint</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a2650f92c80785bcbc6539faad922cee1</anchor>
      <arglist>(double x, double y, double z, const DGtal::Color &amp;color=DGtal::Color(200, 20, 20), double size=40)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSSurfel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a7a0ecec2063fe3d83fa5b3532fa8f1b0</anchor>
      <arglist>(double x, double y, double z, bool xSurfel, bool ySurfel, bool zSurfel, double sizeShiftFactor, double positionShift=0.0, double sizeFactor=1.0, bool isSigned=false, bool aSign=true, bool basicMode=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSVoxel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a08595fe29f8150a755db591d56834b11</anchor>
      <arglist>(int x, int y, int z, double sizeFactor=0.94)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSPointel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a670c8ebc1d78206e7f1e99afee158b52</anchor>
      <arglist>(double x, double y, double z, double size=0.1, bool isSigned=false, bool aSign=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSLinel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a71c014ae265b24c64e82b3901dbe20a7</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double width=0.02, bool isSigned=false, bool aSign=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundingBox</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a4bebe5158b1bfc4a39e8fc5d912c03c0</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exportToMesh</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a747f698991704bf02ae6fb6af104095f</anchor>
      <arglist>(MeshFromPoints&lt; Display3D::pointD3D &gt; &amp;aMesh) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a4c0723e06cf1e085a6d61478dc63570b</anchor>
      <arglist>(float sx, float sy, float sz)</arglist>
    </member>
    <member kind="variable">
      <type>DGtal::Color</type>
      <name>myDefaultColor</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>ae5223f7269385d8d102a95bf381a1c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ModeMapping</type>
      <name>myModes</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>abdd404a94d7dc542f6a9a57c6a711f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StyleMapping</type>
      <name>myStyles</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>abb1c41cf20bc27b4ff1aba916cb42da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myBoundingPtEmptyTag</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>af4c3d761da9c3e039a2c27a4383bfdea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myBoundingPtUp</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ab0c9b1980d5c0d9ad383641c897fcf79</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myBoundingPtLow</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>adbd8c6afd91be668f328a2743d1a3902</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>aac0f0b36d63e88d8d8126207766ec2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>precompute_projection_matrix</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a74256ff743b0e8f11a4cd634d99bd1d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>project</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a07e7e1abe39bbce3053cb7e0ba57b4be</anchor>
      <arglist>(double x3d, double y3d, double z3d, double &amp;x2d, double &amp;y2d)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>Viewport</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a1f9ad54f784e5a9d3fd10587391dd55f</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>matrix</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a28cb1392cd2190239093fa0bda148fe4</anchor>
      <arglist>[16]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>camera_position</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>ab6ae123e353f73720328131c4010138c</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>camera_direction</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a467650108eecd97c57148b0fe46c0bcb</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>camera_upVector</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>af4bc0dee3764e678fb2526b4d20dfc42</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ZNear</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a3a6a0a858bfc743e1320bc97683a39d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>ZFar</name>
      <anchorfile>classDGtal_1_1Board3DTo2D.html</anchorfile>
      <anchor>a26bb281f766e916c7868a509cf655cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myScaleX</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a74640420a7fcfec1c1ed3e0363ae0893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myScaleY</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a700f6e2d02909a71ff348a8fa9e92119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myScaleZ</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a364fa73ade74feb240a71893307ad03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DGtal::Color</type>
      <name>myCurrentFillColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a61d1c4925172c298045264540dff158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DGtal::Color</type>
      <name>myCurrentLineColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a8fb45fc0b15422a08821d15876e1ee8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCurrentfShiftVisuKSSurfels</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ac15c84df0b018cb91f0ac30706f7ef4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; voxelD3D &gt; &gt;</type>
      <name>myVoxelSetList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ab3e320516908a367c06f9101b3621e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; lineD3D &gt; &gt;</type>
      <name>myLineSetList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ad129ace2df288b9ef09c76f09e3211ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; pointD3D &gt; &gt;</type>
      <name>myPointSetList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a1564af96e58dfe6459802519b7102197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; clippingPlaneD3D &gt;</type>
      <name>myClippingPlaneList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ab8c3e1b275c5914217854bf73ee4d8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; quadD3D &gt;</type>
      <name>myKSSurfelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>adc2843cdf4bc11279c730a0cdda3ac47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; pointD3D &gt;</type>
      <name>myKSPointelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a20180c2b236a9de02d259de9c55a5c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; lineD3D &gt;</type>
      <name>myKSLinelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a4c5dcca642b7dd28dca9bddd2384f0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; quadD3D &gt;</type>
      <name>myQuadList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a52d0783713f3cab1b4b4d68e4d5d57f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; triangleD3D &gt;</type>
      <name>myTriangleList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ae50ca756647ae55ecde8b29f8b8535f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; polygonD3D &gt;</type>
      <name>myPolygonList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ae5ecc65d147df720087c601cc436ee70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>myListVoxelDepthTest</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aabb16a020368b01c683f5f93f3fa2ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myMeshDefaultLineWidth</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aadf67024039afe143fe7749b9cac00ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDrawableWithBoard2D</name>
    <filename>structDGtal_1_1CDrawableWithBoard2D.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDrawableWithBoard2D.html</anchorfile>
      <anchor>af98b311c730e0c6381d062889e00e223</anchor>
      <arglist>(CDrawableWithBoard2D)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1CDrawableWithBoard2D.html</anchorfile>
      <anchor>aa85620997a987065dcfd27534c097a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DrawableWithBoard2D *</type>
      <name>myD</name>
      <anchorfile>structDGtal_1_1CDrawableWithBoard2D.html</anchorfile>
      <anchor>abebffd32aca316c6825a09b5bbbdecd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Board2D</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1CDrawableWithBoard2D.html</anchorfile>
      <anchor>a4b3ca10ffb2772f822db31dfa5ad7289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>myS</name>
      <anchorfile>structDGtal_1_1CDrawableWithBoard2D.html</anchorfile>
      <anchor>a048bb4d19ac1a5b086ff13c0a8671c22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDrawableWithDisplay3D</name>
    <filename>structDGtal_1_1CDrawableWithDisplay3D.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDrawableWithDisplay3D.html</anchorfile>
      <anchor>a155622ef1ce59df181654799342a4974</anchor>
      <arglist>(CDrawableWithDisplay3D)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1CDrawableWithDisplay3D.html</anchorfile>
      <anchor>a18c29ad396a7520be572bb5f0ad879ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DrawableWithDisplay3D *</type>
      <name>myD</name>
      <anchorfile>structDGtal_1_1CDrawableWithDisplay3D.html</anchorfile>
      <anchor>a94c1e8dd59a3944497cbed63d095878d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Display3D</type>
      <name>myD3D</name>
      <anchorfile>structDGtal_1_1CDrawableWithDisplay3D.html</anchorfile>
      <anchor>aca4553d941f01243523f7ebd84d483ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>myS</name>
      <anchorfile>structDGtal_1_1CDrawableWithDisplay3D.html</anchorfile>
      <anchor>aab295406dc29fd13e7504718f1e5dbe9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Color</name>
    <filename>classDGtal_1_1Color.html</filename>
    <member kind="function">
      <type></type>
      <name>~Color</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>ada5d57c6cddf6a5be3866873ff362660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a462c0761589d3025eabc116340011a3a</anchor>
      <arglist>(const unsigned int aRgb, unsigned char aAlpha=255)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a0b93afbd51ebcc58b69a90cb66b2aded</anchor>
      <arglist>(unsigned char aRedValue, unsigned char aGreenValue, unsigned char aBlueValue, unsigned char aAlphaValue=255)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a9697d996c7aef820cf57d7533412cd47</anchor>
      <arglist>(unsigned char aGrayValue, unsigned char aAlphaValue=255)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Color</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>aa7be37b1c170269286805883b88a08fc</anchor>
      <arglist>(const bool aValidColor=true)</arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>setRGBi</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a6fa16f9a7ffd661bb8ef7b7f49bf64f9</anchor>
      <arglist>(const unsigned char aRedValue, const unsigned char aGreenValue, const unsigned char aBlueValue, const unsigned char aAlphaValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>red</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>aa487b3d008dc44964b10971ce8a26432</anchor>
      <arglist>(const unsigned char aRedValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>green</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a5917f9d174eb75eae2ce49e7f40edbb7</anchor>
      <arglist>(const unsigned char aGreenValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blue</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>af51469f44cfc0603c66efe150b1b0c33</anchor>
      <arglist>(const unsigned char aBlueValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alpha</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>aacd9931de8ff92faa89c8188f7045b9b</anchor>
      <arglist>(const unsigned char aAlphaValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>red</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>aa3d17401adb34e58c278d7ea1b568e3a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>green</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a2191891161eb44f2f1e78606c7fcd6e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>blue</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>abea3adb400902be185e18d0823734949</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>alpha</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a9da249bea61618ed0e4624a3dc641d2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a0a66971b1430531c05ee1e73a7c82ad8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a0873c90093460524cc8af4d09af0419b</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>af3d878dbf62543954ad3b691cdfebcda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Color &amp;</type>
      <name>setRGBf</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>ae0aeaefb5b70a61b475421c6394961e7</anchor>
      <arglist>(float red, float green, float blue, float alpha=1.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>aa61a0fa5e370178349a06d845c099a33</anchor>
      <arglist>(const Color &amp;aColor) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>ad71f13e06816f183ac23cf4ee6ee0276</anchor>
      <arglist>(const Color &amp;aColor) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>ab017a7e9465bdd00e9e5eb70215a8ea0</anchor>
      <arglist>(const Color &amp;aColor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flushPostscript</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>aa9552f032b290a46dcca5fd86423b2df</anchor>
      <arglist>(std::ostream &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>svg</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a2fc7262b482d282d04af9bacd4391c88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>svgAlpha</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>ac009119331a88d8ee94b3ed949230823</anchor>
      <arglist>(const char *aPrefix) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>postscript</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a4dd65ecf7517bc06313f527948883ca6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>tikz</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>aa2e6ff9f6d1a764c64956426087b7315</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>None</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a7e300b4cbafa252ccc1a03574d508fde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Black</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a9fa316fcfe4f1bfba4fb94b938dbaa91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Gray</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>adc0c09055f0e8817e1f2ede5abefcc0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>White</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>af75ada2f52001d79aa445cbf7fefe09b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Red</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a72ddfa73d8bbfb75da822547703ec69e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Green</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>ae52413c37b58ca78ac99f05f67c1be99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Lime</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a5d6d2e7a73f412d7f7b001e9d41696bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Blue</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>aa42bc87bfec756eee51bc6bcdcf2d92e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Cyan</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>ad4fa1c611d6cba52e13ed4f307973993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Magenta</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>afa904710fe0697eb4dec881daee6cab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Yellow</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>ac7f86198a9c4d002e893267fd889803a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Silver</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a4ebbf029415bae560e30f4332d10e3f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Purple</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a3786125bffee64654d449f213cf44839</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Navy</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a10177101931f730aa6fb9de4a7dbcd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Color</type>
      <name>Aqua</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a5089def4e64f0b3f98ada2b54171c763</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myRed</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a25e97302f0fcb24a694475583e8501b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myGreen</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a32c73dfc3d37a325c87b569bbb20e55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myBlue</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>adbc4dcf8f715f869b92e8ae99fb0fbb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int</type>
      <name>myAlpha</name>
      <anchorfile>classDGtal_1_1Color.html</anchorfile>
      <anchor>a4aa41dbfdc52f32d7cd36361fb277101</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CColorMap</name>
    <filename>structDGtal_1_1CColorMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CMap::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CColorMap.html</anchorfile>
      <anchor>a5db3ec251adf284ca2f2ca23b58d1b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CColorMap.html</anchorfile>
      <anchor>ad49a14dd47c95cb84d8434db1d6397d9</anchor>
      <arglist>((CLabel&lt; Value &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CColorMap.html</anchorfile>
      <anchor>a246f25d14247fc6ded95d2d8cad6d62b</anchor>
      <arglist>(CColorMap)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Color</type>
      <name>myColor</name>
      <anchorfile>structDGtal_1_1CColorMap.html</anchorfile>
      <anchor>ad7991f5f6c9c6907fc8d70e05e36e718</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myMin</name>
      <anchorfile>structDGtal_1_1CColorMap.html</anchorfile>
      <anchor>aa8c16ea5d10c598a7a1d44e8b892d84e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myMax</name>
      <anchorfile>structDGtal_1_1CColorMap.html</anchorfile>
      <anchor>a5e123bab5c6ec02541983a39269a614d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myValue</name>
      <anchorfile>structDGtal_1_1CColorMap.html</anchorfile>
      <anchor>aa73525f15ab70b73cae835ed4cc05afa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ColorBrightnessColorMap</name>
    <filename>classDGtal_1_1ColorBrightnessColorMap.html</filename>
    <templarg>PValue</templarg>
    <templarg>PDefaultColor</templarg>
    <member kind="typedef">
      <type>PValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a6d9d2d80a70f2e2ce866f315401741b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorBrightnessColorMap</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a11dd648ca5adadad6dba7e4856bc5014</anchor>
      <arglist>(const PValue &amp;min, const PValue &amp;max, const Color color=Color(DGTAL_RED_COMPONENT(PDefaultColor), DGTAL_GREEN_COMPONENT(PDefaultColor), DGTAL_BLUE_COMPONENT(PDefaultColor)))</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a6013a04401f8b17e624937d74ce9f386</anchor>
      <arglist>(const PValue &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ColorBrightnessColorMap</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a658b86624f848e769997fd71238b7930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColorBrightnessColorMap</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>affb0b44c4e5a62aa8cea397cf18cfb26</anchor>
      <arglist>(const ColorBrightnessColorMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ColorBrightnessColorMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>aac08a652f6693cfd271b7dcb2fd82d8f</anchor>
      <arglist>(const ColorBrightnessColorMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a0d84a7584448bb4ad054bd872b6e450f</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a36b955c7f5aa8e840c09a3779af35ba5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PValue &amp;</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a36cc98a734d57da442f600a35c7a1b35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PValue &amp;</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>ad0a505464e834d59cb1f8ab08ec62a67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Color</type>
      <name>getColor</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>ae746e8265eb265f85c2f9e2dd4b4d659</anchor>
      <arglist>(const Color color, const PValue &amp;min, const PValue &amp;max, const PValue &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ColorBrightnessColorMap</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a5d800659c6c345fe5808c90fab1ebe3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PValue</type>
      <name>myMin</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>ad963384ae1bd6f6defaa7676c6966ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PValue</type>
      <name>myMax</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>aeb4257cff8093c0cb21804e276e54535</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Color</type>
      <name>myColor</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a4c38bcd97544c52eca4096e7400b3162</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>HSVtoRGB</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>acede166320df402a3e853b5dd79aacbf</anchor>
      <arglist>(double &amp;r, double &amp;g, double &amp;b, double h, const double s, const double v)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>RGBtoHSV</name>
      <anchorfile>classDGtal_1_1ColorBrightnessColorMap.html</anchorfile>
      <anchor>a65406a50e3416405cc6ecce3abeb0bb5</anchor>
      <arglist>(double &amp;h, double &amp;s, double &amp;v, const unsigned char r, const unsigned char g, const unsigned char b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::GradientColorMap</name>
    <filename>classDGtal_1_1GradientColorMap.html</filename>
    <templarg>PValue</templarg>
    <templarg>PDefaultPreset</templarg>
    <templarg>PDefaultFirstColor</templarg>
    <templarg>PDefaultLastColor</templarg>
    <member kind="typedef">
      <type>PValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>ab9ad3a5b59df7d67c2f058d0c345e517</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GradientColorMap</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>aff0c628574a4d9aea0faec75ddcfc430</anchor>
      <arglist>(const PValue &amp;min, const PValue &amp;max, const ColorGradientPreset preset=static_cast&lt; ColorGradientPreset &gt;(PDefaultPreset), const Color firstColor=(PDefaultFirstColor==-1)?Color::None:Color(DGTAL_RED_COMPONENT(PDefaultFirstColor), DGTAL_GREEN_COMPONENT(PDefaultFirstColor), DGTAL_BLUE_COMPONENT(PDefaultFirstColor)), const Color lastColor=(PDefaultFirstColor==-1)?Color::None:Color(DGTAL_RED_COMPONENT(PDefaultLastColor), DGTAL_GREEN_COMPONENT(PDefaultLastColor), DGTAL_BLUE_COMPONENT(PDefaultLastColor)))</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a99d0b7f14f8af5c70fe91b50bde9ed93</anchor>
      <arglist>(const PValue &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GradientColorMap</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a68db3c59d86384262e373dae886af85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GradientColorMap</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a326d273fa31d3d88a9b2c7b39cb8be68</anchor>
      <arglist>(const GradientColorMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GradientColorMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a4df94905a55c92f15ae891152e17624f</anchor>
      <arglist>(const GradientColorMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearColors</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a2da1b686dd015965ee636194751df645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColor</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a0d40c7b3643e533b2357ce908ae1f08c</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>ab3e5171f604a1977e0e1eab32f485d2d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>aeafbea787b9efa719090cd4d97c67372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PValue &amp;</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a466efa02bc38ff2f8862dcbf3edac805</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PValue &amp;</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a3b63fce1fc878a5d840d751f811219ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Color</type>
      <name>getColor</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a76f7a934ec66f16b3ee03c13bf6a7153</anchor>
      <arglist>(const std::vector&lt; Color &gt; &amp;colors, const PValue &amp;min, const PValue &amp;max, const PValue &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GradientColorMap</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a0d0db86df6b68f561dde0b92bc56e6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PValue</type>
      <name>myMin</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a20133217be3733719cf8cacf17e86113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PValue</type>
      <name>myMax</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>ab52e1f0bd98381f943b9cd1a44adeea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Color &gt;</type>
      <name>myColors</name>
      <anchorfile>classDGtal_1_1GradientColorMap.html</anchorfile>
      <anchor>a0947cf934ef8690d1fdc4acb1ae72e93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::GrayscaleColorMap</name>
    <filename>classDGtal_1_1GrayscaleColorMap.html</filename>
    <templarg>PValue</templarg>
    <member kind="typedef">
      <type>PValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a9817990489bdab0a269d49a326ed7f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GrayscaleColorMap</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a58344994bbc1d5ba8f0e602cbdfa3db3</anchor>
      <arglist>(const PValue &amp;min, const PValue &amp;max)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a7425b09773d64642df1c057fe8c83742</anchor>
      <arglist>(const PValue &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GrayscaleColorMap</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a98fed367cd6c52adf896d212f74fb280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GrayscaleColorMap</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>aad191b15f6457bfffdf5d7d159e2a733</anchor>
      <arglist>(const GrayscaleColorMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GrayscaleColorMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a2f5f62c6ae813497cf7385776645936f</anchor>
      <arglist>(const GrayscaleColorMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a9ceaa5a908ffd2ef1331bd0f24b8c00e</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a49223ffe9fa97e6c17f3b45ae910f7ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PValue &amp;</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>ad9936defdfd8bffde375d2f43ce620d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PValue &amp;</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a316e61560dc867d3a2f4b4488454900f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Color</type>
      <name>getColor</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a5510f9f068f6e1140eba421b552de652</anchor>
      <arglist>(const PValue &amp;min, const PValue &amp;max, const PValue &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GrayscaleColorMap</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>aabeb3e98a8bb722198f76963f5515930</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PValue</type>
      <name>myMin</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>af144e9e4e023448aa17f256f89c9d6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PValue</type>
      <name>myMax</name>
      <anchorfile>classDGtal_1_1GrayscaleColorMap.html</anchorfile>
      <anchor>a52ddd389d5f236ca244fc76af13548d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::HueShadeColorMap</name>
    <filename>classDGtal_1_1HueShadeColorMap.html</filename>
    <templarg>PValue</templarg>
    <templarg>DefaultCycles</templarg>
    <member kind="typedef">
      <type>PValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>adc4be8ac71865810e3f69129bcc4b9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HueShadeColorMap</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a5c8c454edf399f2ff0f6fa1108c50e8c</anchor>
      <arglist>(const PValue &amp;min, const PValue &amp;max, const unsigned int cycles=DefaultCycles)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a3c7d1f4fb2abfaea5aeaeaf0973182b8</anchor>
      <arglist>(const PValue &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HueShadeColorMap</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a38234ab97858218efc076cac37cf39a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HueShadeColorMap</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>ab4f79ad4a1a7571265cfd49d76416e15</anchor>
      <arglist>(const HueShadeColorMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>HueShadeColorMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a08429562759429addf885b2c8579d845</anchor>
      <arglist>(const HueShadeColorMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a0f35e3f0b44e2eab3a228a1925840865</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a4dda8fa945b8efbd1651483c536361a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PValue &amp;</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a375c72459d9128e8b0905713c992d4bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const PValue &amp;</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>af7959d34932912fd65d675da52278dbe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCycles</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a4c496ceb871b3e1724d22e3615a72385</anchor>
      <arglist>(int cycles)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Color</type>
      <name>getColor</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a4143f03ba8202ba72bdb67436e678cdb</anchor>
      <arglist>(const unsigned int cycles, const PValue &amp;min, const PValue &amp;max, const PValue &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>HueShadeColorMap</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a28e870b92f2a3e5a220f72aa419d525c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PValue</type>
      <name>myMin</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a99966a043725b7ff4043f8468c42a73a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PValue</type>
      <name>myMax</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a8c8cf8df140661fc3811cbc6a7524ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myCycles</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>ae2897dbd2c44760c69e6eaae5ff3b6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static void</type>
      <name>HSVtoRGB</name>
      <anchorfile>classDGtal_1_1HueShadeColorMap.html</anchorfile>
      <anchor>a562d157efafd8a4501b8717f9204066d</anchor>
      <arglist>(double &amp;r, double &amp;g, double &amp;b, double h, const double s, const double v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::RandomColorMap</name>
    <filename>classDGtal_1_1RandomColorMap.html</filename>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>aa5ab375c399440024deeeaad9876c03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomColorMap</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a4e5addd293a59a15232577dbf5469a74</anchor>
      <arglist>(const RandomColorMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RandomColorMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a54f60369c9897c957643cf025693ae7b</anchor>
      <arglist>(const RandomColorMap &amp;anOther)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomColorMap</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>add0b24568071f3e5e321e65067fb6e6e</anchor>
      <arglist>(const unsigned int &amp;aFirstIndex, const unsigned int &amp;aLastIndex, const Color &amp;aFirstColor=Color::White, const Color &amp;aLastColor=Color::Red)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addColor</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a21098770ef5659032eb474cba78e1619</anchor>
      <arglist>(const Color &amp;aColor)</arglist>
    </member>
    <member kind="function">
      <type>Color</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a5334b833c7cd07ea852a7b5780dff4da</anchor>
      <arglist>(const unsigned int &amp;aValue) const </arglist>
    </member>
    <member kind="function">
      <type>const unsigned int &amp;</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a5db7465b7c61de98cad3cbfbd3ecef95</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const unsigned int &amp;</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>afa1a96fc75c97e2da8329ee9b0f908ed</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomColorMap</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a9a9b1948f9896a2d2b5b1c8a3bf37937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a43293ff63f9267e3b2f92ef1ae876df7</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a8b2dc93c3132c708815c280467c9c131</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>RandomColorMap</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>ac32f436430d82389833019a101e8a9be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myMin</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a6c76a5d4768c7f0c2dba79cd0832c0f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>myMax</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a2cbf471f1f486afa2b39ed9a236f4ba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>associateRandomIndexColor</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a87b2d6f9a63bcafd1ac1698252a0fc40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradientColorMap&lt; unsigned int &gt; *</type>
      <name>myGradientMap</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>abe85360eb1b1c65c3ca4081aa090ea62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>myColorIndex</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>a7a3e7fe07510724a44badd63cacee560</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>myFreeColorIndex</name>
      <anchorfile>classDGtal_1_1RandomColorMap.html</anchorfile>
      <anchor>af57e05ff336be5ad94ac810c4921911f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Display2DFactory</name>
    <filename>structDGtal_1_1Display2DFactory.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a05cf13574f32647dc08d04e94aa07584</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::AngleLinearMinimizer &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsBoundingBox</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a76d7bad0f468d77a6d46aeeacd4d1983</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::ArithmeticalDSS&lt; TIterator, TInteger, connectivity &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsDigitalPoints</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a1b84192b2e3d99446b5cc33a0e93c141</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::ArithmeticalDSS&lt; TIterator, TInteger, connectivity &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a09dd4279d4c4aef196b5330e189fb1e9</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::ArithmeticalDSS&lt; TIterator, TInteger, connectivity &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>af30f084e2b5e0a658f0a9910ea7cbee2</anchor>
      <arglist>(Board2D &amp;aBoard, const DGtal::CircleFrom2Points&lt; TPoint &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawArc</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>aca5d3661143732b2ee4ddfdaec1d1f92</anchor>
      <arglist>(Board2D &amp;aBoard, const DGtal::CircleFrom3Points&lt; Point &gt; &amp;, const Point &amp;, const Point &amp;, bool anOrientation=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawSector</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a8b48a894c3a6f50f1d04541ebcf15780</anchor>
      <arglist>(Board2D &amp;aBoard, const DGtal::CircleFrom3Points&lt; Point &gt; &amp;, const Point &amp;, const Point &amp;, bool anOrientation=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAnnulus</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a92c5b7306dbc8b5976fb02bc701ace96</anchor>
      <arglist>(Board2D &amp;aBoard, const DGtal::CircleFrom3Points&lt; Point &gt; &amp;, const Point &amp;, const Point &amp;, const double &amp;w=1.0, bool anOrientation=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>ad4ec5cd0d26d0af37512dc3e30b2145c</anchor>
      <arglist>(Board2D &amp;aBoard, const DGtal::CircleFrom3Points&lt; Point &gt; &amp;, const Point &amp;, const Point &amp;, bool anOrientation=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a2aae12549d951a3b47b08e4f39382d6e</anchor>
      <arglist>(Board2D &amp;aBoard, const DGtal::CircleFrom3Points&lt; TPoint &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>aeee4d12cdff6dfad94817595d1a5fa5d</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::DigitalSetBySTLSet&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>af56f01c9edff859ad9f9edbfac5b7053</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::DigitalSetBySTLVector&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPolygon</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a555205198031750a1d1a0db31b72201d</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::FP&lt; TIterator, TInteger, connectivity &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>aa0030b9b9a5aed61b767897f1725d6e0</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::FP&lt; TIterator, TInteger, connectivity &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsGrid</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a4fbf8e3c75c9f3dea2fca58d3f62e111</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::FreemanChain&lt; TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsInterGrid</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>afb62ae5418e22f88b46ed1a48dc2ac02</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::FreemanChain&lt; TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>af8e3f8e88bee84bf9597df6b783f2c8e</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::FreemanChain&lt; TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a278365c544b35c6fc9d9ba59a7c1a413</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::GeometricalDSS&lt; TConstIterator &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a55b215bfee218fe8d1286ac2c7f673e9</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::GeometricalDCA&lt; TConstIterator &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a04fede61d02a3e2d083672a1aa8c8c12</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::FrechetShortcut&lt; TIterator, TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a446759ddcf3a5c2f9512d0de016e757d</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const GridCurve&lt; TKSpace &gt; &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a8214319d7f52773d7438d61429599f14</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const ConstRangeAdapter&lt; TIterator, DefaultFunctor, TSCell &gt; &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a4ac822c5883063a48232cd77ffa8ca4a</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const ConstRangeAdapter&lt; TIterator, SCellToPoint&lt; TKSpace &gt;, typename TKSpace::Point &gt; &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a9283f3cc028dc397f31203337de319ca</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const ConstRangeAdapter&lt; TIterator, SCellToMidPoint&lt; TKSpace &gt;, typename TKSpace::Space::RealPoint &gt; &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>aea7ee0b01432f0af9d4cf7aa0b4ec0b6</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const ConstRangeAdapter&lt; TIterator, SCellToArrow&lt; TKSpace &gt;, std::pair&lt; typename TKSpace::Point, typename TKSpace::Vector &gt; &gt; &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>adafd8ab646c8f8e358c3fd8d114310da</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const ConstRangeAdapter&lt; TIterator, SCellToInnerPoint&lt; TKSpace &gt;, typename TKSpace::Point &gt; &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>aba47a3d72593ca6871001045ed8d1297</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const ConstRangeAdapter&lt; TIterator, SCellToOuterPoint&lt; TKSpace &gt;, typename TKSpace::Point &gt; &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>aeaedda9823e997cf6d92832035700ef5</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const ConstRangeAdapter&lt; TIterator, SCellToIncidentPoints&lt; TKSpace &gt;, std::pair&lt; typename TKSpace::Point, typename TKSpace::Point &gt; &gt; &amp;object)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsGrid</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a24419ce726dffc5d8d63f99a05c845a7</anchor>
      <arglist>(DGtal::Board2D &amp;aboard, const DGtal::HyperRectDomain&lt; TSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPaving</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>aaaf4f940d34af61d5e7fc44f12b2436e</anchor>
      <arglist>(DGtal::Board2D &amp;aboard, const DGtal::HyperRectDomain&lt; TSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a91720f5c20a3ab5dfeb3d7f6f2fe5ebe</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::HyperRectDomain&lt; TSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawImageRecursive</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a4199c6d7287210a82686a20b7cf1a778</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::ImageContainerByHashTree&lt; Domain, Value, HashKey &gt; &amp;i, HashKey key, const double p[2], const double len, LibBoard::Board &amp;board, const C &amp;cmap)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawImageHashTree</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>acb2c85ecadb2ded7108d51cf18a9efc1</anchor>
      <arglist>(Board2D &amp;board, const DGtal::ImageContainerByHashTree&lt; Domain, Value, HashKey &gt; &amp;, const Value &amp;, const Value &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawImage</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a8e0b1be930f81201309ce60fe07645ab</anchor>
      <arglist>(DGtal::Board2D &amp;board, const Image &amp;i, const typename Image::Value &amp;minV, const typename Image::Value &amp;maxV)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a79e88c3daa9072fd0d0a4d4580caa6cc</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::KhalimskyCell&lt; dim, TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawWithAdjacencies</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a592b4a87cd600c6f1134199097f054f2</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::Object&lt; TDigitalTopology, TDigitalSet &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a9f622f15ac21f0368b3d0cb7b6a7eae9</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::Object&lt; TDigitalTopology, TDigitalSet &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPaving</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a9a917ff3b8d1a3e95ec29fa41e873dab</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsGrid</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>aa81a0f086b489c28ea86582b6b199eb8</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a8d6d9c5d027c7b97f16185929bcf893d</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a4c4fd1358b391d794d18971e2ad50313</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>ae28f4f90d6653a28f101d13b5c685564</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::Preimage2D&lt; Shape &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a2de534a59bd6ecccc123cb5d6a414ce8</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::SignedKhalimskyCell&lt; dim, TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a7fc0e407c012e5c3439b3e6e882163e7</anchor>
      <arglist>(Board2D &amp;aBoard, const DGtal::StraightLineFrom2Points&lt; TPoint &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>ad6ca5e7dc8f1e45b850b5a8af4cddf8b</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::CustomStyle &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a6e2d5ff43e58d83536838bb59d57f605</anchor>
      <arglist>(DGtal::Board2D &amp;board, const DGtal::SetMode &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display2DFactory.html</anchorfile>
      <anchor>a609aa6de42aaa0a2e902ba4a21dad2b2</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, const DGtal::LatticePolytope2D&lt; TSpace, TSequence &gt; &amp;cip)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Display3D</name>
    <filename>classDGtal_1_1Display3D.html</filename>
    <class kind="struct">DGtal::Display3D::clippingPlaneD3D</class>
    <class kind="struct">DGtal::Display3D::lineD3D</class>
    <class kind="struct">DGtal::Display3D::pointD3D</class>
    <class kind="struct">DGtal::Display3D::polygonD3D</class>
    <class kind="struct">DGtal::Display3D::quadD3D</class>
    <class kind="struct">DGtal::Display3D::triangleD3D</class>
    <class kind="struct">DGtal::Display3D::voxelD3D</class>
    <member kind="enumeration">
      <name>StreamKey</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>addNewList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04accef40658b02697969ffc563316155a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>updateDisplay</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04a5b467643d3e44661ac96d7c3be38548a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shiftSurfelVisu</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04a4db609bbe1edad3885d830ca83394bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>ModeMapping</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a07629b8c7bd56b78830e01394043efe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, CountedPtr&lt; DrawableWithDisplay3D &gt; &gt;</type>
      <name>StyleMapping</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a5b5949a99fc5a45b42833cb19ec98ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Display3D</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a49163af2a8dbd60d78de4482d6adcaec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Display3D</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a6048774bee81fc132670fd84d315b85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a1a99af9cef55d4df3b126f48e777ed0a</anchor>
      <arglist>(DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aac8a74be627cfcb51436516f2deaccfa</anchor>
      <arglist>(DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DGtal::Color</type>
      <name>getFillColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ac494d422a2ad5e7ebc64fbec1fb23008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DGtal::Color</type>
      <name>getLineColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>afc484eff14cc374e279bddd4cd21b7fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addClippingPlane</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a79ab96c1d96e87235ee863229cbbcdb4</anchor>
      <arglist>(double a, double b, double c, double d, bool drawPlane)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCameraUpVector</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a05db6d198435aa34012e2f8285a53c5c</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCameraPosition</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a7f98d75adbc106d7bade2e8cab01a1d8</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNearFar</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ad15006dfefe89aacaf8d395fc5c4afca</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCameraDirection</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a0b1c0f300116434007b7040c43f8c618</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getMode</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a8a8e81e1147eda600a360d797976bc5b</anchor>
      <arglist>(const std::string &amp;objectName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createNewLineList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a5d4256d27b0e7e1d0bf9a48f782d02bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createNewPointList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a0e7cfa156859bf745ef6001d6950c226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createNewVoxelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aedbbf85fabe8d0a774ccc595ae9b6260</anchor>
      <arglist>(bool depthTest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addQuad</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a41db9d928f61d5fe30cf2d2150872cd7</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, double x4, double y4, double z4, DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addTriangle</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a255665e1ba371d5a108c3093c920451d</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPolygon</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a9f05500850782107d32169ce7eba75b5</anchor>
      <arglist>(std::vector&lt; pointD3D &gt; vectPointsPolygon, DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLine</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aeba629952b22613a9e1eaf51047afdaf</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, const DGtal::Color &amp;color=DGtal::Color(20, 20, 20, 200), double width=1.5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addVoxel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ac38d94b54b70f3af07a20acc58f8bf0c</anchor>
      <arglist>(DGtal::int64_t x, DGtal::int64_t y, DGtal::int64_t z, DGtal::Color color=DGtal::Color(220, 220, 220), double width=0.5, bool withWire=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPoint</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a2650f92c80785bcbc6539faad922cee1</anchor>
      <arglist>(double x, double y, double z, const DGtal::Color &amp;color=DGtal::Color(200, 20, 20), double size=40)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSSurfel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a7a0ecec2063fe3d83fa5b3532fa8f1b0</anchor>
      <arglist>(double x, double y, double z, bool xSurfel, bool ySurfel, bool zSurfel, double sizeShiftFactor, double positionShift=0.0, double sizeFactor=1.0, bool isSigned=false, bool aSign=true, bool basicMode=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSVoxel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a08595fe29f8150a755db591d56834b11</anchor>
      <arglist>(int x, int y, int z, double sizeFactor=0.94)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSPointel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a670c8ebc1d78206e7f1e99afee158b52</anchor>
      <arglist>(double x, double y, double z, double size=0.1, bool isSigned=false, bool aSign=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSLinel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a71c014ae265b24c64e82b3901dbe20a7</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double width=0.02, bool isSigned=false, bool aSign=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundingBox</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a4bebe5158b1bfc4a39e8fc5d912c03c0</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exportToMesh</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a747f698991704bf02ae6fb6af104095f</anchor>
      <arglist>(MeshFromPoints&lt; Display3D::pointD3D &gt; &amp;aMesh) const </arglist>
    </member>
    <member kind="function">
      <type>Display3D &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>af628ecd16934d2fa26f15e36a233261e</anchor>
      <arglist>(const TDrawableWithDisplay3D &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>af025bbbd54dbd9fe673c6b7e4e83aa67</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a66a4ec3283a19d82238edc0581ed0d1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a4c0723e06cf1e085a6d61478dc63570b</anchor>
      <arglist>(float sx, float sy, float sz)</arglist>
    </member>
    <member kind="variable">
      <type>ModeMapping</type>
      <name>myModes</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>abdd404a94d7dc542f6a9a57c6a711f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StyleMapping</type>
      <name>myStyles</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>abb1c41cf20bc27b4ff1aba916cb42da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myBoundingPtEmptyTag</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>af4c3d761da9c3e039a2c27a4383bfdea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myBoundingPtUp</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ab0c9b1980d5c0d9ad383641c897fcf79</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myBoundingPtLow</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>adbd8c6afd91be668f328a2743d1a3902</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myScaleX</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a74640420a7fcfec1c1ed3e0363ae0893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myScaleY</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a700f6e2d02909a71ff348a8fa9e92119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myScaleZ</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a364fa73ade74feb240a71893307ad03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DGtal::Color</type>
      <name>myCurrentFillColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a61d1c4925172c298045264540dff158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DGtal::Color</type>
      <name>myCurrentLineColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a8fb45fc0b15422a08821d15876e1ee8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCurrentfShiftVisuKSSurfels</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ac15c84df0b018cb91f0ac30706f7ef4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; voxelD3D &gt; &gt;</type>
      <name>myVoxelSetList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ab3e320516908a367c06f9101b3621e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; lineD3D &gt; &gt;</type>
      <name>myLineSetList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ad129ace2df288b9ef09c76f09e3211ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; pointD3D &gt; &gt;</type>
      <name>myPointSetList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a1564af96e58dfe6459802519b7102197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; clippingPlaneD3D &gt;</type>
      <name>myClippingPlaneList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ab8c3e1b275c5914217854bf73ee4d8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; quadD3D &gt;</type>
      <name>myKSSurfelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>adc2843cdf4bc11279c730a0cdda3ac47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; pointD3D &gt;</type>
      <name>myKSPointelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a20180c2b236a9de02d259de9c55a5c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; lineD3D &gt;</type>
      <name>myKSLinelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a4c5dcca642b7dd28dca9bddd2384f0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; quadD3D &gt;</type>
      <name>myQuadList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a52d0783713f3cab1b4b4d68e4d5d57f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; triangleD3D &gt;</type>
      <name>myTriangleList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ae50ca756647ae55ecde8b29f8b8535f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; polygonD3D &gt;</type>
      <name>myPolygonList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ae5ecc65d147df720087c601cc436ee70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>myListVoxelDepthTest</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aabb16a020368b01c683f5f93f3fa2ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myMeshDefaultLineWidth</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aadf67024039afe143fe7749b9cac00ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Display3D</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a380be1fb0c0707442ce579aff4309e7c</anchor>
      <arglist>(const Display3D &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Display3D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ad470ff6da38b74ee5287dc2f0df526a6</anchor>
      <arglist>(const Display3D &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Display3D::clippingPlaneD3D</name>
    <filename>structDGtal_1_1Display3D_1_1clippingPlaneD3D.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>a</name>
      <anchorfile>structDGtal_1_1Display3D_1_1clippingPlaneD3D.html</anchorfile>
      <anchor>a0dcb2201ec6408d2d10c77d50f205564</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>b</name>
      <anchorfile>structDGtal_1_1Display3D_1_1clippingPlaneD3D.html</anchorfile>
      <anchor>a53de55d181a8a9f3eb156b446a4df4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>c</name>
      <anchorfile>structDGtal_1_1Display3D_1_1clippingPlaneD3D.html</anchorfile>
      <anchor>acf21deb866c1077e34794e3af447d8fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>d</name>
      <anchorfile>structDGtal_1_1Display3D_1_1clippingPlaneD3D.html</anchorfile>
      <anchor>ab812eebc3d55b39ffbdad8adc91c6678</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Display3D::lineD3D</name>
    <filename>structDGtal_1_1Display3D_1_1lineD3D.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>x1</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>a481b7f75697ba7bcaff67c03a7b7374d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y1</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>ab2ff255fe1832170a37325e17c2aa2c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z1</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>ae0f0695919520e4c35056c53e965dcad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x2</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>a921296574b4fe280f88a5933821e51d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y2</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>ac540d3264cd7e4ee76449571b861a533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z2</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>a9e69b471e86f1bdd50b2121d6b46cdf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>width</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>aef6c069249aa9cae208e076ea42c09a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>R</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>a7eb0acc0d0418fffd8131ea0843016c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>G</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>ac393f9e00276fbe5d860b5a955687434</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>B</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>ab3f97b920855c879f4c6ab3adabcc2cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>T</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>a4d8758664ee172c668e6cac9e07f422c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>a32c839d6e2061948cf2e9e9b16af9754</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>signPos</name>
      <anchorfile>structDGtal_1_1Display3D_1_1lineD3D.html</anchorfile>
      <anchor>a7ebf6884cb0cd804fe41c0058b1ebb7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Display3D::pointD3D</name>
    <filename>structDGtal_1_1Display3D_1_1pointD3D.html</filename>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator[]</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>ab03ee6eb2d49f23470731e180c6e4cd4</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>a1d2488b87da684bd225faebf72712737</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>ade048d2dcc8a7f3c2fbbf994cc14a0c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>ad90b05f7aa2d7bc6171ef3d12ccf5c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>a1a497121f39ae67fb67673b238357298</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>R</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>ab50ac10fe395ac78c0ee242f0178b31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>G</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>aa932540e5253bd6668f2718f3cfe5641</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>B</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>a182236f72c0eaf766cfcb63dc4ef0118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>T</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>a514ec20c8ea6321c319411787a3ef495</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>a9230090f04ba75445af27c624d9f221d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>signPos</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>ae9f649453720722c13736e4216b181ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>size</name>
      <anchorfile>structDGtal_1_1Display3D_1_1pointD3D.html</anchorfile>
      <anchor>a78c15a865616cda39794c37ea9ad7e93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Display3D::polygonD3D</name>
    <filename>structDGtal_1_1Display3D_1_1polygonD3D.html</filename>
    <member kind="variable">
      <type>vector&lt; pointD3D &gt;</type>
      <name>vectPoints</name>
      <anchorfile>structDGtal_1_1Display3D_1_1polygonD3D.html</anchorfile>
      <anchor>a695348498f52660587d967f1b5c4f363</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>nx</name>
      <anchorfile>structDGtal_1_1Display3D_1_1polygonD3D.html</anchorfile>
      <anchor>ae714cf6e7c84d7aea069c368924d5a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ny</name>
      <anchorfile>structDGtal_1_1Display3D_1_1polygonD3D.html</anchorfile>
      <anchor>aa2c3991871c9cf04ce595ef210c02063</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>nz</name>
      <anchorfile>structDGtal_1_1Display3D_1_1polygonD3D.html</anchorfile>
      <anchor>a72120fe11755be6e5cf770659ed071df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>R</name>
      <anchorfile>structDGtal_1_1Display3D_1_1polygonD3D.html</anchorfile>
      <anchor>a3fdc58cd1b1556d7dea25f58c225fa7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>G</name>
      <anchorfile>structDGtal_1_1Display3D_1_1polygonD3D.html</anchorfile>
      <anchor>a8bcbbf7a2b7cf2c498eb1fd2c18bf5fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>B</name>
      <anchorfile>structDGtal_1_1Display3D_1_1polygonD3D.html</anchorfile>
      <anchor>a3096a15feeea768ca654e4edf0054b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>T</name>
      <anchorfile>structDGtal_1_1Display3D_1_1polygonD3D.html</anchorfile>
      <anchor>a53973db767678e77ac38c4994e4a4219</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Display3D::quadD3D</name>
    <filename>structDGtal_1_1Display3D_1_1quadD3D.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>x1</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a8ee6f44bd0aa8c1f236a807f4548df9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y1</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a71fe494f843ee598d3243ceadc5e7621</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z1</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a4fb5cd22d6a9dee6174c3988f6dd84e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x2</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a2355121d40144ffefad49cb015662313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y2</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>ae3570942dc375f20163af76ed901916a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z2</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a5ff8bc78824e6a9191a5774026b170ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x3</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a0acf7405166cc01a3a14d9b7e5635129</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y3</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>add225c0a134b6cd1f8cfe9e879ba67a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z3</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a43976b48567e77b3e0aec053f124589c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x4</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>ab74271b55d0dfaf4f2a7e304aef31bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y4</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>ac66814ed92ea9fe073c0321a575c5a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z4</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a66bb663e4a4502ed793ae38c271f97cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>nx</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a0c7074b6b651e05dcd536127705d088a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ny</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>ae11752f11c20f88ac82c31ac7d7ed998</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>nz</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a019cf2f267284d448f895ddf7f7c5fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>R</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a628da8b3945b706d34c8759bd51312da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>G</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a6c113609ef71e5e0deb59011b0bd15b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>B</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a2ce090fdb6f266d0d1f5a92bd4146a30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>T</name>
      <anchorfile>structDGtal_1_1Display3D_1_1quadD3D.html</anchorfile>
      <anchor>a6e74ebc96baa1de3e1a7efda4746eaf1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Display3D::triangleD3D</name>
    <filename>structDGtal_1_1Display3D_1_1triangleD3D.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>x1</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a824ea3b33c07337598b09720d6dfcf6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y1</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a9ae4be1123377444e63fdeed611b4824</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z1</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>af1f930d3f35ea2075a55c3bbd60f1617</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x2</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a6bd23a48556b91903d9ebe970e74df01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y2</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a624b43f9d39fbffebceb694bf6d01834</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z2</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a5774868c5d53786f340ee6b4583d116e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>x3</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a29337ceea457b4f703b3b1e4ab83a9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>y3</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a9a9c20dc521760439b8d981927ed046b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>z3</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a5d3327d064b8d1cb8c5971e1ccbba1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>nx</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a4e3a7cd8f3aacbc2f843649250fe0692</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ny</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a39b762f068c0ae14779f379e62f463e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>nz</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>ae3c4dcd92bebef29704d024e04b8011c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>R</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a6d7382f7f8da5ac9c6c615a0a0a15b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>G</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>ad9ab8eb87017ffba64ffbc4c5a94ce4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>B</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a88b107f9c5e672ab49bc8102e55ac698</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>T</name>
      <anchorfile>structDGtal_1_1Display3D_1_1triangleD3D.html</anchorfile>
      <anchor>a19e3eefd1bff7e65953b6f63f8b0653d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Display3D::voxelD3D</name>
    <filename>structDGtal_1_1Display3D_1_1voxelD3D.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>structDGtal_1_1Display3D_1_1voxelD3D.html</anchorfile>
      <anchor>a5a9169593f71c16102aa8b13013d83ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>structDGtal_1_1Display3D_1_1voxelD3D.html</anchorfile>
      <anchor>a8a7380b58d70a0249bb12a2c98bd53df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>z</name>
      <anchorfile>structDGtal_1_1Display3D_1_1voxelD3D.html</anchorfile>
      <anchor>a51159aad948f7698e7507af521d8af2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>R</name>
      <anchorfile>structDGtal_1_1Display3D_1_1voxelD3D.html</anchorfile>
      <anchor>af0af73cd557e222633f6c6f4532643a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>G</name>
      <anchorfile>structDGtal_1_1Display3D_1_1voxelD3D.html</anchorfile>
      <anchor>ac2d0c01c27af66ec827859ef5b1284b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>B</name>
      <anchorfile>structDGtal_1_1Display3D_1_1voxelD3D.html</anchorfile>
      <anchor>ad0c665a2f5c35cb70e88f90395c1f05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>T</name>
      <anchorfile>structDGtal_1_1Display3D_1_1voxelD3D.html</anchorfile>
      <anchor>a8acc4635f9e77cd47385a348be0f2e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>width</name>
      <anchorfile>structDGtal_1_1Display3D_1_1voxelD3D.html</anchorfile>
      <anchor>a94e25a8b6ea8bd7e1cf06f7d6d748e5d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Display3DFactory</name>
    <filename>structDGtal_1_1Display3DFactory.html</filename>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ae3d54c99ac6113bbe2b55d36bbb054fb</anchor>
      <arglist>(Display3D &amp;display, const DGtal::SphericalAccumulator&lt; TV &gt; &amp;aAccumulator, const typename DGtal::SphericalAccumulator&lt; TV &gt;::RealVector &amp;shift, const double radius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ab4f59df67cd6d54e16d94e9dcc2fae1a</anchor>
      <arglist>(Display3D &amp;display, const DGtal::SphericalAccumulator&lt; TVector &gt; &amp;accumulator, const typename DGtal::SphericalAccumulator&lt; TVector &gt;::RealVector &amp;shift=typename DGtal::SphericalAccumulator&lt; TVector &gt;::RealVector(0, 0, 0), const double radius=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsFaces</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a3d45174e515a740ad416f795acf90d2b</anchor>
      <arglist>(Display3D &amp;display, const DGtal::MeshFromPoints&lt; TPoint &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a8b7b21f8caaf1dea288ae051f4bbcf58</anchor>
      <arglist>(Display3D &amp;display, const DGtal::MeshFromPoints&lt; TPoint &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::DrawableWithDisplay3D *</type>
      <name>defaultStyle</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a16336028f7d0491a18a8ba8f07489e00</anchor>
      <arglist>(std::string, const DGtal::ArithmeticalDSS3d&lt; TIterator, TInteger, connectivity &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPoints</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a60333c606a19f0eede7610da38754fb1</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ArithmeticalDSS3d&lt; TIterator, TInteger, connectivity &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsBoundingBox</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ad1ebd72d2d6929739a756c370652b7f3</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ArithmeticalDSS3d&lt; TIterator, TInteger, connectivity &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>aa55063868c8dfd3f9a0d2a59ad36899c</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ArithmeticalDSS3d&lt; TIterator, TInteger, connectivity &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::DrawableWithDisplay3D *</type>
      <name>defaultStyle</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ae77b6f68a684e50d2372ba29a462c449</anchor>
      <arglist>(std::string, const DGtal::DigitalSetBySTLSet&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPavingTransparent</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a5f3f7a7579c31839bd377ff708cdc119</anchor>
      <arglist>(Display3D &amp;display, const DGtal::DigitalSetBySTLSet&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPaving</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a28d73b2c0ad0aedc4dbd1fef0237d88c</anchor>
      <arglist>(Display3D &amp;display, const DGtal::DigitalSetBySTLSet&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsGrid</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>aa6906dee8d30e3b185f0d08e91d937eb</anchor>
      <arglist>(Display3D &amp;display, const DGtal::DigitalSetBySTLSet&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ac743c0080ec7647ebf2cfd6ffd800ea1</anchor>
      <arglist>(Display3D &amp;display, const DGtal::DigitalSetBySTLSet&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::DrawableWithDisplay3D *</type>
      <name>defaultStyle</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ac950fb1b921a5dc9d891f2093ea18f0e</anchor>
      <arglist>(std::string, const DGtal::DigitalSetBySTLVector&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPavingTransparent</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a4f7cbf84438ba5a7b797b136a3f19fca</anchor>
      <arglist>(Display3D &amp;display, const DGtal::DigitalSetBySTLVector&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPaving</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a695081ed2b7d5c21d6271ded4ee8c6d1</anchor>
      <arglist>(Display3D &amp;display, const DGtal::DigitalSetBySTLVector&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsGrid</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a0f9eb22b6d3acbde7d8757c010530b0e</anchor>
      <arglist>(Display3D &amp;display, const DGtal::DigitalSetBySTLVector&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a2411393d1a47d78d9672873386fc02aa</anchor>
      <arglist>(Display3D &amp;display, const DGtal::DigitalSetBySTLVector&lt; Domain &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::DrawableWithDisplay3D *</type>
      <name>defaultStyle</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>aeb126b1369df3c6dc8bd9d88b9ade2e9</anchor>
      <arglist>(std::string, const DGtal::HyperRectDomain&lt; TSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsBoundingBox</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>adeaa9f86221158e444507c87e7c90fad</anchor>
      <arglist>(Display3D &amp;display, const DGtal::HyperRectDomain&lt; TSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsGrid</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>aede57f9e035593c9d324d10f40669853</anchor>
      <arglist>(Display3D &amp;display, const DGtal::HyperRectDomain&lt; TSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPavingPoints</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>adf527bee8b66d236c1005ba4c3b1762c</anchor>
      <arglist>(Display3D &amp;display, const DGtal::HyperRectDomain&lt; TSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPaving</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ad5682e7b272c00907cab2590be705842</anchor>
      <arglist>(Display3D &amp;display, const DGtal::HyperRectDomain&lt; TSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a052f4db57ef934c4a55596a33f49b506</anchor>
      <arglist>(Display3D &amp;display, const DGtal::HyperRectDomain&lt; TSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::DrawableWithDisplay3D *</type>
      <name>defaultStyle</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a0476efc23f8653504a89c6b4e04b5ec5</anchor>
      <arglist>(std::string, const DGtal::KhalimskyCell&lt; dim, TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ae68ae3669b5ec33c3294fcfebc5ceb25</anchor>
      <arglist>(Display3D &amp;display, const DGtal::KhalimskyCell&lt; dim, TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::DrawableWithDisplay3D *</type>
      <name>defaultStyle</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a7ec4df63ebbb031b3a31bc395375d17a</anchor>
      <arglist>(std::string, const DGtal::Object&lt; TDigitalTopology, TDigitalSet &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawWithAdjacencies</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a074981d91729a80822a3265efa65dc52</anchor>
      <arglist>(Display3D &amp;display, const DGtal::Object&lt; TDigitalTopology, TDigitalSet &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a3986f1887ceb3c0596e26456ba3221c4</anchor>
      <arglist>(Display3D &amp;display, const DGtal::Object&lt; TDigitalTopology, TDigitalSet &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::DrawableWithDisplay3D *</type>
      <name>defaultStyle</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a4e294cdffed8f4604eb68fa580c54699</anchor>
      <arglist>(std::string, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsGrid</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a03ae017321700169b7f6cdd386f6ca2a</anchor>
      <arglist>(Display3D &amp;display, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPaving</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a8695b37133bc01c8823972a2f9f23a87</anchor>
      <arglist>(Display3D &amp;display, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>drawAsPavingWired</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ac17a1a73f038584ba082bc618110f8ca</anchor>
      <arglist>(Display3D &amp;display, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a2fed7c58791295db56d0cdce11c4b541</anchor>
      <arglist>(Display3D &amp;display, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a7d5ff376b393ba8b7610896d48f7fc62</anchor>
      <arglist>(Display3D &amp;display, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;, const DGtal::PointVector&lt; dim, TComponent &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::DrawableWithDisplay3D *</type>
      <name>defaultStyle</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a9239f3aac9677220eca4303c2110edf3</anchor>
      <arglist>(std::string, const DGtal::SignedKhalimskyCell&lt; dim, TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a3ba0957ade6716d25b54560df532e313</anchor>
      <arglist>(Display3D &amp;display, const DGtal::SignedKhalimskyCell&lt; dim, TInteger &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a3d527450a5de95264d49c61b838660a0</anchor>
      <arglist>(Display3D &amp;display, const DGtal::GridCurve&lt; TKSpace &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a08eefd077fc2a20bf2dd08d55eb7b89b</anchor>
      <arglist>(DGtal::Display3D &amp;display, const DGtal::ConstRangeAdapter&lt; TIterator, DGtal::DefaultFunctor, TSCell &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ac58907da457da11393431a93745ea617</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ConstRangeAdapter&lt; TIterator, SCellToPoint&lt; TKSpace &gt;, typename TKSpace::Point &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a5b30fb70c9c29831e764f670f8ed2112</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ConstRangeAdapter&lt; TIterator, SCellToMidPoint&lt; TKSpace &gt;, typename TKSpace::Space::RealPoint &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>adcb80b4be1b31273e40b6225494d6c80</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ConstRangeAdapter&lt; TIterator, SCellToArrow&lt; TKSpace &gt;, std::pair&lt; typename TKSpace::Point, typename TKSpace::Vector &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a539fd6b0a29ac908d7a8f45836ba4b9a</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ConstRangeAdapter&lt; TIterator, SCellToInnerPoint&lt; TKSpace &gt;, typename TKSpace::Point &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a945419470fa08831c33ecd389919fa4d</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ConstRangeAdapter&lt; TIterator, SCellToOuterPoint&lt; TKSpace &gt;, typename TKSpace::Point &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a5b44879aa309f75ebc074cc33363c425</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ConstRangeAdapter&lt; TIterator, SCellToIncidentPoints&lt; TKSpace &gt;, std::pair&lt; typename TKSpace::Point, typename TKSpace::Point &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a77af54ce7c768231d1f3659a02eff35b</anchor>
      <arglist>(Display3D &amp;display, const DGtal::SetMode3D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>af88f1141b582bd56b2c3e010351b036e</anchor>
      <arglist>(Display3D &amp;display, const DGtal::CustomStyle3D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a62079fbcfc7a05244824764e76ccaf04</anchor>
      <arglist>(Display3D &amp;display, const DGtal::CustomColors3D &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a62e1f164c97a74dd8281ba3495c8e62b</anchor>
      <arglist>(Display3D &amp;display, const DGtal::ClippingPlane &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a71e940abf671ddae237ff0848fb15c40</anchor>
      <arglist>(Display3D &amp;display, const DGtal::CameraPosition &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>ad7043f7f7600d9989b30c2aae19f68cd</anchor>
      <arglist>(Display3D &amp;display, const DGtal::CameraDirection &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a9639ed79d2bd484867a8303158ba1f4f</anchor>
      <arglist>(Display3D &amp;display, const DGtal::CameraUpVector &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>a2653dbfacad39dff6c8112dbe72572ef</anchor>
      <arglist>(Display3D &amp;display, const DGtal::CameraZNearFar &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Display3DFactory.html</anchorfile>
      <anchor>addcafdc95c6b1fdd45d81d192970c3a5</anchor>
      <arglist>(Display3D &amp;display, const DGtal::TransformedKSSurfel &amp;aTransformedKSSurfel)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DrawWithDisplay3DModifier</name>
    <filename>structDGtal_1_1DrawWithDisplay3DModifier.html</filename>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithDisplay3DModifier.html</anchorfile>
      <anchor>aa7fd85a26b1a982efdc2a859057433c2</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SetMode3D</name>
    <filename>structDGtal_1_1SetMode3D.html</filename>
    <base>DGtal::DrawWithDisplay3DModifier</base>
    <member kind="function">
      <type></type>
      <name>SetMode3D</name>
      <anchorfile>structDGtal_1_1SetMode3D.html</anchorfile>
      <anchor>aedc9b598769078bbd2d658d5d146ad7d</anchor>
      <arglist>(std::string classname, std::string mode)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithDisplay3DModifier.html</anchorfile>
      <anchor>aa7fd85a26b1a982efdc2a859057433c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myClassname</name>
      <anchorfile>structDGtal_1_1SetMode3D.html</anchorfile>
      <anchor>a0ccb6cacf82ac3f88c3ad1bd17f52f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myMode</name>
      <anchorfile>structDGtal_1_1SetMode3D.html</anchorfile>
      <anchor>a7a79247eb40a74e859c67a216f86bb9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CustomStyle3D</name>
    <filename>structDGtal_1_1CustomStyle3D.html</filename>
    <base>DGtal::DrawWithDisplay3DModifier</base>
    <member kind="function">
      <type></type>
      <name>CustomStyle3D</name>
      <anchorfile>structDGtal_1_1CustomStyle3D.html</anchorfile>
      <anchor>a819f99f1be1e0a48aa4bff1ab021f2fe</anchor>
      <arglist>(std::string classname, DrawableWithDisplay3D *style)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1CustomStyle3D.html</anchorfile>
      <anchor>aa531d7bce5a65c0baad9c380e245aba1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>myClassname</name>
      <anchorfile>structDGtal_1_1CustomStyle3D.html</anchorfile>
      <anchor>a9ce81ad9c28b5ea8e1bd48a7cf45b717</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CountedPtr&lt; DrawableWithDisplay3D &gt;</type>
      <name>myStyle</name>
      <anchorfile>structDGtal_1_1CustomStyle3D.html</anchorfile>
      <anchor>aa8011ba22a191c25ce039a7923cebb9a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CustomColors3D</name>
    <filename>structDGtal_1_1CustomColors3D.html</filename>
    <base>DGtal::DrawWithDisplay3DModifier</base>
    <member kind="function">
      <type></type>
      <name>CustomColors3D</name>
      <anchorfile>structDGtal_1_1CustomColors3D.html</anchorfile>
      <anchor>acf174cea91303eb21f57d2a5efe5ea25</anchor>
      <arglist>(const Color &amp;penColor, const Color &amp;fillColor)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithDisplay3DModifier.html</anchorfile>
      <anchor>aa7fd85a26b1a982efdc2a859057433c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myPenColor</name>
      <anchorfile>structDGtal_1_1CustomColors3D.html</anchorfile>
      <anchor>a650d122a4ba31a5c822adfe5c14218ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Color</type>
      <name>myFillColor</name>
      <anchorfile>structDGtal_1_1CustomColors3D.html</anchorfile>
      <anchor>a0660403b2f03c5b3823e66f2e1f06a27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ClippingPlane</name>
    <filename>structDGtal_1_1ClippingPlane.html</filename>
    <base>DGtal::DrawWithDisplay3DModifier</base>
    <member kind="function">
      <type></type>
      <name>ClippingPlane</name>
      <anchorfile>structDGtal_1_1ClippingPlane.html</anchorfile>
      <anchor>a9c1ac70c90fbc3a46e84896bccfbff73</anchor>
      <arglist>(double a, double b, double c, double d, bool drawPlane=true)</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getEquation</name>
      <anchorfile>structDGtal_1_1ClippingPlane.html</anchorfile>
      <anchor>ad1deb59d16a9ff046629cf1f92807739</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithDisplay3DModifier.html</anchorfile>
      <anchor>aa7fd85a26b1a982efdc2a859057433c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myA</name>
      <anchorfile>structDGtal_1_1ClippingPlane.html</anchorfile>
      <anchor>acca3979061d0b03e298987fed5f9db6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1ClippingPlane.html</anchorfile>
      <anchor>a4c7eaa3ae14f18b36e8effcbd82d827b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myC</name>
      <anchorfile>structDGtal_1_1ClippingPlane.html</anchorfile>
      <anchor>af37d652886f3bfdcce059a06b116d346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myD</name>
      <anchorfile>structDGtal_1_1ClippingPlane.html</anchorfile>
      <anchor>ac23ea93c74ba839c4a7f3cf1c0579875</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myDrawPlane</name>
      <anchorfile>structDGtal_1_1ClippingPlane.html</anchorfile>
      <anchor>acf3da2a5174b2467afe65fa820c7371a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CameraPosition</name>
    <filename>structDGtal_1_1CameraPosition.html</filename>
    <base>DGtal::DrawWithDisplay3DModifier</base>
    <member kind="function">
      <type></type>
      <name>CameraPosition</name>
      <anchorfile>structDGtal_1_1CameraPosition.html</anchorfile>
      <anchor>a7b01517ecf26718aa93c008f2f8071dc</anchor>
      <arglist>(const double x, const double y, const double z)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithDisplay3DModifier.html</anchorfile>
      <anchor>aa7fd85a26b1a982efdc2a859057433c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eyex</name>
      <anchorfile>structDGtal_1_1CameraPosition.html</anchorfile>
      <anchor>a90673da75efad1797a085dec4cb5d7bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eyey</name>
      <anchorfile>structDGtal_1_1CameraPosition.html</anchorfile>
      <anchor>a34f376d32f4da4c734026b2ac84e776b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>eyez</name>
      <anchorfile>structDGtal_1_1CameraPosition.html</anchorfile>
      <anchor>a8d0e0b0130e9a88fe4814ba404d468fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CameraDirection</name>
    <filename>structDGtal_1_1CameraDirection.html</filename>
    <base>DGtal::DrawWithDisplay3DModifier</base>
    <member kind="function">
      <type></type>
      <name>CameraDirection</name>
      <anchorfile>structDGtal_1_1CameraDirection.html</anchorfile>
      <anchor>a0cb54d513942f37de2f775b261f9e319</anchor>
      <arglist>(const double x, const double y, const double z)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithDisplay3DModifier.html</anchorfile>
      <anchor>aa7fd85a26b1a982efdc2a859057433c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dirx</name>
      <anchorfile>structDGtal_1_1CameraDirection.html</anchorfile>
      <anchor>ac4293307d8e6f2041d721fd6d71d8ba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>diry</name>
      <anchorfile>structDGtal_1_1CameraDirection.html</anchorfile>
      <anchor>a059d219a8ce5382b15da1f733b1a5dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dirz</name>
      <anchorfile>structDGtal_1_1CameraDirection.html</anchorfile>
      <anchor>af19dfd66f2040bc634309f9f5b949c5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CameraUpVector</name>
    <filename>structDGtal_1_1CameraUpVector.html</filename>
    <base>DGtal::DrawWithDisplay3DModifier</base>
    <member kind="function">
      <type></type>
      <name>CameraUpVector</name>
      <anchorfile>structDGtal_1_1CameraUpVector.html</anchorfile>
      <anchor>afcb2f64a0eae62fcdab0b0bb1909cabd</anchor>
      <arglist>(const double x, const double y, const double z)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithDisplay3DModifier.html</anchorfile>
      <anchor>aa7fd85a26b1a982efdc2a859057433c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>upx</name>
      <anchorfile>structDGtal_1_1CameraUpVector.html</anchorfile>
      <anchor>aa2945f21822eb0bda17278908acf91a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>upy</name>
      <anchorfile>structDGtal_1_1CameraUpVector.html</anchorfile>
      <anchor>af9da32a35d7ad6cd48c064f7554ff629</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>upz</name>
      <anchorfile>structDGtal_1_1CameraUpVector.html</anchorfile>
      <anchor>a100ac7548ecccbbb44ca640a331d9bb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CameraZNearFar</name>
    <filename>structDGtal_1_1CameraZNearFar.html</filename>
    <base>DGtal::DrawWithDisplay3DModifier</base>
    <member kind="function">
      <type></type>
      <name>CameraZNearFar</name>
      <anchorfile>structDGtal_1_1CameraZNearFar.html</anchorfile>
      <anchor>aa2a3b4ceeb456cc5068fd25fe7d8ed6a</anchor>
      <arglist>(const double _near, const double _far)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithDisplay3DModifier.html</anchorfile>
      <anchor>aa7fd85a26b1a982efdc2a859057433c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ZNear</name>
      <anchorfile>structDGtal_1_1CameraZNearFar.html</anchorfile>
      <anchor>ac064d965377de0c9f8b0457e330c1165</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>ZFar</name>
      <anchorfile>structDGtal_1_1CameraZNearFar.html</anchorfile>
      <anchor>a55aba9e68bbdbdee51538b8d6f5882cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::TransformedKSSurfel</name>
    <filename>structDGtal_1_1TransformedKSSurfel.html</filename>
    <base>DGtal::DrawWithDisplay3DModifier</base>
    <member kind="function">
      <type></type>
      <name>TransformedKSSurfel</name>
      <anchorfile>structDGtal_1_1TransformedKSSurfel.html</anchorfile>
      <anchor>a7bfc1350b9e180db49149f8c3703ba8b</anchor>
      <arglist>(const DGtal::Z3i::SCell &amp;aSurfel, double aShift, double aSizeFactor=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformedKSSurfel</name>
      <anchorfile>structDGtal_1_1TransformedKSSurfel.html</anchorfile>
      <anchor>a3e0b80213f3c51654710cdd4a8b0a343</anchor>
      <arglist>(const DGtal::Z3i::SCell &amp;aSurfel, const DGtal::Z3i::SCell &amp;aVoxel, double aShift=0.05, double aSizeFactor=0.75)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1DrawWithDisplay3DModifier.html</anchorfile>
      <anchor>aa7fd85a26b1a982efdc2a859057433c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>DGtal::Z3i::SCell</type>
      <name>mySurfel</name>
      <anchorfile>structDGtal_1_1TransformedKSSurfel.html</anchorfile>
      <anchor>a570f0ed6fa591fd93cb63f13c12ace90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myShift</name>
      <anchorfile>structDGtal_1_1TransformedKSSurfel.html</anchorfile>
      <anchor>ad37a25485f7bc248c7dd3af533351c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mySizeFactor</name>
      <anchorfile>structDGtal_1_1TransformedKSSurfel.html</anchorfile>
      <anchor>ae9b246833f7b3cc04f8f83fc58560064</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LongvolReader</name>
    <filename>structDGtal_1_1LongvolReader.html</filename>
    <templarg></templarg>
    <class kind="struct">DGtal::LongvolReader::HeaderField</class>
    <member kind="typedef">
      <type>TImageContainer</type>
      <name>ImageContainer</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>a6828c8072289ea0f1f65f0761a7f9310</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>a004eb609c0f8b7437496b53fabcc93e1</anchor>
      <arglist>(ImageContainer::Domain::dimension==3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageContainer</type>
      <name>importLongvol</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>ac2f87b390e964aa999e070e5a09a28ab</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>unsigned char</type>
      <name>voxel</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>a98e98c65654040d418704465a4efc60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static FILE *</type>
      <name>read_word</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>a5a7e2a4f84241ac3ecfb1e55407ceaa1</anchor>
      <arglist>(FILE *fin, Word &amp;aValue)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static const char *</type>
      <name>getHeaderValue</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>a7ada71b2f83e752c95d347d93e85d706</anchor>
      <arglist>(const char *type, const HeaderField *header)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>getHeaderValueAsInt</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>aec50ae460c96297157ddfa3f002debd9</anchor>
      <arglist>(const char *type, int *dest, const HeaderField *header)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>getHeaderField</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>a7e0e960f39d8af5e78102262d217f889</anchor>
      <arglist>(const char *type, const HeaderField *header)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>MAX_HEADERNUMLINES</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>ab18867ab72e32533873a3d35f789bdf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const char *</type>
      <name>requiredHeaders</name>
      <anchorfile>structDGtal_1_1LongvolReader.html</anchorfile>
      <anchor>a8c999d573ce99812d409c0ae9b2c259c</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LongvolReader::HeaderField</name>
    <filename>structDGtal_1_1LongvolReader_1_1HeaderField.html</filename>
    <member kind="function">
      <type></type>
      <name>HeaderField</name>
      <anchorfile>structDGtal_1_1LongvolReader_1_1HeaderField.html</anchorfile>
      <anchor>a6b993bee376c57f003b1b58ec40f7683</anchor>
      <arglist>(const char *t, const char *v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HeaderField</name>
      <anchorfile>structDGtal_1_1LongvolReader_1_1HeaderField.html</anchorfile>
      <anchor>ad4ae119df972ebf73628e79562bf2c85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeaderField</name>
      <anchorfile>structDGtal_1_1LongvolReader_1_1HeaderField.html</anchorfile>
      <anchor>a106ae857e4c96ba70180174a47e8a884</anchor>
      <arglist>(const HeaderField &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeaderField</name>
      <anchorfile>structDGtal_1_1LongvolReader_1_1HeaderField.html</anchorfile>
      <anchor>acba61c29dfdf17e341a84d80108689a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const HeaderField &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1LongvolReader_1_1HeaderField.html</anchorfile>
      <anchor>a192b6788e3b5b50bb9cb0ec4e3d33f63</anchor>
      <arglist>(const HeaderField &amp;h)</arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>type</name>
      <anchorfile>structDGtal_1_1LongvolReader_1_1HeaderField.html</anchorfile>
      <anchor>a73ab362e5ad5a17e876bb0653aac7bee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1LongvolReader_1_1HeaderField.html</anchorfile>
      <anchor>a1c9d72a393b6af1e2e8aa8ae5378d010</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MagickReader</name>
    <filename>structDGtal_1_1MagickReader.html</filename>
    <templarg>TImageContainer</templarg>
    <member kind="typedef">
      <type>TImageContainer</type>
      <name>ImageContainer</name>
      <anchorfile>structDGtal_1_1MagickReader.html</anchorfile>
      <anchor>a779253fcc2f4080fa91213118e4c895a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer::Domain::Vector</type>
      <name>Vector</name>
      <anchorfile>structDGtal_1_1MagickReader.html</anchorfile>
      <anchor>a65fccb807418bf740db9e9fbd84f981a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1MagickReader.html</anchorfile>
      <anchor>ab0279fd408a964e180de58dda1a88857</anchor>
      <arglist>((ImageContainer::Domain::dimension==2))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageContainer</type>
      <name>importImage</name>
      <anchorfile>structDGtal_1_1MagickReader.html</anchorfile>
      <anchor>a648ee891eb7b91868fc64841fb5ec26f</anchor>
      <arglist>(const std::string &amp;filename, bool topbotomOrder=true)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MeshReader</name>
    <filename>structDGtal_1_1MeshReader.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>importOFFFile</name>
      <anchorfile>structDGtal_1_1MeshReader.html</anchorfile>
      <anchor>a49fbd6686c17e7f37ab34a84a67eb583</anchor>
      <arglist>(const std::string &amp;filename, DGtal::MeshFromPoints&lt; TPoint &gt; &amp;aMesh, bool invertVertexOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>importOFSFile</name>
      <anchorfile>structDGtal_1_1MeshReader.html</anchorfile>
      <anchor>a7341a7b965c1d7ec7d8243501d367dd9</anchor>
      <arglist>(const std::string &amp;filename, DGtal::MeshFromPoints&lt; TPoint &gt; &amp;aMesh, bool invertVertexOrder=false, double scale=1.0)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::PNMReader</name>
    <filename>structDGtal_1_1PNMReader.html</filename>
    <templarg></templarg>
    <member kind="enumeration">
      <name>MagicNumber</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>a90e47add579fc904313190981f673567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>P1</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>a90e47add579fc904313190981f673567aeb19617af3550cb18e1e09733983c90f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>P2</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>a90e47add579fc904313190981f673567a9eca3712aeba322423fd68a1bab03b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>P3</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>a90e47add579fc904313190981f673567a4903dffe50b02f04e34d9bd43c4787dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>P4</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>a90e47add579fc904313190981f673567ab35db0dce30deda96a790b4b0cf54720</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>P5</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>a90e47add579fc904313190981f673567a8720c1d9572d2e37c279d348482359ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>P6</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>a90e47add579fc904313190981f673567acd83f147e7aff645501e542706ff241b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer</type>
      <name>ImageContainer</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>a61cf681e472e6dcd51c5f51978b84205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer::Domain::Vector</type>
      <name>Vector</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>ac57cf0095ba83b8af6c05de83d4f6b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>ad804d188e966326edcff4bcabe1e8756</anchor>
      <arglist>((ImageContainer::Domain::dimension==2)||(ImageContainer::Domain::dimension==3))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageContainer</type>
      <name>importPGM</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>a2e0019d1a860dc244b4af3a62db0a46a</anchor>
      <arglist>(const std::string &amp;aFilename, bool topbotomOrder=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageContainer</type>
      <name>importPGM3D</name>
      <anchorfile>structDGtal_1_1PNMReader.html</anchorfile>
      <anchor>abd913da8eed271a0d6b86e461f460c64</anchor>
      <arglist>(const std::string &amp;aFilename)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::PointListReader</name>
    <filename>structDGtal_1_1PointListReader.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::vector&lt; TPoint &gt;</type>
      <name>getPointsFromInputStream</name>
      <anchorfile>structDGtal_1_1PointListReader.html</anchorfile>
      <anchor>aa48de0cc3f2e1384413f0f66c7fa6211</anchor>
      <arglist>(std::istream &amp;in, std::vector&lt; unsigned int &gt; aVectPosition=std::vector&lt; unsigned int &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; TPoint &gt;</type>
      <name>getPointsFromFile</name>
      <anchorfile>structDGtal_1_1PointListReader.html</anchorfile>
      <anchor>a1485fb8e0e448eb540fe33755d5d1074</anchor>
      <arglist>(const std::string &amp;filename, std::vector&lt; unsigned int &gt; aVectPosition=std::vector&lt; unsigned int &gt;())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::vector&lt; TPoint &gt; &gt;</type>
      <name>getPolygonsFromFile</name>
      <anchorfile>structDGtal_1_1PointListReader.html</anchorfile>
      <anchor>a1fcb7d4e0d8fa856c126b72e80f3ba9c</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::vector&lt; TPoint &gt; &gt;</type>
      <name>getPolygonsFromInputStream</name>
      <anchorfile>structDGtal_1_1PointListReader.html</anchorfile>
      <anchor>a4fd7d12733af74f5ff49152e6ab736a9</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; FreemanChain&lt; TInteger &gt; &gt;</type>
      <name>getFreemanChainsFromFile</name>
      <anchorfile>structDGtal_1_1PointListReader.html</anchorfile>
      <anchor>aaaac3eafe417b51aad96f07240965180</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::RawReader</name>
    <filename>structDGtal_1_1RawReader.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImageContainer</type>
      <name>ImageContainer</name>
      <anchorfile>structDGtal_1_1RawReader.html</anchorfile>
      <anchor>a40d1a66af9c971de7482d9fa30c06a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImageContainer::Domain::Vector</type>
      <name>Vector</name>
      <anchorfile>structDGtal_1_1RawReader.html</anchorfile>
      <anchor>a9f0c1b0fe21439c55447fd8d50ca5c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1RawReader.html</anchorfile>
      <anchor>aa61af6694116caa016f9246382cfc207</anchor>
      <arglist>((ImageContainer::Domain::dimension==2)||(ImageContainer::Domain::dimension==3))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageContainer</type>
      <name>importRaw8</name>
      <anchorfile>structDGtal_1_1RawReader.html</anchorfile>
      <anchor>ad4b5fad22eb8f6c8a15e0ee58b7232e4</anchor>
      <arglist>(const std::string &amp;filename, const Vector &amp;extent)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::VolReader</name>
    <filename>structDGtal_1_1VolReader.html</filename>
    <templarg></templarg>
    <class kind="struct">DGtal::VolReader::HeaderField</class>
    <member kind="typedef">
      <type>TImageContainer</type>
      <name>ImageContainer</name>
      <anchorfile>structDGtal_1_1VolReader.html</anchorfile>
      <anchor>aa6a4f7a1bb41b24d9d52a4a7d203cdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1VolReader.html</anchorfile>
      <anchor>adeb22485a57453ab4af510ad225a120c</anchor>
      <arglist>(ImageContainer::Domain::dimension==3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ImageContainer</type>
      <name>importVol</name>
      <anchorfile>structDGtal_1_1VolReader.html</anchorfile>
      <anchor>a16e2c47eca890c3b6cb44588095e8f4b</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>unsigned char</type>
      <name>voxel</name>
      <anchorfile>structDGtal_1_1VolReader.html</anchorfile>
      <anchor>a3e0947f866e9846077b642d51a0e049a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static const char *</type>
      <name>getHeaderValue</name>
      <anchorfile>structDGtal_1_1VolReader.html</anchorfile>
      <anchor>ac2ae0afbd9108c6cc4600f30a0e9289d</anchor>
      <arglist>(const char *type, const HeaderField *header)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>getHeaderValueAsInt</name>
      <anchorfile>structDGtal_1_1VolReader.html</anchorfile>
      <anchor>a5d5d52628b12140e8c94b1c09dcee952</anchor>
      <arglist>(const char *type, int *dest, const HeaderField *header)</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static int</type>
      <name>getHeaderField</name>
      <anchorfile>structDGtal_1_1VolReader.html</anchorfile>
      <anchor>a840b10415be85ee6fb99398929354022</anchor>
      <arglist>(const char *type, const HeaderField *header)</arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const int</type>
      <name>MAX_HEADERNUMLINES</name>
      <anchorfile>structDGtal_1_1VolReader.html</anchorfile>
      <anchor>a7fdb8cb5b2ab1e3a15d90e604663d96a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static const char *</type>
      <name>requiredHeaders</name>
      <anchorfile>structDGtal_1_1VolReader.html</anchorfile>
      <anchor>a8360494b0b418be7a25662f6ef061ac6</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::VolReader::HeaderField</name>
    <filename>structDGtal_1_1VolReader_1_1HeaderField.html</filename>
    <member kind="function">
      <type></type>
      <name>HeaderField</name>
      <anchorfile>structDGtal_1_1VolReader_1_1HeaderField.html</anchorfile>
      <anchor>a6c4a5f64d4ebc1f6e6d99e42175baae0</anchor>
      <arglist>(const char *t, const char *v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HeaderField</name>
      <anchorfile>structDGtal_1_1VolReader_1_1HeaderField.html</anchorfile>
      <anchor>a7f48fb9ed14da5a1480b6cc6fe34007f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeaderField</name>
      <anchorfile>structDGtal_1_1VolReader_1_1HeaderField.html</anchorfile>
      <anchor>ac24e40f93a7c75fdccccb9a63efce566</anchor>
      <arglist>(const HeaderField &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HeaderField</name>
      <anchorfile>structDGtal_1_1VolReader_1_1HeaderField.html</anchorfile>
      <anchor>a35c55dfaddef95a6ab17308fed76cd12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const HeaderField &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1VolReader_1_1HeaderField.html</anchorfile>
      <anchor>a3a55e7eafb010053e4338ccb3485f126</anchor>
      <arglist>(const HeaderField &amp;h)</arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>type</name>
      <anchorfile>structDGtal_1_1VolReader_1_1HeaderField.html</anchorfile>
      <anchor>ae6b3ba130c67cb6cb7e2d4c6fe08a7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char *</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1VolReader_1_1HeaderField.html</anchorfile>
      <anchor>af96bc76ade9e4513fa52064dc51a8842</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Style2DFactory</name>
    <filename>structDGtal_1_1Style2DFactory.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>draw</name>
      <anchorfile>structDGtal_1_1Style2DFactory.html</anchorfile>
      <anchor>af1b4bbf998656781bb2e100769f790ef</anchor>
      <arglist>(DGtal::Board2D &amp;aBoard, DGtal::DrawableWithBoard2D *style)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyleCircular_AngleLinearMinimizer</name>
    <filename>structDGtal_1_1DefaultDrawStyleCircular__AngleLinearMinimizer.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyleCircular__AngleLinearMinimizer.html</anchorfile>
      <anchor>ab1fbb049b0f68774f5b947b7ef456c04</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyleBB_ArithmeticalDSS</name>
    <filename>structDGtal_1_1DefaultDrawStyleBB__ArithmeticalDSS.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyleBB__ArithmeticalDSS.html</anchorfile>
      <anchor>afcc516473ceff0f8a287c7844e310e38</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStylePoints_ArithmeticalDSS</name>
    <filename>structDGtal_1_1DefaultDrawStylePoints__ArithmeticalDSS.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStylePoints__ArithmeticalDSS.html</anchorfile>
      <anchor>a23d88f299ab923daf1e1ada33ab5d784</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_DigitalSetBySTLSet</name>
    <filename>structDGtal_1_1DefaultDrawStyle__DigitalSetBySTLSet.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__DigitalSetBySTLSet.html</anchorfile>
      <anchor>ae55cd254fa4d1a7ec115ca9249c14c47</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_DigitalSetBySTLVector</name>
    <filename>structDGtal_1_1DefaultDrawStyle__DigitalSetBySTLVector.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__DigitalSetBySTLVector.html</anchorfile>
      <anchor>aa0981f8e94bf7e2eab6b29c0d85c4f82</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_FP</name>
    <filename>structDGtal_1_1DefaultDrawStyle__FP.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__FP.html</anchorfile>
      <anchor>a41d2437aed9452df13affdc67c7752b3</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyleGrid_FreemanChain</name>
    <filename>structDGtal_1_1DefaultDrawStyleGrid__FreemanChain.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyleGrid__FreemanChain.html</anchorfile>
      <anchor>aa3f36c7745cae5caf21b0ad09eee8c56</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyleInterGrid_FreemanChain</name>
    <filename>structDGtal_1_1DefaultDrawStyleInterGrid__FreemanChain.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyleInterGrid__FreemanChain.html</anchorfile>
      <anchor>a382aa9ea5dee204aabbcfadfa2f0c0db</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_GeometricalDSS</name>
    <filename>structDGtal_1_1DefaultDrawStyle__GeometricalDSS.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__GeometricalDSS.html</anchorfile>
      <anchor>abbe92e469ba1ca98d074e969e32b05eb</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_GeometricalDCA</name>
    <filename>structDGtal_1_1DefaultDrawStyle__GeometricalDCA.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__GeometricalDCA.html</anchorfile>
      <anchor>a1dcd32f193e1484a1ae12d5c750cd36a</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_FrechetShortcut</name>
    <filename>structDGtal_1_1DefaultDrawStyle__FrechetShortcut.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__FrechetShortcut.html</anchorfile>
      <anchor>ada93df97182103d2e4ddb9cfaa69f0d4</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStylePaving_HyperRectDomain</name>
    <filename>structDGtal_1_1DefaultDrawStylePaving__HyperRectDomain.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStylePaving__HyperRectDomain.html</anchorfile>
      <anchor>aef6c8aa935339598d9806db58a56169a</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyleGrid_HyperRectDomain</name>
    <filename>structDGtal_1_1DefaultDrawStyleGrid__HyperRectDomain.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyleGrid__HyperRectDomain.html</anchorfile>
      <anchor>a73b70801bd0ec2654640a769c3b2a3ee</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_ImageContainerByHashTree</name>
    <filename>structDGtal_1_1DefaultDrawStyle__ImageContainerByHashTree.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__ImageContainerByHashTree.html</anchorfile>
      <anchor>a222350d39849b2d93c492d38966cad67</anchor>
      <arglist>(Board2D &amp;aboard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_ImageContainerBySTLVector</name>
    <filename>structDGtal_1_1DefaultDrawStyle__ImageContainerBySTLVector.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__ImageContainerBySTLVector.html</anchorfile>
      <anchor>a989b11d7272f31e97cdf8464476253de</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_KhalimskyCell</name>
    <filename>structDGtal_1_1DefaultDrawStyle__KhalimskyCell.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__KhalimskyCell.html</anchorfile>
      <anchor>adf72b4ff7e6606e711bb38bd5eae5402</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_Object</name>
    <filename>structDGtal_1_1DefaultDrawStyle__Object.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__Object.html</anchorfile>
      <anchor>a01bc0796db873ffd0faba4c21534a164</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStylePaving_PointVector</name>
    <filename>structDGtal_1_1DefaultDrawStylePaving__PointVector.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStylePaving__PointVector.html</anchorfile>
      <anchor>a095ddde127b39cce18e7f2118f0e0765</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyleGrid_PointVector</name>
    <filename>structDGtal_1_1DefaultDrawStyleGrid__PointVector.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyleGrid__PointVector.html</anchorfile>
      <anchor>ac7bc9b73ddd904b18f815a57a6221ed5</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyle_SignedKhalimskyCell</name>
    <filename>structDGtal_1_1DefaultDrawStyle__SignedKhalimskyCell.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyle__SignedKhalimskyCell.html</anchorfile>
      <anchor>ab334dd68e31676a2d0d6da0a2698ba9c</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyleFilled_LatticePolytope2D</name>
    <filename>structDGtal_1_1DefaultDrawStyleFilled__LatticePolytope2D.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyleFilled__LatticePolytope2D.html</anchorfile>
      <anchor>a5f0ec7f0abe0a774d13ca95eb2503f75</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DefaultDrawStyleTransparent_LatticePolytope2D</name>
    <filename>structDGtal_1_1DefaultDrawStyleTransparent__LatticePolytope2D.html</filename>
    <base>DGtal::DrawableWithBoard2D</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStyle</name>
      <anchorfile>structDGtal_1_1DefaultDrawStyleTransparent__LatticePolytope2D.html</anchorfile>
      <anchor>a845ad2eb7b9babd62d0625800b343761</anchor>
      <arglist>(Board2D &amp;aBoard) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DGtalInventor</name>
    <filename>classDGtal_1_1DGtalInventor.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a9b6b71bd6aebcc37686a99b6ba24b4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a778780e552e7f0cda957c961fc80e928</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a5f87617f860170b85233859a35aa9cc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a030052b2214910d76b73f6a1d4770a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>ModeMapping</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a819384c56a5b9a969db084cda597c375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SbVec3f</type>
      <name>Vec3f</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a293bf7fe68692bde917767ccf38f87ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vec3f</type>
      <name>Color</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>ae82fecda9c41a5437603443089ca4838</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Point, bool &gt;</type>
      <name>CellSet</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a62e0c3a50573620a5f847e04c06a747e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Point, Vec3f &gt;</type>
      <name>ColorMapping</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>adfc7ba90d7e53f45b5ca4c425781a8f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Point, Color &gt;</type>
      <name>NormalMapping</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a83a8e030ed0eae5d0515b605f8db6f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DGtalInventor</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a17b6fe55e824c159ac59f31e6b1e2b75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGtalInventor</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a8a8038170ec55bd9754d0c3c01f10aab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLattice</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a3c5681e8416051cd88da708d993c874a</anchor>
      <arglist>(const Lattice&lt; Space &gt; &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a189d48c9ad1922ae8bb46908b9852646</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getMode</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>aac1fbd9a28844ab3b930e2bc68898058</anchor>
      <arglist>(const std::string &amp;objectName) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiffuseColor</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a1a315acc622aec1f7d429a006ceaf1b2</anchor>
      <arglist>(const float *color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiffuseColor</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a5016671a37a003911abfbfe02a891237</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawCell</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>aad90aeb0b2a45fb44d3f8e6948494f99</anchor>
      <arglist>(const Point &amp;c, bool orient, const float *n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>drawPoint</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>ab45f9b452a7299c99f1a4df0e9669dff</anchor>
      <arglist>(const Point &amp;c, const float *n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>generate</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a100725dfb9429e4e4420dee1c02cad6c</anchor>
      <arglist>(SoGroup *result) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>aacee2b08e8955e7c2a658dbb1379c857</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>ade3b29069127276f62daa8e68abc2ab9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a31ac388aee68af305fdf8435e394077a</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DGtalInventor</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>aec1748cca32ee0e6cf37b9279114c3e2</anchor>
      <arglist>(const DGtalInventor &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DGtalInventor &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>acbac265c7442a6c99586be249bbc45dd</anchor>
      <arglist>(const DGtalInventor &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Lattice&lt; Space &gt;</type>
      <name>myLattice</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a92f43385bfd4b092871a1a7f8a95f74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ModeMapping</type>
      <name>myModes</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a5e8a8fe4be4122db855a197c65a4bcf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Color</type>
      <name>myDiffuseColor</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a957286b51510e189669dc4c1a9034ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CellSet</type>
      <name>myCells</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>ab771338a00f1062a7a6fbad7550d914c</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ColorMapping</type>
      <name>myColors</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a50b539e48cd400f3baaaf61c37e82f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NormalMapping</type>
      <name>myNormals</name>
      <anchorfile>classDGtal_1_1DGtalInventor.html</anchorfile>
      <anchor>a1c00fda022f6306bd3ae1357f13e08b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IVViewer</name>
    <filename>classDGtal_1_1IVViewer.html</filename>
    <member kind="function">
      <type></type>
      <name>~IVViewer</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>a1c27e26fab0b2918830ca07b452d1cde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVViewer</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>ae436391334ff2656e1f63986f1a4b668</anchor>
      <arglist>(int argc=0, char **argv=0)</arglist>
    </member>
    <member kind="function">
      <type>SoSeparator *</type>
      <name>root</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>aba5d98878e912508cff6ecc08fd7b063</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitle</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>ab7659cdde347e022fbbab5d53ded2a98</anchor>
      <arglist>(const std::string &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCamera</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>a2237da3c3fc8d5000a1aaf79177031ec</anchor>
      <arglist>(float latitude, float longitude)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>show</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>a8c1f77f24efa7ed1e90173977e4dbe3e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>a8a0ab9a3956aed7f181f1ec8136d6da1</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>a166b6929573607e71a30dc180ef1ede5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IVViewer</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>ae9acbedc570e7d911025baeba3dc8a52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>IVViewer</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>a68aecd6ad03588db1bf81908fd2861e0</anchor>
      <arglist>(const IVViewer &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>IVViewer &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>a9b605e2708eb14edca3d75c5bf453831</anchor>
      <arglist>(const IVViewer &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QWidget *</type>
      <name>myWindow</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>ad1cb974ef84f9488c4eb3bcef7a80798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SoQtExaminerViewer *</type>
      <name>myViewer</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>adf17654f1a07a46f73151e336b6ef395</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SoSeparator *</type>
      <name>myRoot</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>a98ec5f7191ee5d96a5d7d616b616f1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::string</type>
      <name>myTitle</name>
      <anchorfile>classDGtal_1_1IVViewer.html</anchorfile>
      <anchor>a8d6b9e5ee7863f30e23e7c6eb9ac8dd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Lattice</name>
    <filename>classDGtal_1_1Lattice.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a373b24dba7340a2624356c774047a28f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a27a28557037e6628525084d0a84ce6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>aa4185dde0e16ea9519cee7c3bd701546</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a7b869c829d650e3048a6be1ca5e7aeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Lattice</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a58f8e2e3c31168353952a2da630946d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lattice</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a6c5414ac04ffd25fa36b7f31cec6734d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Lattice</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a4ef17e4d7ba8c6a5736041efed45ddbc</anchor>
      <arglist>(const Lattice&lt; Space &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Lattice&lt; Space &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a083e646ce2f33064e2fc53ab4d123036</anchor>
      <arglist>(const Lattice&lt; Space &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>aa1e95f6fae0fd0b866f430ae089d288a</anchor>
      <arglist>(Dimension aN, Dimension aM, double dh=1.0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a1132f4afabe5c728c53b5d52b62a7a3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>n</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a6ccf91241a0b4da7657564cfcbc56b5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>m</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>aa391ab265e16cfcbed7b1757d532645e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a43d536c9fd90c257813ff7953a96db2b</anchor>
      <arglist>(const double *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVector</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a7fcf477ff48a8ce45c958e1b4b7feb72</anchor>
      <arglist>(Dimension i, const double *v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>immerse</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>acf4052d088c3665daaf02607cb606a14</anchor>
      <arglist>(const Integer *p, double *x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>immerse</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>ae319687deeac0c2d62ff6428ba67c81d</anchor>
      <arglist>(const Point &amp;p, double *x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>immerse</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a53e1318f15bc70682a35c70e21f68154</anchor>
      <arglist>(const Integer *p, float *x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>immerse</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>ab9005b71cc019b37ea496f6c5ec10832</anchor>
      <arglist>(const Point &amp;p, float *x) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>aa646338be8e69aae3980e512ae06a0dc</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a33d7b965251cdc6d100a1d53ce32ad7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultZ2toZ3</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a48686e631143881989a94213a024cbe5</anchor>
      <arglist>(Lattice &amp;l, const double *x0, double dh=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultZ3toZ3</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a89a2a30bd236934aa6d0742341c43db5</anchor>
      <arglist>(Lattice &amp;l, const double *x0, double dh=1.0)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a2e661eef093393696fd4f7a09e720491</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myN</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a1d5fbf0fb64e4dbedb69fc069ec322c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myM</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a32b6184dabdcfe5918947ff59a9969c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>myX0</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>aa1901a68cbb9fcb7e5f90e9dbf5b15f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double *</type>
      <name>myV</name>
      <anchorfile>classDGtal_1_1Lattice.html</anchorfile>
      <anchor>a63b0407194c61ac3c82a5cc45d9c7992</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Viewer3D</name>
    <filename>classDGtal_1_1Viewer3D.html</filename>
    <base>DGtal::Display3D</base>
    <class kind="struct">DGtal::Viewer3D::compFarthestPolygonFromCamera</class>
    <class kind="struct">DGtal::Viewer3D::compFarthestSurfelFromCamera</class>
    <class kind="struct">DGtal::Viewer3D::compFarthestTriangleFromCamera</class>
    <class kind="struct">DGtal::Viewer3D::compFarthestVoxelFromCamera</class>
    <member kind="function">
      <type></type>
      <name>Viewer3D</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>ae2d2d0ee5a602e6f1561bad2ba0d9cc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Viewer3D &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a37f9864fa7acd366b16573d664100685</anchor>
      <arglist>(const DGtal::Color &amp;aColor)</arglist>
    </member>
    <member kind="function">
      <type>Viewer3D &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a7f1556fd34baf97b3ad237efd7e77994</anchor>
      <arglist>(const Display3D::StreamKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortSurfelFromCamera</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>aac4397327ac16934a4d3fcd73ff43c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortTriangleFromCamera</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a3b043a0a39232ec94fd0650a6b284b94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortQuadFromCamera</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a63ab648e2f69661c3f3806e20e4e0e8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sortPolygonFromCamera</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a1b386d1b402a4c94adaface6e1bfd9d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Viewer3D &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>aea219fb2b07c6a2306f09ca7c9b33651</anchor>
      <arglist>(const TDrawableWithDisplay3D &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a00876731d092d2fda51453dce92caaa3</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>ac8925f84a18d0e6398314228a67d6408</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Display3D</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a49163af2a8dbd60d78de4482d6adcaec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Display3D</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a6048774bee81fc132670fd84d315b85c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a1a99af9cef55d4df3b126f48e777ed0a</anchor>
      <arglist>(DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aac8a74be627cfcb51436516f2deaccfa</anchor>
      <arglist>(DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DGtal::Color</type>
      <name>getFillColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ac494d422a2ad5e7ebc64fbec1fb23008</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DGtal::Color</type>
      <name>getLineColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>afc484eff14cc374e279bddd4cd21b7fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addClippingPlane</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a79ab96c1d96e87235ee863229cbbcdb4</anchor>
      <arglist>(double a, double b, double c, double d, bool drawPlane)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCameraUpVector</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a05db6d198435aa34012e2f8285a53c5c</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCameraPosition</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a7f98d75adbc106d7bade2e8cab01a1d8</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNearFar</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ad15006dfefe89aacaf8d395fc5c4afca</anchor>
      <arglist>(double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCameraDirection</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a0b1c0f300116434007b7040c43f8c618</anchor>
      <arglist>(double, double, double)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getMode</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a8a8e81e1147eda600a360d797976bc5b</anchor>
      <arglist>(const std::string &amp;objectName) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createNewLineList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a5d4256d27b0e7e1d0bf9a48f782d02bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createNewPointList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a0e7cfa156859bf745ef6001d6950c226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createNewVoxelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aedbbf85fabe8d0a774ccc595ae9b6260</anchor>
      <arglist>(bool depthTest=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addQuad</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a41db9d928f61d5fe30cf2d2150872cd7</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, double x4, double y4, double z4, DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addTriangle</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a255665e1ba371d5a108c3093c920451d</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double x3, double y3, double z3, DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPolygon</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a9f05500850782107d32169ce7eba75b5</anchor>
      <arglist>(std::vector&lt; pointD3D &gt; vectPointsPolygon, DGtal::Color aColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLine</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aeba629952b22613a9e1eaf51047afdaf</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, const DGtal::Color &amp;color=DGtal::Color(20, 20, 20, 200), double width=1.5)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addVoxel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ac38d94b54b70f3af07a20acc58f8bf0c</anchor>
      <arglist>(DGtal::int64_t x, DGtal::int64_t y, DGtal::int64_t z, DGtal::Color color=DGtal::Color(220, 220, 220), double width=0.5, bool withWire=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPoint</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a2650f92c80785bcbc6539faad922cee1</anchor>
      <arglist>(double x, double y, double z, const DGtal::Color &amp;color=DGtal::Color(200, 20, 20), double size=40)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSSurfel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a7a0ecec2063fe3d83fa5b3532fa8f1b0</anchor>
      <arglist>(double x, double y, double z, bool xSurfel, bool ySurfel, bool zSurfel, double sizeShiftFactor, double positionShift=0.0, double sizeFactor=1.0, bool isSigned=false, bool aSign=true, bool basicMode=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSVoxel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a08595fe29f8150a755db591d56834b11</anchor>
      <arglist>(int x, int y, int z, double sizeFactor=0.94)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSPointel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a670c8ebc1d78206e7f1e99afee158b52</anchor>
      <arglist>(double x, double y, double z, double size=0.1, bool isSigned=false, bool aSign=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKSLinel</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a71c014ae265b24c64e82b3901dbe20a7</anchor>
      <arglist>(double x1, double y1, double z1, double x2, double y2, double z2, double width=0.02, bool isSigned=false, bool aSign=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateBoundingBox</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a4bebe5158b1bfc4a39e8fc5d912c03c0</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exportToMesh</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a747f698991704bf02ae6fb6af104095f</anchor>
      <arglist>(MeshFromPoints&lt; Display3D::pointD3D &gt; &amp;aMesh) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a4c0723e06cf1e085a6d61478dc63570b</anchor>
      <arglist>(float sx, float sy, float sz)</arglist>
    </member>
    <member kind="variable">
      <type>DGtal::Color</type>
      <name>myDefaultBackgroundColor</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a8df77462378440b569ec71102fdb73e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DGtal::Color</type>
      <name>myDefaultColor</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>af6c28fd442dcfc070282828d75bcb1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myIsBackgroundDefault</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>add948925c2d644b5047641acabe10db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myViewWire</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a7c72c6acaa5def3ab5cabb38ba2f2a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ModeMapping</type>
      <name>myModes</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>abdd404a94d7dc542f6a9a57c6a711f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StyleMapping</type>
      <name>myStyles</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>abb1c41cf20bc27b4ff1aba916cb42da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myBoundingPtEmptyTag</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>af4c3d761da9c3e039a2c27a4383bfdea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myBoundingPtUp</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ab0c9b1980d5c0d9ad383641c897fcf79</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myBoundingPtLow</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>adbd8c6afd91be668f328a2743d1a3902</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateList</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a9e0cae8c00f587f4ffdef5870e6cb1ea</anchor>
      <arglist>(bool needToUpdateBoundingBox=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>glDrawGLLinel</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a9786f571a2d639ac63b973d4a0c674b0</anchor>
      <arglist>(lineD3D aLinel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>glDrawGLPointel</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>ab84e7b7af7b7463ca82393fa14a95456</anchor>
      <arglist>(pointD3D pointel)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>keyPressEvent</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>aa0c4d4f08a31354c16160ade982fd1e6</anchor>
      <arglist>(QKeyEvent *e)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drawWithNames</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a7d2c784aea853fb3e4777f92f5e08ce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a89cbc69765745e0cb010b067678218e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a627acd967b1e40c1bd66d0bcf53f601f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual QString</type>
      <name>helpString</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a9f324f679eb6d32f9c67dfd137fbe7d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>postSelection</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a4799a9fdcccfef359bd73cf1a680e93f</anchor>
      <arglist>(const QPoint &amp;point)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GLuint</type>
      <name>myListToAff</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a2af0abb87a7edfe729b5c041b0ce3657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myNbListe</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a7aef81a82a3fe862383e294c2fe8359c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>qglviewer::Vec</type>
      <name>myOrig</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a91ff57156e1af353e3a2ae5cefad0126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>qglviewer::Vec</type>
      <name>myDir</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a467431e580157a49d3e9426cc89a8886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>qglviewer::Vec</type>
      <name>myDirSelector</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a37b3a73156bc2e8a30913a30350ef79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>qglviewer::Vec</type>
      <name>mySelectedPoint</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a638d26a1e65e649ead330da9f57ef1e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>QPoint</type>
      <name>myPosSelector</name>
      <anchorfile>classDGtal_1_1Viewer3D.html</anchorfile>
      <anchor>a566da9341801d35206f98db0d9ead264</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <name>StreamKey</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>addNewList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04accef40658b02697969ffc563316155a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>updateDisplay</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04a5b467643d3e44661ac96d7c3be38548a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>shiftSurfelVisu</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a96b45e0a0c762c14c0e5e27045d1ca04a4db609bbe1edad3885d830ca83394bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>ModeMapping</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a07629b8c7bd56b78830e01394043efe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; std::string, CountedPtr&lt; DrawableWithDisplay3D &gt; &gt;</type>
      <name>StyleMapping</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a5b5949a99fc5a45b42833cb19ec98ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myScaleX</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a74640420a7fcfec1c1ed3e0363ae0893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myScaleY</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a700f6e2d02909a71ff348a8fa9e92119</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myScaleZ</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a364fa73ade74feb240a71893307ad03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DGtal::Color</type>
      <name>myCurrentFillColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a61d1c4925172c298045264540dff158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DGtal::Color</type>
      <name>myCurrentLineColor</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a8fb45fc0b15422a08821d15876e1ee8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>myCurrentfShiftVisuKSSurfels</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ac15c84df0b018cb91f0ac30706f7ef4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; voxelD3D &gt; &gt;</type>
      <name>myVoxelSetList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ab3e320516908a367c06f9101b3621e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; lineD3D &gt; &gt;</type>
      <name>myLineSetList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ad129ace2df288b9ef09c76f09e3211ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; pointD3D &gt; &gt;</type>
      <name>myPointSetList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a1564af96e58dfe6459802519b7102197</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; clippingPlaneD3D &gt;</type>
      <name>myClippingPlaneList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ab8c3e1b275c5914217854bf73ee4d8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; quadD3D &gt;</type>
      <name>myKSSurfelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>adc2843cdf4bc11279c730a0cdda3ac47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; pointD3D &gt;</type>
      <name>myKSPointelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a20180c2b236a9de02d259de9c55a5c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; lineD3D &gt;</type>
      <name>myKSLinelList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a4c5dcca642b7dd28dca9bddd2384f0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; quadD3D &gt;</type>
      <name>myQuadList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>a52d0783713f3cab1b4b4d68e4d5d57f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; triangleD3D &gt;</type>
      <name>myTriangleList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ae50ca756647ae55ecde8b29f8b8535f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; polygonD3D &gt;</type>
      <name>myPolygonList</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>ae5ecc65d147df720087c601cc436ee70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>myListVoxelDepthTest</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aabb16a020368b01c683f5f93f3fa2ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>float</type>
      <name>myMeshDefaultLineWidth</name>
      <anchorfile>classDGtal_1_1Display3D.html</anchorfile>
      <anchor>aadf67024039afe143fe7749b9cac00ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Viewer3D::compFarthestPolygonFromCamera</name>
    <filename>structDGtal_1_1Viewer3D_1_1compFarthestPolygonFromCamera.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Viewer3D_1_1compFarthestPolygonFromCamera.html</anchorfile>
      <anchor>a6461e1eede85245b20427bb3a95805b6</anchor>
      <arglist>(polygonD3D q1, polygonD3D q2)</arglist>
    </member>
    <member kind="variable">
      <type>qglviewer::Vec</type>
      <name>posCam</name>
      <anchorfile>structDGtal_1_1Viewer3D_1_1compFarthestPolygonFromCamera.html</anchorfile>
      <anchor>a7fd9a2384ce0a860a7c75f26a0c5a8a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Viewer3D::compFarthestSurfelFromCamera</name>
    <filename>structDGtal_1_1Viewer3D_1_1compFarthestSurfelFromCamera.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Viewer3D_1_1compFarthestSurfelFromCamera.html</anchorfile>
      <anchor>ad15b92a1f89447f76c4a93073b66d035</anchor>
      <arglist>(quadD3D q1, quadD3D q2)</arglist>
    </member>
    <member kind="variable">
      <type>qglviewer::Vec</type>
      <name>posCam</name>
      <anchorfile>structDGtal_1_1Viewer3D_1_1compFarthestSurfelFromCamera.html</anchorfile>
      <anchor>aa00bc67f27e2f75f784a062c8fef5dc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Viewer3D::compFarthestTriangleFromCamera</name>
    <filename>structDGtal_1_1Viewer3D_1_1compFarthestTriangleFromCamera.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Viewer3D_1_1compFarthestTriangleFromCamera.html</anchorfile>
      <anchor>a18ca12e039d6a122d8f4d0dabf09c529</anchor>
      <arglist>(triangleD3D t1, triangleD3D t2)</arglist>
    </member>
    <member kind="variable">
      <type>qglviewer::Vec</type>
      <name>posCam</name>
      <anchorfile>structDGtal_1_1Viewer3D_1_1compFarthestTriangleFromCamera.html</anchorfile>
      <anchor>a0bc49074ee14acfa0e04633f447dc65d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Viewer3D::compFarthestVoxelFromCamera</name>
    <filename>structDGtal_1_1Viewer3D_1_1compFarthestVoxelFromCamera.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Viewer3D_1_1compFarthestVoxelFromCamera.html</anchorfile>
      <anchor>a69840ab9ca57dd042f5d9f9d6db41fbd</anchor>
      <arglist>(voxelD3D s1, voxelD3D s2)</arglist>
    </member>
    <member kind="variable">
      <type>qglviewer::Vec</type>
      <name>posCam</name>
      <anchorfile>structDGtal_1_1Viewer3D_1_1compFarthestVoxelFromCamera.html</anchorfile>
      <anchor>a1242fcebbc26c5bc8c308a2927d570d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LongvolWriter</name>
    <filename>structDGtal_1_1LongvolWriter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>structDGtal_1_1LongvolWriter.html</anchorfile>
      <anchor>aeac247ff19a9955807a11359b62f30a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1LongvolWriter.html</anchorfile>
      <anchor>a1632feea9ffd0307c839324c75ca6d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFunctor</type>
      <name>Functor</name>
      <anchorfile>structDGtal_1_1LongvolWriter.html</anchorfile>
      <anchor>a1cdac86b0b60b4f8ae42b61f0ea435eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::uint64_t</type>
      <name>ValueLongvol</name>
      <anchorfile>structDGtal_1_1LongvolWriter.html</anchorfile>
      <anchor>add3e7bfbe5e744d47bfb3bd582f750fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1LongvolWriter.html</anchorfile>
      <anchor>a5a6e023399d22a0b7b1d50f156b4da6d</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctor, Value, ValueLongvol &gt;))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>exportLongvol</name>
      <anchorfile>structDGtal_1_1LongvolWriter.html</anchorfile>
      <anchor>a64db6b3e9ff61c057e28f780545f711c</anchor>
      <arglist>(const std::string &amp;filename, const Image &amp;aImage, const Functor &amp;aFunctor=Functor())</arglist>
    </member>
    <member kind="function" protection="private" static="yes">
      <type>static ostream &amp;</type>
      <name>write_word</name>
      <anchorfile>structDGtal_1_1LongvolWriter.html</anchorfile>
      <anchor>a5ad18faff418b4b538d366530f60c976</anchor>
      <arglist>(ostream &amp;outs, Word value)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MeshWriter</name>
    <filename>structDGtal_1_1MeshWriter.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>export2OFF</name>
      <anchorfile>structDGtal_1_1MeshWriter.html</anchorfile>
      <anchor>af0662c6d5b23e071d5fb5a0209190d82</anchor>
      <arglist>(std::ostream &amp;out, const MeshFromPoints&lt; TPoint &gt; &amp;aMesh, bool exportColor=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>export2OBJ</name>
      <anchorfile>structDGtal_1_1MeshWriter.html</anchorfile>
      <anchor>a423f57d1ef6e41e6f3bda1d7744bb96f</anchor>
      <arglist>(std::ostream &amp;out, const MeshFromPoints&lt; TPoint &gt; &amp;aMesh)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::PGMWriter</name>
    <filename>structDGtal_1_1PGMWriter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>structDGtal_1_1PGMWriter.html</anchorfile>
      <anchor>ab86e1077d57fa038ccecb4ec60fd7e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1PGMWriter.html</anchorfile>
      <anchor>aa3aac545f58415d9c194ebfaaad29a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFunctor</type>
      <name>Functor</name>
      <anchorfile>structDGtal_1_1PGMWriter.html</anchorfile>
      <anchor>a977c70c3566cfdbe81b1502f62384f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1PGMWriter.html</anchorfile>
      <anchor>a2115b56779bc95441b84b9eb2795bea3</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctor, Value, unsigned char &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1PGMWriter.html</anchorfile>
      <anchor>addd0f963fde9b4d7dad2d8ab3e69e5c5</anchor>
      <arglist>((TImage::Domain::dimension==2)||(TImage::Domain::dimension==3))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>exportPGM</name>
      <anchorfile>structDGtal_1_1PGMWriter.html</anchorfile>
      <anchor>a63c5348a5d77bc08fe31d1500721cdfd</anchor>
      <arglist>(const std::string &amp;filename, const Image &amp;aImage, const Functor &amp;aFunctor=Functor(), bool saveASCII=false, bool topbotomOrder=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>exportPGM3D</name>
      <anchorfile>structDGtal_1_1PGMWriter.html</anchorfile>
      <anchor>a0e4b5063fcce1447f4b79e3616cdf500</anchor>
      <arglist>(const std::string &amp;filename, const Image &amp;aImage, const Functor &amp;aFunctor=Functor())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::PPMWriter</name>
    <filename>structDGtal_1_1PPMWriter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>structDGtal_1_1PPMWriter.html</anchorfile>
      <anchor>a5b958fd70a890165201252e3483bbcaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1PPMWriter.html</anchorfile>
      <anchor>a5f0e4d4e4182097dccc21a53bff89003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFunctor</type>
      <name>Functor</name>
      <anchorfile>structDGtal_1_1PPMWriter.html</anchorfile>
      <anchor>ad9a42c5b94fff23a88006d6a3bb1b1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1PPMWriter.html</anchorfile>
      <anchor>a94ffa7e1e126d948aa4cce09f4a66d40</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctor, Value, DGtal::Color &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1PPMWriter.html</anchorfile>
      <anchor>a5f8a5e488dbd1ce45ca2b0b22844e15e</anchor>
      <arglist>((TImage::Domain::dimension==2)||(TImage::Domain::dimension==3))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>exportPPM</name>
      <anchorfile>structDGtal_1_1PPMWriter.html</anchorfile>
      <anchor>ac658eb78a4fe468a2a3b85c8d5c5dc0b</anchor>
      <arglist>(const std::string &amp;filename, const Image &amp;aImage, const Functor &amp;aFunctor=Functor(), bool topbotomOrder=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>exportPPM3D</name>
      <anchorfile>structDGtal_1_1PPMWriter.html</anchorfile>
      <anchor>ac83edcad50657bd099615acd68684d04</anchor>
      <arglist>(const std::string &amp;filename, const Image &amp;aImage, const Functor &amp;aFunctor=Functor())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::RawWriter</name>
    <filename>structDGtal_1_1RawWriter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>structDGtal_1_1RawWriter.html</anchorfile>
      <anchor>a5081c5d421ebb21d07e6adf2fae59dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1RawWriter.html</anchorfile>
      <anchor>aa3f5d67f7bcc2a39d3b64de8fb089cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFunctor</type>
      <name>Functor</name>
      <anchorfile>structDGtal_1_1RawWriter.html</anchorfile>
      <anchor>aa14b83633b1403752a18332eac139a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1RawWriter.html</anchorfile>
      <anchor>a98c6f04fb050cd78cef781b82c2ca0de</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctor, Value, unsigned char &gt;))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>exportRaw8</name>
      <anchorfile>structDGtal_1_1RawWriter.html</anchorfile>
      <anchor>a3476fdc1aca389fdae20911829920480</anchor>
      <arglist>(const std::string &amp;filename, const Image &amp;aImage, const Functor &amp;aFunctor=Functor())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::VolWriter</name>
    <filename>structDGtal_1_1VolWriter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>structDGtal_1_1VolWriter.html</anchorfile>
      <anchor>a51886d2adf16b3b1a10e22bf2550b908</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1VolWriter.html</anchorfile>
      <anchor>af8272dac721921eeff32654d20975210</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TFunctor</type>
      <name>Functor</name>
      <anchorfile>structDGtal_1_1VolWriter.html</anchorfile>
      <anchor>a6968e904d3abdeddec51c03067a7b74a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1VolWriter.html</anchorfile>
      <anchor>a8e1397f23ee098fbfaab8901251c5137</anchor>
      <arglist>((CUnaryFunctor&lt; TFunctor, Value, unsigned char &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1VolWriter.html</anchorfile>
      <anchor>afb5b3119541fd7e921f998a1950a477d</anchor>
      <arglist>(TImage::Domain::dimension==3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>exportVol</name>
      <anchorfile>structDGtal_1_1VolWriter.html</anchorfile>
      <anchor>ad003368f873f42b5f7525e0c8197aed5</anchor>
      <arglist>(const std::string &amp;filename, const Image &amp;aImage, const Functor &amp;aFunctor=Functor())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Projector</name>
    <filename>structDGtal_1_1Projector.html</filename>
    <templarg>S</templarg>
    <member kind="typedef">
      <type>S</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>a384ccd6bfe83bc814bf6458b107a1f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Dimension</type>
      <name>Dimension</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>a60281b12b45d20693d87ab669682b35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>a36dbd75b8aa57ba0da8119c41be5ca96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>a2dbf6e827ca9d5332760a8fabeabe39f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Projector</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>aa70400a9bd156b3f1114c9169904ce2b</anchor>
      <arglist>(const Integer &amp;aDefaultInteger=NumberTraits&lt; Integer &gt;::zero())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>adab744ad9a58dc8483e4667d7a34871a</anchor>
      <arglist>(const TIterator &amp;itb, const TIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>a4bdf17365437a227d41498ef9e57cdcc</anchor>
      <arglist>(const TInputPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>dimension</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>ada6fc3db87511eac242b84cc58088526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::array&lt; Dimension, dimension &gt;</type>
      <name>myDims</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>a9cf0888a66c22d51c892b54aad891297</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>myDefaultInteger</name>
      <anchorfile>structDGtal_1_1Projector.html</anchorfile>
      <anchor>a508ab84ec5f368959d05fbb3b58fa180</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConstantPointPredicate</name>
    <filename>structDGtal_1_1ConstantPointPredicate.html</filename>
    <templarg>TPoint</templarg>
    <templarg>boolCst</templarg>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1ConstantPointPredicate.html</anchorfile>
      <anchor>a0c3ca6ee8a7f0c7317f6e58a34ae31b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1ConstantPointPredicate.html</anchorfile>
      <anchor>ae51c2887653f837055672db832a8f2cf</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::TruePointPredicate</name>
    <filename>structDGtal_1_1TruePointPredicate.html</filename>
    <templarg></templarg>
    <base>ConstantPointPredicate&lt; TPoint, true &gt;</base>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1TruePointPredicate.html</anchorfile>
      <anchor>a73c80b05fb913cebac945508d718c0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1ConstantPointPredicate.html</anchorfile>
      <anchor>ae51c2887653f837055672db832a8f2cf</anchor>
      <arglist>(const Point &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::FalsePointPredicate</name>
    <filename>structDGtal_1_1FalsePointPredicate.html</filename>
    <templarg></templarg>
    <base>ConstantPointPredicate&lt; TPoint, false &gt;</base>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1FalsePointPredicate.html</anchorfile>
      <anchor>adf51b650d1e7786b916adb0bc77db6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1ConstantPointPredicate.html</anchorfile>
      <anchor>ae51c2887653f837055672db832a8f2cf</anchor>
      <arglist>(const Point &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IsLowerPointPredicate</name>
    <filename>structDGtal_1_1IsLowerPointPredicate.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1IsLowerPointPredicate.html</anchorfile>
      <anchor>a9932a1b9a24087f804290a03fd69011b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IsLowerPointPredicate</name>
      <anchorfile>structDGtal_1_1IsLowerPointPredicate.html</anchorfile>
      <anchor>a26dfe0f201dc00e0e9dace89f00a3be1</anchor>
      <arglist>(const Point &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1IsLowerPointPredicate.html</anchorfile>
      <anchor>a89f573d5044fb43693e3cd66cf484a07</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myUpperBound</name>
      <anchorfile>structDGtal_1_1IsLowerPointPredicate.html</anchorfile>
      <anchor>a6480b6244eae9238f0b75d172e1c99f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IsUpperPointPredicate</name>
    <filename>structDGtal_1_1IsUpperPointPredicate.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1IsUpperPointPredicate.html</anchorfile>
      <anchor>a6160ab686992df94b490fa6ba6fc58b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IsUpperPointPredicate</name>
      <anchorfile>structDGtal_1_1IsUpperPointPredicate.html</anchorfile>
      <anchor>a080ad282af7a7e2b884ee552fbe0e11e</anchor>
      <arglist>(const Point &amp;lowerBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1IsUpperPointPredicate.html</anchorfile>
      <anchor>a2186457a51c10cd3ceb1c097e8704c4d</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myLowerBound</name>
      <anchorfile>structDGtal_1_1IsUpperPointPredicate.html</anchorfile>
      <anchor>aeca14e6c6341dbf391101f536eac44ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::IsWithinPointPredicate</name>
    <filename>structDGtal_1_1IsWithinPointPredicate.html</filename>
    <templarg>TPoint</templarg>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1IsWithinPointPredicate.html</anchorfile>
      <anchor>a9a1842c6a1a2ab272f57c474e576c33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IsWithinPointPredicate</name>
      <anchorfile>structDGtal_1_1IsWithinPointPredicate.html</anchorfile>
      <anchor>ad8cb809b7dc8dd2fd1d40eb93cba78aa</anchor>
      <arglist>(const Point &amp;lowerBound, const Point &amp;upperBound)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1IsWithinPointPredicate.html</anchorfile>
      <anchor>a392d0805d355eeb2fbd98cd3afe27642</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myLowerBound</name>
      <anchorfile>structDGtal_1_1IsWithinPointPredicate.html</anchorfile>
      <anchor>a9cb8c02eb518cbb92cef3ab2af7c4ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myUpperBound</name>
      <anchorfile>structDGtal_1_1IsWithinPointPredicate.html</anchorfile>
      <anchor>acb02cbbfb1cbc5a0a770594106aa58a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NotPointPredicate</name>
    <filename>structDGtal_1_1NotPointPredicate.html</filename>
    <templarg>TPointPredicate</templarg>
    <member kind="typedef">
      <type>TPointPredicate</type>
      <name>PointPredicate</name>
      <anchorfile>structDGtal_1_1NotPointPredicate.html</anchorfile>
      <anchor>a615d4a4963f5a9406a10c28f40f7e265</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointPredicate::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1NotPointPredicate.html</anchorfile>
      <anchor>ab01c10a1f881428f6fd29f03b00529a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NotPointPredicate</name>
      <anchorfile>structDGtal_1_1NotPointPredicate.html</anchorfile>
      <anchor>a1c38ea3f44ce5f2cf7dd260d373006d4</anchor>
      <arglist>(const PointPredicate &amp;pred)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1NotPointPredicate.html</anchorfile>
      <anchor>a00d876a9f3228597fda0e43f362add06</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>const PointPredicate &amp;</type>
      <name>myPred</name>
      <anchorfile>structDGtal_1_1NotPointPredicate.html</anchorfile>
      <anchor>a972beca534073e86dc008a5a6efbd5ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::EqualPointPredicate</name>
    <filename>structDGtal_1_1EqualPointPredicate.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1EqualPointPredicate.html</anchorfile>
      <anchor>a64eb0ec1f0da2d8971d12de80d8e53a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EqualPointPredicate</name>
      <anchorfile>structDGtal_1_1EqualPointPredicate.html</anchorfile>
      <anchor>abce417d1622e954d5e857e4c84360a74</anchor>
      <arglist>(const Point &amp;aPoint)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1EqualPointPredicate.html</anchorfile>
      <anchor>a2ef230537df52a28cdfc4bf501ffa2db</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myPoint</name>
      <anchorfile>structDGtal_1_1EqualPointPredicate.html</anchorfile>
      <anchor>a345f1e30ed1bbb09d5fbbca246b08a78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::BinaryPointPredicate</name>
    <filename>structDGtal_1_1BinaryPointPredicate.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TPointPredicate1</type>
      <name>PointPredicate1</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a2e71db34999533bc3b6b5b09826a03b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPointPredicate2</type>
      <name>PointPredicate2</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a25b7d19c7c47b9a2dd7cc06c255969c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointPredicate1::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a93b3e0a5b705dcf4be25ec7407d2af50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointPredicate2::Point</type>
      <name>Point2</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a9dcc4b2e3d8203d196018dc5b5d0b13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>af5098f8b5c397c9def38513f35526b9c</anchor>
      <arglist>((boost::is_same&lt; Point, typename PointPredicate2::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryPointPredicate</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a88ec801e8ec07eaa7ddfa3036978f89b</anchor>
      <arglist>(const PointPredicate1 &amp;pred1, const PointPredicate2 &amp;pred2, const TBinaryFunctor &amp;boolFunctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BinaryPointPredicate</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a039159905a1f33d95ea07b7d5b022192</anchor>
      <arglist>(const BinaryPointPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BinaryPointPredicate &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a18f205354f0f78f73e688a4c3a1fab87</anchor>
      <arglist>(const BinaryPointPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BinaryPointPredicate</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>ab335b340e4bdabd311ccb8e75003fc92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>af14fa2e4cb72a224c15463ba62b0b3f6</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>const PointPredicate1 *</type>
      <name>myPred1</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a7f7af9b3fb87ecae3d6ddbc17166d3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const PointPredicate2 *</type>
      <name>myPred2</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a5250a65dc220f3718637b858d8ec56ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const TBinaryFunctor *</type>
      <name>myBoolFunctor</name>
      <anchorfile>structDGtal_1_1BinaryPointPredicate.html</anchorfile>
      <anchor>a36e19cd80561489d96c4668241a3bef4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::PointFunctorPredicate</name>
    <filename>structDGtal_1_1PointFunctorPredicate.html</filename>
    <templarg>TPointFunctor</templarg>
    <templarg>TPredicate</templarg>
    <member kind="typedef">
      <type>TPointFunctor</type>
      <name>PointFunctor</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>aa376a1770d27ff62f35f878198f9028e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPredicate</type>
      <name>Predicate</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>aa2e3f9bce82ddbcbfb44b8989ec1746a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointFunctor::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>a8f88822fd40f87bdb77a4adbc5808b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>adb62d98bbae2e9b2ba0888d756004ddd</anchor>
      <arglist>((CPointFunctor&lt; TPointFunctor &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>af047255f1284394d2707ee8bc58563bf</anchor>
      <arglist>((CUnaryFunctor&lt; TPredicate, typename TPointFunctor::Value, bool &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointFunctorPredicate</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>a3f2ce3ff975d35373fc8508ffd97e34d</anchor>
      <arglist>(const PointFunctor &amp;aFun, const Predicate &amp;aPred)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointFunctorPredicate</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>ae2b3199a03303241af50018e3b5273d9</anchor>
      <arglist>(const PointFunctorPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PointFunctorPredicate &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>a69e1534a1878b8e2bf9d3c101f6dc768</anchor>
      <arglist>(const PointFunctorPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PointFunctorPredicate</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>a85713daf6a4d4f853323a554968eb902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>a77c0291cc3fb88370a57714c8c0be42e</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>const PointFunctor *</type>
      <name>myFun</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>aa78f2207d886ad245e3f7a8dc05ed964</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Predicate *</type>
      <name>myPred</name>
      <anchorfile>structDGtal_1_1PointFunctorPredicate.html</anchorfile>
      <anchor>a649e1700a6b907fd85f2088e7fff0601</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CanonicCellEmbedder</name>
    <filename>structDGtal_1_1CanonicCellEmbedder.html</filename>
    <templarg>TKSpace</templarg>
    <member kind="typedef">
      <type>CanonicCellEmbedder&lt; TKSpace &gt;</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a0dd59f6b5b91a5a6deb32f61baf206ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>af97164e7c4b3006156f4e4b94a668bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a0f55a0dcc472cef7e3dbc2d037ec62c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a7e8577a557ba961a91a1e9da3c21d3e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a37e598c620e4208160968a55c14b0e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>ac6eb094418916c6ebaf082624b44a953</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPoint</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a272ac349a9fbbcb07d3e4d41907f8fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a96eb50b552ce3782d57774eda68f185a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>adbba6ffb55fe1977b317e28fe9e7f5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a840473546524aeec91d3aec3562cdbe8</anchor>
      <arglist>((CCellularGridSpaceND&lt; TKSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CanonicCellEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>aa72b8f0b0ccff7b18776360f896c3ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CanonicCellEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a02ee9de8f5d83792c4404e19dce2c482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CanonicCellEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>ade1f335a5b393f1a5ef253d987e2f969</anchor>
      <arglist>(const KSpace &amp;aKSpace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CanonicCellEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a34f1db271b9831b4a566001e458c2e38</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>ad35751c98c81e6be0129b0bce3d18c5c</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const KSpace &amp;</type>
      <name>space</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a66d8f6a17eb31d25e99cbc350919bb1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>aa8a496ec5262cd5ab9c1be2ba818c6f5</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a968f83d6ba9e51744281c1244cd05cbc</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>ad77e11ac4ee21063cb05d73dabe1409b</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a4ed418dc737bbcf971d8964a66cb3b97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KSpace *</type>
      <name>myKSpace</name>
      <anchorfile>structDGtal_1_1CanonicCellEmbedder.html</anchorfile>
      <anchor>a5ebb04691a7d18e51f7dc2a560162ea8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CanonicDigitalSurfaceEmbedder</name>
    <filename>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</filename>
    <templarg>TDigitalSurface</templarg>
    <member kind="typedef">
      <type>CanonicDigitalSurfaceEmbedder&lt; TDigitalSurface &gt;</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>ab25bf2f93dfd0193589b401357e9a0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDigitalSurface</type>
      <name>Surface</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a388566f6fc6e743aed37d0621ec18f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Surface::KSpace</type>
      <name>KSpace</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a8797e85cc1704c47762856c61f94c975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>ac4e92b99525e8893df3d2e30ffd82652</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a00323e42b6f0cfcbe47be4f1666474a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a1ed1535dd68623f7a62ce92b10111db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCell</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a4063ce5249141199d7fc02d114f320f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPoint</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a8d1b45eb15c03b80d41f2942714a7d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a330d4e50f58df7a9f2eac83f264b4162</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>aa0ec9ecce697898b37a11f112c7b3d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>ab3cd4624000690d1ef190e8bfafc1e32</anchor>
      <arglist>((CCellularGridSpaceND&lt; KSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CanonicDigitalSurfaceEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>aaee616dc447eadff9249024d097d75bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CanonicDigitalSurfaceEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a35c9b46facc497b42b6468ab524fda5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CanonicDigitalSurfaceEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a1b61854e757d105fc817ffebe1fe915a</anchor>
      <arglist>(const Surface &amp;aSurface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CanonicDigitalSurfaceEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a16b57915472955983202f72fd5106458</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a8a421065a46bd8d3f365b3699fd663b4</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Surface &amp;</type>
      <name>surface</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>afa9214a1f39cbcdb1fb624b34890e4b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a3671b8a3234548d94020e146c39ccb8e</anchor>
      <arglist>(const SCell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>ac09c6f99b630cc658ebf80b69fd4ade3</anchor>
      <arglist>(const SCell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>acae8a9f6612418518a24515448411640</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>ab7360b12c3f057851994e1f5bdc4187a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Surface *</type>
      <name>mySurface</name>
      <anchorfile>structDGtal_1_1CanonicDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a67a06ea975f7d98ed227fd666afe6a90</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CanonicEmbedder</name>
    <filename>structDGtal_1_1CanonicEmbedder.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>CanonicEmbedder&lt; TSpace &gt;</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>af316f48602f59f9b347efd622ca48985</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>a4344d7d5e134f2c35c03bb4ad9553dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>a02e239ea04b0ee9c73c273abbe26915c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>acaf7ce123b57f032ab05a6b0d094632a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>aecd448164f1022d35abc38f7babafea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>ab4efc7a65355d7f4620c6a2f9f7bb742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>a2d60a4548a5ce29c5313ba3395cb900f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPoint</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>a4cef67ea8a5af3e71a7d0daaaddc3b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>acc2e50f32ac1f6c82e1b2afe8a45e99a</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>floor</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>a2e2bcf086bd1e70ed97b65146d71d8a6</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>ceil</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>a102f0a8209a224c837ca3ec13f237fba</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>round</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>a027a8148c2f8d732d73024aa5ef2f1d9</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>a8b72f66f9b760c3ffdf337e950a56ba9</anchor>
      <arglist>(const Point &amp;dp) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>a68e3e9473d38842bc8cbf5beaa9653ab</anchor>
      <arglist>(const Point &amp;dp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>abbdbbfbd64d5d4de573624c275dce027</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structDGtal_1_1CanonicEmbedder.html</anchorfile>
      <anchor>adfb0e069e835495ed71fddebb0df50d9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CanonicSCellEmbedder</name>
    <filename>structDGtal_1_1CanonicSCellEmbedder.html</filename>
    <templarg>TKSpace</templarg>
    <member kind="typedef">
      <type>CanonicSCellEmbedder&lt; TKSpace &gt;</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>af5dc358cf57b6f22ae720cabf66ffd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a1b7722292b1ed4efc2c7353e452c2b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>acd8f38ec4f86b9ef17ebde3f3c2987f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a42ae68cc96485b99a2c649b7471d4930</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>aba9d5a4aab713249a99e12765264d1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCell</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a2073127fbff644a772ea9749b723e5e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPoint</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>ac30f6fa662fd17cf2276aa749c182194</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>abf64d897df6a48dba424a73e62d31ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a87309e8b9867cd2aac3e1c5cef0d702a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a1320bdc476be9799bb48f8f2284a3efc</anchor>
      <arglist>((CCellularGridSpaceND&lt; TKSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CanonicSCellEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a5cf1f5e8fa651a2ce97577d6a6396b8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CanonicSCellEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>af88372ff1d51e748d1c7cc25ef8ecae1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CanonicSCellEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>ad9caa153186ba46d369d171ae2af9fbf</anchor>
      <arglist>(const KSpace &amp;aKSpace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CanonicSCellEmbedder</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a05af1fc5375c018ce543261fd8abfd03</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a4be7e8db2808c989c4d64a5bc20b6ffe</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const KSpace &amp;</type>
      <name>space</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>acd41e45b83775b862d343f7c792c6aa1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>ad86fd2ba53779c4488f66f13418f9b0e</anchor>
      <arglist>(const SCell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a29509b99d3e8ccc3a9c101e12a0ad0eb</anchor>
      <arglist>(const SCell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>afe1fcda4c807de08a7bbe380f89dcb75</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a9400495fb69fd514fccbaab2e2ba5383</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KSpace *</type>
      <name>myKSpace</name>
      <anchorfile>structDGtal_1_1CanonicSCellEmbedder.html</anchorfile>
      <anchor>a7ac4b36938d46659bd913ca2cbb3c253</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CBoundedInteger</name>
    <filename>structDGtal_1_1CBoundedInteger.html</filename>
    <templarg></templarg>
    <base>DGtal::CInteger</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CBoundedInteger.html</anchorfile>
      <anchor>a5fbdc4bb6fc814dff1d24dc2a14a4f1c</anchor>
      <arglist>(CBoundedInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a0eef917bfb0a4d6eb0031ebdf339b6cf</anchor>
      <arglist>(CInteger)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CBoundedInteger.html</anchorfile>
      <anchor>a8757832b8edc8a02c1ca3789ee6dea94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NumberTraits&lt; T &gt;::IsBounded</type>
      <name>myIsBounded</name>
      <anchorfile>structDGtal_1_1CBoundedInteger.html</anchorfile>
      <anchor>a6135e1347eb875fbf5754cda72d0c290</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CCommutativeRing</name>
    <filename>structDGtal_1_1CCommutativeRing.html</filename>
    <templarg></templarg>
    <base>boost::Assignable</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CCommutativeRing.html</anchorfile>
      <anchor>aa22b8bf92535da4cffd0420ce6593a03</anchor>
      <arglist>(CCommutativeRing)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>a</name>
      <anchorfile>structDGtal_1_1CCommutativeRing.html</anchorfile>
      <anchor>a660658ee67588dd97303b7fecb7a26aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>b</name>
      <anchorfile>structDGtal_1_1CCommutativeRing.html</anchorfile>
      <anchor>a44cd2e30c68f952292ecb6a695e04d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>c</name>
      <anchorfile>structDGtal_1_1CCommutativeRing.html</anchorfile>
      <anchor>aafc056f2b06dd423d23f81ea35749973</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CEuclideanRing</name>
    <filename>structDGtal_1_1CEuclideanRing.html</filename>
    <templarg></templarg>
    <base>DGtal::CCommutativeRing</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CEuclideanRing.html</anchorfile>
      <anchor>a23b6b0ad611a9c2d4adbf51dfabfb165</anchor>
      <arglist>(CEuclideanRing)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CCommutativeRing.html</anchorfile>
      <anchor>aa22b8bf92535da4cffd0420ce6593a03</anchor>
      <arglist>(CCommutativeRing)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>a</name>
      <anchorfile>structDGtal_1_1CEuclideanRing.html</anchorfile>
      <anchor>a5a5fc65d23e38b5cfe3609f53dc66b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>b</name>
      <anchorfile>structDGtal_1_1CEuclideanRing.html</anchorfile>
      <anchor>ac2bcf40e3906381bb45cfa5eecc37140</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>c</name>
      <anchorfile>structDGtal_1_1CEuclideanRing.html</anchorfile>
      <anchor>aa2a095f95d5148ea37f43b821de0b7bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CInteger</name>
    <filename>structDGtal_1_1CInteger.html</filename>
    <templarg></templarg>
    <base>boost::Assignable</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a0eef917bfb0a4d6eb0031ebdf339b6cf</anchor>
      <arglist>(CInteger)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a3ef31b221b2d9defb825bb3eaa087fd1</anchor>
      <arglist>((ConceptUtils::CheckTrueOrFalse&lt; typename NumberTraits&lt; T &gt;::IsUnsigned &gt;::value))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a039ce5c67c280286200061fc6ce44b92</anchor>
      <arglist>((ConceptUtils::CheckTrueOrFalse&lt; typename NumberTraits&lt; T &gt;::IsSigned &gt;::value))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a088db2f1bbd1fff221c5504f91178af9</anchor>
      <arglist>((ConceptUtils::CheckTrueOrFalse&lt; typename NumberTraits&lt; T &gt;::IsBounded &gt;::value))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>ae84385d5daa03f165e4a675c37c20a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NumberTraits&lt; T &gt;::IsUnsigned</type>
      <name>myIsUnsigned</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>ac4afd2160c095035292790e496efd0f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NumberTraits&lt; T &gt;::IsSigned</type>
      <name>myIsSigned</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a256b7047d737ba60aaf93dec1df5eaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NumberTraits&lt; T &gt;::IsBounded</type>
      <name>myIsBounded</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>ae29965accd0311d918092742b6c3eeb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NumberTraits&lt; T &gt;::SignedVersion</type>
      <name>mySignedVersion</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a70b3a3aa80466993ff1d0dd50c876c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NumberTraits&lt; T &gt;::UnsignedVersion</type>
      <name>myUnsignedVersion</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a35a40ed7b8ca3241d1c7dfa673201fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NumberTraits&lt; T &gt;::ReturnType</type>
      <name>myReturnType</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>ab6bff64ed6be5268b27d2e1f6bd3da10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CPointEmbedder</name>
    <filename>structDGtal_1_1CPointEmbedder.html</filename>
    <templarg></templarg>
    <base>CUnaryFunctor&lt; T, T::Point, T::RealPoint &gt;</base>
    <member kind="typedef">
      <type>T::Space</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>ace8b89dca45689022301427ea212fac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a0122f9bc4eefe035a8ac8d132c6e7947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a2b1f06ce215a9ee149291fbb1cfec49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Argument</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a19b48502450ccd95f87a7b3b92da88ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a0d38da21ce660463ad65db98f1a1ab57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a0d27c4a83e24b8374129b60d0dccae55</anchor>
      <arglist>((CSpace&lt; Space &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a19d9d453cbbe960c1129580ba761a48d</anchor>
      <arglist>((ConceptUtils::SameType&lt; Point, typename Space::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>adde16cd5dcdd261b6079bf6ef4dd08e0</anchor>
      <arglist>((ConceptUtils::SameType&lt; Point, Argument &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a13490007ad66c96d49700f40a8742656</anchor>
      <arglist>((ConceptUtils::SameType&lt; RealPoint, typename Space::RealPoint &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a6a1b33f1a7f5c29ee56b8caa6e46eb45</anchor>
      <arglist>((ConceptUtils::SameType&lt; RealPoint, Value &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a02ac7350ceac90c90440f25b89457967</anchor>
      <arglist>(CPointEmbedder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a421321291821e68dbe8da45d9f3c38f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUnaryFunctor.html</anchorfile>
      <anchor>a9c5f252680e4e0b14a0c68b724656840</anchor>
      <arglist>(CUnaryFunctor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>a596289d693199dc3218d6fb4da998f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>aa66f74f1207e78f929645e83964f2470</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myRP</name>
      <anchorfile>structDGtal_1_1CPointEmbedder.html</anchorfile>
      <anchor>abb4644c7532dfc0cbc7479526d9cd72c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CPointFunctor</name>
    <filename>structDGtal_1_1CPointFunctor.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a9051e5372a8c0b4b0e7e1269ed025cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a7aef28724a4795f41e5e8a508c1edd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointFunctor.html</anchorfile>
      <anchor>a523c2617ea6a79e9f8bf5f9e16a81e20</anchor>
      <arglist>((CUnaryFunctor&lt; T, Point, Value &gt;))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CPointPredicate</name>
    <filename>structDGtal_1_1CPointPredicate.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CPointPredicate.html</anchorfile>
      <anchor>af07c7fe2e943e901fcab923ed2c60da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CPointPredicate.html</anchorfile>
      <anchor>ace3ae9d4e1407d0a264e80a15bf55a9f</anchor>
      <arglist>((CUnaryFunctor&lt; T, Point, bool &gt;))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSignedInteger</name>
    <filename>structDGtal_1_1CSignedInteger.html</filename>
    <templarg></templarg>
    <base>DGtal::CInteger</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSignedInteger.html</anchorfile>
      <anchor>a91f805dde7e9dfbfbee7e887baa345f5</anchor>
      <arglist>(CSignedInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a0eef917bfb0a4d6eb0031ebdf339b6cf</anchor>
      <arglist>(CInteger)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NumberTraits&lt; T &gt;::IsSigned</type>
      <name>myIsSigned</name>
      <anchorfile>structDGtal_1_1CSignedInteger.html</anchorfile>
      <anchor>a3cbfd3c594483c814a681306ff192cf4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSpace</name>
    <filename>structDGtal_1_1CSpace.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::Space</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>ad55ee0959312f919f30efc4ce3bcb94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>a0a764fe351cff1f04b9fd133fc6180d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>a0f43c4b58281cb4fe3d9c739ec62855e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Vector</type>
      <name>Vector</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>a97b76f778269125bd58528666eb56b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Dimension</type>
      <name>Dimension</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>addaaed753f49575d75321155cdc8db04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Size</type>
      <name>Size</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>a50d184fccc4f8bff2044a87349ad4268</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>a05c97753a180a60be9a3d4dd4b080921</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::RealVector</type>
      <name>RealVector</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>a7647925f43e75152fb913ac4239d978e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>ad3e87d445b1f938be5e57ac6e67d20c3</anchor>
      <arglist>((CUnsignedInteger&lt; Dimension &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>a298ad45c2d85871fc0f2eb0b77492c94</anchor>
      <arglist>((CInteger&lt; Integer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>a0df6999fd0b66ca4fb5fbe17922aeba5</anchor>
      <arglist>((CUnsignedInteger&lt; Size &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>ab42d91972438559fbe49dd419460d8d5</anchor>
      <arglist>(CSpace)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Dimension</type>
      <name>myDim</name>
      <anchorfile>structDGtal_1_1CSpace.html</anchorfile>
      <anchor>aa78fc123acc21c71c9d3791ad2cfcf8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CUnsignedInteger</name>
    <filename>structDGtal_1_1CUnsignedInteger.html</filename>
    <templarg></templarg>
    <base>DGtal::CInteger</base>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUnsignedInteger.html</anchorfile>
      <anchor>a7d414050bae2bf599b646f5bd88fc70c</anchor>
      <arglist>(CUnsignedInteger)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CInteger.html</anchorfile>
      <anchor>a0eef917bfb0a4d6eb0031ebdf339b6cf</anchor>
      <arglist>(CInteger)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NumberTraits&lt; T &gt;::IsUnsigned</type>
      <name>myIsUnsigned</name>
      <anchorfile>structDGtal_1_1CUnsignedInteger.html</anchorfile>
      <anchor>a83e3130c3174d14aed0dfa335262e84c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CWithGradientMap</name>
    <filename>structDGtal_1_1CWithGradientMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::Argument</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1CWithGradientMap.html</anchorfile>
      <anchor>a9e0d6290defd7a9610e2a2f608aadfe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::RealVector</type>
      <name>RealVector</name>
      <anchorfile>structDGtal_1_1CWithGradientMap.html</anchorfile>
      <anchor>a79e876969de5d0296c9a1deea7492ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::GradientMap</type>
      <name>GradientMap</name>
      <anchorfile>structDGtal_1_1CWithGradientMap.html</anchorfile>
      <anchor>a2a4fd70b69629ff0523863ade3f1f15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CWithGradientMap.html</anchorfile>
      <anchor>a3f8641fe2f6a526996d9cee091954e64</anchor>
      <arglist>((boost::CopyConstructible&lt; GradientMap &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CWithGradientMap.html</anchorfile>
      <anchor>adfe71d6b0565037c16941f8a088e0514</anchor>
      <arglist>((CUnaryFunctor&lt; GradientMap, Argument, RealVector &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CWithGradientMap.html</anchorfile>
      <anchor>a2487b545d782e52ae05b86cf12d7cb49</anchor>
      <arglist>(CWithGradientMap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CWithGradientMap.html</anchorfile>
      <anchor>a6d79f08d7601dc770a4d7cadcc77b8d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CWithGradientMap.html</anchorfile>
      <anchor>a86fefcea43f7e673c10eb4bd79948adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>GradientMap</type>
      <name>myGMap</name>
      <anchorfile>structDGtal_1_1CWithGradientMap.html</anchorfile>
      <anchor>a4b3d54a53047ebdf61035003ffa4e2b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDomain</name>
    <filename>structDGtal_1_1CDomain.html</filename>
    <templarg></templarg>
    <base>DGtal::CConstSinglePassRange</base>
    <member kind="typedef">
      <type>T::Domain</type>
      <name>Domain</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a6628f7d260353a139805a9813790c598</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Space</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a267ed45b1fcf70a2952cd966bc264bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a37730a0f5fb4b26d057e0aee22d8a702</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Vector</type>
      <name>Vector</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>aa463e8146bd653b3a29f88502267e0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a6b0639f7121cd1ec8db2175e1033b2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Size</type>
      <name>Size</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a64c027d26bb748d80406106e59795007</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Dimension</type>
      <name>Dimension</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a3f3b7419701f9920c04e2520cdd4d80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Predicate</type>
      <name>Predicate</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>ae88499f29701e7b9a87861579a24c6e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a116eea278ad43e137797e2cc5054e906</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>ab34cb067bd52fc12b8812b03bb689cfa</anchor>
      <arglist>(CDomain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a48734f8084ee597416a07ae09a38a35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a5dd99a5619d540961560831e04f846c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Predicate</type>
      <name>myPred</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>aed5dcf790bdc2586a32f337d131a0ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myBool</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a02c5d41ff841761a0c4a402b6e48bc98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>mySize</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a222c93a973e9050427e1579fef5be366</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myIt</name>
      <anchorfile>structDGtal_1_1CDomain.html</anchorfile>
      <anchor>a44ab67fb6c8b4ab5a7947646c0544efa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CDomainArchetype</name>
    <filename>classDGtal_1_1CDomainArchetype.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CDomainArchetype&lt; TSpace &gt;</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a39bd1e196aa457b177b7b3057ef7e745</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>acc78eea83ff2f8127fbfed4c85f0dcef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>aa1d3fbf5a4c5a5bbbb6086929d02fbf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>aa6d12e436735a4c142e8e4fc3472a55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a883d99742f4397551391d930f3656798</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>af349ab81f0e9897ab98dbadb3a45cedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a31acea18e766dc092ad5bad12e56a892</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CConstBidirectionalIteratorArchetype&lt; Point &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a29b1ee1dff533311a6568dd477c406a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Predicate</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>ad2cab9b387f7bd0aa7f558ee6f2db204</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>DigitalSet</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a5368dcf789255c6967b950799d7cf61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CDomainArchetype</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a2fde55c05aa6885a240cedd12f45d91c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CDomainArchetype</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>ac961d00987f144f38a2c26fc81a65a74</anchor>
      <arglist>(const DigitalSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CDomainArchetype</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a30f36bce2a9668dc850bad8160dffbaa</anchor>
      <arglist>(const CDomainArchetype &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a683649839e61d9e3a8ff05176160a886</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>acc822cfba9ca5715befcd2dc4838ab21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a1792beab77a2d75e5822b45ea3462cde</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>lowerBound</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>ae62c14f826cdb21a2241b348259b1bf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>upperBound</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a6aaaa89b4944541c8c24f940dbfa7e00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a5ab29f057376eb9c3b5e3dd31228f529</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>ad2d24bfff690e2cf95eef58001252904</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>const Predicate &amp;</type>
      <name>predicate</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a1b30d14a74629c4e314e506fda684d33</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a01cf7bfd7c05f4ecd17ecbf5d57e77f3</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1CDomainArchetype.html</anchorfile>
      <anchor>a1c980188820ef611aed39ea89a2ebb67</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DomainPredicate</name>
    <filename>structDGtal_1_1DomainPredicate.html</filename>
    <templarg>TDomain</templarg>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>structDGtal_1_1DomainPredicate.html</anchorfile>
      <anchor>a813fde12691be4f144bc7c4ee3f7510b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1DomainPredicate.html</anchorfile>
      <anchor>a8af331c99158dcc8b9b99bbdbf5b2e5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainPredicate</name>
      <anchorfile>structDGtal_1_1DomainPredicate.html</anchorfile>
      <anchor>ad9f8a2e297592de47bcc724bea63249d</anchor>
      <arglist>(const Domain &amp;aDomain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainPredicate</name>
      <anchorfile>structDGtal_1_1DomainPredicate.html</anchorfile>
      <anchor>a7ba5a35afd18ddb739c5563e2e989793</anchor>
      <arglist>(const DomainPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DomainPredicate &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1DomainPredicate.html</anchorfile>
      <anchor>ab958fbb726f18643a532b0b6755d0a78</anchor>
      <arglist>(const DomainPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1DomainPredicate.html</anchorfile>
      <anchor>a9882e52fb30a302ee26dd2fc767b6008</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>structDGtal_1_1DomainPredicate.html</anchorfile>
      <anchor>ad24c4a21776c6f0ba1e55d6adec7b197</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DomainPredicate</name>
      <anchorfile>structDGtal_1_1DomainPredicate.html</anchorfile>
      <anchor>ab79e1aa9d1b2e066b18642d743dee698</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Domain *</type>
      <name>myDomain</name>
      <anchorfile>structDGtal_1_1DomainPredicate.html</anchorfile>
      <anchor>a6531e442f520ea837f899fb4af5e0c31</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::HyperRectDomain</name>
    <filename>classDGtal_1_1HyperRectDomain.html</filename>
    <templarg>TSpace</templarg>
    <class kind="struct">DGtal::HyperRectDomain::ConstSubRange</class>
    <member kind="typedef">
      <type>HyperRectDomain&lt; TSpace &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>ad351d904d6a5cc6f7655044b6f054e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a82c74aceaaeb73f94a17164cf9ea22e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyperRectDomain&lt; Space &gt;</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a23de221b9f2716649340754dd9bd4453</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>ad710ac3a2d91d351b55ca6841cb789f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a31c2aa3ab1a46b011f40940dd073be4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a132e9344848ac81fdeccf1e176be4cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>acf9602c9f7e0f17b97e5bf871624ae05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a149d79b5fdf267144d6e41db979bc397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point::Coordinate</type>
      <name>Coordinate</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>ac1c2282b10f069b3d652e884cabdde2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyperRectDomain_Iterator&lt; Point &gt;</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>abd306a662192edd7e6e4af6fde9e8f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>myreverse_iterator&lt; Iterator &gt;</type>
      <name>ReverseIterator</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a09091d10ccff062670ea5357820df3b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>ad460a9309eb81ab5391a57f7d2a17055</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReverseIterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a4de42d395584b2684fe7fc6336d505b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IsWithinPointPredicate&lt; Point &gt;</type>
      <name>Predicate</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a02f4552498e296f3ad3ff53c70435054</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperRectDomain</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a24545c7b94a5f64aba662caa9c23cdcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperRectDomain</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>ad95227e1e8c67658c888570faa2dcc31</anchor>
      <arglist>(const Point &amp;aPointA, const Point &amp;aPointB)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HyperRectDomain</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>ae54f47a7b97e54a87e8c424883ab8124</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperRectDomain</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>abef399988cdd5ced13c0d37a98a29312</anchor>
      <arglist>(const HyperRectDomain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>HyperRectDomain &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>af0e811444fbb2beb9dfaf2a0278deba7</anchor>
      <arglist>(const HyperRectDomain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ConstIterator &amp;</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>aa6b5c33fe598ee41473119ba3f9baf20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>adb42c75883a15729228e1d94a39093a1</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>const ConstIterator &amp;</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a279ea17ba3de11ce8f7b1c3eebdb2375</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a003bd0d202a0e70c00e05332b59fb39b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a3ebe6b3d986575da2572dce1f2f86358</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>ab4a163119cc89868150ccf17dd6f4efc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstSubRange</type>
      <name>subRange</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a7b854d25443934a1e0a4c8541409a544</anchor>
      <arglist>(const std::vector&lt; Dimension &gt; &amp;permutation) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSubRange</type>
      <name>subRange</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a05a5a685bfcc0d2d1aa008647208d9c1</anchor>
      <arglist>(const std::vector&lt; Dimension &gt; &amp;permutation, const Point &amp;startingPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSubRange</type>
      <name>subRange</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a5ddb0357e726dafbd6e42902d022cf52</anchor>
      <arglist>(Dimension adim, const Point &amp;startingPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSubRange</type>
      <name>subRange</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a17c048002771c9cdddc041f9616d9050</anchor>
      <arglist>(Dimension adim1, Dimension adim2, const Point &amp;startingPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstSubRange</type>
      <name>subRange</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>ad38f4c90e3d313bc685f20fc80504d60</anchor>
      <arglist>(Dimension adim1, Dimension adim2, Dimension adim3, const Point &amp;startingPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>extent</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a99f24d98d621fbe9d77989b8de014af4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a89370966f808f5b1020dca587be5f737</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>lowerBound</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a3a6101a97cd0e6f2c4f8bfd05385abc9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>upperBound</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>aeb64b53a9d88327a41b08bdcfe7c5412</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>aa09f5f89c24f682959dccb823baae373</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>const Predicate &amp;</type>
      <name>predicate</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>ac59c90415a289e462119f36d77942335</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>aee0a2a7a610fc76bfe066fdc4c1d387e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a0bd21124dfe26f55a2bcf050aca7a845</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a21ad379e2d7e361971d0fedd063fc8f7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myLowerBound</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a11b05f84f0fc71002abb98076383d989</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myUpperBound</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a09ca52183454d9638e00343688a710e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Space::Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>aa92e78357a079b033e2009fe365d06c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a9b65b372369db63edf9d1391e9be97bc</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Predicate</type>
      <name>myPredicate</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>aa3bbbcec25bf79cd53f16715ca6842b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myIteratorBegin</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>a6e5274599944718d52b6c691fbf39e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myIteratorEnd</name>
      <anchorfile>classDGtal_1_1HyperRectDomain.html</anchorfile>
      <anchor>af5d1b02a6c60bbbc5a05e82560f665a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::HyperRectDomain::ConstSubRange</name>
    <filename>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</filename>
    <member kind="typedef">
      <type>HyperRectDomain_subIterator&lt; Point &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>a880d66b476afb4af71c62ab5c4729d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>myreverse_iterator&lt; ConstIterator &gt;</type>
      <name>ConstReverseIterator</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>aec6235fb0da0da7b63e9bc816b770905</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstSubRange</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>a52e4abd40f5057036e57de49a642f630</anchor>
      <arglist>(const HyperRectDomain&lt; TSpace &gt; &amp;domain, const std::vector&lt; Dimension &gt; &amp;permutation, const Point &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstSubRange</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>a3fba50329eea72a05eb4ae297a333317</anchor>
      <arglist>(const HyperRectDomain&lt; TSpace &gt; &amp;domain, Dimension adim, const Point &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstSubRange</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>aab8d9d024c7c325b2cf55b194a7a4e4c</anchor>
      <arglist>(const HyperRectDomain&lt; TSpace &gt; &amp;domain, Dimension adim1, Dimension adim2, const Point &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstSubRange</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>aeaa7787a9e35ec80ea6e48871a4c0a36</anchor>
      <arglist>(const HyperRectDomain&lt; TSpace &gt; &amp;domain, Dimension adim1, Dimension adim2, Dimension adim3, const Point &amp;startingPoint)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>a70ee1e4f762b6fee3a1a48545cd32bb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>af3c159782af9a98ae37c880b241230ec</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>ab700649646afcd09e279f65a4337acd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>abac395736745e5d31348f7721e8eb364</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>a150f29de7f40fdf9afce6beb7e315ed3</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>a0b035a7189eb0177fa260d0d309b8804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myLowerBound</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>aecd350536244844d1fea3ff2b5cad97a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myUpperBound</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>a7f08f89a49997e6f3a99b79b791d8141</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myStartingPoint</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>a0bfc5998cd86761a47b0b2fd829d66ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Dimension &gt;</type>
      <name>myPermutation</name>
      <anchorfile>structDGtal_1_1HyperRectDomain_1_1ConstSubRange.html</anchorfile>
      <anchor>af1242a79c12686286b7e890c39dccea5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::HyperRectDomain_Iterator</name>
    <filename>classDGtal_1_1HyperRectDomain__Iterator.html</filename>
    <templarg>TPoint</templarg>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>ac473ca6ab7f7fc44c1aab8709c5e602f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a99a89b864a894dee7c493eb00930cdc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a84cd241f3e9ac34296fc22c2b647f130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint *</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>afff183871fb2d7d67b3b137f54d7e852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint &amp;</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a3206cada2de56858f5cb5f6699f4cdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a5216db1750f1b28bc9a0e6ae36738122</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperRectDomain_Iterator</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a2b74916808b1e2575168b1ccef236fc4</anchor>
      <arglist>(const TPoint &amp;p, const TPoint &amp;lower, const TPoint &amp;upper)</arglist>
    </member>
    <member kind="function">
      <type>const TPoint &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a79bfe08437bb48f4747beb715b8ff3da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TPoint &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>ab4e8875511aac4f0d3aab6cdc998e63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a163359d439b3441673d2987a5bebe169</anchor>
      <arglist>(const HyperRectDomain_Iterator&lt; TPoint &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a11319fc9a78f37cc0413b89665317313</anchor>
      <arglist>(const HyperRectDomain_Iterator&lt; TPoint &gt; &amp;aIt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextLexicographicOrder</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a314ab049fbcc38ac76af74ebdad5422b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HyperRectDomain_Iterator&lt; TPoint &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>ab4ed9f3195f8e621028904923b7a2b63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HyperRectDomain_Iterator&lt; TPoint &gt;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>ab6785118bb738f36af971b2b4382cfe3</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prevLexicographicOrder</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a44fce80b4efe7583a471299bb99eecfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HyperRectDomain_Iterator&lt; TPoint &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a18083a77a42a9d2e39b4d44ac2df98ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HyperRectDomain_Iterator&lt; TPoint &gt;</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a7e6c6c7ae18967e51591f70a5c09eaed</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TPoint</type>
      <name>myPoint</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>ab2a2ce1812af056d988324107711f0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TPoint</type>
      <name>mylower</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a32052c2b4135e9176f913b4c65cab316</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TPoint</type>
      <name>myupper</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a6e94da24caaf7a3b395244e73897b5cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Dimension</type>
      <name>myCurrentPos</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__Iterator.html</anchorfile>
      <anchor>a60bfd70d54ee1579f4f236dbbb55984f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::HyperRectDomain_subIterator</name>
    <filename>classDGtal_1_1HyperRectDomain__subIterator.html</filename>
    <templarg>TPoint</templarg>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a6084e57f181d2c80dca3deb936e5e221</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>value_type</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a4f9a90d5bb42bf3e5ac8a8b3bfdeed3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>afaebda2eda5a19cf4de9e901648b790f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint *</type>
      <name>pointer</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>ab2c17ca70f36390770f3684f4063ae6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint &amp;</type>
      <name>reference</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>aad3b9ad09e0816b0d44e015a5c85d768</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a81d70d6cc80b3ecbff6089e3947c1f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HyperRectDomain_subIterator</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>ad21bec91e4a06a288f7aaa2740033939</anchor>
      <arglist>(const TPoint &amp;p, const TPoint &amp;lower, const TPoint &amp;upper, const std::vector&lt; Dimension &gt; &amp;subDomain)</arglist>
    </member>
    <member kind="function">
      <type>const TPoint &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a653fb9d4c0291ffab174acba42878b9f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TPoint &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a0dc9ef861d226414f9eff26273f268a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a353c97ee3af8c8e2d0279b972f1349a7</anchor>
      <arglist>(const HyperRectDomain_subIterator&lt; TPoint &gt; &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>ae1105bea584e22be0d4a2ab19a9ace4d</anchor>
      <arglist>(const HyperRectDomain_subIterator&lt; TPoint &gt; &amp;aIt) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nextSubDomainOrder</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a1f346c0b84755a2460f5ef83a82e4921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HyperRectDomain_subIterator&lt; TPoint &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a656d81faadc9f693705b5746db056979</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HyperRectDomain_subIterator&lt; TPoint &gt;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a08053bf3ee7b4401c141554fbd56192d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prevSubDomainOrder</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a6a0900eaba4327ee6fa36b0f481e5e5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HyperRectDomain_subIterator&lt; TPoint &gt; &amp;</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a6d8e47f99cf1e1a7c7254441f17e124e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HyperRectDomain_subIterator&lt; TPoint &gt;</type>
      <name>operator--</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>af0301883d406cf10b8df6700f3ec74dc</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TPoint</type>
      <name>myPoint</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>ad7b6cc5b734717fe7de5a5b4bde44a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TPoint</type>
      <name>mylower</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a066e0989fce8be3af4c8a7d3897c4932</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TPoint</type>
      <name>myupper</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>a52f0d12ae0f546ab66b182f5e1b07be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Dimension</type>
      <name>myCurrentPos</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>ab0c2355087eccad9b62615765cff6a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; Dimension &gt;</type>
      <name>mySubDomain</name>
      <anchorfile>classDGtal_1_1HyperRectDomain__subIterator.html</anchorfile>
      <anchor>ac0ff84df29745056e3a2b9964e87df79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LinearAlgebra</name>
    <filename>structDGtal_1_1LinearAlgebra.html</filename>
    <templarg>Space</templarg>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1LinearAlgebra.html</anchorfile>
      <anchor>a272af173f08f321ddb0d99ac155f02a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1LinearAlgebra.html</anchorfile>
      <anchor>a70d148e500f5ca826a8f201d2643002d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>structDGtal_1_1LinearAlgebra.html</anchorfile>
      <anchor>aa373d691150d16ad4800ddcfd105b75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1LinearAlgebra.html</anchorfile>
      <anchor>a9bc28bee1bb8f2aba3f163735062d549</anchor>
      <arglist>((CSpace&lt; Space &gt;))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Integer</type>
      <name>determinant</name>
      <anchorfile>structDGtal_1_1LinearAlgebra.html</anchorfile>
      <anchor>ab28408f8774caa275844d3bbab65e6d1</anchor>
      <arglist>(const Point &amp;a, const Point &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>selfDisplay</name>
      <anchorfile>structDGtal_1_1LinearAlgebra.html</anchorfile>
      <anchor>a3a5401f27b086f047e914f7c964c9f93</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValid</name>
      <anchorfile>structDGtal_1_1LinearAlgebra.html</anchorfile>
      <anchor>aa278abee4feac05ccddc87868447c8fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Space::Dimension</type>
      <name>dimension</name>
      <anchorfile>structDGtal_1_1LinearAlgebra.html</anchorfile>
      <anchor>adf39f09adea8af09299e1f10024adf02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits</name>
    <filename>structDGtal_1_1NumberTraits.html</filename>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>TagUnknown</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a566fad2969486a51786e20eb15a6342d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagUnknown</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a46f37ab1c547abcccdf9714927085bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagUnknown</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a55fbdc0dbb41045968011411f4bb7841</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a9eadf96ccdc004ed4a54a3a39c239c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>afb992f12c2001e90ec95ad7e2bdabd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a281d1dfefbd06f50ba3919399a9e9514</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a9ee6be1620ad2e039aa43c3de4ade06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; T &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>ab43ed30023d0d94e820a941be6965c0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a98502a4b6a839c57c51d8aec388ed8c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a6e3ca3ed4dbe97e18065c6786381e68d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a2392cd64dfdd717a3eadb9d87d2c648b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>adfa153af05a60f2e5d600a08de8f0218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a5600b69a7c2011dd0761c7962b81d04a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a016d877e0513fade72321f9749265da8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>aa35e0625693c1803c9ac58e1fa91ab83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a3a756ae33d55ae18abe2199b893ad3d2</anchor>
      <arglist>(const T &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a8a933716b517bdd69c3ca0264ea02ffe</anchor>
      <arglist>(const T &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a3747687360ef0adbb361715abc459415</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>af5dbaf8940d615a8fda5f66f7ec4fe47</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>a69042e04027aa224bbb3882004f5157a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const T</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits.html</anchorfile>
      <anchor>aa323cf345a9f6eccd4d9a95135960fa1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; uint16_t &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>af0993753582d313b6951cf0c7de52a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a35a58471b3d3ddb202da75a0f17b009a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a10d36ecbfb3ba45bc02bb57a4f57fd1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a0d15e1399cf38f41a2d7e32058245349</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a0737af04f30868d5f42e4dbb6ee58b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a2baebb747fbd2bc738bcf4c05459f5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>acf7f898d0f16d6e92d6aed51530a275d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; uint16_t &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a4b20470aed6cdfa867df832acfd1a4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a8e759b866011e6e99d81e7cbec2a670c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>ad41bca1ae5bd92ad29cb385858bad3a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>ad6dc4fa30ec1abc0ef5bae99ba8e2fc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a60ce40a30cfaf58f5336aeff993aadc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a65453387bcc5694db5b5a9fa4d3fae09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>ae91736a7ec808552029b196fbd1154f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a087712f9ce460d673aae80e7e689d672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>ad78366f5295d6e9d98733a3174d2cdf0</anchor>
      <arglist>(const uint16_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a45c740addacaa20c4f3047104c4c2923</anchor>
      <arglist>(const uint16_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a7c86b8efdf748b916368a755baf307be</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a9c06a5904007cc97fa59b8403a187870</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a14aa59218707974175368b6dc22727be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint16_t</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint16__t_01_4.html</anchorfile>
      <anchor>a86cdf10165d11fcd8d8cc8bc6acc1a07</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; int16_t &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a98562ac34e1927760f74503c91b8d94e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a5ff061c4e44a30ee8a5fc52584f6ace3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a4ed4474fbd0753eafa5b7cd498fd768e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>ae3b58c6dc1c65b4e9e8c5d4dce7163bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a8ad7c80441670f71921c8338a11ccfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint16_t</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>aecb0b2b23f97e1cd94fe4829b652f34d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int16_t</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a96b9caa23447685de3a0ba433b485e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; int16_t &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a15f5dbe4def1181acd467c406e5e2bd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>aa975e0c15c6fc9e5be7c96a7375007c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a218d72815ad7f9ef7a92ebf210505012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>af175a414f6ab8c07eb3261c937dfeb72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>af1c161557aa8819404b34e1d1d32fb93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a39640caa605a5e43e9503cb53aa26d81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a95bb2030382ffbce0bdd8b5e4a7e4b82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a67caf5b0de0e1aeb770be5964c76aa17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>aa0004f759a94b2978c1a4f049ff09ab3</anchor>
      <arglist>(const int16_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a7e3354dddf1dc99217466425229f6e81</anchor>
      <arglist>(const int16_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>ad1e80810aa7f8e9ab402f719b4607a2f</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>a0b2daef6c593a38a5c2f0d82d6bed8f7</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16_t</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>abdcd5bd123b133315d8545a59f086652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int16_t</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int16__t_01_4.html</anchorfile>
      <anchor>aa6f99007441f5dd10f723000ad699e10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; uint8_t &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a1b933bbdbd523b40e469c0bdf2553146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>ac0089658388b55c69a5aedf002543c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a68f366d237c9fdacf41a5a29dca746b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a9b52c3752b04eb433fed44ae4078c242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int8_t</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>aa33ec158dc5ba0f067511ff9cacfde05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>ac53c2e9446c2393a085e97f60ae969eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a4bbb586f86da59c9133c0432d281e81f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; uint8_t &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a4712e0b4d4e6ab479d150192db4eda0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a3b0db9dd844ebeb7b155bc1d592c9945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a2c0446ae430278bd5be738ae204690e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a9c3c121ec80d0fb1646f2a2cd3cfa8e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>afc0bda558ac632075eef953f38bb7f99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>ad9c8736c12045e5d545fdc0eee9e4710</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>aa1f2c61d056ec671954315ff84456644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a16f16308923f4793fb45e2aed96111de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a8368bff99b87aae7ce7ccb8495181cda</anchor>
      <arglist>(const uint8_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a0afff36324b87010c3c15e6a3fb94761</anchor>
      <arglist>(const uint8_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a60915dc4600e5a45b7122305a567c405</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>a0c93c4698e2a77a8480984e689da0407</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>ae9b4bb2a00c09010c2e7f38c4f9d5065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint8_t</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint8__t_01_4.html</anchorfile>
      <anchor>ad5348c67259773a3425fcceedc0c8004</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; int8_t &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a91bcea63defff404d43a97690aa44007</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a927dcacf3c931b1d9b7bb859a24f96f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a5bc9554c59bcee7072ab9982b35050bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a349fbfc5d9a638ba9ed20c74d8c8fce1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int8_t</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a84fb71f08bf5637c4bcd9292bce816d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>aa70fd5444d3452cca89121885a3ea5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int8_t</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>ace1776ba39c19225b88998a63d9940fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; int8_t &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a61b0498fcdd719553d5d6f3d744555d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>ad22dd2ded701b40e8338fc83fb25434e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a2fe6426246a7d7e27eb667115f9632b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a3058994bb8a28163118ce43135a79757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a4d1a2a262717764f6522dbdca7bd0d3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>aeac151976dd5f83bf91798cd83da53d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>ad4570595b3c93f5876e7ad606b013050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>aded9af75f554ef0be7a37a98c7871eb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a506c96ee66c6a362917b9e6a91a1f8c9</anchor>
      <arglist>(const int8_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a40932425ae0b7c27c362168dc143832f</anchor>
      <arglist>(const int8_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>abbe0c16cdb78ab4efe7718c5fc77b539</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a5ed71d06c76ab18cf64690a572982d0e</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int8_t</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a979a7d1ee960199e5458f414d35e6fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int8_t</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int8__t_01_4.html</anchorfile>
      <anchor>a9461e42104c23b63eaeadeccb2fadb9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; uint32_t &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>aca0b66b50ce798308701ea378b894fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a65d050bde2d481c45e33cd91ea716db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a172b2f470bb15349e4a81d734f988ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a4ce423c6d4b80ad04602c8935df725d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a14d2cea9ceae4b3d945121df6415cb33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>ae8a4e4ab59fad0db8d09c831d5a58dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a7bcd4d8aefffb887fa8ab9bde98b8c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; uint32_t &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a31fd853ec2eca45a07d4835ca15e37ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a726e0c437da16eb6d0360de2ec6037c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a2e1c21e8460337f6df81c225bb44c834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a2c9830d669dfa78a63e39529e1190b6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a7b32341d570531d4e9e5ab6f4217a344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>adc23da4da99cf327ca2d5c5371ac37f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a36948401f56d1213ffe58a7ba3967809</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a21d72af978f5492f5fe1421bf4602cb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>ad05aae8b9718d1e097cb3941f2eb58d0</anchor>
      <arglist>(const uint32_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a26d1ba6e4afa22f7ba2018670707dde5</anchor>
      <arglist>(const uint32_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>a78c3dc91bd3d6610d85c6332a85e6e9c</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>aa481b5ac9d1ab75527bfa239391db242</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint32_t</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>ae17e06b4f51942246bc8b1d15d1b0d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint32_t</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint32__t_01_4.html</anchorfile>
      <anchor>ac1ee03992b9574fd66c83bbbef8ffdbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; int32_t &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>accae13d25b52991790d8a3a8ad3d67b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>aaa49f7e97e7c5d3743bd87c783b9d6fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>abe30de570c16da2b7254e9d88f1b3d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a886137fedee671f169afb47e33da8dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a1a4f93248eec1d3d47ccd62e63915054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a6bccdcb061aaa7b31ad39d2d96e8f0a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a8ff7a371827c24ad505cc9be79571f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; int32_t &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a6f596d7ea5c797359211469e7e7c8016</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a5a433e0ff95585ce6ef760c737dfa5a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>ac7dbcf9ed52e0b2475b2d864231be3b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a4114d3443df69117accfe1791e3147d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>aeba72ade65825a2d4e8362fe6040fc3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>adea2756ed98bcb8cd375323d58f280df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>adffc7b9fe54e238586f80fe642a6c154</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a57a79039c9132d14fdc90e1aaca3cbef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a4d641abecf0323048d89e4233035f09c</anchor>
      <arglist>(const int32_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>afcc03dd146abfad9d54953b94dd952e4</anchor>
      <arglist>(const int32_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>abeafd0af21e513452d0d63b8a9423bce</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a5bc776c5edd07e4b6227030860de8798</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a9ccd1c6de960a74013e653a3929598ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int32_t</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int32__t_01_4.html</anchorfile>
      <anchor>a199bc95a68d57a7d0045e55679b38184</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; uint64_t &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a2bc3d63eff9864bca43fb2fdae3850ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a004776ed69cee0bce06a91d9325f9f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a474aab3c04e1d7416779da00a935d46b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a0c0a9a713617975dbeac9921a88850e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a0bcf48965dee6158eb5435a5e99ce38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a99e55d7f5c8846e99a3f8aa2dd512d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a4a6f168299516c9f619fe7c18072a8fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; uint64_t &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a9a381ce3d643e42597a09b73ebd0ff70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>ada1514c9376a4d494b7f8b23adcd9959</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a9c379d8e9387faae0ef299920ba9f3bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a3fe5fd8d3b0618c1bfb3276885724686</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>aebafe725b7f7f021a7edc112aaee428d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>ae5393843ab2ef50f169cfc9f5d354db7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a8f8b6c65f004fe3a2387ea834cb65ba4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a5aa12c47e0ce2cb7ca690a36007b5a9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>ad7cc81c3b3b1ae3670ec7ae3ad79b04f</anchor>
      <arglist>(const uint64_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a414cbf235ea5798f0aedd4a503cc4fb3</anchor>
      <arglist>(const uint64_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>ac398fd8821a660b59fc9a12ceed37b39</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a394d0134954b1a0b9eaa875ffe95e74f</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint64_t</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>a57de81092a3488997bd79389093d3224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const uint64_t</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01uint64__t_01_4.html</anchorfile>
      <anchor>afafa82053ca90d3766eda2ea2cdce857</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; int64_t &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a4ae4342ed0744d29448917fb6953e0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a899cd67fe733437437f63c8b5eba1122</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a99318bdc32f2e825f97e316dffb2beee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a589c002cf0b9ce68b13b1280210ee600</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>ab00fec47415e4469d3a99e0ef86694dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint64_t</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a989e03d6c5972c12c345c60055dde92b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>ad72e16af6d7c2707f817419021bc0d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; int64_t &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>abe33c5ae8b0dd45e9801832b8586cfb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a43cf6f08049e7ad784f6a7545c89f323</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a275e43bfdf78b25a5b16c3297774b54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>aeb8a7d7b88b17f5a1483347c2bb50302</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a1169ca4e8a60ffa5d398c69b59fe846c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a4edf55e38cc5dc86de12fd0f2d4500dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>addc25d6928a87defd1b14a8278e5b1e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a685d655a8bcd11d3de633736b182f73e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>abbe7dbb322b2c600390f1fdd336c2408</anchor>
      <arglist>(const int64_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a228afd86c5ec3db0b6ad4c60c5b22920</anchor>
      <arglist>(const int64_t &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>even</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>ac11c4112baf8ad966cd92e1f719c7eb9</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>odd</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>ac762e57010a5df6c62c6265556de4b73</anchor>
      <arglist>(ParamType aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int64_t</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a4328753e7638511d27a885d180971123</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int64_t</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01int64__t_01_4.html</anchorfile>
      <anchor>a738412a418b7acfda066abc8de797e44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; float &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01float_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>adc272edfcaae01c5a25b56e5280f6921</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a0f2620b76786d611cbf7dd98f89e5f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a0aaa4ed862deacab44e7e86d0a39a254</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a88c32740e5bc368375edcacf33bdc526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a7a2d319db89018aadfffde8f72d5dfaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>ac19cba4cd0d012cef681bf2215451c7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a127b94f26141bc3a9d669bcf3c586658</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; float &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>ad450be684df6c8a64a0274cb74df609c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a5dc03fe2742524e7efcd0d2bfd47c3d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>af47962a67bdf74d3a16158730b25e52c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a8fb42097350d36c1b65f86d633d3f7fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a0c4747980559fe12614c8d3d89a39462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>ad0ffe2240bc50e84844ed048403e99e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>aa981cc7c9733576c1e5371fbda75ef62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>ade135fbe71e98e443daf9def27935f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a39f2e294ac564af5c534bf04a7db0518</anchor>
      <arglist>(const float &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>af310981f23e1131ce0a67e875829051d</anchor>
      <arglist>(const float &amp;aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>ac8c172fb5c1790ba14700f95176be908</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01float_01_4.html</anchorfile>
      <anchor>a258e17a99d070fde9196cf7ffffcb5d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; double &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01double_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a3f22fe4e9ce68d135f926fd29b5ec39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>ac1a1f94f46ca20aca95758e5633cc88b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a178a1a2ffbc3e39896174fe7075dad80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>ae53a9e8cbea1cc27ee3317dd6222a587</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>ab62ec23b5418b037ba07ca7ec2f1e09a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>ad8f521100936af42db1c903345c67486</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a4da61798eebb44a4b964b402825396bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; double &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>ad617793fe90e54614a4d640dcc60980a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>ae65b34700fbebe0ea0a226ebc969e774</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a8357f2fb65325fd65aae8709a8227cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a7f5d8c18fc106dc0fda5823afff4be68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a8f65cbd6ed777b4eaa84a9956a54c9df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>abe32a48bbdc6e1b98f0efab4b3bcda29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a06b5ae6cb98d56cba83adf4f734a16fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a99142f454b0c4bc5201fbb03821a56fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a50809da87f71182b334de0b638a08f60</anchor>
      <arglist>(const double &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a25bf3b1d48b7b747ab7929c937245d00</anchor>
      <arglist>(const double &amp;aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a437f218ae2042341ed6c9a42c7bb284b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const double</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01double_01_4.html</anchorfile>
      <anchor>a1a7f747a44901a6402f2061c17943f4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::NumberTraits&lt; long double &gt;</name>
    <filename>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</filename>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a33d6115e9d679371eb959839a499df67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagFalse</type>
      <name>IsUnsigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a43a63df242c410e5f15a80b47f2c91e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a7f787395ca8c2856b85183bb4aacc3af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TagTrue</type>
      <name>IsSpecialized</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>af735f1dbc251547b483cd5a4b132ae5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>SignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>ae6c746b4058abe31ab9e023ebf0a8c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>UnsignedVersion</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a165db40573dbd934ac1ccc76afb7ae45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long double</type>
      <name>ReturnType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a0ac005c305cb3d31c6187678fedef983</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::call_traits&lt; long double &gt;::param_type</type>
      <name>ParamType</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a797e901f52f1c53f6123053a8c33267f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>afd61f508a8027d9c5248b69c1d0066be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>one</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a41ad178081b06c4955154f68d06664d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>ae37633866911ad7051b33c25524b7b08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ReturnType</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a3c8b8ed701a7a161dabb277d914d067b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>digits</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a921a424b159add1ebcb62630a2b0e8ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoundEnum</type>
      <name>isBounded</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>adc8506c1117556f46307e35cb5a0651a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SignEnum</type>
      <name>isSigned</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a550a2d37df7af94dc68cf975f4956ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGtal::int64_t</type>
      <name>castToInt64_t</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>af4a9d0d95e9aede64f830f2d0cbb0fca</anchor>
      <arglist>(const long double &amp;aT)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>castToDouble</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>af9812ad274a7849338174fde68a9e586</anchor>
      <arglist>(const long double &amp;aT)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const long double</type>
      <name>ZERO</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a9e185e9b8962419c1e951626161d518d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const long double</type>
      <name>ONE</name>
      <anchorfile>structDGtal_1_1NumberTraits_3_01long_01double_01_4.html</anchorfile>
      <anchor>a5466dfc8b8b75a65fcc890dcb6e72e32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Warning_promote_trait_not_specialized_for_this_case</name>
    <filename>classDGtal_1_1Warning__promote__trait__not__specialized__for__this__case.html</filename>
  </compound>
  <compound kind="struct">
    <name>DGtal::promote_trait</name>
    <filename>structDGtal_1_1promote__trait.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Warning_promote_trait_not_specialized_for_this_case</type>
      <name>promote_t</name>
      <anchorfile>structDGtal_1_1promote__trait.html</anchorfile>
      <anchor>a252598736b227165d7aedca3b8d4a6f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::promote_trait&lt; int32_t, int64_t &gt;</name>
    <filename>structDGtal_1_1promote__trait_3_01int32__t_00_01int64__t_01_4.html</filename>
    <member kind="typedef">
      <type>int64_t</type>
      <name>promote_t</name>
      <anchorfile>structDGtal_1_1promote__trait_3_01int32__t_00_01int64__t_01_4.html</anchorfile>
      <anchor>a81e15c470316e3145ec003bdb8d5f336</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::PointVector</name>
    <filename>classDGtal_1_1PointVector.html</filename>
    <templarg>dim</templarg>
    <templarg>TEuclideanRing</templarg>
    <member kind="enumeration">
      <name>NormType</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ae1c647ad60b34b4d7c8b7d8d7b917fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>L_2</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ae1c647ad60b34b4d7c8b7d8d7b917fcbac923b82dd05eed3dae4c4c91984edeca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>L_1</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ae1c647ad60b34b4d7c8b7d8d7b917fcba49b5323f8eb56168229508aca9310e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>L_infty</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ae1c647ad60b34b4d7c8b7d8d7b917fcbac41b4d0fea7f13f35fe56e44e36315e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; dim, TEuclideanRing &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ad1de10abd4866c367ca919cf78dac879</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEuclideanRing</type>
      <name>Component</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>abf27ab0df8115e181fed9fb781240275</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Component</type>
      <name>Coordinate</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a8a0eecf19d2a73a50cc190a1d74a890c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Component &gt;::UnsignedVersion</type>
      <name>UnsignedComponent</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a5e317eaddca5977b38ca81521f77effd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a02f54e4c2a333b40a96e6adf06f99f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::array&lt; Component, dimension &gt;::iterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a59d152a7051001760dcb378ec038c5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::array&lt; Component, dimension &gt;::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a4ac5483beb310c963c2ca96917f5d407</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::array&lt; Component, dimension &gt;::reverse_iterator</type>
      <name>ReverseIterator</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a75901eefffb7111a271a6b8793748d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::array&lt; Component, dimension &gt;::const_reverse_iterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>afb131b7c1e516b368267649d0e6de027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ad5490dcedbb91f88cf8b3ad0da5e5620</anchor>
      <arglist>((CEuclideanRing&lt; TEuclideanRing &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointVector</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a929f9195e4bc88c885f8b19d6f1fde3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointVector</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a039b2b04e738c7dafcb12b75a4e1dc8b</anchor>
      <arglist>(const Component *ptrValues)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointVector</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a87a10edca7d2629da5e6a571cca06e51</anchor>
      <arglist>(const Component &amp;x, const Component &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointVector</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ae51d89496810feef082219f76076b00f</anchor>
      <arglist>(const Component &amp;x, const Component &amp;y, const Component &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointVector</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>afef3feb71dfb700281f7072d092f4782</anchor>
      <arglist>(const Component &amp;x, const Component &amp;y, const Component &amp;z, const Component &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointVector</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>adeaa9e8b175ce91d261a8a805b3341b8</anchor>
      <arglist>(const Self &amp;apoint1, const Self &amp;apoint2, const Functor &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PointVector</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ae58e5e7198c69ab8f7960f5e9f755969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointVector</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a49e0cf091ad46fbc491584be3e77a435</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointVector</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ae753589649bd30af07a3866a92e89089</anchor>
      <arglist>(const PointVector&lt; dim, OtherComponent &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a850980032f9d39ce20e625c25a4373e5</anchor>
      <arglist>(const Self &amp;pv)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>partialCopy</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>afc302246cef03c6d5ecd246523958ce0</anchor>
      <arglist>(const Self &amp;pv, const std::vector&lt; Dimension &gt; &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>partialCopyInv</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a114222df50376bd2f8d8e020ac9155ac</anchor>
      <arglist>(const Self &amp;pv, const std::vector&lt; Dimension &gt; &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>partialEqual</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a6454220e2496a48953844e76adb7e372</anchor>
      <arglist>(const Self &amp;pv, const std::vector&lt; Dimension &gt; &amp;dimensions) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>partialEqualInv</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a584d1926d8e4d4756a46da19c53d3d68</anchor>
      <arglist>(const Self &amp;pv, const std::vector&lt; Dimension &gt; &amp;dimensions) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a2435d2ab3dc5ab01ab32cd857c53a74d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a44d07b38a96624919f08b90aa101c51e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a131dadea756d09319207973176c22cfa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a2db97b21904e76b6f6a161412577f8e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a97bd7d6a302d53b1ff93255d997cdbc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a90eeb92d050174b038b32724ad9f08bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>afc612c9a2bcf687c64f5c0f6a1350a0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a29724998377d72d56cfaa0ebd3e32cd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Component &amp;</type>
      <name>at</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ae5db687fb6d7615892e70a5cd4dfab66</anchor>
      <arglist>(Dimension i) const </arglist>
    </member>
    <member kind="function">
      <type>Component &amp;</type>
      <name>at</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a2bbfa0ac8e04d0626698536c0ed767b9</anchor>
      <arglist>(Dimension i)</arglist>
    </member>
    <member kind="function">
      <type>const Component &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a2ca15ee904bba285d3d28562e5b64d04</anchor>
      <arglist>(Dimension i) const </arglist>
    </member>
    <member kind="function">
      <type>Component &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a08ad0c77ceb7398c96ef4b0d50f2c8b1</anchor>
      <arglist>(Dimension i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>aa21180fa25c812378a1f16014b4718b5</anchor>
      <arglist>(const Self &amp;pv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a6b7990f40433894f08cbbf8464a7adde</anchor>
      <arglist>(const Self &amp;pv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a9722511781d3c274d5813fe76472009b</anchor>
      <arglist>(const Self &amp;pv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a41d5347282d7b9ba40242392d8348aaf</anchor>
      <arglist>(const Self &amp;pv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a9a78464ab38f91ac5c2aea2715bdb791</anchor>
      <arglist>(const Self &amp;pv) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a26fcfc348043180f96b093f6469651f1</anchor>
      <arglist>(const Self &amp;pv) const </arglist>
    </member>
    <member kind="function">
      <type>PointVector &amp;</type>
      <name>operator*=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>aa82c70403129ce3913da20b44a483fb1</anchor>
      <arglist>(Component coeff)</arglist>
    </member>
    <member kind="function">
      <type>PointVector</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a0230f58e0f442d166e33eac2451e310a</anchor>
      <arglist>(Component coeff) const </arglist>
    </member>
    <member kind="function">
      <type>Component</type>
      <name>dot</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a6ce37e4ce7e26dbdc7c1cdb7387e4bfa</anchor>
      <arglist>(const Self &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>afb5a7cb4b4deb6b689138d5c6c1c077a</anchor>
      <arglist>(const Self &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator+</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ae225b72cee9c0fddbca331b6c340ada5</anchor>
      <arglist>(const Self &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator-=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ad7a6c08f19aa884ace1b8db166602e3d</anchor>
      <arglist>(const Self &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>abfe51fc6f1527d21eb89ad7ec0ac9bc7</anchor>
      <arglist>(const Self &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator/=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>aa9151d50cee59cb82e1c4f120fc3abe3</anchor>
      <arglist>(const Self &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator/</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ab9655432931025ea0962d856a013c54a</anchor>
      <arglist>(const Self &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator/</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a5d86cbff1201daa6731e074020f9ec60</anchor>
      <arglist>(const Component coeff)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator/=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a3c869e7fb32b6bda5136b4468f2b078a</anchor>
      <arglist>(const Component coeff)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a8840e940e4fa609dca4a305f36a78d5d</anchor>
      <arglist>(const PointVector&lt; dim, AnotherComponent &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>aca7dfb0dce4c08ab33864bc1b0f3dafe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>inf</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a9b2767c2d0b16839170f1bc722b25360</anchor>
      <arglist>(const Self &amp;apoint) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>sup</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a393514498a163a0d171da43db1e6b0bc</anchor>
      <arglist>(const Self &amp;apoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLower</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a589734918795c07ba01220eec19cf7d6</anchor>
      <arglist>(const Self &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpper</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a6ecb701bd52d419902f07d5cfbb8ba28</anchor>
      <arglist>(const Self &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Component</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a396cba31d2197169b83374b4e50e0347</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ac0785b06add760388f8d798f727ce903</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>maxElement</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a5f23eeb306deb2f8300ded0ffd21ad14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>minElement</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a2f902b0654454c2a9df642e3eb44ae00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a75db5ca0dd739c198870c21566f2a4b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a426389bf734242e59540c2313a652697</anchor>
      <arglist>(const NormType type=L_2) const </arglist>
    </member>
    <member kind="function">
      <type>UnsignedComponent</type>
      <name>norm1</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a42cb00347563749c1983197dde923cd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>UnsignedComponent</type>
      <name>normInfinity</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>af7ea8b56f7b1a45230a21394360e8b00</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>PointVector&lt; dim, double &gt;</type>
      <name>getNormalized</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>adbebd355013cbea24ccd7b5ff570aea6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a2a43ade0dce83850c16d50120be817f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a57f8d6fe06c71b31619b9ab629b0d856</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ac28ac23ff9322f9c08f531fbe8defe5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DGtal::PointVector&lt; dim, TComponent &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a6bb3849cff261756d7895f3b13ca5bd4</anchor>
      <arglist>(const DGtal::PointVector&lt; dim, Component2 &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dimension</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>ac928c3c5594e6f1f3f9e5e71aa04c3f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Self</type>
      <name>diagonal</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a03318d98c0a83a28d2d165e92ccb605a</anchor>
      <arglist>(Component val=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Self</type>
      <name>base</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a29359c93d3530d38579dcfa5a363eb95</anchor>
      <arglist>(Dimension k, Component val=1)</arglist>
    </member>
    <member kind="variable">
      <type>boost::array&lt; Component, dimension &gt;</type>
      <name>myArray</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a3b1ca93ca822fb881b675f92b5419126</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a6dfe08aaae396414bdf00aaf86574aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Self</type>
      <name>zero</name>
      <anchorfile>classDGtal_1_1PointVector.html</anchorfile>
      <anchor>a4069609a6cc026e4a6b47f382752dd66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::RegularPointEmbedder</name>
    <filename>classDGtal_1_1RegularPointEmbedder.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>aa3db0476d3eaed6b798738aeac39d05d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>abc345856dab954d97897613c2e7e8643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a1cd713b598726b5c0846a8021ff06f99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Argument</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a9cb4f2a747070596bc6a23ccd3e9c69a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPoint</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a17aecff98c452d8c94098277b636b793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a636841d87672ff8b6a84d65afe4d8d13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a4c2f74bdbb2c5d0071111181b7786233</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegularPointEmbedder</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>ae8303faa5e15f411b412c4878d5a1aa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularPointEmbedder</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>ac2453f63881727627c6ddc3e0c38d225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RegularPointEmbedder &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>ab6112d924c7f43e8473cf2193a7df11a</anchor>
      <arglist>(const RegularPointEmbedder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>ab934665b5e13ad119e0ab1c1db6fdedf</anchor>
      <arglist>(typename RealVector::Component gridStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a19f5047958ee48090217d11ba1790dc2</anchor>
      <arglist>(const RealVector &amp;gridSteps)</arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>floor</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>adb0ff7635003de039aab97b709cebeda</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>ceil</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>abb889326d5819c59d24b8469d9ec2a7f</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>round</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a8699bbb3fbd7d277eb403cd17197b4f0</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>ad8e23ee7f27c1f5cd331cab262dcc6e7</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a269c85a9077634cc7ea6c3d4c4d625d8</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>gridSteps</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a5e5278345730d5e71f4f26b534522f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a65c2e6af3347001bfb1b3bcf0e1a2b72</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>aac10ba34a93df0eea0cf0e511f2aa6c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealVector</type>
      <name>myGridSteps</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a67fbaae216b17847bee609ea472b54b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1RegularPointEmbedder.html</anchorfile>
      <anchor>a873cda05a42d8e2a65821df14b85b873</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDigitalSet</name>
    <filename>structDGtal_1_1CDigitalSet.html</filename>
    <templarg></templarg>
    <base>boost::Assignable</base>
    <member kind="typedef">
      <type>T::Domain</type>
      <name>Domain</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>ad9071c0877b4920714e6e79831f42e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>af2308a97b95cb485654594d2d0f8e8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Size</type>
      <name>Size</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a333c37ccd7ffa6cb252ad7742db0a051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Iterator</type>
      <name>Iterator</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a8826e29fbb12d7619d4a815cc3733864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a86189aecc7b5b0b7aaf39f2014f4d505</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>ab8408cfda209306e497e1988dd3e59ed</anchor>
      <arglist>((boost_concepts::ReadableIteratorConcept&lt; Iterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a17f08e54f7804177fda4ef7bce61dafa</anchor>
      <arglist>((boost_concepts::BidirectionalTraversalConcept&lt; Iterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>ac886dedb15b3dfc8d830b0957558420c</anchor>
      <arglist>((boost_concepts::ReadableIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a76458222fd215abcf70656229d6b0dfe</anchor>
      <arglist>((boost_concepts::BidirectionalTraversalConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>ad9401ec0a42d4a0de60dcad97f49181d</anchor>
      <arglist>(CDigitalSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>ada8487bfd3cb651f02ef5a73f5b40ad1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkNonConstConstraints</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>aba875e11c6fc0c74554ffd95724b4116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a64f6433f7dd648e1d6a3ae6a6756870c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Domain</type>
      <name>myDomain</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a8781fd5a8c36bcdfe3264c8f196a7e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>mySize</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a4c446ee6d972fc72b7c79b70ccd7b438</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myBool</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a0692b3a07ccba7faf1fc2ed6c5876c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myPoint</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>aa7971fd71c3be556879bf69c4dc6d214</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myIterator</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a8d653e6a5dea562509cd251e24b79eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myConstIterator</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>ad8544ea5bfff3f85b9f108e23869dff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point *</type>
      <name>myOutputIt</name>
      <anchorfile>structDGtal_1_1CDigitalSet.html</anchorfile>
      <anchor>a6ed6b1df54189f846a45a490d4076049</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CDigitalSetArchetype</name>
    <filename>classDGtal_1_1CDigitalSetArchetype.html</filename>
    <templarg>TDomain</templarg>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a81608e6587a8d972e8792e9b1d63e3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a340bc17cfb58c7114089454a6bcff906</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>ab4bb6b0543df9ae6e7599123bbda2a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CBidirectionalIteratorArchetype&lt; Point &gt;</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a1be3b71d3836e5544aa95c3bc6e5c104</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>af3116089672b9676ffb267169bdc902b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CDigitalSetArchetype</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a59ae49e8a267d6eedddcac0e2ac11f22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CDigitalSetArchetype</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>afa1699e437dfe723ff2f318e590adc94</anchor>
      <arglist>(const Domain &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CDigitalSetArchetype</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a710b7fe49365ebd833bbbd4cd7137e45</anchor>
      <arglist>(const CDigitalSetArchetype &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CDigitalSetArchetype &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>aa46ec095cffde24de533f050a9cee720</anchor>
      <arglist>(const CDigitalSetArchetype &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a6c2753cae09b60935b868cbb1c5969cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>adf2beda37132b83ab736fcdacb41bab1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a46ba814756491a5ee08841c8199d737d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a434302b7af2aeff2a0316c5b8e4b3d8e</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a110bbd257425eda6901e564751d06ac8</anchor>
      <arglist>(PointInputIterator first, PointInputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNew</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a9c5db374f82a2e7223f023fd4022506c</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNew</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>aee43a948ecc6d001d62e7e9ff1196ca4</anchor>
      <arglist>(PointInputIterator first, PointInputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a1dd78647e26fe1b6c2d8ff8745bf4e75</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>af5b199243ed947f8a64781af0daeea7c</anchor>
      <arglist>(Iterator it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a553a81a76aa0da19f76b1b156a75e7a5</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>acd41da340dd49be5b6d59924056b7988</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>aa904525c45c62484e14d61968be59fa5</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>ac1e3dba9664fd8c153ab8c5151bd967f</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>ac29c29138cf7adc6b474f98dee25e356</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>ac02820f0b0dd916d912d88486a61f10d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>adc1cf8e7e766a634edbf4f1fa90d5765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>aebc3477a1c4fee5fd9f6d23374b08fc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CDigitalSetArchetype&lt; Domain &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>ad8b5946608c3d5ec465636be26df0b36</anchor>
      <arglist>(const CDigitalSetArchetype&lt; Domain &gt; &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeComplement</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a56008cb1575f5a59136d1f4afa300f7b</anchor>
      <arglist>(TOutputIterator &amp;ito) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignFromComplement</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a9b3d79124dc4c826ae65fab85055402b</anchor>
      <arglist>(const CDigitalSetArchetype&lt; Domain &gt; &amp;other_set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoundingBox</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a6360a19a3b0697614d97eb731c395294</anchor>
      <arglist>(Point &amp;lower, Point &amp;upper) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>aa436107a7e809119affcdf4cfe1a8a5d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1CDigitalSetArchetype.html</anchorfile>
      <anchor>a8fcf39e95fc7f5d8ae9214ca1ff9cc91</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSetBySTLSet</name>
    <filename>classDGtal_1_1DigitalSetBySTLSet.html</filename>
    <templarg>TDomain</templarg>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>af36e8b32193fcadf56ad31acca7f3af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetBySTLSet&lt; Domain &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a0bd07fe8f6acb53390219091832a71a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a8c805d7c4fb95c412da6a732795a441a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>ac00690bf3d898655b457922d7503a0d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a7b57c27a01472158ccd292e582bc8eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Point &gt;::iterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a947223365c147c27d2c45d5465adc7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Point &gt;::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a418ab78cc28ca2cb22c1c6d20d4a2ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalSetBySTLSet</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a4b3dd4414b6daf9fdeb311ba48a8529d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetBySTLSet</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>aaedfff9f52e6df2c993581923037e7a4</anchor>
      <arglist>(const Domain &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetBySTLSet</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a33a938618822fb08d97e87fd149ebb79</anchor>
      <arglist>(const DigitalSetBySTLSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DigitalSetBySTLSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>ad8f4c4b8aba1af95f9439ebe76e04023</anchor>
      <arglist>(const DigitalSetBySTLSet &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>aeff245339aca1088ebadee1dcf867ea6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>ab196113cd0f6b1023511142368bef1cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a19d9c315da3aff9ec3b40af918880b2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a56d14a55174477b770557e8b60ea6fb2</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a5e0711b84ef244a95d7992805de4ccab</anchor>
      <arglist>(PointInputIterator first, PointInputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNew</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a79359730172c0cada6400a3ccc320ba7</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNew</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>ab50996e68fb69a08ec1553a79120ca32</anchor>
      <arglist>(PointInputIterator first, PointInputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a727130f15016b318ed32882da4a62ba9</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>aa2c3b83465120649abffe2c3fe4d564e</anchor>
      <arglist>(Iterator it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>af7c79001f752d8f3fdfeddb0e65fdcad</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>aeaa4cdcfbc20885f101415812702464f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a023a128ee4f5f124cfb8ebf27ea95769</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a138ba75ef00c12d2f07500d86c29b7e5</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a1b02804b66963746ddf8ba91a0364a8a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a4be6e8e8e82f92b93f68ea6622e61e96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a2eb4f096fabe8b6d889d606fad7e4805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>ad9e69e65ad686747bc0fb702b80db957</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigitalSetBySTLSet&lt; Domain &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a0d78ff5c0459cb5e8ccf62ddba21f1e9</anchor>
      <arglist>(const DigitalSetBySTLSet&lt; Domain &gt; &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeComplement</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>aad0a890edfb16b14f40c438217d6c2c9</anchor>
      <arglist>(TOutputIterator &amp;ito) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignFromComplement</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a2d94df9f517651102bcd22327195c59f</anchor>
      <arglist>(const DigitalSetBySTLSet&lt; Domain &gt; &amp;other_set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoundingBox</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a59caddad522d8f56970306295405ce35</anchor>
      <arglist>(Point &amp;lower, Point &amp;upper) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a882d8d036e614f4f913fc4fac75172b5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a4b2db94164cd3a687d4d7b0e14044771</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a22347a4f659e42001232afad881917a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DigitalSetBySTLSet</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>aec595063aa63876c39de6fdebb0b368d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Domain &amp;</type>
      <name>myDomain</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a4847fe373346ea4fd4dde480b3deaf45</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::set&lt; Point &gt;</type>
      <name>mySet</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLSet.html</anchorfile>
      <anchor>a31b44eafd5016a0d93deb265385d8856</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSetBySTLVector</name>
    <filename>classDGtal_1_1DigitalSetBySTLVector.html</filename>
    <templarg>TDomain</templarg>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>ac5f30ef622fac784baf4f13717f1eefd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetBySTLVector&lt; Domain &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a6c1885063b7c287bdd807c3945d7dc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>aae931fe06437fb6710a2299c0690c717</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>aa793a67da4f2cde2f574d63013348c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a85ddadb3fdc95af2d2c1f70a9daa61f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Point &gt;::iterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a48eeff3105cd4d2755137746ce9b6a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Point &gt;::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a24d419d8e36cc040d5a076535270cb09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalSetBySTLVector</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a80af908f7a3a164d78666a5543930e78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetBySTLVector</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>ac79f13a2db97d1ce56b91fa28c2cdccd</anchor>
      <arglist>(const Domain &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetBySTLVector</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>ac23434fd229ed3a46cb6a2a17e656d0e</anchor>
      <arglist>(const DigitalSetBySTLVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DigitalSetBySTLVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a91cf05fe9d1cbb071ca583d275894449</anchor>
      <arglist>(const DigitalSetBySTLVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a9bbc8c9e27ee552dc3777c716a723e5e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a3a61d4fb79322b76d65d61c487640355</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>abe82efdca6effd22b21af0e2b7e19426</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a32184aebe9b695c115b3b7ef9d3b362c</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a321d8857370f80eeab350550d0d00489</anchor>
      <arglist>(PointInputIterator first, PointInputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNew</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a255ea03672208ea320b6e1299519cc11</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNew</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>af0ff235a4bc76a148585a251714644ed</anchor>
      <arglist>(PointInputIterator first, PointInputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a8689c5638d78c50c3b16d3ff3d1c2c0e</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>ab92537a1c5f80cb5eb7dfb0025bc39fc</anchor>
      <arglist>(Iterator it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a19b7de1b7d2a7771f6784b770bf651cc</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a0635f877a7364529d31b9018a9e9a84c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a56a936c5e3d611577be5283bd3754aa3</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a0298a32a29fb3ea1b053f084f8c6250d</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a96541db2ddd3cf341fee13631ccc08ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>ac8b88e90f7cbccde20cf72a7defa5152</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a4481d8a0fc81d38083ebfc4195c01d98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>acbb13b3d53ab9d26d897237e9491ae1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigitalSetBySTLVector&lt; Domain &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a67835ecb905783337e126800646eb56a</anchor>
      <arglist>(const DigitalSetBySTLVector&lt; Domain &gt; &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeComplement</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>ac334e5d11659996c5cef646b1d06d4ef</anchor>
      <arglist>(TOutputIterator &amp;ito) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignFromComplement</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a29abedf64a1109d7005512b59eda26d6</anchor>
      <arglist>(const DigitalSetBySTLVector&lt; Domain &gt; &amp;other_set)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoundingBox</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>aafa6d92c0edc1a951d1767cd7e134e10</anchor>
      <arglist>(Point &amp;lower, Point &amp;upper) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a7d1b7467eedf65c192acd00d2609c297</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a0463dd31f9c5cf7e1037937ff61802f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a259d1eb44cc94f5415b08ca3bd0557b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DigitalSetBySTLVector</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a3cde34e9c0af03b3cc5db6260dbe6d34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Domain &amp;</type>
      <name>myDomain</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a2739bdb1adfb894a61176c1fe5e70463</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Point &gt;</type>
      <name>myVector</name>
      <anchorfile>classDGtal_1_1DigitalSetBySTLVector.html</anchorfile>
      <anchor>a4f9419a1f9c893d1c5aa086dd69e2c94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DigitalSetConverter</name>
    <filename>structDGtal_1_1DigitalSetConverter.html</filename>
    <templarg>OutputDigitalSet</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>assign</name>
      <anchorfile>structDGtal_1_1DigitalSetConverter.html</anchorfile>
      <anchor>a8627bc17a1f4cfaa9355f7844a9b1142</anchor>
      <arglist>(OutputDigitalSet &amp;output, const InputDigitalSet &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>assign</name>
      <anchorfile>structDGtal_1_1DigitalSetConverter.html</anchorfile>
      <anchor>a6ea1ded92458e663f0af19f57ec3efae</anchor>
      <arglist>(OutputDigitalSet &amp;output, const OutputDigitalSet &amp;input)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSetDomain</name>
    <filename>classDGtal_1_1DigitalSetDomain.html</filename>
    <templarg>TDigitalSet</templarg>
    <member kind="typedef">
      <type>TDigitalSet</type>
      <name>DigitalSet</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a5517af9c4911ee779ee0ff8ad7acb5b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a0a3017744f0b867390670f3845eb8f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>ac12e73f6bce57ea3e11b359186e5fe23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a836001f60ec0e74fb3c34fcd9d6050b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::IsBounded</type>
      <name>IsBounded</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>ac2d04cd1c440c7c35be8b634996167d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a0cbf41e809f6fb280d5f87bcafa9f0ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a0aa104dfe9957e39220ff18438f38e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>ab896bb7fbb43d43b64968ab28cc143a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>af5fdf7aead0f100301dda5d7178bb221</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a487672e26155feb7c1b243e4c730d119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetPredicate&lt; DigitalSet &gt;</type>
      <name>Predicate</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a2b72a5aca16cede09fd262510257edc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalSetDomain</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a7d481de8221758127587db42a662e08b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetDomain</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a31000a4e8610f901cea62c991a5fefb9</anchor>
      <arglist>(const DigitalSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetDomain</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a03190bfdbd9814d5639326e977a1c86a</anchor>
      <arglist>(const DigitalSetDomain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a4a04a065c7575d51a3b79542a5f46c58</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a5293911e4e052a89997a036e92b018e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a49de9ff42ccb8f6f7b8d7805503e1293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>lowerBound</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a048d46ea9193866e274ca22b88dc1759</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>upperBound</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>acb48dd6e11d92f1c1cb1ef58ce5b38f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>aca9d39206875208b1108e2938e9526ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a3665e8ae99a8b67359901f902f16a7b0</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>const Predicate &amp;</type>
      <name>predicate</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a97f66952edf026a8ff72d5cc8b0e5ec5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>ac2aa9bdecb17a48d3774bbaf0326e0b1</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a12f9703c09373ebf730c176404609edc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DigitalSetDomain</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a16cb8de1f7d7d7dbb21d72e24a62b1ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DigitalSetDomain &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>af4c2a9f116cb0d8b85d8202e558856bd</anchor>
      <arglist>(const DigitalSetDomain &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSet &amp;</type>
      <name>mySet</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>ad96067074ca61705d0a4005693210731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myUpperBound</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>afa93f71fae2cac725baee7b75bce4df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myLowerBound</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a93984e054ac64c00b4d47752b28bdcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Predicate</type>
      <name>myPredicate</name>
      <anchorfile>classDGtal_1_1DigitalSetDomain.html</anchorfile>
      <anchor>a3a96f5b2dad707de769440f107575381</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSetFromMap</name>
    <filename>classDGtal_1_1DigitalSetFromMap.html</filename>
    <templarg>TMapImage</templarg>
    <member kind="typedef">
      <type>TMapImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a523b72bf41beb88fb732ae39f651ee83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; const typename Image::Point, typename Image::Value &gt;</type>
      <name>Pair</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a16e6f775090760bf361a77de0ce7b097</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetFromMap&lt; Image &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a8ed34593908fb08a70ba0933f5841311</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a5832334b8ce3f8805077ee5edb7108f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>abed819f646f9ee01a523b2db7ab3369e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a8e4b675eb4703b5680a7f2cdd290a512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pair1st&lt; Point &gt;</type>
      <name>Functor</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>afc945c4f85a0967faa48a9ddaaa5eabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIteratorAdapter&lt; typename Image::ConstIterator, Functor, Point &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>ad884cdc850d0f8c6d41c74f3504800b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIteratorAdapter&lt; typename Image::Iterator, Functor, Point &gt;</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a2fc82ab3b94c6f30e6b8f61421558eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalSetFromMap</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a4d11f787977aece6b16a7316961c8b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetFromMap</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>aeb29915ec9db24bfca37bbbedcdd2406</anchor>
      <arglist>(Image &amp;aImage, const typename Image::Value &amp;aDefaultValue=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetFromMap</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a38a329e96d170d7fd1909ff05c68ca50</anchor>
      <arglist>(const DigitalSetFromMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DigitalSetFromMap &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>ae85c15de06e1bdbff31fe046c1a35d65</anchor>
      <arglist>(const DigitalSetFromMap &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>ae990d4b5ad64809d59ac223bd8193cbb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a3d691ce671feed8f49803ce68fefde9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>ac83c3dd15ed428b2d44a936b9e6f055c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>ae6fbc26bb479c40949274377fe3fa117</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a55279d2460fad67ae16923e07cec3626</anchor>
      <arglist>(PointInputIterator first, PointInputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNew</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a16efad6e0bda3dfb4bd83ccb0063f3c9</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertNew</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>add566ab1cf8ee268241bba656729a60b</anchor>
      <arglist>(PointInputIterator first, PointInputIterator last)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a4078e46aafae86f416f76f8b86db3a0c</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a9e46d133b55414e517a4e2bee36b3b94</anchor>
      <arglist>(Iterator it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>abe228cc7b989b57761fd658356915d83</anchor>
      <arglist>(Iterator first, Iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a0c1c8ed9231b60efffa61afc4e9e210a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a9a7e99cfb89d3418dea7de98d61c2e01</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a54fcda1f8be35d7c79f3b5536a70f901</anchor>
      <arglist>(const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a57060406ce28ff63b0721378e310a604</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>abe2fdc44d05849fdc47f9062d1cb4aec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a6366cb29dcca7cf20b5d0e0cee0d5292</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a08dccb9b4e44ecc774dd1ab0df9444a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a1f10e40664e88ad7b1ecf99b0a849a40</anchor>
      <arglist>(const TDigitalSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeComplement</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a4e2d74ef1edc4a98da3d3681aaa7c5c2</anchor>
      <arglist>(TOutputIterator &amp;ito) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignFromComplement</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>ab5db6fc71453d38d12ea42be7b8490fd</anchor>
      <arglist>(const TDigitalSet &amp;otherSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeBoundingBox</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a5c804715fbc7f08b77518c30cf9e044a</anchor>
      <arglist>(Point &amp;lower, Point &amp;upper) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a5502c640c6298600bd8502bcaad6fb5c</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a1e0daae427a02558a09ec31fd343d595</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>ae4e48c99d436a0b8dc1fe6002521b3b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DigitalSetFromMap</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>ad67303c64f5cdb4e1cc65933737fb97e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Image *</type>
      <name>myImgPtr</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a1463005b966e8da79ac9b1544652e52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Functor</type>
      <name>myFun</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a7237cceb63c13e0daae7b8d57a6ac95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Image::Value</type>
      <name>myDefault</name>
      <anchorfile>classDGtal_1_1DigitalSetFromMap.html</anchorfile>
      <anchor>a8e3680702b2cbb1366b7aa9b2bd78063</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSetInserter</name>
    <filename>classDGtal_1_1DigitalSetInserter.html</filename>
    <templarg>TDigitalSet</templarg>
    <member kind="function">
      <type></type>
      <name>DigitalSetInserter</name>
      <anchorfile>classDGtal_1_1DigitalSetInserter.html</anchorfile>
      <anchor>ab8249a721fa028fc06a4ffa5761b73c9</anchor>
      <arglist>(TDigitalSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type>DigitalSetInserter&lt; TDigitalSet &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSetInserter.html</anchorfile>
      <anchor>ad3cbbf9dd7a0cd6d489eb65572a68ae0</anchor>
      <arglist>(typename TDigitalSet::Point aPoint)</arglist>
    </member>
    <member kind="function">
      <type>DigitalSetInserter&lt; TDigitalSet &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1DigitalSetInserter.html</anchorfile>
      <anchor>a6ae09f9cdc85995362e81be9571cc7a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigitalSetInserter&lt; TDigitalSet &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1DigitalSetInserter.html</anchorfile>
      <anchor>a629315c206f9ec09acbec13c3e86e19d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DigitalSetInserter&lt; TDigitalSet &gt;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1DigitalSetInserter.html</anchorfile>
      <anchor>ae64a5bb851ca79cca3115112610d32b2</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DigitalSetInserter.html</anchorfile>
      <anchor>a7e4bbebecb7aaf93e05b093e68687d37</anchor>
      <arglist>((CDigitalSet&lt; TDigitalSet &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TDigitalSet *</type>
      <name>mySet</name>
      <anchorfile>classDGtal_1_1DigitalSetInserter.html</anchorfile>
      <anchor>a6e0c9b710165677ea713f29434412ac7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DigitalSetSelector</name>
    <filename>structDGtal_1_1DigitalSetSelector.html</filename>
    <templarg>Domain</templarg>
    <templarg>Preferences</templarg>
    <member kind="typedef">
      <type>DigitalSetBySTLSet&lt; Domain &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1DigitalSetSelector.html</anchorfile>
      <anchor>a0583401084ed3ca37273d95beccb4131</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DigitalSetSelector&lt; Domain, SMALL_DS+LOW_VAR_DS+LOW_ITER_DS+LOW_BEL_DS &gt;</name>
    <filename>structDGtal_1_1DigitalSetSelector_3_01Domain_00_01SMALL__DS_09LOW__VAR__DS_09LOW__ITER__DS_09LOW__BEL__DS_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DigitalSetBySTLVector&lt; Domain &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1DigitalSetSelector_3_01Domain_00_01SMALL__DS_09LOW__VAR__DS_09LOW__ITER__DS_09LOW__BEL__DS_01_4.html</anchorfile>
      <anchor>ad9398f21f94ddb70c239b016e751a44b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DigitalSetSelector&lt; Domain, SMALL_DS+LOW_VAR_DS+HIGH_ITER_DS+LOW_BEL_DS &gt;</name>
    <filename>structDGtal_1_1DigitalSetSelector_3_01Domain_00_01SMALL__DS_09LOW__VAR__DS_09HIGH__ITER__DS_09LOW__BEL__DS_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DigitalSetBySTLVector&lt; Domain &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1DigitalSetSelector_3_01Domain_00_01SMALL__DS_09LOW__VAR__DS_09HIGH__ITER__DS_09LOW__BEL__DS_01_4.html</anchorfile>
      <anchor>a13ae54016e5d6b47f4b80ae07335e5cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SetPredicate</name>
    <filename>structDGtal_1_1SetPredicate.html</filename>
    <templarg>TDigitalSet</templarg>
    <member kind="typedef">
      <type>TDigitalSet</type>
      <name>DigitalSet</name>
      <anchorfile>structDGtal_1_1SetPredicate.html</anchorfile>
      <anchor>a733c5f162f7774550703bf4744a11f2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::Domain</type>
      <name>Domain</name>
      <anchorfile>structDGtal_1_1SetPredicate.html</anchorfile>
      <anchor>a5633d12242373d17ae312a325ec62656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1SetPredicate.html</anchorfile>
      <anchor>ab33a56c53960da1318fd431dd18de447</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetPredicate</name>
      <anchorfile>structDGtal_1_1SetPredicate.html</anchorfile>
      <anchor>a7a5a91e531cdad4430b90a5971937350</anchor>
      <arglist>(const DigitalSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetPredicate</name>
      <anchorfile>structDGtal_1_1SetPredicate.html</anchorfile>
      <anchor>a02e34a7f3d785adfd6f75de97d5f836f</anchor>
      <arglist>(const SetPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SetPredicate &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1SetPredicate.html</anchorfile>
      <anchor>a2f7e73b6073d312e90baa4d8071b134b</anchor>
      <arglist>(const SetPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1SetPredicate.html</anchorfile>
      <anchor>a4ab4e02bbf50894451994fff957bd399</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SetPredicate</name>
      <anchorfile>structDGtal_1_1SetPredicate.html</anchorfile>
      <anchor>a3a4b282310a54bb48348828e035c3f6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSet *</type>
      <name>mySet</name>
      <anchorfile>structDGtal_1_1SetPredicate.html</anchorfile>
      <anchor>a0638d1c7dee0b335887a02499eafd0c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SimpleMatrix</name>
    <filename>classDGtal_1_1SimpleMatrix.html</filename>
    <templarg>TComponent</templarg>
    <templarg>TM</templarg>
    <templarg>TN</templarg>
    <member kind="typedef">
      <type>TComponent</type>
      <name>Component</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a28166da3007be1831076a093cd90ac44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; N, Component &gt;</type>
      <name>RowVector</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>af8e92c749dd6f8c4ebb8016504e2d318</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; M, Component &gt;</type>
      <name>ColumnVector</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>ad9c4529302d75184b127fc5720688bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SimpleMatrix&lt; Component, TM, TN &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a3281dbb73674d7199edd34cf6fc2564f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>ac1f3af33fa69046d7b8e146b9c70e4c6</anchor>
      <arglist>((CEuclideanRing&lt; TComponent &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>aef46b1a9e636414aafb681bbf0f5f02e</anchor>
      <arglist>(TM &gt; 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>aef46b1a9e636414aafb681bbf0f5f02e</anchor>
      <arglist>(TM &gt; 0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleMatrix</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a6d400baeac9d2b5d921b857ecf4ba90a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleMatrix</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a9623d74a5e810484ad6c72d83d68cfc7</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a73199ceaca1e0014d4f92c6812966ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>constant</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a969f33b388494c6cc3584ff79be3c66c</anchor>
      <arglist>(const Component &amp;aScalar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>identity</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>aedaacb174dd1c32a7d7dfa5249d839db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RowVector</type>
      <name>row</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a11e95debf254d1ecda4424d914a2a865</anchor>
      <arglist>(const DGtal::Dimension i) const </arglist>
    </member>
    <member kind="function">
      <type>ColumnVector</type>
      <name>column</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>ae688c7218bbf5f4c842469bf2c628cbb</anchor>
      <arglist>(const DGtal::Dimension j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComponent</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>afd4bc1554b49cd3aef936edf050c0ab8</anchor>
      <arglist>(const DGtal::Dimension i, const DGtal::Dimension j, const Component &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>Component</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a06062a6cde6774623236959affab1e9e</anchor>
      <arglist>(const DGtal::Dimension i, const DGtal::Dimension j) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a3dba5308e1517a5a26345e7efc237064</anchor>
      <arglist>(const Self &amp;aMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>af5e025fb588807857becae19115e4840</anchor>
      <arglist>(const SimpleMatrix&lt; TComponentOther, M, N &gt; &amp;aMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator+</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a3250255c02709093a66fda019fbbbb53</anchor>
      <arglist>(const Self &amp;aMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>af532ad35120b6574f60eed800f80d966</anchor>
      <arglist>(const Self &amp;aMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a41c0d6f2c77588618d4733608d144d27</anchor>
      <arglist>(const Self &amp;aMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator-=</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a42a3f95d55c3c06b4ef2abaf97b61b35</anchor>
      <arglist>(const Self &amp;aMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a7ffaecbda362836f46fae0ed5cde0a43</anchor>
      <arglist>(const Component &amp;aScalar) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator*=</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a7f6f1ad2117ee2166e4eaaece7d5ef87</anchor>
      <arglist>(const Component &amp;aScalar)</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator/</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a58c72ab35b52e540e009c78746b82de6</anchor>
      <arglist>(const Component &amp;aScalar) const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator/=</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a1e6cf11efbb3cd79319263a0c527c92a</anchor>
      <arglist>(const Component &amp;aScalar)</arglist>
    </member>
    <member kind="function">
      <type>SimpleMatrix&lt; Component, TM, TM &gt;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a26e50f029a4b9de197f013cbffd833f5</anchor>
      <arglist>(const SimpleMatrix&lt; Component, N, M &gt; &amp;aMatrix) const </arglist>
    </member>
    <member kind="function">
      <type>ColumnVector</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a7a4ef8ab4f74caa4aed742f04020da2b</anchor>
      <arglist>(const RowVector &amp;aVector) const </arglist>
    </member>
    <member kind="function">
      <type>SimpleMatrix&lt; Component, TN, TM &gt;</type>
      <name>transpose</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a9ce64bb4a084838ca3480948ead29199</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component</type>
      <name>cofactor</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>ab90ec29e9b2615e1c40e9f501a16fdfc</anchor>
      <arglist>(const DGtal::Dimension i, const DGtal::Dimension j) const </arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>cofactor</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a64b4d2fd394ad17097dd54e1d2ae13e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Component</type>
      <name>minorDeterminant</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>aa7f7300d3853aed4bb9c05e3381e17c2</anchor>
      <arglist>(const DGtal::Dimension i, const DGtal::Dimension j) const </arglist>
    </member>
    <member kind="function">
      <type>Component</type>
      <name>determinant</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>ae0c807d2cb5fbdc9562eebf880822fab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SimpleMatrix&lt; Component, TM, TN &gt;</type>
      <name>inverse</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>ae46511673e308d6d6b907a09d5ec4f35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SimpleMatrix</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>ababb3b37a1e0652d097b548c82a29ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a6e7bb8dfbde5101a34d305c1f2a76f6f</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a9e6d5cd5403889e349064d2e18936a0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DGtal::SimpleMatrix&lt; T, TM, TN &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a56c33d02b4cf083ed8b26f9f4a6a75b7</anchor>
      <arglist>(const SimpleMatrix&lt; TC, M, N &gt; &amp;other)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DGtal::Dimension</type>
      <name>M</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a34bf09b309ead5a6249afee963c71250</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DGtal::Dimension</type>
      <name>N</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a7eb6090537206d1dfd1e6e00d25769d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::array&lt; Component, M *N &gt;</type>
      <name>myValues</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a30ddfec01a4dd22146b79676508a93a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::array&lt; Component, M *N &gt;</type>
      <name>myCofactorCoefs</name>
      <anchorfile>classDGtal_1_1SimpleMatrix.html</anchorfile>
      <anchor>a76ce7b329a76bced2f9e8e3fa3935063</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SimpleMatrixSpecializations</name>
    <filename>structDGtal_1_1SimpleMatrixSpecializations.html</filename>
    <templarg>TMatrix</templarg>
    <templarg>TM</templarg>
    <templarg>TN</templarg>
    <member kind="typedef">
      <type>TMatrix::Component</type>
      <name>Component</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations.html</anchorfile>
      <anchor>af4ba4daf6d6dd100701a01d5ea17f4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix</type>
      <name>Matrix</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations.html</anchorfile>
      <anchor>a1be82e9c7597641af49712ba9e410335</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations.html</anchorfile>
      <anchor>af5e847a2ffa57402064a82456af78183</anchor>
      <arglist>(TM==TMatrix::M)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations.html</anchorfile>
      <anchor>abf30e590b36784c896ec170466040aa0</anchor>
      <arglist>(TN==TMatrix::N)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component</type>
      <name>minorDeterminant</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations.html</anchorfile>
      <anchor>a0478903e8c228f0a03f1655b3a0b2a5d</anchor>
      <arglist>(const Matrix &amp;M, const DGtal::Dimension i, const DGtal::Dimension j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component</type>
      <name>determinant</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations.html</anchorfile>
      <anchor>ab9090a5bc9295567411f70f65215c780</anchor>
      <arglist>(const Matrix &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SimpleMatrixSpecializations&lt; TMatrix, 2, 2 &gt;</name>
    <filename>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_012_00_012_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TMatrix::Component</type>
      <name>Component</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_012_00_012_01_4.html</anchorfile>
      <anchor>acb893ed15c0621def80dd6c31882020f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix</type>
      <name>Matrix</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_012_00_012_01_4.html</anchorfile>
      <anchor>a51ab6d93cb582105e9474706485f8430</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_012_00_012_01_4.html</anchorfile>
      <anchor>a34c1abe7c153f15cf0530f4e09cc9157</anchor>
      <arglist>(2==TMatrix::M)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_012_00_012_01_4.html</anchorfile>
      <anchor>a17753311b45f04bbdbfc613653d5aaf2</anchor>
      <arglist>(2==TMatrix::N)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component</type>
      <name>minorDeterminant</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_012_00_012_01_4.html</anchorfile>
      <anchor>ac25506ff777a9b55cf59e03743dacf70</anchor>
      <arglist>(const Matrix &amp;aM, const DGtal::Dimension i, const DGtal::Dimension j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component</type>
      <name>determinant</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_012_00_012_01_4.html</anchorfile>
      <anchor>aa879a72009cfaf901459a17444ea5404</anchor>
      <arglist>(const Matrix &amp;aM)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SimpleMatrixSpecializations&lt; TMatrix, 1, 1 &gt;</name>
    <filename>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_011_00_011_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TMatrix::Component</type>
      <name>Component</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_011_00_011_01_4.html</anchorfile>
      <anchor>a84e5e7b320a19639f1502bf7ac91e860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix</type>
      <name>Matrix</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_011_00_011_01_4.html</anchorfile>
      <anchor>a68d5e7c3f29c46368d07acc81cf34c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_011_00_011_01_4.html</anchorfile>
      <anchor>aaa07c192803ea25c33cf767f33b5707c</anchor>
      <arglist>(1==TMatrix::M)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_011_00_011_01_4.html</anchorfile>
      <anchor>a517156f7928d478df352bb584c885a28</anchor>
      <arglist>(1==TMatrix::N)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component</type>
      <name>minorDeterminant</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_011_00_011_01_4.html</anchorfile>
      <anchor>a2c2613bd2e1023ba9814a00cceb9feeb</anchor>
      <arglist>(const Matrix &amp;aM, const DGtal::Dimension i, const DGtal::Dimension j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component</type>
      <name>determinant</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_011_00_011_01_4.html</anchorfile>
      <anchor>a709452f22b9b1ac04095f551a35c016d</anchor>
      <arglist>(const Matrix &amp;aM)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SimpleMatrixSpecializations&lt; TMatrix, 3, 3 &gt;</name>
    <filename>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_013_00_013_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TMatrix::Component</type>
      <name>Component</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_013_00_013_01_4.html</anchorfile>
      <anchor>ac58bbb039ca5be36a98c68f3c33ff557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMatrix</type>
      <name>Matrix</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_013_00_013_01_4.html</anchorfile>
      <anchor>ad56b12a241af458c29e2ef4d9639ca96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_013_00_013_01_4.html</anchorfile>
      <anchor>a52d0ef36da83d22cb075fb9b1bf18f27</anchor>
      <arglist>(3==TMatrix::M)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_013_00_013_01_4.html</anchorfile>
      <anchor>ac2febb41d8a85de3ca37de0d0d684a98</anchor>
      <arglist>(3==TMatrix::N)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component</type>
      <name>minorDeterminant</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_013_00_013_01_4.html</anchorfile>
      <anchor>ad92392ad5066aa1bd7712903e4c6ff46</anchor>
      <arglist>(const Matrix &amp;M, const DGtal::Dimension i, const DGtal::Dimension j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Component</type>
      <name>determinant</name>
      <anchorfile>structDGtal_1_1SimpleMatrixSpecializations_3_01TMatrix_00_013_00_013_01_4.html</anchorfile>
      <anchor>a6cbda0d09dcfcc7d257a34b3c4a6fdfe</anchor>
      <arglist>(const Matrix &amp;M)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SpaceND</name>
    <filename>classDGtal_1_1SpaceND.html</filename>
    <templarg>dim</templarg>
    <templarg>TInteger</templarg>
    <class kind="struct">DGtal::SpaceND::Subcospace</class>
    <class kind="struct">DGtal::SpaceND::Subspace</class>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>a3217d099840050eb7135e24b1ed7940d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::UnsignedVersion</type>
      <name>UnsignedInteger</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>a49f32e6a501b6627541c9ac6229b9803</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UnsignedInteger</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>a8486f499b96d020bdb65ee6cd9f4e1eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; dim, Integer &gt;</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>a34beb5f81d0848e8ae393f39a1422ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; dim, Integer &gt;</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>ae194f4dfc28465ea14b437c066e69604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; dim, double &gt;</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>a615c8017e5750e191610f48dcf968bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; dim, double &gt;</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>ac103823b62d88adef786537c9c2a77fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceND&lt; dim, Integer &gt;</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>aa8ca825608b5e560c4e57c74715b0e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>a2cd6e7ff8e384758bb37290e4b9fe7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGtal::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>ae7f572c89c2a36136ba4c453967319ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>aee934069601e5b07d5dc5c859307739a</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>aae87d3efb1051dbdeac28e159781ba92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>a0bce859fd04172b9388c1c77705fd263</anchor>
      <arglist>((CInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>ad3ac6b5f94a005c698d486b7a3370697</anchor>
      <arglist>((CCommutativeRing&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type>SpaceND &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>afb1dc29e145abdf35cafef279e91e268</anchor>
      <arglist>(const SpaceND &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>SpaceND</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>a40e7466cf6bd10991ca8cc6d56562349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>~SpaceND</name>
      <anchorfile>classDGtal_1_1SpaceND.html</anchorfile>
      <anchor>a5e5b2541054b561478274b08defbabc9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SpaceND::Subcospace</name>
    <filename>structDGtal_1_1SpaceND_1_1Subcospace.html</filename>
    <templarg>codimension</templarg>
    <member kind="typedef">
      <type>SpaceND&lt; dim-codimension, Integer &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1SpaceND_1_1Subcospace.html</anchorfile>
      <anchor>a5e544f1ada28223a732f7250a8219507</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SpaceND::Subspace</name>
    <filename>structDGtal_1_1SpaceND_1_1Subspace.html</filename>
    <templarg>subdimension</templarg>
    <member kind="typedef">
      <type>SpaceND&lt; subdimension, Integer &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1SpaceND_1_1Subspace.html</anchorfile>
      <anchor>a754d44c049d3fa9d585ce6cb2a396b69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::AngleComputer</name>
    <filename>structDGtal_1_1AngleComputer.html</filename>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>cast</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>a5f44ca259789ce0031ad03e7b4d7b10f</anchor>
      <arglist>(float i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>less</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>a1747122fb6147fbde4599cd6ec766e24</anchor>
      <arglist>(float i, float j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>posDiff</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>aab7c091bc86ab30770f50c6714cf8cd9</anchor>
      <arglist>(float j, float i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>deviation</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>af6d632e7121eae5fff6f4d568b6432a6</anchor>
      <arglist>(float j, float i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>ad5b1bb6d4cc6262e12392ac9750ecc9b</anchor>
      <arglist>(float i, float j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static float</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>a800c065f41ba9be5120f5c8f68600d84</anchor>
      <arglist>(float i, float j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>cast</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>a928d9fee73aee0480829a8121f28cb9a</anchor>
      <arglist>(double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>less</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>a1fd13f671d645df8e18d06883f9a809d</anchor>
      <arglist>(double i, double j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>posDiff</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>a0455fa1675dd04d4e303dba419e76f4d</anchor>
      <arglist>(double j, double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>deviation</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>aeb299a925bd82e5778deb18053ebbd5f</anchor>
      <arglist>(double j, double i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>a5c7963ae7d26aacc8607fcf877fb7824</anchor>
      <arglist>(double i, double j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1AngleComputer.html</anchorfile>
      <anchor>a3091a39d7216b9154323d1d5e2ebedea</anchor>
      <arglist>(double i, double j)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::AngleLinearMinimizer</name>
    <filename>classDGtal_1_1AngleLinearMinimizer.html</filename>
    <class kind="struct">DGtal::AngleLinearMinimizer::ValueInfo</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AngleLinearMinimizer</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a064a87e5f462c08ede4e348597d7cab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleLinearMinimizer</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>abdb53d8513472f4c9d6c2aa3c3ebb0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>af2aa4cc0e6956baec00506267b0e99e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a84e57a72343f629590ab9b9000c122c0</anchor>
      <arglist>(unsigned int nbMax)</arglist>
    </member>
    <member kind="function">
      <type>ValueInfo &amp;</type>
      <name>rw</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>afaa9bf44762e600023155d4ec2d5d225</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueInfo &amp;</type>
      <name>ro</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a0e0b0146d08582de715534e6ec63d799</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>aaa2826252cae8509f6872ea89e3f863c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a70195238945bd916c230d500fc1306d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a263ea6c4ff5e7b2d23871e3a2a9904ab</anchor>
      <arglist>(unsigned int nb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsCurveOpen</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a46bdd1ea4a687c8d396169a9bd09b094</anchor>
      <arglist>(bool is_curve_open=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEnergy</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a75546bf4346cf20106138bd139af9213</anchor>
      <arglist>(unsigned int i1, unsigned int i2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFormerEnergy</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a3225b86080456c52441a05258487f65d</anchor>
      <arglist>(unsigned int i1, unsigned int i2) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getGradient</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ad2e56b8b484d06b4b710b1ed1c47d63b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getFormerGradient</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>af788df826203c89e65b880411a6dbe7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ab67f3aab54fcc2f4eb3dddd53767ccc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ad5367a9035b5c474f403ffa60a103ec6</anchor>
      <arglist>(unsigned int i1, unsigned int i2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sum</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a3216b381963d93842342f324f6546efc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a1ce3c95dec6728d7953d29a63a6fcb22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastDelta</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>af4ec5988e698bd8fb5380a4afeec1113</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a91439cbff7ae4bd728de732f451c2f92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a3bb38479cd6111935b536db0d51cfe37</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a92f85a7943d10adfd059b19a45041372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a8281e8f5c18345c72129c4059e637278</anchor>
      <arglist>(unsigned int i1, unsigned int i2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsCurveOpen</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a4bebeb64b543a00f33f7b37b137ad89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueInfo *</type>
      <name>myValues</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ae286a562c87322365c1c53e5e33a2be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mySize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a211b2f9775b2223f71ccbfc23b300d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>AngleLinearMinimizer</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a130fe293519e8123fcd21a22aa5c3f6b</anchor>
      <arglist>(const AngleLinearMinimizer &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AngleLinearMinimizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ad15f79e6cf06b243230f743bee038f1c</anchor>
      <arglist>(const AngleLinearMinimizer &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myMaxSize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ae28f74e380cea53d20a73075284d6dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>mySum</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>adb102a74d0b1565024a6729c2dc994b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myMax</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a0e4861173542ebe5b51859925464bf5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::AngleLinearMinimizer::ValueInfo</name>
    <filename>structDGtal_1_1AngleLinearMinimizer_1_1ValueInfo.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1AngleLinearMinimizer_1_1ValueInfo.html</anchorfile>
      <anchor>a602bada5484f6b463d969179cfbb8146</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>oldValue</name>
      <anchorfile>structDGtal_1_1AngleLinearMinimizer_1_1ValueInfo.html</anchorfile>
      <anchor>a9bf41bb81c00113c6caa945d48a191ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>min</name>
      <anchorfile>structDGtal_1_1AngleLinearMinimizer_1_1ValueInfo.html</anchorfile>
      <anchor>a0e539bc9b2e6ec9b5c77588597b3d370</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>max</name>
      <anchorfile>structDGtal_1_1AngleLinearMinimizer_1_1ValueInfo.html</anchorfile>
      <anchor>acb423bd3dfeb43aac15d239e47f0036f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>distToNext</name>
      <anchorfile>structDGtal_1_1AngleLinearMinimizer_1_1ValueInfo.html</anchorfile>
      <anchor>ad272138ee56dc0ffe585a24f564eb2d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::AngleLinearMinimizerByRelaxation</name>
    <filename>classDGtal_1_1AngleLinearMinimizerByRelaxation.html</filename>
    <base>DGtal::AngleLinearMinimizer</base>
    <member kind="function">
      <type></type>
      <name>AngleLinearMinimizerByRelaxation</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByRelaxation.html</anchorfile>
      <anchor>a01214b2a6c06657919b3d5333fd82768</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AngleLinearMinimizerByRelaxation</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByRelaxation.html</anchorfile>
      <anchor>a1e717077e5c890a523d12f0d2d0b0554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastDelta</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByRelaxation.html</anchorfile>
      <anchor>aa16f61933ba1971678bb21674645acbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByRelaxation.html</anchorfile>
      <anchor>ae9479fded7fb47be956b1448ead2bda2</anchor>
      <arglist>(std::ostream &amp;aStream) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AngleLinearMinimizer</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a064a87e5f462c08ede4e348597d7cab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleLinearMinimizer</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>abdb53d8513472f4c9d6c2aa3c3ebb0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>af2aa4cc0e6956baec00506267b0e99e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a84e57a72343f629590ab9b9000c122c0</anchor>
      <arglist>(unsigned int nbMax)</arglist>
    </member>
    <member kind="function">
      <type>ValueInfo &amp;</type>
      <name>rw</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>afaa9bf44762e600023155d4ec2d5d225</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueInfo &amp;</type>
      <name>ro</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a0e0b0146d08582de715534e6ec63d799</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>aaa2826252cae8509f6872ea89e3f863c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a70195238945bd916c230d500fc1306d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a263ea6c4ff5e7b2d23871e3a2a9904ab</anchor>
      <arglist>(unsigned int nb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsCurveOpen</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a46bdd1ea4a687c8d396169a9bd09b094</anchor>
      <arglist>(bool is_curve_open=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEnergy</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a75546bf4346cf20106138bd139af9213</anchor>
      <arglist>(unsigned int i1, unsigned int i2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFormerEnergy</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a3225b86080456c52441a05258487f65d</anchor>
      <arglist>(unsigned int i1, unsigned int i2) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getGradient</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ad2e56b8b484d06b4b710b1ed1c47d63b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getFormerGradient</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>af788df826203c89e65b880411a6dbe7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ab67f3aab54fcc2f4eb3dddd53767ccc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ad5367a9035b5c474f403ffa60a103ec6</anchor>
      <arglist>(unsigned int i1, unsigned int i2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sum</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a3216b381963d93842342f324f6546efc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a1ce3c95dec6728d7953d29a63a6fcb22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a91439cbff7ae4bd728de732f451c2f92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a92f85a7943d10adfd059b19a45041372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByRelaxation.html</anchorfile>
      <anchor>a3ea2e48f460407a52266621a8d41535e</anchor>
      <arglist>(unsigned int i1, unsigned int i2)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsCurveOpen</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a4bebeb64b543a00f33f7b37b137ad89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueInfo *</type>
      <name>myValues</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ae286a562c87322365c1c53e5e33a2be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mySize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a211b2f9775b2223f71ccbfc23b300d08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::AngleLinearMinimizerByGradientDescent</name>
    <filename>classDGtal_1_1AngleLinearMinimizerByGradientDescent.html</filename>
    <base>DGtal::AngleLinearMinimizer</base>
    <member kind="function">
      <type></type>
      <name>AngleLinearMinimizerByGradientDescent</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByGradientDescent.html</anchorfile>
      <anchor>a0bca95662c15c7c635c9e5397042248e</anchor>
      <arglist>(double step=0.1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AngleLinearMinimizerByGradientDescent</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByGradientDescent.html</anchorfile>
      <anchor>a8dc64e9e3c518c553b15c3b42ed6cfc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastDelta</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByGradientDescent.html</anchorfile>
      <anchor>acd5f36ce8243c91b859a98dcb5c5cd05</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByGradientDescent.html</anchorfile>
      <anchor>aad268cccf229b78ae72ea5f1ce6f89f5</anchor>
      <arglist>(std::ostream &amp;aStream) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AngleLinearMinimizer</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a064a87e5f462c08ede4e348597d7cab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleLinearMinimizer</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>abdb53d8513472f4c9d6c2aa3c3ebb0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>af2aa4cc0e6956baec00506267b0e99e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a84e57a72343f629590ab9b9000c122c0</anchor>
      <arglist>(unsigned int nbMax)</arglist>
    </member>
    <member kind="function">
      <type>ValueInfo &amp;</type>
      <name>rw</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>afaa9bf44762e600023155d4ec2d5d225</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueInfo &amp;</type>
      <name>ro</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a0e0b0146d08582de715534e6ec63d799</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>aaa2826252cae8509f6872ea89e3f863c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a70195238945bd916c230d500fc1306d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a263ea6c4ff5e7b2d23871e3a2a9904ab</anchor>
      <arglist>(unsigned int nb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsCurveOpen</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a46bdd1ea4a687c8d396169a9bd09b094</anchor>
      <arglist>(bool is_curve_open=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEnergy</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a75546bf4346cf20106138bd139af9213</anchor>
      <arglist>(unsigned int i1, unsigned int i2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFormerEnergy</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a3225b86080456c52441a05258487f65d</anchor>
      <arglist>(unsigned int i1, unsigned int i2) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getGradient</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ad2e56b8b484d06b4b710b1ed1c47d63b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getFormerGradient</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>af788df826203c89e65b880411a6dbe7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ab67f3aab54fcc2f4eb3dddd53767ccc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ad5367a9035b5c474f403ffa60a103ec6</anchor>
      <arglist>(unsigned int i1, unsigned int i2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sum</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a3216b381963d93842342f324f6546efc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a1ce3c95dec6728d7953d29a63a6fcb22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a91439cbff7ae4bd728de732f451c2f92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a92f85a7943d10adfd059b19a45041372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByGradientDescent.html</anchorfile>
      <anchor>a6ef60e64e7eb0f1a8ac2b79b98f9de5e</anchor>
      <arglist>(unsigned int i1, unsigned int i2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myStep</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByGradientDescent.html</anchorfile>
      <anchor>a286f513bab3b1f5051f26d3c073fb992</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsCurveOpen</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a4bebeb64b543a00f33f7b37b137ad89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueInfo *</type>
      <name>myValues</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ae286a562c87322365c1c53e5e33a2be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mySize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a211b2f9775b2223f71ccbfc23b300d08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::AngleLinearMinimizerByAdaptiveStepGradientDescent</name>
    <filename>classDGtal_1_1AngleLinearMinimizerByAdaptiveStepGradientDescent.html</filename>
    <base>DGtal::AngleLinearMinimizer</base>
    <member kind="function">
      <type></type>
      <name>AngleLinearMinimizerByAdaptiveStepGradientDescent</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByAdaptiveStepGradientDescent.html</anchorfile>
      <anchor>aeea2923f512785385c52bf33674e9b3d</anchor>
      <arglist>(double step=0.1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AngleLinearMinimizerByAdaptiveStepGradientDescent</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByAdaptiveStepGradientDescent.html</anchorfile>
      <anchor>a8d68e6cdd2f51dbf61b94037b67c18a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lastDelta</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByAdaptiveStepGradientDescent.html</anchorfile>
      <anchor>ae07e14c10e5f85c532c847ef03835df7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByAdaptiveStepGradientDescent.html</anchorfile>
      <anchor>a3555f5fe980549d63a6293d1e81f79c3</anchor>
      <arglist>(std::ostream &amp;aStream) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AngleLinearMinimizer</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a064a87e5f462c08ede4e348597d7cab2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleLinearMinimizer</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>abdb53d8513472f4c9d6c2aa3c3ebb0f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>af2aa4cc0e6956baec00506267b0e99e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a84e57a72343f629590ab9b9000c122c0</anchor>
      <arglist>(unsigned int nbMax)</arglist>
    </member>
    <member kind="function">
      <type>ValueInfo &amp;</type>
      <name>rw</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>afaa9bf44762e600023155d4ec2d5d225</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>const ValueInfo &amp;</type>
      <name>ro</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a0e0b0146d08582de715534e6ec63d799</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxSize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>aaa2826252cae8509f6872ea89e3f863c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a70195238945bd916c230d500fc1306d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a263ea6c4ff5e7b2d23871e3a2a9904ab</anchor>
      <arglist>(unsigned int nb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsCurveOpen</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a46bdd1ea4a687c8d396169a9bd09b094</anchor>
      <arglist>(bool is_curve_open=false)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEnergy</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a75546bf4346cf20106138bd139af9213</anchor>
      <arglist>(unsigned int i1, unsigned int i2) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFormerEnergy</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a3225b86080456c52441a05258487f65d</anchor>
      <arglist>(unsigned int i1, unsigned int i2) const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getGradient</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ad2e56b8b484d06b4b710b1ed1c47d63b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>getFormerGradient</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>af788df826203c89e65b880411a6dbe7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ab67f3aab54fcc2f4eb3dddd53767ccc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>optimize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ad5367a9035b5c474f403ffa60a103ec6</anchor>
      <arglist>(unsigned int i1, unsigned int i2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sum</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a3216b381963d93842342f324f6546efc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a1ce3c95dec6728d7953d29a63a6fcb22</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a91439cbff7ae4bd728de732f451c2f92</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a92f85a7943d10adfd059b19a45041372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>oneStep</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByAdaptiveStepGradientDescent.html</anchorfile>
      <anchor>a40d13c91d44cfd629df292fb045dbcf6</anchor>
      <arglist>(unsigned int i1, unsigned int i2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myStep</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizerByAdaptiveStepGradientDescent.html</anchorfile>
      <anchor>ac5004bca5ec609439ffc5c7d60e6578b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>myIsCurveOpen</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a4bebeb64b543a00f33f7b37b137ad89a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ValueInfo *</type>
      <name>myValues</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>ae286a562c87322365c1c53e5e33a2be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>mySize</name>
      <anchorfile>classDGtal_1_1AngleLinearMinimizer.html</anchorfile>
      <anchor>a211b2f9775b2223f71ccbfc23b300d08</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MeasureOfStraightLines</name>
    <filename>classDGtal_1_1MeasureOfStraightLines.html</filename>
    <member kind="function">
      <type></type>
      <name>MeasureOfStraightLines</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a133c662be739219a077fcb73f964ee33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MeasureOfStraightLines</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>acc41140e16c9af8f0624669af7fcc830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a95522c79d43b24c65b8bb5198e6f13c6</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a9f676eddd2e7bd47d6eda06bac6dbd69</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeMeasure</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a0962b869e397d0c15814dfaaf3a2199c</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;a, const std::vector&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeCentroidA</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a148fcac0c6da0280282d39409cd40065</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;a, const std::vector&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeCentroidB</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>ac1d85bd25e12fa771cbdb92838c76471</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;a, const std::vector&lt; double &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpsilon</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a4b6a4b2a683a4f63f3778db043a20380</anchor>
      <arglist>(const double aValue)</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MeasureOfStraightLines</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a5308b161b175922207a5890781708884</anchor>
      <arglist>(const MeasureOfStraightLines &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MeasureOfStraightLines &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>ae99f5f12996a926b88bfc88c396fa218</anchor>
      <arglist>(const MeasureOfStraightLines &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>computeMeasureEdge</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a8de6f1a4f89c18af3afa86b3fad1292f</anchor>
      <arglist>(double a0, double b0, double a1, double b1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>computeCentroidEdge_a</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a47a38639becf26e5e6f2e75911a6c96c</anchor>
      <arglist>(double a0, double b0, double a1, double b1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>computeCentroidEdge_b</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>ae238624d37b705905837786dc29f3cdd</anchor>
      <arglist>(double a0, double b0, double a1, double b1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>__computeCentroidTriApprox_b</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>aa146f55eac57652bec51a31cdefa0bf3</anchor>
      <arglist>(double a0, double b0, double a1, double b1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>__computeCentroidEdgeApprox_b</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a3bcbddb636c300a997e858d2ec8c62f8</anchor>
      <arglist>(double a0, double b0, double a1, double b1)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>double</type>
      <name>__computeCentroidSquare_b</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a7628e8d86f9763f3ef26168e70b84e50</anchor>
      <arglist>(double x1, double y1, double x2, double y2)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>int</type>
      <name>sign</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>a7f294f8081495f7629a48d3ee12d67d4</anchor>
      <arglist>(const double a)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myEpsilon</name>
      <anchorfile>classDGtal_1_1MeasureOfStraightLines.html</anchorfile>
      <anchor>aa3d0eb4c31b43510bb3b78a7d5a722e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialEvaluatorImpl&lt; 1, TRing, TOwner, TAlloc, TX &gt;</name>
    <filename>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">DGtal::MPolynomialEvaluatorImpl&lt; 1, TRing, TOwner, TAlloc, TX &gt;::EvalFun</class>
    <member kind="typedef">
      <type>TRing</type>
      <name>Ring</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a8c49a81ecf776fcab57604b70f4cd2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TOwner</type>
      <name>Owner</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a1736386d11879558200448477d1bdcfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAlloc</type>
      <name>Alloc</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a0f07644978066625ca90459ef3f87182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TX</type>
      <name>X</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>ab5ed164f23cc5315ed1960f2e84d1a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator X</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a7b5c4d4dc9de77d35e0b76d7cd0c2887</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>X</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a3a01aa81858d411355fa2cd52bb9f0a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MPolynomialEvaluatorImpl</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>ac42f35e0c1b6de4c901a83ea113f8a3b</anchor>
      <arglist>(const Owner &amp;owner, const X &amp;evalpoint)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Owner &amp;</type>
      <name>myOwner</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a00e39d6620045d673db87c4d03a9740b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const X &amp;</type>
      <name>myEvalPoint</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>ae4d3c2c85063c12b66dd7a0f8c687d07</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MPolynomialEvaluator</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>aefa0869ad5bcd95df21c992f0adc44f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MPolynomialEvaluatorImpl</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a8edaf8e1fcac12e9c5f81f4a4f8bea01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialEvaluatorImpl&lt; 1, TRing, TOwner, TAlloc, TX &gt;::EvalFun</name>
    <filename>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4_1_1EvalFun.html</filename>
    <member kind="function">
      <type></type>
      <name>EvalFun</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4_1_1EvalFun.html</anchorfile>
      <anchor>aafed90275d59a57ac2f1166abe57ffc0</anchor>
      <arglist>(const MPolynomialEvaluatorImpl&lt; 1, Ring, Owner, Alloc, X &gt; &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>X</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4_1_1EvalFun.html</anchorfile>
      <anchor>a44cb6f2e3fbe95e49b2dca336a0cb71d</anchor>
      <arglist>(const MPolynomial&lt; 1, Ring, Alloc &gt; &amp;p) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const MPolynomialEvaluatorImpl&lt; 1, Ring, Owner, Alloc, X &gt; &amp;</type>
      <name>myOwner</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_3_011_00_01TRing_00_01TOwner_00_01TAlloc_00_01TX_01_4_1_1EvalFun.html</anchorfile>
      <anchor>a2a2b43cfd72e6670d9fb053a533d91f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialEvaluatorImpl</name>
    <filename>classDGtal_1_1MPolynomialEvaluatorImpl.html</filename>
    <templarg>n</templarg>
    <templarg>TRing</templarg>
    <templarg>TOwner</templarg>
    <templarg>TAlloc</templarg>
    <templarg>TX</templarg>
    <class kind="class">DGtal::MPolynomialEvaluatorImpl::EvalFun</class>
    <class kind="class">DGtal::MPolynomialEvaluatorImpl::EvalFun2</class>
    <member kind="typedef">
      <type>TRing</type>
      <name>Ring</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>aa727fc8eb0bffdc604f26a712c9d7a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TOwner</type>
      <name>Owner</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>a80c6f2d604a13a1d3f033a11fb086ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAlloc</type>
      <name>Alloc</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>a38079484dc3071990f171adbc7f3c33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TX</type>
      <name>X</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>a42337d400d40ee488bde471c7b1789e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPolynomial&lt; n, Ring, Alloc &gt;</type>
      <name>MPolyN</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>a80a576354ddd07b1f9efa994cb2e12d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPolynomial&lt; n-1, X, typename Alloc::template rebind&lt; X &gt;::other &gt;</type>
      <name>MPolyNM1</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>a5cd0d330b4642bfe8f9b03a6170491ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator MPolyNM1</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>abbbef20284d302080f910e4f5e2d17af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomialEvaluatorImpl&lt; n-1, Ring, MPolynomialEvaluatorImpl&lt; n, Ring, Owner, Alloc, X &gt;, Alloc, XX &gt;</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>ac071772a1493e200815b9bdec68cddb2</anchor>
      <arglist>(const XX &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MPolynomialEvaluatorImpl</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>ade6fc3c149078a667be8d0681465ddc9</anchor>
      <arglist>(const Owner &amp;owner, const X &amp;evalpoint)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>a20e3339a7124800595d3ea188d7f5805</anchor>
      <arglist>(XX &amp;res, const Fun &amp;evalfun) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Owner &amp;</type>
      <name>myOwner</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>a672e2cf34f1f14245e66851f485f99c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const X &amp;</type>
      <name>myEvalPoint</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>a407da00e7f96f56b22b3dace2a424099</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MPolynomialEvaluator</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>aefa0869ad5bcd95df21c992f0adc44f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MPolynomialEvaluatorImpl</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl.html</anchorfile>
      <anchor>a8edaf8e1fcac12e9c5f81f4a4f8bea01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialEvaluatorImpl::EvalFun</name>
    <filename>classDGtal_1_1MPolynomialEvaluatorImpl_1_1EvalFun.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>EvalFun</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_1_1EvalFun.html</anchorfile>
      <anchor>aa2b1fbf40d4de37e5b3a648ce484a2ee</anchor>
      <arglist>(const MPolynomialEvaluatorImpl&lt; n, Ring, Owner, Alloc, X &gt; &amp;owner, const Fun &amp;evalfun)</arglist>
    </member>
    <member kind="function">
      <type>XX</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_1_1EvalFun.html</anchorfile>
      <anchor>a0cd3131136218255a7018fb750e5f9cf</anchor>
      <arglist>(const MPolynomial&lt; n, Ring, Alloc &gt; &amp;p) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const MPolynomialEvaluatorImpl&lt; n, Ring, Owner, Alloc, X &gt; &amp;</type>
      <name>myOwner</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_1_1EvalFun.html</anchorfile>
      <anchor>a24ac252ef042f7e4f7379f41278e3378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Fun &amp;</type>
      <name>myEvalFun</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_1_1EvalFun.html</anchorfile>
      <anchor>acbd5117b08972cc2a862bdf47bac80f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialEvaluatorImpl::EvalFun2</name>
    <filename>classDGtal_1_1MPolynomialEvaluatorImpl_1_1EvalFun2.html</filename>
    <member kind="function">
      <type></type>
      <name>EvalFun2</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_1_1EvalFun2.html</anchorfile>
      <anchor>acd3eb67f1e9dba2424d061050c6b8985</anchor>
      <arglist>(const MPolynomialEvaluatorImpl&lt; n, Ring, Owner, Alloc, X &gt; &amp;owner)</arglist>
    </member>
    <member kind="function">
      <type>MPolyNM1</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_1_1EvalFun2.html</anchorfile>
      <anchor>a476199322ca13cb885dcf71cba1836d2</anchor>
      <arglist>(const MPolyN &amp;p) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const MPolynomialEvaluatorImpl&lt; n, Ring, Owner, Alloc, X &gt; &amp;</type>
      <name>myOwner</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluatorImpl_1_1EvalFun2.html</anchorfile>
      <anchor>a373a3a0649b10e54a9be141c9b7524fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialEvaluator&lt; 1, TRing, TAlloc, TX &gt;</name>
    <filename>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TRing</type>
      <name>Ring</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a285b4ddb7f269ee40c6027cbaaa7172e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAlloc</type>
      <name>Alloc</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a95f4b28044fbfe42953403f14321800b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TX</type>
      <name>X</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a6a16e866937ac6c82e224b452e37aa4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPolynomial&lt; 1, Ring, Alloc &gt;</type>
      <name>MPoly1</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a11ad4d664e024a54051f9b3b5a5e7ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator X</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a4f0f1db2e025f9a537e8f13f1986b2ac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>X</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>aae4dacb7eef1bcf8d3a1f63159f4aaea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MPolynomialEvaluator</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>aab9b8b7dea4aa282d2b67660d4319ea8</anchor>
      <arglist>(const MPoly1 &amp;poly, const X &amp;evalpoint)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const MPoly1 &amp;</type>
      <name>myPoly</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a70d61d0f515bfc2fbd2f70b49cae11ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const X &amp;</type>
      <name>myEvalPoint</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a5b5dfe00d4db6f91544964a970993cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MPolynomial&lt; 1, TRing, TAlloc &gt;</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator_3_011_00_01TRing_00_01TAlloc_00_01TX_01_4.html</anchorfile>
      <anchor>a3f526332c375b5004ea818d0bec83ac2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialEvaluator</name>
    <filename>classDGtal_1_1MPolynomialEvaluator.html</filename>
    <templarg>n</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TRing</type>
      <name>Ring</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a1547f1bee00e26e5086be2d332fac428</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAlloc</type>
      <name>Alloc</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>ae38ea876e19fc1e935ce1f541ceb5841</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TX</type>
      <name>X</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a2f58bd9b74805c4bdbea6e30390d5c05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPolynomial&lt; n, Ring, Alloc &gt;</type>
      <name>MPolyN</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a5d82579e407d2561366ea4d260789652</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPolynomial&lt; n-1, X, typename Alloc::template rebind&lt; X &gt;::other &gt;</type>
      <name>MPolyNM1</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a776903e23c35ec438eaff8d3811ce1ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator MPolyNM1</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a13b803367630b422e465eee8b000548f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomialEvaluatorImpl&lt; n-1, Ring, MPolynomialEvaluator&lt; n, Ring, Alloc, X &gt;, Alloc, XX &gt;</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a1a809052607155ff3849bac716fc426c</anchor>
      <arglist>(const XX &amp;x) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MPolynomialEvaluator</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a95e4ccca75ab1dd6dd05800df2482365</anchor>
      <arglist>(const MPolyN &amp;poly, const X &amp;evalpoint)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a6783d83203db7f6003db2d4dc9639b15</anchor>
      <arglist>(XX &amp;res, const Fun &amp;evalfun) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const MPolyN &amp;</type>
      <name>myPoly</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>af8708285d5cb1f3c75ee5d2ab81478ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const X &amp;</type>
      <name>myEvalPoint</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a61f902374243197886694615fbf46380</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MPolynomial&lt; n, TRing, TAlloc &gt;</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>af453439521e091d9bb90e76dac529a4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MPolynomialEvaluatorImpl</name>
      <anchorfile>classDGtal_1_1MPolynomialEvaluator.html</anchorfile>
      <anchor>a8edaf8e1fcac12e9c5f81f4a4f8bea01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomial&lt; 0, TRing, TAlloc &gt;</name>
    <filename>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TRing</type>
      <name>Ring</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a5158471ab08c0f35ec99c8e2f9bd6c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAlloc</type>
      <name>Alloc</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a7fdd2f71d571c0d1d37b6aad657cfeb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPolynomial</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a12c689acf27488533537550fa28d045c</anchor>
      <arglist>(const Ring &amp;v=0, const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPolynomial</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a0855789f88992713d514d31a83a10bf7</anchor>
      <arglist>(const Alloc &amp;allocator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a9a699e2f1d717b5992ce842e00931236</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const Ring &amp;</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>af946770d8d4d7166c6d53aa75144aaf0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a93a541d48ded7b6ff66ebfd0d7576605</anchor>
      <arglist>(const Ring &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Ring</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a24dd4a9984bae45d6b1db373a568e6f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a6de42bef3423ad8a02de3ed9e8a75699</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator/</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>aa27c9a0822e597eae2c77c4dbfadc154</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator+</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a5cfdbe6f516519fd8aaccd568f1161c7</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a4c55ba52fe618add34a60697ea6c7e7e</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a74299521abb6c58415d04068958a9114</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator*=</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>adcbad6f69244c06a91b2b719b88d1944</anchor>
      <arglist>(const Ring &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator/=</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a7bdf38d8957388f99755ffeffe0254b1</anchor>
      <arglist>(const Ring &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a20cba06911ce026099d3464c5d26a016</anchor>
      <arglist>(const Ring &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>acf0b26643a7660a23b0ca96aa24d58b6</anchor>
      <arglist>(const Ring &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a1927dee5a08914472ebd9fc95361afb2</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>adffc8b768862ff3c15e5e5df908ef741</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>afff1895d90ea19f87d5d2ade7779fb78</anchor>
      <arglist>(std::ostream &amp;s, int) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a865c36474e1c7635b00fe4a47e4b4a13</anchor>
      <arglist>(MPolynomial &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Alloc</type>
      <name>getAllocator</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a4580a093ff61060005900f0e22dfe83b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Alloc</type>
      <name>myAllocator</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>ab8b875dbbbfdb5e1d899ae6d37a8a054</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Ring</type>
      <name>myValue</name>
      <anchorfile>classDGtal_1_1MPolynomial_3_010_00_01TRing_00_01TAlloc_01_4.html</anchorfile>
      <anchor>a5795a02213c76d5de2b5a5da3a43735b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IVector</name>
    <filename>classDGtal_1_1IVector.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>usePointers</templarg>
    <member kind="typedef">
      <type>TAlloc</type>
      <name>Alloc</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>a54c4b1beca2d5fa2c5c164191b8984a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T, Alloc &gt;::size_type</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>a2ded6b79500c901b78e4eb0b9f86e28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>a46e63d12279e4433c0dee7c6ddda4d14</anchor>
      <arglist>(const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>a8ef304df3b1892f61097158501c30d0c</anchor>
      <arglist>(Size aSize, const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>ab6d6667513b51acc91e148f6f61fc988</anchor>
      <arglist>(Size aSize, const T &amp;entry, const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>aa38064496189e7318b7cd3918f3ff612</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>ae4ed73edbe5d49d35d1bed17d1165c69</anchor>
      <arglist>(Size aSize, const T &amp;entry=T())</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>a4cf8f01ce06167cdd5d6914ca85bd950</anchor>
      <arglist>(Size i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>a37a3d399a81c462af0e9f0a1698297a9</anchor>
      <arglist>(Size i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>back</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>aa5e69568d5ceb8fd13468a1926799de5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>back</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>a282d3b6794286a4ccff71748f946a558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>aa1b1416d676ab2851d359e4c0c6915bf</anchor>
      <arglist>(IVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Alloc</type>
      <name>get_allocator</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>ac65cd02254634c4dfdc84d3b03f9bc80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Alloc</type>
      <name>getAllocator</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>a576c41b30c3f3cf2737c7a3587ae9dbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; T, Alloc &gt;</type>
      <name>myVec</name>
      <anchorfile>classDGtal_1_1IVector.html</anchorfile>
      <anchor>aa650241d3f904ec7bf195b0d4c3a4dd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::IVector&lt; T, TAlloc, true &gt;</name>
    <filename>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TAlloc</type>
      <name>Alloc</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>afe12cd0d6317f30b8bb2667eff93773c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned long int</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a899daf06c28d18f683c9e26b61f566ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a4ae886a1e77dd84a49d0ae4327ac006d</anchor>
      <arglist>(const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a079a5551c34d93e52414582d6e1187f4</anchor>
      <arglist>(Size aSize, const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a0d12e50f7d0e57d202267862e6e1eb4c</anchor>
      <arglist>(Size aSize, const T &amp;entry, const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IVector</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>ad7f5c6d25a04b6942686b8cf1f5da0d6</anchor>
      <arglist>(const IVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IVector</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a442630e5669b6fbd3e1abc21cfb7b707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IVector &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a0491afd9c6759a412e5795cd69aabec9</anchor>
      <arglist>(const IVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a17be8836bd07c51a79643d584b1f93e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a7dd1f74abc978194c057b68049a21d00</anchor>
      <arglist>(Size aSize, const T &amp;entry=T())</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a17aed09cb933d5f80ffc311d4b994224</anchor>
      <arglist>(Size i) const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a0cb86ab5e8cb992f76c1e4e1a6d79e04</anchor>
      <arglist>(Size i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>back</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a8fcf5004e7147be51ad8d6280877d274</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>back</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a3153af488788fef14ffd26180b833d90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a859941a37f5c6af21848873866fbd3e7</anchor>
      <arglist>(IVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Alloc</type>
      <name>get_allocator</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a20b2d9fb04bdb6bb06d3e13574596aa3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Alloc</type>
      <name>getAllocator</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>aa0b17267afd9185ded0481f69dfe968d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>create</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a7ac7854a1744172f46180731966a0435</anchor>
      <arglist>(Size begin, Size end, typename Alloc::const_reference entry)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>free</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>ad99f2d3b87526589e26810f2aebd762c</anchor>
      <arglist>(Size begin, Size end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>copy_from</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a3307e99cb3251c37d0ac5875004ecbaa</anchor>
      <arglist>(const std::vector&lt; typename Alloc::pointer, A &gt; &amp;source)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Alloc</type>
      <name>myAllocator</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>a3ab54cdeeba477bf2994ba0a6b2cb96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; typename Alloc::pointer, typename Alloc::template rebind&lt; typename Alloc::pointer &gt;::other &gt;</type>
      <name>myVec</name>
      <anchorfile>classDGtal_1_1IVector_3_01T_00_01TAlloc_00_01true_01_4.html</anchorfile>
      <anchor>acfcb7bee55743118e5997b1fe03ea4f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomial</name>
    <filename>classDGtal_1_1MPolynomial.html</filename>
    <templarg>n</templarg>
    <templarg>TRing</templarg>
    <templarg>TAlloc</templarg>
    <member kind="typedef">
      <type>TRing</type>
      <name>Ring</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>aa70079b42bc439c0726035d49a33fe08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAlloc</type>
      <name>Alloc</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>aa0a495aa7465b4dbdf9c34367af71645</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPolynomial&lt; n-1, Ring, Alloc &gt;</type>
      <name>MPolyNM1</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a847be1cd974eaa0b9bf8279a54bd3b3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IVector&lt; MPolyNM1, typename Alloc::template rebind&lt; MPolyNM1 &gt;::other,(n &gt;</type>
      <name>Storage</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a4a7b824a39ed219935a5c2ea82247fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Storage::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a27848fe24cd51c7a93686914f08d7566</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>af326b15174d16edb89e996f758168ffd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPolynomial</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a627660464a3965c56be88f46ed2f6b16</anchor>
      <arglist>(const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPolynomial</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a0bdf0850f559874761bc16804eeaf481</anchor>
      <arglist>(const Ring &amp;v, const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPolynomial</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a5feefb70e67ee7d5787449f94ea27d03</anchor>
      <arglist>(const MPolyNM1 &amp;pdm1, const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPolynomial</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>afd9d7c7d33613ba1450ef317c037fd3d</anchor>
      <arglist>(const MPolynomial&lt; n, Ring2, Alloc2 &gt; &amp;p, const Alloc &amp;allocator=Alloc())</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>af3988293d1fab689d67b9021e6716da8</anchor>
      <arglist>(const MPolynomial&lt; n, Ring2, Alloc2 &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>ace3350c8a318b81c3c773bad8f8c3953</anchor>
      <arglist>(MPolynomial &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>Alloc</type>
      <name>getAllocator</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a25d9f2c9ab7b9856b71ce6c8de45f663</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a9d50df0e8794372052f3ca2941bfbf6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const MPolyNM1 &amp;</type>
      <name>leading</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>ab83ae2874ce1ac5df892dd4dd93e352d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>ac53389b0d7e6647f32b014ca4eaf78e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MPolyNM1 &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a4e66d961247088815cbfde51c638ef9f</anchor>
      <arglist>(Size i)</arglist>
    </member>
    <member kind="function">
      <type>const MPolyNM1 &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>ace5edfc358667e4fc6c366fa6e6e4d69</anchor>
      <arglist>(Size i) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomialEvaluator&lt; n, Ring, Alloc, Ring &gt;</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a8be3055b54335ef3cafdf9d610f008ac</anchor>
      <arglist>(const Ring &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomialEvaluator&lt; n, Ring, Alloc, Ring2 &gt;</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a9680909cca2e06db23cc87a62ac46c57</anchor>
      <arglist>(const Ring2 &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>ac369ed9c3397cca0a6e280ba3eed96d5</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator/</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a5f950dfe1fb568b1c8bd2eacf9af76e8</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator*=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>aa1d400fdbb6b9af7ef2eab26e4b18c48</anchor>
      <arglist>(const MPolynomial &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator*=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>af92cf77c71158555583ab8384db55ccb</anchor>
      <arglist>(const Ring &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator/=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a7d5c85eb488d3d86ff579f928242bf50</anchor>
      <arglist>(const Ring &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a7379e90b7500531dda9caa6a3c172b85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator+</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a51446dd567e3459616a699b35ada9a40</anchor>
      <arglist>(const MPolynomial &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>ac6cdfbbb79f0349890fed46f10d84df8</anchor>
      <arglist>(const MPolynomial &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a7ce0ae7f3c08de455570693b6cf56965</anchor>
      <arglist>(const MPolynomial &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>acb62409c8687c1ef089e5379147adafc</anchor>
      <arglist>(const MPolynomial &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator+</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a634de9f0a8eb3c74297a5c17292b3a38</anchor>
      <arglist>(const MPolyNM1 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a0fc4f4d812008f7254c5ea6194aa6e1f</anchor>
      <arglist>(const MPolyNM1 &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator+</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a15902dc51b8a4c667c7aff026f5b0bd2</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator-</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a39a4e17b9830200eb6467c6aa3c093ff</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a012198bec72d9f4622a751f1202c9c2a</anchor>
      <arglist>(const MPolyNM1 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>ac2ed58e931a8408286b6d71ab7cf2576</anchor>
      <arglist>(const MPolyNM1 &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator+=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>af50ecee56858bb9a46f61550d78a8e88</anchor>
      <arglist>(const Ring &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial &amp;</type>
      <name>operator-=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>ae0f946bd62bf74e85ca519aa79c40ff7</anchor>
      <arglist>(const Ring &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a65a64bd801c980dcd66ac1765754a988</anchor>
      <arglist>(const MPolynomial &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>acff8f9ad8bd5da8b59731d592ccc4ce1</anchor>
      <arglist>(const MPolynomial &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a09cf82b121e98d9ae60c254693cc8030</anchor>
      <arglist>(const MPolynomial &amp;q) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a49661d25498c4163e261e58a175b6153</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a2672a9ed50f73c0f5dbd7973350d2ac9</anchor>
      <arglist>(const Ring &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a3670f7acb6b3a23088ac855c18177948</anchor>
      <arglist>(std::ostream &amp;s, int N=n) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a18e54f46bd719a491eef6030df24dc81</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MPolynomial</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>af6f7253e1edc69587637c7c020f477ff</anchor>
      <arglist>(bool, Size s, const Alloc &amp;)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Storage</type>
      <name>myValue</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>ae23af5d42dbc1565e316a0c7fada9bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private" static="yes">
      <type>static MPolyNM1</type>
      <name>myZeroPolynomial</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a0b5cee2e2b2195fd6648de9f299622a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MPolynomialDerivativeComputer</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a7a167ad09e76d123c033fad5a3b493e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MPolynomialEvaluator</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>aefa0869ad5bcd95df21c992f0adc44f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MPolynomialEvaluatorImpl</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a8edaf8e1fcac12e9c5f81f4a4f8bea01</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>euclidDiv</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>aff2d57346a0bbc8eced006c9f9b059ee</anchor>
      <arglist>(const MPolynomial&lt; 1, TRing, TAlloc &gt; &amp;, const MPolynomial&lt; 1, TRing, TAlloc &gt; &amp;, MPolynomial&lt; 1, TRing, TAlloc &gt; &amp;, MPolynomial&lt; 1, TRing, TAlloc &gt; &amp;)</arglist>
    </member>
    <member kind="friend">
      <type>friend MPolynomial</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1MPolynomial.html</anchorfile>
      <anchor>a71247f8ff43cf8697c29c939b5ba192d</anchor>
      <arglist>(const Ring &amp;v, const MPolynomial &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Xe_kComputer</name>
    <filename>classDGtal_1_1Xe__kComputer.html</filename>
    <templarg>n</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Xe_kComputer</name>
      <anchorfile>classDGtal_1_1Xe__kComputer.html</anchorfile>
      <anchor>af61b5a5e3e98b547245a8c33410ac218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; n, Ring, Alloc &gt;</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1Xe__kComputer.html</anchorfile>
      <anchor>a07317dc3ee82aae551101fec80784c16</anchor>
      <arglist>(unsigned int k, unsigned int e)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Xe_kComputer&lt; 0, Ring, Alloc &gt;</name>
    <filename>classDGtal_1_1Xe__kComputer_3_010_00_01Ring_00_01Alloc_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Xe_kComputer</name>
      <anchorfile>classDGtal_1_1Xe__kComputer_3_010_00_01Ring_00_01Alloc_01_4.html</anchorfile>
      <anchor>aa045474d6e132eee1d4becaec02916c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPolynomial&lt; 0, Ring, Alloc &gt;</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1Xe__kComputer_3_010_00_01Ring_00_01Alloc_01_4.html</anchorfile>
      <anchor>a9e1a85c1e63a51ec1f6a6084b00c1dd5</anchor>
      <arglist>(unsigned int, unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialDerivativeComputer&lt; 0, n, Ring, Alloc &gt;</name>
    <filename>classDGtal_1_1MPolynomialDerivativeComputer_3_010_00_01n_00_01Ring_00_01Alloc_01_4.html</filename>
    <templarg>n</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MPolynomial&lt; n, Ring, Alloc &gt;</type>
      <name>MPolyN</name>
      <anchorfile>classDGtal_1_1MPolynomialDerivativeComputer_3_010_00_01n_00_01Ring_00_01Alloc_01_4.html</anchorfile>
      <anchor>a11669fed9b36e1ccf5b2fa60477e9f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeDerivative</name>
      <anchorfile>classDGtal_1_1MPolynomialDerivativeComputer_3_010_00_01n_00_01Ring_00_01Alloc_01_4.html</anchorfile>
      <anchor>a01aecf090ed24376891c607c8a5e1848</anchor>
      <arglist>(const MPolyN &amp;src, MPolyN &amp;dest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialDerivativeComputer</name>
    <filename>classDGtal_1_1MPolynomialDerivativeComputer.html</filename>
    <templarg>N</templarg>
    <templarg>n</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MPolynomial&lt; n, Ring, Alloc &gt;</type>
      <name>MPolyN</name>
      <anchorfile>classDGtal_1_1MPolynomialDerivativeComputer.html</anchorfile>
      <anchor>a9ac221313464b367c0eb40106fa68bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeDerivative</name>
      <anchorfile>classDGtal_1_1MPolynomialDerivativeComputer.html</anchorfile>
      <anchor>aad1c95d079d0c0d05531fea55299c2e7</anchor>
      <arglist>(const MPolyN &amp;src, MPolyN &amp;dest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialDerivativeComputer&lt; 0, 0, Ring, Alloc &gt;</name>
    <filename>classDGtal_1_1MPolynomialDerivativeComputer_3_010_00_010_00_01Ring_00_01Alloc_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MPolynomial&lt; 0, Ring, Alloc &gt;</type>
      <name>MPoly0</name>
      <anchorfile>classDGtal_1_1MPolynomialDerivativeComputer_3_010_00_010_00_01Ring_00_01Alloc_01_4.html</anchorfile>
      <anchor>a491210529fa04ba03429c780d6734a6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeDerivative</name>
      <anchorfile>classDGtal_1_1MPolynomialDerivativeComputer_3_010_00_010_00_01Ring_00_01Alloc_01_4.html</anchorfile>
      <anchor>af9cdf87f555191c9747ad55f0140529b</anchor>
      <arglist>(const MPoly0 &amp;, MPoly0 &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MPolynomialDerivativeComputer&lt; N, 0, Ring, Alloc &gt;</name>
    <filename>classDGtal_1_1MPolynomialDerivativeComputer_3_01N_00_010_00_01Ring_00_01Alloc_01_4.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MPolynomial&lt; 0, Ring, Alloc &gt;</type>
      <name>MPoly0</name>
      <anchorfile>classDGtal_1_1MPolynomialDerivativeComputer_3_01N_00_010_00_01Ring_00_01Alloc_01_4.html</anchorfile>
      <anchor>a65ec000fd878c3c25269e1274ce99c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeDerivative</name>
      <anchorfile>classDGtal_1_1MPolynomialDerivativeComputer_3_01N_00_010_00_01Ring_00_01Alloc_01_4.html</anchorfile>
      <anchor>a2a4f72ab4eefd2c0ed6f051cbbafeae8</anchor>
      <arglist>(const MPoly0 &amp;, MPoly0 &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SignalData</name>
    <filename>structDGtal_1_1SignalData.html</filename>
    <templarg>TValue</templarg>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>ac1bdee33b1d351b31ce434d14eec7818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalData</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>aa0b4e4108f93e738ab6cc13ac4641cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>a01b344593a7ea9e00fa204deb285eb7d</anchor>
      <arglist>(unsigned int s, int z=0, bool p=false, const Value &amp;def=Value(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>afee1e13dccf28bd88c491737e1b79416</anchor>
      <arglist>(const Value *t, unsigned int size, int z=0, bool p=false, const Value &amp;def=Value(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalData</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>a6f537853c700f244f3e09977aeda9717</anchor>
      <arglist>(unsigned int s, int z=0, bool p=false, const Value &amp;def=Value(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalData</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>a67154212cfb242b8d7fe01cd4d426c07</anchor>
      <arglist>(const Value *t, unsigned int size, int z=0, bool p=false, const Value &amp;def=Value(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SignalData</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>af79f38473b5255f57527da31ae6f9123</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignalData</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>a1118ecee17d30f5a92de64915918cf5b</anchor>
      <arglist>(const SignalData &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SignalData &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>ad5590159d34fe766e30edc36eea2afa2</anchor>
      <arglist>(const SignalData &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>defaut</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>a49d913bad37a7d3ddc03f3d5a5713ac3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Value *</type>
      <name>data</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>a553db931acd17d5c8a4416ffef7a6adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>a0065330bca1c8e5d38e3ac64597a0a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>zero</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>a75dd162817d9947ecd184193038e9c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>periodic</name>
      <anchorfile>structDGtal_1_1SignalData.html</anchorfile>
      <anchor>a9a04fe44ee2d675c024323e0134b1082</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Signal</name>
    <filename>classDGtal_1_1Signal.html</filename>
    <templarg>TValue</templarg>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>ae7577cf300ad5eda4f3c6e066ae562d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Signal</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>ab1a546e5571a550ac832fb32c8edc4db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a12d0f04b0c8032ddf16862bbb11fd33e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a8cab186e373258608d39ed6f220085bb</anchor>
      <arglist>(unsigned int size, int z, bool periodic, const TValue &amp;def=TValue(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>af789a05826b0f671ce8e6fc2b129d5b0</anchor>
      <arglist>(const TValue *t, unsigned int size, int z, bool periodic, const TValue &amp;def=TValue(0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Signal</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>ad92186eb3ad4a295113e30273ad10705</anchor>
      <arglist>(const Signal&lt; TValue &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Signal&lt; TValue &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a735936690b086001cdaf6b7d33e24d96</anchor>
      <arglist>(const Signal&lt; TValue &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a7ab1578c244aeba21aacb55db9f36def</anchor>
      <arglist>(unsigned int s, int z=0, bool p=false, const TValue &amp;def=TValue(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a38c170f558047e3ab6d2c652d1b40d7b</anchor>
      <arglist>(const TValue *t, unsigned int size, int z=0, bool p=false, const TValue &amp;def=TValue(0))</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a2e740273dc389ae4a8416df20097e8d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>TValue &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a40d4828d80482a4660f8e9c65e9edccb</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const TValue &amp;</type>
      <name>operator[]</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a27932635cc569c09a3c2cb93e9f5311e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a8926345f1268567f84957df514c8774d</anchor>
      <arglist>(const TValue &amp;val=TValue(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiply</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>afb89d27bb1346eb33dd55551638a2785</anchor>
      <arglist>(const TValue &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Signal&lt; TValue &gt;</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a31f13bd6942ec8bd1a4309b2380ad01e</anchor>
      <arglist>(const Signal&lt; TValue &gt; &amp;G)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a841efd48ad4c5d7ccbfde30113642e43</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a9b8626cba6c800df9ae276db46b491e0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal&lt; TValue &gt;</type>
      <name>G2</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>afd6817bc7525b21a1c3fed8b89e8c468</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal&lt; TValue &gt;</type>
      <name>H2</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a1d2496d2ce6f872bb930705a51711bd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal&lt; TValue &gt;</type>
      <name>Delta</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a47752dd1157ab3a93350663a783600b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal&lt; TValue &gt;</type>
      <name>G2n</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>ae3fc3d48c7536845ae1a4fdbd3ab59f5</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal&lt; TValue &gt;</type>
      <name>H2n</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a6b13335e9d849dd596fc21f8757ebcb0</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Signal&lt; TValue &gt;</type>
      <name>D2n</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a69e384df19eba2797d993d6dbefabadc</anchor>
      <arglist>(unsigned int n)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CowPtr&lt; SignalData&lt; TValue &gt; &gt;</type>
      <name>m_data</name>
      <anchorfile>classDGtal_1_1Signal.html</anchorfile>
      <anchor>a8c8d123ae930b668854b29244a2dbaf8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDigitalBoundedShape</name>
    <filename>structDGtal_1_1CDigitalBoundedShape.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TShape::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CDigitalBoundedShape.html</anchorfile>
      <anchor>a5f7293a6c1bd524af0c7dd8e4b961cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDigitalBoundedShape.html</anchorfile>
      <anchor>a9da706dc21c985d36e1fbd8b427f0d07</anchor>
      <arglist>(CDigitalBoundedShape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TShape</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1CDigitalBoundedShape.html</anchorfile>
      <anchor>afe78488ceac71b3a74dc80951cfdf65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP</name>
      <anchorfile>structDGtal_1_1CDigitalBoundedShape.html</anchorfile>
      <anchor>a1b8eedf7167e7445c68586dae7f268d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDigitalOrientedShape</name>
    <filename>structDGtal_1_1CDigitalOrientedShape.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CDigitalOrientedShape.html</anchorfile>
      <anchor>a3f8b253eb7b737f47c5bfb2305678dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDigitalOrientedShape.html</anchorfile>
      <anchor>a0c5c7ef851ec68c373d844bfca82317e</anchor>
      <arglist>(CDigitalOrientedShape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CDigitalOrientedShape.html</anchorfile>
      <anchor>ae4f4b762ea28025ae7888d7d9f3c62fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Orientation</type>
      <name>myA</name>
      <anchorfile>structDGtal_1_1CDigitalOrientedShape.html</anchorfile>
      <anchor>a29d7a308a813d412fb82611b7ede222d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1CDigitalOrientedShape.html</anchorfile>
      <anchor>aca9d325f90a442da1447efd7f8f56884</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CEuclideanBoundedShape</name>
    <filename>structDGtal_1_1CEuclideanBoundedShape.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TShape::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CEuclideanBoundedShape.html</anchorfile>
      <anchor>a82d5feb14a2c33d9f311c4ad4763d761</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CEuclideanBoundedShape.html</anchorfile>
      <anchor>ad5b6131c75159457ae0351636448a76b</anchor>
      <arglist>(CEuclideanBoundedShape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TShape</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1CEuclideanBoundedShape.html</anchorfile>
      <anchor>afb3664e470b8012696ca2a33f9351e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myP</name>
      <anchorfile>structDGtal_1_1CEuclideanBoundedShape.html</anchorfile>
      <anchor>a1c5accbe5787ffd36bd2ed9d708cead1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CEuclideanOrientedShape</name>
    <filename>structDGtal_1_1CEuclideanOrientedShape.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CEuclideanOrientedShape.html</anchorfile>
      <anchor>af9b58986d547815b6190f54194f8f22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CEuclideanOrientedShape.html</anchorfile>
      <anchor>a4e3403301044b09a954ecc80ebe8e8f2</anchor>
      <arglist>(CEuclideanOrientedShape)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CEuclideanOrientedShape.html</anchorfile>
      <anchor>a347e802f34085e34cd4a93f052f1f906</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Orientation</type>
      <name>myA</name>
      <anchorfile>structDGtal_1_1CEuclideanOrientedShape.html</anchorfile>
      <anchor>aa5f0505ef73e354249d0b488bb1df5d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>p</name>
      <anchorfile>structDGtal_1_1CEuclideanOrientedShape.html</anchorfile>
      <anchor>aa4d60090dd19ff5c0fb27383b022787f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CircleFrom2Points</name>
    <filename>classDGtal_1_1CircleFrom2Points.html</filename>
    <templarg>TPoint</templarg>
    <member kind="typedef">
      <type>TPoint::Coordinate</type>
      <name>Coordinate</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>a8d669f47325b177cfd060101dddf6a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Coordinate</type>
      <name>Distance</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>ae3ba9b897c93271bc9ce32b8e733028e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>ac0fc388cf5fc416f356604a4f6a53696</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>a9fc17ed2aea278cb502851db9f034300</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleFrom2Points</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>ac56590376fc2684c3072480bc11d395a</anchor>
      <arglist>(const Point &amp;aPole)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleFrom2Points</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>a909d381535988060492392da3c8cc0a1</anchor>
      <arglist>(const Point &amp;aPole, const Point &amp;aFirstPoint, const Point &amp;aSecondPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>a807cf1ceab7111c6549bd0691bf372f4</anchor>
      <arglist>(const Point &amp;aFirstPoint, const Point &amp;aSecondPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleFrom2Points</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>a471e78e7bac9b929e3882fa7a7cee97d</anchor>
      <arglist>(const CircleFrom2Points &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CircleFrom2Points &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>ad2288791a71c8ce4d128c0b24f8d7b9f</anchor>
      <arglist>(const CircleFrom2Points &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CircleFrom2Points</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>a23ccc47bbc1e3d1040edc449d2c6fc15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>abffb49840d378f42e35918bb3900ab54</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>abddbb4fbeb8c61fca815644a088dcf62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Distance</type>
      <name>signedDistance</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>ad05bd829b65690f8d683aaecfb4d40d6</anchor>
      <arglist>(const Point &amp;aP) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameters</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>abbceed883c56b2182bd4292e09b5b519</anchor>
      <arglist>(double &amp;cx, double &amp;cy, double &amp;r) const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>pole</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>a1fc153ee60d0c5fef258a7788983628c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>p</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>a30d34053c006c575b863d48613ac35ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>q</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>ae2b1bc91e7353c8f7461d56d3f53a857</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>a59f1724cb6fc6b8e4e7ab7994ed002fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myPole</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>aebc54407fdb67dd749a234a83244c02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>af45d4368e2916dac9928d10f4b6b202f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myQ</name>
      <anchorfile>classDGtal_1_1CircleFrom2Points.html</anchorfile>
      <anchor>aa84ed46adad20157835e3d05876327ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CircleFrom3Points</name>
    <filename>classDGtal_1_1CircleFrom3Points.html</filename>
    <templarg>TPoint</templarg>
    <member kind="typedef">
      <type>TPoint::Coordinate</type>
      <name>Coordinate</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a41076a3a4c9cfd829dacfa780cfcd414</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Coordinate</type>
      <name>Distance</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>ade17fe797fa821e4c9ea9a1d8a969718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a178d50ecbe7f2b3d10b5d2d8a5d7d3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>ad2723972e97d36e1223d421e65349f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleFrom3Points</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a1d2f2cebdd99045dc40da4d7a5ff6918</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleFrom3Points</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a66ae1902e50c308f0ff50254a35028f1</anchor>
      <arglist>(const Point &amp;aFirstPoint, const Point &amp;aSecondPoint, const Point &amp;aThirdPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>af83180b8e21aecf744794bff9e1fc5e5</anchor>
      <arglist>(const Point &amp;aFirstPoint, const Point &amp;aSecondPoint, const Point &amp;aThirdPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleFrom3Points</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a0e768a627048d3f8e8a3d4e9eabc0ece</anchor>
      <arglist>(const CircleFrom3Points &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CircleFrom3Points &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a378c60cdad788b3dafb372a3a4709a12</anchor>
      <arglist>(const CircleFrom3Points &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CircleFrom3Points</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>aac91fc10aa6133484a2f3c2d9a8b17c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Distance</type>
      <name>signedDistance</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a22117e313f21c4bf3c3af873bea18e77</anchor>
      <arglist>(const Point &amp;aP) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a4559060b437daa3f6bb52e008a65631f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParameters</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>aedd30c9836afe9137ede7da4f70db7d9</anchor>
      <arglist>(double &amp;cx, double &amp;cy, double &amp;rr) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCurvature</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>af50e5867aac94540745374bbfd38aeec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>p</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a6f54ece6ef180c20a90859fa37132f79</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>q</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a33edc0aff62632c7b9e50554219d93c9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>r</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>af3ff94817636f84518ea38826dba34a8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a6f70996ea7bdb9ce5ecc2758ad675656</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>aeebbf35283bc9d82e010e58b9b9858ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>ac3cf5bb5e3a171759fa898b25bd4d570</anchor>
      <arglist>((TPoint::dimension==2))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a76dc3c4e029e2e3df5a9cceacc641a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myQ</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>aad7b7549dbf627fb824a698d2fcf33c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myR</name>
      <anchorfile>classDGtal_1_1CircleFrom3Points.html</anchorfile>
      <anchor>a5f189f2f621d8cba9a44123598c005b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MeshFromPoints</name>
    <filename>classDGtal_1_1MeshFromPoints.html</filename>
    <templarg>TPoint</templarg>
    <member kind="typedef">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>MeshFace</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a1f59f75bf133477eef03722dad3d9663</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshFromPoints</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>acf9b3acc723547e55f680cd5a2ba67f9</anchor>
      <arglist>(bool saveFaceColor=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshFromPoints</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a3428a227604288f1e5950f1780f1637d</anchor>
      <arglist>(const DGtal::Color &amp;aColor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshFromPoints</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>ab6129f5b7a008beb9a59c741444049f4</anchor>
      <arglist>(const std::vector&lt; TPoint &gt; &amp;vertexSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MeshFromPoints</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a1afbf9bc89980ddebd1463616c1e67e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a5b99b9022708028eb44acfc7f5fbb7ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertex</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a30aa877d8b5912fb15dd66b020c9a0f3</anchor>
      <arglist>(const TPoint &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addTriangularFace</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>acc7d1bd7126ad720f0caa9d66c87affd</anchor>
      <arglist>(unsigned int indexVertex1, unsigned int indexVertex2, unsigned int indexVertex3, const DGtal::Color &amp;aColor=DGtal::Color::White)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addQuadFace</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a3b239e2e4b191ed73925b1c385c080c9</anchor>
      <arglist>(unsigned int indexVertex1, unsigned int indexVertex2, unsigned int indexVertex3, unsigned int indexVertex4, const DGtal::Color &amp;aColor=DGtal::Color::White)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFace</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>af2970462295e7a8dca9ea73259ba1817</anchor>
      <arglist>(const MeshFace &amp;aFace, const DGtal::Color &amp;aColor=DGtal::Color::White)</arglist>
    </member>
    <member kind="function">
      <type>const TPoint &amp;</type>
      <name>getVertex</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a6234f0ebd489c221b5f80d6a105ecac3</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>const MeshFace &amp;</type>
      <name>getFace</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a9f96cc711469344c00e8dcb52a1654e3</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>getFaceColor</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a17f704c329e9f779f6a8c55171a64596</anchor>
      <arglist>(unsigned int i) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbFaces</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a0e89c4a8d3b987701d4170da05ce0ab0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>nbVertex</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a5e2cf7f7fdc8fea94a046c9555c7e5c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertVertexFaceOrder</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a78ee4c3979c8ea3c72dc29925d88d502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a6a8ef95f7ca4f38873c83e1778c6a201</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a4cfbc4c66cc61c111151df26946446a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MeshFromPoints</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a512183580969499435786c7932f0b09c</anchor>
      <arglist>(const MeshFromPoints &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MeshFromPoints &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>aa86f2e0fb08722ea453a4677a29f8235</anchor>
      <arglist>(const MeshFromPoints &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; MeshFace &gt;</type>
      <name>myFaceList</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a57a6f9c44ab96c6876742405046f9219</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; TPoint &gt;</type>
      <name>myVertexList</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>acb3645dfe07d270f7992cfb815f5278a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::vector&lt; DGtal::Color &gt;</type>
      <name>myFaceColorList</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>a80f37016b2f7d215f25f833d9ee304c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>mySaveFaceColor</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>aee6aac8cce453d249f4824b7c95cd79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DGtal::Color</type>
      <name>myDefaultColor</name>
      <anchorfile>classDGtal_1_1MeshFromPoints.html</anchorfile>
      <anchor>afee863bd857f743639250231f8e78e6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Point2ShapePredicate</name>
    <filename>classDGtal_1_1Point2ShapePredicate.html</filename>
    <templarg>TSurface</templarg>
    <templarg>isUpward</templarg>
    <templarg>isClosed</templarg>
    <member kind="typedef">
      <type>TSurface::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Point2ShapePredicate.html</anchorfile>
      <anchor>af7b75467a97488431681226479d06017</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSurface::Distance</type>
      <name>Distance</name>
      <anchorfile>classDGtal_1_1Point2ShapePredicate.html</anchorfile>
      <anchor>ab86c8687052d8ec8ea04764cad7cea34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point2ShapePredicate</name>
      <anchorfile>classDGtal_1_1Point2ShapePredicate.html</anchorfile>
      <anchor>abec7bf876e9d11ae79bf801486341d51</anchor>
      <arglist>(const TSurface &amp;aSurface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point2ShapePredicate</name>
      <anchorfile>classDGtal_1_1Point2ShapePredicate.html</anchorfile>
      <anchor>af0cf7a1148ce46d603061114ea792eb5</anchor>
      <arglist>(const Point2ShapePredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1Point2ShapePredicate.html</anchorfile>
      <anchor>a79fb33f93739acd69816c625f3d8b33d</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Point2ShapePredicate.html</anchorfile>
      <anchor>a8cbdabe0621a8ca033f6d800141bdfa9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Point2ShapePredicate</name>
      <anchorfile>classDGtal_1_1Point2ShapePredicate.html</anchorfile>
      <anchor>abae69994d9c927ccc40e8f1829287f4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>TSurface</type>
      <name>myS</name>
      <anchorfile>classDGtal_1_1Point2ShapePredicate.html</anchorfile>
      <anchor>ada5a356c8c86f38c510eb8c7ab2e5a58</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Point2ShapePredicateComparator</name>
    <filename>structDGtal_1_1Point2ShapePredicateComparator.html</filename>
    <templarg></templarg>
    <templarg>b1</templarg>
    <templarg>b2</templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Point2ShapePredicateComparator.html</anchorfile>
      <anchor>ac480d8910b172e421d8428b1eaa4fa67</anchor>
      <arglist>(const T &amp;q, const T &amp;t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Point2ShapePredicateComparator&lt; T, false, false &gt;</name>
    <filename>structDGtal_1_1Point2ShapePredicateComparator_3_01T_00_01false_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Point2ShapePredicateComparator_3_01T_00_01false_00_01false_01_4.html</anchorfile>
      <anchor>a9d53e59b0b86e2a0526613212ab3567f</anchor>
      <arglist>(const T &amp;q, const T &amp;t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Point2ShapePredicateComparator&lt; T, false, true &gt;</name>
    <filename>structDGtal_1_1Point2ShapePredicateComparator_3_01T_00_01false_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Point2ShapePredicateComparator_3_01T_00_01false_00_01true_01_4.html</anchorfile>
      <anchor>aec995818a869581c00e576d3b13faff7</anchor>
      <arglist>(const T &amp;q, const T &amp;t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Point2ShapePredicateComparator&lt; T, true, false &gt;</name>
    <filename>structDGtal_1_1Point2ShapePredicateComparator_3_01T_00_01true_00_01false_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Point2ShapePredicateComparator_3_01T_00_01true_00_01false_01_4.html</anchorfile>
      <anchor>a398315fa24c46d2fa339a4896e16e372</anchor>
      <arglist>(const T &amp;q, const T &amp;t) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Point2ShapePredicateComparator&lt; T, true, true &gt;</name>
    <filename>structDGtal_1_1Point2ShapePredicateComparator_3_01T_00_01true_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1Point2ShapePredicateComparator_3_01T_00_01true_00_01true_01_4.html</anchorfile>
      <anchor>a3f6e8cca030a8ab6a9618fa0d1de3715</anchor>
      <arglist>(const T &amp;q, const T &amp;t) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::StraightLineFrom2Points</name>
    <filename>classDGtal_1_1StraightLineFrom2Points.html</filename>
    <templarg>TPoint</templarg>
    <member kind="typedef">
      <type>TPoint::Coordinate</type>
      <name>Coordinate</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>ac66473540e6160af859937e1607ac546</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Coordinate</type>
      <name>Distance</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>a65381516c33b7fc8aa966406ccf7282b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>ab4610186c0a2da0a549ef3477f32114a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>a13023a07158445905349dc6e83692d41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StraightLineFrom2Points</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>a2783194991653a18a79dbf7997188724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StraightLineFrom2Points</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>ae3205b76a4ff0bd8279886b61e4d0cd6</anchor>
      <arglist>(const Point &amp;aFirstPoint, const Point &amp;aSecondPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>a45eb71c8568f5a2d3249fe742420b936</anchor>
      <arglist>(const Point &amp;aFirstPoint, const Point &amp;aSecondPoint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StraightLineFrom2Points</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>abca15ce4e2f0a193db8b2855fb39b291</anchor>
      <arglist>(const StraightLineFrom2Points &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>StraightLineFrom2Points &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>abe66aac262456188b2994ae37e0b8d0d</anchor>
      <arglist>(const StraightLineFrom2Points &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StraightLineFrom2Points</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>a4f6513dfc575e198a964e71cc237a409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>a04ba7094f6f447abc1290dc79ebd5027</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>a7f8c15314b709112d25dbcf4b2e52774</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Distance</type>
      <name>signedDistance</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>ad49623619bf780d937fa6eeddd31fdb6</anchor>
      <arglist>(const Point &amp;aP) const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>p</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>ad5902e6d5f61a0f17362589d5f3f7e24</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>q</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>a3c7ad64a2171ef0cb2636e8a27d01a09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>a5616ec07a8565d3142050da7fd99182d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>adf171fa318de9d392b0e1cbee822dbd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myQ</name>
      <anchorfile>classDGtal_1_1StraightLineFrom2Points.html</anchorfile>
      <anchor>ae25f6634c5ef97289a8f2c431748da1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::GaussDigitizer</name>
    <filename>classDGtal_1_1GaussDigitizer.html</filename>
    <templarg>TSpace</templarg>
    <templarg>TEuclideanShape</templarg>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a36ed733f523eee0367dd67ffbbcd016f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>aa6d7bfda4ff96ef6082d65c7c26981d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a2ff70548b32f66c6d08cccd77efed1e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a6444f5e4c4e225be327a2c0b2343cc23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>ad17c77894237b6ab74889e1b536326dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>abf73b973af33e25accb671d9802f255a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEuclideanShape</type>
      <name>EuclideanShape</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a1526667f9d9247188a754c3c5e59af8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyperRectDomain&lt; Space &gt;</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a026fc94165abcb2ae40bd0e0720b783c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegularPointEmbedder&lt; Space &gt;</type>
      <name>PointEmbedder</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a2a41571d2726eecc1cb7cc129f13bc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>ab8ee68952e20993af3ff843669f54f42</anchor>
      <arglist>((CEuclideanOrientedShape&lt; TEuclideanShape &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussDigitizer</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a6b075751206d925150383e0d6af37ad2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussDigitizer</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a26712fdae169f79683f26a289e35aaeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GaussDigitizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a35ce93f537baf1f4762143e211a0556c</anchor>
      <arglist>(const GaussDigitizer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a3e9500b5c9c9de58ab9dae3a94ae27a8</anchor>
      <arglist>(const EuclideanShape &amp;shape)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>aa0aa15c8b144dda259fd0407357464f0</anchor>
      <arglist>(const RealPoint &amp;xLow, const RealPoint &amp;xUp, typename RealVector::Component gridStep)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>ad389dbfd7636aa36201fd46d138681b3</anchor>
      <arglist>(const RealPoint &amp;xLow, const RealPoint &amp;xUp, const RealVector &amp;gridSteps)</arglist>
    </member>
    <member kind="function">
      <type>const PointEmbedder &amp;</type>
      <name>pointEmbedder</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a3062019fc46d6bf502746977a4669421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>getDomain</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a0c2944fcc5f39be14600274b16a7f3f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>floor</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>ac1ae16044964926b0805bea71cf2758e</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>ceil</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a0c84077d5fd1d200ef86074b1fd2c429</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>round</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a63dd8cdd1f7098357b4ccca5de26c172</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a08e0b47410621ae3ef1ed5fc9ec3aa4c</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a4d059db68bfbebb7768e20be3f173145</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a1b406c894451edf8a8288e2a7534f866</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>aba425bea065556400ead9d5f0834beb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a42efb4535c7cdfff1129f63ae2e84a97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>resolution</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>abdc171af623ff223977b89cc79e3e937</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>gridSteps</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>ab1abc3f6474d28ce7335f2edf8b5eec5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>aa7f1197dc9ca6c77e5d0005824a7f07b</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>ad40e227614e055bfd68bcb34155cbc63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const EuclideanShape *</type>
      <name>myEShape</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>afa1a46ff67a3ce7963508f73d0758224</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegularPointEmbedder&lt; Space &gt;</type>
      <name>myPointEmbedder</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>ae4c4b5f5f8c397092b7f8a72fa26c737</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>myLowerPoint</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a60f1428131f6ca99b81d94bbe637b1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point</type>
      <name>myUpperPoint</name>
      <anchorfile>classDGtal_1_1GaussDigitizer.html</anchorfile>
      <anchor>a257fa13b53230c3da21420dac35b261e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CImplicitFunction</name>
    <filename>structDGtal_1_1CImplicitFunction.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CImplicitFunction.html</anchorfile>
      <anchor>aadd279a3b8c894570fb449c94effd74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CImplicitFunction.html</anchorfile>
      <anchor>acae696f4cf59f9e172ba1e4e09dd60e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CImplicitFunction.html</anchorfile>
      <anchor>aa879ff37c6d2f7aac6290302af6c3406</anchor>
      <arglist>((boost::UnaryFunction&lt; T, Value, RealPoint &gt;))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CImplicitFunctionDiff1</name>
    <filename>structDGtal_1_1CImplicitFunctionDiff1.html</filename>
    <templarg></templarg>
    <base>DGtal::CImplicitFunction</base>
    <member kind="typedef">
      <type>T::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CImplicitFunctionDiff1.html</anchorfile>
      <anchor>afdb28737d87db2550e4725fad3a0fefa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::RealVector</type>
      <name>RealVector</name>
      <anchorfile>structDGtal_1_1CImplicitFunctionDiff1.html</anchorfile>
      <anchor>a71f3a795286ed9584b4fddc33be2f812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CImplicitFunction.html</anchorfile>
      <anchor>acae696f4cf59f9e172ba1e4e09dd60e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CImplicitFunctionDiff1.html</anchorfile>
      <anchor>aee1241dd09d25e15d2bb41a4c9d59b00</anchor>
      <arglist>(CImplicitFunctionDiff1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CImplicitFunctionDiff1.html</anchorfile>
      <anchor>a2ac6452a19ee4aa496f6686059d9a0df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CImplicitFunction.html</anchorfile>
      <anchor>aa879ff37c6d2f7aac6290302af6c3406</anchor>
      <arglist>((boost::UnaryFunction&lt; T, Value, RealPoint &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CImplicitFunctionDiff1.html</anchorfile>
      <anchor>afd8bdd8e89aa250d95c9295da62e3f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myA</name>
      <anchorfile>structDGtal_1_1CImplicitFunctionDiff1.html</anchorfile>
      <anchor>add27c20ce0cd735578f77d9f263fc0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealVector</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1CImplicitFunctionDiff1.html</anchorfile>
      <anchor>a8572d4640b89588f390a8efafbb3af8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImplicitBall</name>
    <filename>classDGtal_1_1ImplicitBall.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>ImplicitBall&lt; TSpace &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>aec56a4002d98bea1cd872c40092b405f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a011498c83191cac516752e400ab9549e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>aa8984cedfcd3715a66ac6763e540ffe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>aabbf1d0c449fecfb647f96bb8d9a0328</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a066974efdf711b4612fd9ecafa245f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitBall</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>afc4f2c3d5ba6a1628254dc79e373d820</anchor>
      <arglist>(const RealPoint &amp;aCenter, const double &amp;aRadius)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImplicitBall</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a2f71985bb78de6a1ed1012ca4401c363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a3d2a824f0b414d1ceac3e7296eeda857</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a2c21646b19de4ec73abdfa6261b91cef</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a2b82148a9a7fc3913fc9c8702f1627e2</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a7ccd7ac5851d6906ebefb3cc0ef9d352</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>ab32ab7b05fa67fa26bb989c9a08ccf09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a7a0bd066aa0699d6354510e6f2d0e6e0</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a4800ae20d05f93f0334815681049017d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitBall</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a3d68ee71f2028f84f9d9786d0cf909d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ImplicitBall &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a60347e8d391335cbbf2dc8c7daf78e47</anchor>
      <arglist>(const ImplicitBall &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>abc64d23df2635988b308fff61a5fba4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myRadius</name>
      <anchorfile>classDGtal_1_1ImplicitBall.html</anchorfile>
      <anchor>a023ccde4d3e5c64b6d22d75b79dc2817</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImplicitFunctionDiff1LinearCellEmbedder</name>
    <filename>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TImplicitFunctionDiff1</templarg>
    <templarg>TEmbedder</templarg>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a9ea01e414391e78d31acef7c3da1b6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImplicitFunctionDiff1</type>
      <name>ImplicitFunctionDiff1</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ae66a7a78669054b837c58f10b5b9bd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEmbedder</type>
      <name>Embedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ae768f5057a80ca3949e618ca74313879</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ab6ed55d14fc6e32f7674157834e09800</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a64f5d933570ec8b4a14edf48ef79c1ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a1ef58e62210f7bdc952d034f6d70c9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>abfd45de08a53da94f5a8a36ba793a491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a651e45e39f79158f4b0758f8eb442b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a0a10f5ead1634e8b52d0eefb5b41076a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitFunctionDiff1::Value</type>
      <name>ImplicitFctValue</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>aebf850f09bef5637c10da053ebcd69a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Argument</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a56021de2aaa2ac8c9454db4cb7924792</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPoint</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a90c8ccfd305d49d238055d2a384fd85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitFunctionDiff1LinearCellEmbedderGradientMap&lt; KSpace, ImplicitFunctionDiff1, Embedder &gt;</type>
      <name>GradientMap</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ae451d007be37168d06dd3fcfe16c1954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitFunctionDiff1LinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a9a40c239c335d2bea7bf4c0497af6c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImplicitFunctionDiff1LinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a3f120b57c76e8d1496c81787e8a97d65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitFunctionDiff1LinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a1f435e46bf9ce21618ed4e98355d4dc8</anchor>
      <arglist>(const ImplicitFunctionDiff1LinearCellEmbedder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ImplicitFunctionDiff1LinearCellEmbedder &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a1c94e9eb3c8e5d0ddc028ab8a657f364</anchor>
      <arglist>(const ImplicitFunctionDiff1LinearCellEmbedder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a95ae9ebf80d69e8749488e3e535773d6</anchor>
      <arglist>(const KSpace &amp;K, const ImplicitFunctionDiff1 &amp;f, const Embedder &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>GradientMap</type>
      <name>gradientMap</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a9f70045dc089ee0f635d411aadfec44c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a219c029b19fd8bec3d71a2402a9a2af8</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embedCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ab42deaeed71d668fd31e0586d3b258b9</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embedSCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>adfb7478cba95425660603037d25bc75d</anchor>
      <arglist>(const SCell &amp;scell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ad7824a996a5ae1ad297d68bcfc373dc7</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>embed</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>acbf4ff505f7cf3bbb597f17aa291cb36</anchor>
      <arglist>(const Point &amp;p, RealPoint &amp;x, RealVector &amp;grad) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>embedCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a73361766a6e9e0fc2c0816941f077478</anchor>
      <arglist>(const Cell &amp;cell, RealPoint &amp;x, RealVector &amp;grad) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>embedSCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ac1e4473a3cb4b05480545ee7a2eb96a8</anchor>
      <arglist>(const SCell &amp;scell, RealPoint &amp;x, RealVector &amp;grad) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ac3aacd2b6c09f38156f19ff620e414a3</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a0ef45902971134f7546c9b16545abe9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KSpace *</type>
      <name>myPtrK</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a681bfad14c24dde6ef71927747cf5f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ImplicitFunctionDiff1 *</type>
      <name>myPtrFct</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a4b912fc92a968e13f5ba5f7071a0857f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Embedder *</type>
      <name>myPtrEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ab23b5d9dcbc331bfaca92d6d514c1500</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a4007f88078bef804217c33fecc327e7b</anchor>
      <arglist>((CCellularGridSpaceND&lt; TKSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a410cfdb36691a2ff711806f03b317dee</anchor>
      <arglist>((CImplicitFunctionDiff1&lt; TImplicitFunctionDiff1 &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>afd3f56d583c1ecbe64df8a1ad5e1ac42</anchor>
      <arglist>((CPointEmbedder&lt; TEmbedder &gt;))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ImplicitFunctionDiff1LinearCellEmbedderGradientMap</name>
    <filename>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>DGtal::ImplicitFunctionDiff1LinearCellEmbedder</base>
    <member kind="typedef">
      <type>ImplicitFunctionDiff1LinearCellEmbedderGradientMap&lt; TKSpace, TImplicitFunctionDiff1, TEmbedder &gt;</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>af846810cb848decf3375e2ce38f861ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitFunctionDiff1LinearCellEmbedder&lt; TKSpace, TImplicitFunctionDiff1, TEmbedder &gt;</type>
      <name>Base</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>a2d05ace3c960e7d4c1d7d602cff2115b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Cell</type>
      <name>Cell</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>afcb0f98ae30a3e58a5ef54cf9f7b9081</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>a4a60ea8fa5f0e2d0e49acc69f30e8d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::RealVector</type>
      <name>RealVector</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>aa9d7148e53a2da2390e5510bca7eb5ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>a99aaa562fef4fe8fb80dad683e44c0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealVector</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>adc1d055fa070a09ba1215470649f4765</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a9ea01e414391e78d31acef7c3da1b6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImplicitFunctionDiff1</type>
      <name>ImplicitFunctionDiff1</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ae66a7a78669054b837c58f10b5b9bd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEmbedder</type>
      <name>Embedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ae768f5057a80ca3949e618ca74313879</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a64f5d933570ec8b4a14edf48ef79c1ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a1ef58e62210f7bdc952d034f6d70c9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>abfd45de08a53da94f5a8a36ba793a491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitFunctionDiff1::Value</type>
      <name>ImplicitFctValue</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>aebf850f09bef5637c10da053ebcd69a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitFunctionDiff1LinearCellEmbedderGradientMap&lt; KSpace, ImplicitFunctionDiff1, Embedder &gt;</type>
      <name>GradientMap</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ae451d007be37168d06dd3fcfe16c1954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitFunctionDiff1LinearCellEmbedderGradientMap</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>a2d76574f5f7dd261c7d22bf3eec95c3b</anchor>
      <arglist>(const Base &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>ae101f00d789272feec0c92283d91e6f7</anchor>
      <arglist>(const Base &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedderGradientMap.html</anchorfile>
      <anchor>a0194954653ea7ad3e0ad5f7fcf075685</anchor>
      <arglist>(const Argument &amp;arg) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitFunctionDiff1LinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a9a40c239c335d2bea7bf4c0497af6c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImplicitFunctionDiff1LinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a3f120b57c76e8d1496c81787e8a97d65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitFunctionDiff1LinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a1f435e46bf9ce21618ed4e98355d4dc8</anchor>
      <arglist>(const ImplicitFunctionDiff1LinearCellEmbedder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ImplicitFunctionDiff1LinearCellEmbedder &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a1c94e9eb3c8e5d0ddc028ab8a657f364</anchor>
      <arglist>(const ImplicitFunctionDiff1LinearCellEmbedder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a95ae9ebf80d69e8749488e3e535773d6</anchor>
      <arglist>(const KSpace &amp;K, const ImplicitFunctionDiff1 &amp;f, const Embedder &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>GradientMap</type>
      <name>gradientMap</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a9f70045dc089ee0f635d411aadfec44c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a219c029b19fd8bec3d71a2402a9a2af8</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embedCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ab42deaeed71d668fd31e0586d3b258b9</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embedSCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>adfb7478cba95425660603037d25bc75d</anchor>
      <arglist>(const SCell &amp;scell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>embed</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>acbf4ff505f7cf3bbb597f17aa291cb36</anchor>
      <arglist>(const Point &amp;p, RealPoint &amp;x, RealVector &amp;grad) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>embedCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a73361766a6e9e0fc2c0816941f077478</anchor>
      <arglist>(const Cell &amp;cell, RealPoint &amp;x, RealVector &amp;grad) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>embedSCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ac1e4473a3cb4b05480545ee7a2eb96a8</anchor>
      <arglist>(const SCell &amp;scell, RealPoint &amp;x, RealVector &amp;grad) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ac3aacd2b6c09f38156f19ff620e414a3</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a0ef45902971134f7546c9b16545abe9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const KSpace *</type>
      <name>myPtrK</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a681bfad14c24dde6ef71927747cf5f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ImplicitFunctionDiff1 *</type>
      <name>myPtrFct</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>a4b912fc92a968e13f5ba5f7071a0857f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Embedder *</type>
      <name>myPtrEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionDiff1LinearCellEmbedder.html</anchorfile>
      <anchor>ab23b5d9dcbc331bfaca92d6d514c1500</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImplicitFunctionLinearCellEmbedder</name>
    <filename>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TImplicitFunction</templarg>
    <templarg>TEmbedder</templarg>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a25d5c9426e80bf3ede76cd30f4657255</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImplicitFunction</type>
      <name>ImplicitFunction</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>ae164e2d0fb3aab691ff459b8812888b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TEmbedder</type>
      <name>Embedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a6a1de3b269b82b4078803922f57e8ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a79131a7b529cb74fc0ab76e3cb381ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a4e791125dcf1910517f4494c0fd48d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>af1ba830aa7f81849d2a9c8577441528a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>af297637be633444ea781d1f8845695f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a8e8010c19b402ce3c0a5a8a4cc8934a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitFunction::Value</type>
      <name>ImplicitFctValue</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>ad8144322e0be66e33a5f1ce3e351fb8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Argument</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>ac88e351d8d9470cf618fb5b3d262a160</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPoint</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a95a9f4bc6e32e59ec3bf424de7e35bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitFunctionLinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a624c460ee801b8be838616a1f9ab7a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImplicitFunctionLinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>ad71bc3f66d38e375dfdefc6f8ca3722f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitFunctionLinearCellEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a0d2b1420a60fe8a7d55ba686db882a14</anchor>
      <arglist>(const ImplicitFunctionLinearCellEmbedder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ImplicitFunctionLinearCellEmbedder &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a7f9c8b21a482652ab85e7f7901597cc8</anchor>
      <arglist>(const ImplicitFunctionLinearCellEmbedder &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>aa35812d81f773bb48934623444601016</anchor>
      <arglist>(const KSpace &amp;K, const ImplicitFunction &amp;f, const Embedder &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embed</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>aa10687addced3aa8a094b3ed08887b27</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embedCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a5eb05787e92b7b5620a6fada7f25bd34</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>embedSCell</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>aaca61283196565646d4091293b241892</anchor>
      <arglist>(const SCell &amp;scell) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>af1de19ae36620ada0d9036afbfb7c7c3</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>aa2fdb76666d8ccd88703ca40fb6a8879</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>aabee58f39873119e01a7ff1be6114807</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a91cb68ea23edae5aa09ab7a7ae967de7</anchor>
      <arglist>((CImplicitFunction&lt; TImplicitFunction &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myPtrK</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>aebfc580c4037fedfe4535a49ff5bd414</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ImplicitFunction *</type>
      <name>myPtrFct</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>a7cfe300ca7d99fb514aa9393158f6033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Embedder *</type>
      <name>myPtrEmbedder</name>
      <anchorfile>classDGtal_1_1ImplicitFunctionLinearCellEmbedder.html</anchorfile>
      <anchor>aa7078bf56ea26885988db2874bdff56b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImplicitHyperCube</name>
    <filename>classDGtal_1_1ImplicitHyperCube.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>ImplicitHyperCube&lt; TSpace &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a0c86c2fa555a218e834cd0aa81c174cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a7c82ba9c75700e6fbbc266437e120de0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a9dd3a9f881daf19192f9fd9974549675</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a75ee05c8b52f53445ff50616ea87a10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitHyperCube</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a37036df06ed739ee0d488ac386ae4af5</anchor>
      <arglist>(const RealPoint &amp;aCenter, const double &amp;aHalfWidth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImplicitHyperCube</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a2d9aba6e83613432efed11caa37e3087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a3db948aceec99c4d4cea4c5627f52a2d</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a5416989eef8fdcc9d5c2b42d2c418c83</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a4c534495021ecedda27e1be9d882a48c</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a426abf9a096e06ff99b6fe6c95b320f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>aca94f0b7a0a64b4fc78483331ee30391</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>ac4ae82a373b53ba564429ae6ddbcebd6</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a9531f0af4cd283dfdb7b410abb49d025</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitHyperCube</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a1bc9af7e2b4b0c230171827df6c0481b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ImplicitHyperCube &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>a5a04d0c3115e05f3c016584d0b9d87ec</anchor>
      <arglist>(const ImplicitHyperCube &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>ad2c72c70c69c83f22ae7be4278ab2cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myHalfWidth</name>
      <anchorfile>classDGtal_1_1ImplicitHyperCube.html</anchorfile>
      <anchor>aef565e7af0fd6ea4b8821ba9db430c54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImplicitNorm1Ball</name>
    <filename>classDGtal_1_1ImplicitNorm1Ball.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>ImplicitNorm1Ball&lt; TSpace &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a2ce0f65ed2084db5836b94f930d2e202</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a9191fc2236e0be35fb608f7d5e3a46fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a04080ca936464fab6c7579d212bfe081</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a4bad413264a22f40586246e3e8dc73c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitNorm1Ball</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a2b482c317b10ccecc8d1bad0c3e733d7</anchor>
      <arglist>(const RealPoint &amp;aCenter, const double &amp;aHalfWidth)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImplicitNorm1Ball</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a40ff2de78cb83b9fbb793d81eea5f06c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a2212bf22cba8d436435d310aac492a5d</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>aebd2e5abc722e5737da11aa62df9be9c</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a5456996bdfdc78c7e8524b8cb8a91650</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>aa5c5e3350f20432eb204ff66bd78b6f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a7eda805582d8ef9ee700493b245b9821</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>aa59c55032a4c2d79a4e5761168408d66</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a93935dc80c59f60cad9a13b9f9c815fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitNorm1Ball</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a738b303ce4aa1b323ae777f0c85e0896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ImplicitNorm1Ball &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a70ccbdc58a0f910c5a14ecb899192dac</anchor>
      <arglist>(const ImplicitNorm1Ball &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a45c8f6fb355a948e9a5a44b8079e1e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myHalfWidth</name>
      <anchorfile>classDGtal_1_1ImplicitNorm1Ball.html</anchorfile>
      <anchor>a902f637698feabbe303a9ff5eb0de132</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImplicitPolynomial3Shape</name>
    <filename>classDGtal_1_1ImplicitPolynomial3Shape.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>ImplicitPolynomial3Shape&lt; TSpace &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a44774fae14c06d18445de942dedb3e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>aa012867b45e7ffa11ff19a552ac031a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a2fe0d60c46b63753d6245264f739b627</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a4f3d0049066ade1cc740ef86945ce270</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealPoint::Coordinate</type>
      <name>Ring</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>ae0e1eb43244f886b0554cc48e01f98eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a14ae1dda9e662a0d914822e6209db18b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPolynomial&lt; 3, Ring &gt;</type>
      <name>Polynomial3</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a837b975db840ade0cab0b00d6efbe846</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ring</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>af300bc979027f1f3cd84d9c7231e519c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a34aa678c0c3979c9a2280c1d60ad046b</anchor>
      <arglist>((Space::dimension==3))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitPolynomial3Shape</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a07a819f15e99203b5c2526766f7866b9</anchor>
      <arglist>(const Polynomial3 &amp;poly)</arglist>
    </member>
    <member kind="function">
      <type>ImplicitPolynomial3Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a1a262519486646daa32867448c63f359</anchor>
      <arglist>(const ImplicitPolynomial3Shape &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImplicitPolynomial3Shape</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>ad20ff8b4fc541f6ba7644de6e7e63ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>af9a38f67eacc066b1b8b509df6a04175</anchor>
      <arglist>(const Polynomial3 &amp;poly)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>aed7d90c99f8fc96a22bc6be2b4bda49e</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a7c54cc3ce6b08edf3e3b7921d3054550</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a2e3df337a85f30dfae93f3aace5cd18a</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector</type>
      <name>gradient</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a45a598319d4b2a3a2d53369cef9ece03</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>meanCurvature</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a88243484a1c0c70f2350fbdcd09f0ea7</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>gaussianCurvature</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a14d12a6085c9a05a2277338fbf7d5b56</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>nearestPoint</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>accb0f740bc5c8ee22a75fb261f6a7103</anchor>
      <arglist>(const RealPoint &amp;aPoint, const double accuracy, const int maxIter, const double gamma) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a97b05183510155bea08bed104e1bfd2f</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a9ddcd9f8c8b001491aa092f69093d1f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitPolynomial3Shape</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>af6609b540375293df09970845fa16df3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myPolynomial</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>aa6e570712e6aa184c8f2384bddb0aea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFx</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>ae453fefe44617f450731d357bb6ae6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFy</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a46e9556d6c76b7f2ba8939583cff263e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFz</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>aca9ff55590f3e08610421369240c83e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFxx</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a537b8198d71c409ade49b480c846b48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFxy</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a03662d6b742369f1a07fa8c825daf06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFxz</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>ac528982b45a0c7141e3ad9c1d951a624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFyx</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a5ec2752e6dd4f4d6c37d88c494ae58fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFyy</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>aee7a5cf5cd50105d0c0eaf6f6752c7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFyz</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>aaac7d566904257b1cb4c5deebca0a74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFzx</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a2366a0c6c58c9e99b6f541ea585b0632</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFzy</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a2632d692860d0d81539eca5873f973c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myFzz</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a7a13a3dc8d48ce71e74e7f99cff09640</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myUpPolynome</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>a49c437006edbf24b4ea1cde308e6b9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Polynomial3</type>
      <name>myLowPolynome</name>
      <anchorfile>classDGtal_1_1ImplicitPolynomial3Shape.html</anchorfile>
      <anchor>aebbdd3ba5647daada6c279cc9ef14773</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImplicitRoundedHyperCube</name>
    <filename>classDGtal_1_1ImplicitRoundedHyperCube.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>ImplicitRoundedHyperCube&lt; TSpace &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a6aa694417e773ea7f2586f3ea57e7d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>abc88cf4d00c068e7838f6f2ea4fc80a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>ad99aa98a98e39ddc3f0584cd87ef2fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a97343161b1f3d9e30f28201a6c32a04b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitRoundedHyperCube</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a0dce1a0ff11b0c796f1c684ae66f180e</anchor>
      <arglist>(const RealPoint &amp;aCenter, const double &amp;aHalfWidth, const double aPower)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImplicitRoundedHyperCube</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>ae551571358c0ad9b851ef4044b4f675e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a714533140f8a45accafe2400696243fd</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>aeacc14032dfefb0b01c6c043488f663a</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a96f4f040d75cc517442485af5ec96bcd</anchor>
      <arglist>(const RealPoint &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>adaf83638dd97cd389302f3a20b24a6fa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a9ae260c2d0ee666abbf75009a742d956</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a6ff8cb74fd767de1eccf80765497cb25</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a45cf10cd8b40a3ba332091cd7436ded4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImplicitRoundedHyperCube</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a9e19bcfe881f7ecac7ee9d9f0c96caf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ImplicitRoundedHyperCube &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a0967784dc58140df75203afb09347032</anchor>
      <arglist>(const ImplicitRoundedHyperCube &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a61d101144e1db356b6098c90f9cdf404</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myHalfWidth</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>a66e4eb078f357e8c32e041a24cc92a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myPower</name>
      <anchorfile>classDGtal_1_1ImplicitRoundedHyperCube.html</anchorfile>
      <anchor>aab37bf8d153fc3d287b4a99605252039</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::AccFlower2D</name>
    <filename>classDGtal_1_1AccFlower2D.html</filename>
    <templarg>TSpace</templarg>
    <base>DGtal::StarShaped2D</base>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>ad7ae24311f622ed0fc13d4cd027ebd4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>aae6628720bfd43d62ec19aa480b1c30d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint2D</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>afda33b77695c7ccd6e778595ed1ba5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector2D</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a773f8e0f77e906361bf46bcfc42da77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a6867a370510f21fb2e97db4561f0b36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AccFlower2D</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a5d055eef6c4d0e35cc297d308588ef05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AccFlower2D</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a972f0e1a20bc2023cd00a802da2a0f61</anchor>
      <arglist>(const double x0, const double y0, const double r, const double smallr, const unsigned int k, const double phi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AccFlower2D</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>ad976d1560d2e133f69d6829d4f4d9611</anchor>
      <arglist>(const RealPoint2D &amp;aPoint, const double r, const double smallr, const unsigned int k, const double phi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AccFlower2D</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>afebdd190ef5c301b458128c8f08add1e</anchor>
      <arglist>(const Point &amp;aPoint, const double r, const double smallr, const unsigned int k, const double phi)</arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>ac68b2414b31db8f5eb0327dd05fdb641</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>abf9f1e20e481d4808258c79858c4e939</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>center</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a800b478ea5f6e57dd0b08b748cac874d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>parameter</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a0ceb349d3d37fd380c46e4e27360b6cb</anchor>
      <arglist>(const RealPoint2D &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>x</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a53bfdb69bc0b6769d166ae799d974262</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xp</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>aa44c4cd12ddb7c89f19b674e63622b99</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xpp</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a96f426f698e9d86d633dfba83881e7dc</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>ac292347405dea5960b71f1d30d986753</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>ae28b735b955f4fdb46966b7792badcb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a687bd3705526de4940437b27ce3ec8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a889d52d4c6fc818c12d475eef7b39279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>interiorPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a47a5f71aceca2908abc36f983a233e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>afc8b45df7e363f934b5d72629d0bbb92</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a49f06c6874e201a4c0d5b0170fc55bd0</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a979f87792ed4fb7a94dda0c2fad92ba7</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>tangent</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a3a4ebd379dc45f741ab2c97d91e6c6f4</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>normal</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa0f4061ccbd8889df5022bd2a733a9ba</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>curvature</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa1aaebb0e99dcd40e66f42010ecdc910</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>arclength</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>ad3d5d1a5345ce07084fd90744bcef438</anchor>
      <arglist>(double t1, double t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AccFlower2D</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>adbb0b421a5dec7faeafbb30eef1702a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>AccFlower2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a107558f157073bef7da852348752a587</anchor>
      <arglist>(const AccFlower2D &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint2D</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a32fd09d8deb84ac250799c1118e91d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myRadius</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>acc5f1414c2fb7258ace604ae4271a076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myVarRadius</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a076e35cce66e108a8921c32486e1086b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a450448fa7eea34f71bbded48225b147d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myKp</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a5b9032817a01afd45abfef0695642e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myPhi</name>
      <anchorfile>classDGtal_1_1AccFlower2D.html</anchorfile>
      <anchor>a6eae39365f3ebfc25755bd44a03e5ac9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Ball2D</name>
    <filename>classDGtal_1_1Ball2D.html</filename>
    <templarg>TSpace</templarg>
    <base>DGtal::StarShaped2D</base>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a7d368b6ca0ab18444792c96ccd8e1117</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a831cbe1f6801e96b5db9d30b1c33c4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint2D</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>aa7f055f5fedb97e14a1e739efbb58e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector2D</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a0ec31c2b35bfde2c354a920341c5849e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a6867a370510f21fb2e97db4561f0b36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Ball2D</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a2c4bd76a069c5b554b214d69887bab4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ball2D</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a6dea76887f1d31f8acfebb8cefab7a2e</anchor>
      <arglist>(const double x0, const double y0, const double r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ball2D</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a1fd697eb83286c109f522ee14d4f5d52</anchor>
      <arglist>(const RealPoint2D &amp;aPoint, const double r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ball2D</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a1bcd430e3dc07057d1c2ea6057355141</anchor>
      <arglist>(const Point &amp;aPoint, const double r)</arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a997e682427c07048d1ea90522e71c462</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a93060553c07866fa8ad047f470b126a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>center</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a91728ab98bcf77030559ce04cf99c6bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>parameter</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a14a9022ee073fe5c86fd38183b6e6f36</anchor>
      <arglist>(const RealPoint2D &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>x</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a8b546028b2d0b92274feff5e73a7c680</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xp</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a959da71268887e1b0f11dfa01bd1549b</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xpp</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a3f406379384f55ca7a7ee28568e658f5</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a7b2e4eb91db58446283b95ead16dbbec</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a2d7976ccaf481aaab12c605979d41673</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a687bd3705526de4940437b27ce3ec8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a889d52d4c6fc818c12d475eef7b39279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>interiorPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a47a5f71aceca2908abc36f983a233e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>afc8b45df7e363f934b5d72629d0bbb92</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a49f06c6874e201a4c0d5b0170fc55bd0</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a979f87792ed4fb7a94dda0c2fad92ba7</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>tangent</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a3a4ebd379dc45f741ab2c97d91e6c6f4</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>normal</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa0f4061ccbd8889df5022bd2a733a9ba</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>curvature</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa1aaebb0e99dcd40e66f42010ecdc910</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>arclength</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>ad3d5d1a5345ce07084fd90744bcef438</anchor>
      <arglist>(double t1, double t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Ball2D</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>ada92ce0e342c3db86ed0400733b0b433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ball2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>ac2832c95c1b3207068470ddcd026163e</anchor>
      <arglist>(const Ball2D &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myRadius</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>a5a40541b9e68cca2878fc05783720513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint2D</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1Ball2D.html</anchorfile>
      <anchor>af006d2c1b25c6e1498f189e14b6baff0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Ball3D</name>
    <filename>classDGtal_1_1Ball3D.html</filename>
    <templarg>TSpace</templarg>
    <base>DGtal::StarShaped3D</base>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a2b9b961838663cdd52267d90292e0eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>aca19d87964fb0d4388ad68e0b2237c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pair&lt; double, double &gt;</type>
      <name>AngularCoordinates</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>ac8e284246f4c068e9698907b935e01d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Ball3D</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a40889934f0be33ae7c16bd8f930e7cb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ball3D</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>aa8071939615e6814121ec5e1aa6c4bfb</anchor>
      <arglist>(const double x0, const double y0, const double z0, const double r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ball3D</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>aad7f647e4d7d5e50f664f00dde2b3886</anchor>
      <arglist>(const RealPoint &amp;aPoint, const double r)</arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a3d17fddc3bfb11bb12fa74e5b7f63634</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a7f939e67fb0493424afdb6a99f834373</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>center</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a3666c315f9a6b466a2cc7815f668bb14</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>AngularCoordinates</type>
      <name>parameter</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a5cecce443718e20e58097fa9b88f97c1</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>x</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a20de83c41e64c7025a4299e1a2321db7</anchor>
      <arglist>(const AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>gradient</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a294daf5a1565cc6306d563a073e638da</anchor>
      <arglist>(const AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>rt</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a6a244f83b3c3c4a025cd04bf9aae60d4</anchor>
      <arglist>(const AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>rp</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a0a8281c89026bf916453d3d393d3dc8b</anchor>
      <arglist>(const AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>rtt</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a141e181e0d14ad6a73b9c1c7cfdad644</anchor>
      <arglist>(const AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>rpp</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>ad2d9c83bb09883b467e185f0fbe17fc7</anchor>
      <arglist>(const AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>rtp</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>abe215a9d0652705cdb073440dbdf1e7e</anchor>
      <arglist>(const AngularCoordinates t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a3db7b98663b52a3dde3df5fac8fab6fc</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>af7601039e2dae842fa5ca08ad028f815</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StarShaped3D</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a68a6bfc064cbb88417fbf399a34fe9ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StarShaped3D</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a21eeffa04f73fc249b6a6ac7fe9899c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>interiorPoint</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>aa4cef8af4376c08977c684781a5b706d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a3f3e6370487b2545f66b4e708ffa9796</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a6996884aae4e92fce8d3acb8a9dcb74f</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>normal</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a35c3bf05ddd36d0e10e437cc65d3e404</anchor>
      <arglist>(AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>gaussianCurvature</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>ad3d64f20178de21fb546b1eb4856050f</anchor>
      <arglist>(AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>meanCurvature</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a45cd5d4a2db0402e7ce7489825f25cb9</anchor>
      <arglist>(AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>arclength</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a9695fa5974a2ba5ef2515fd465c9963b</anchor>
      <arglist>(AngularCoordinates t1, AngularCoordinates t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>surfacelength</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a6fbf4e0451305c951873f9c5953a9764</anchor>
      <arglist>(AngularCoordinates t1, AngularCoordinates t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Ball3D</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a76da5ecc75510789a578e59c396da3af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ball3D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a4b353f45157ed5df4d353d2b1adfcfbf</anchor>
      <arglist>(const Ball3D &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myRadius</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a5ab1e554c9574a4ee5cb01fb68e1ebab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1Ball3D.html</anchorfile>
      <anchor>a9d95417a3ac5fa92d5b59f73e86a9792</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Ellipse2D</name>
    <filename>classDGtal_1_1Ellipse2D.html</filename>
    <templarg>TSpace</templarg>
    <base>DGtal::StarShaped2D</base>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a515b73384203896c4d508a61449a230c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a5acbd18f71f3885c82b233c9d17dfe46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint2D</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>af3a858846c1d159b2f1841b47a6e8fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector2D</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a5c3442e9c8f255b826a33605e47e5631</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a6867a370510f21fb2e97db4561f0b36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Ellipse2D</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a5c3466d959f14cbebaf173c1a33b68af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ellipse2D</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>afc409b2afbf9e5a873afbde6c23def0e</anchor>
      <arglist>(const double x0, const double y0, const double a0, const double a1, const double theta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ellipse2D</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a23c668cefae5567ec34feb3942f1ff8a</anchor>
      <arglist>(const RealPoint2D &amp;aPoint, const double a0, const double a1, const double theta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ellipse2D</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a4d9931aebfb7ae05e57c7c066bfd79b2</anchor>
      <arglist>(const Point &amp;aPoint, const double a0, const double a1, const double theta)</arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>acc88d45ed1e914df3a3672263c341ece</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>ac52b39659c01f595ddef47a12db68278</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>center</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>ae8cbf8840a1b9d4beab8e718fa794b62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>parameter</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a104d73262bba8ce5345309b8851d12a5</anchor>
      <arglist>(const RealPoint2D &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>x</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a573c4f29baa0a67599d6aa9a0d4f408d</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xp</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>ae9a2172c18931f54576b4fb2425a697a</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xpp</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a774f1ada74c086f1d2d345d380995fa3</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>af9788b38479424b733d923bf0170196f</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>acf7dd91dbc93860489dea2d1b735e142</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a687bd3705526de4940437b27ce3ec8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a889d52d4c6fc818c12d475eef7b39279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>interiorPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a47a5f71aceca2908abc36f983a233e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>afc8b45df7e363f934b5d72629d0bbb92</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a49f06c6874e201a4c0d5b0170fc55bd0</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a979f87792ed4fb7a94dda0c2fad92ba7</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>tangent</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a3a4ebd379dc45f741ab2c97d91e6c6f4</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>normal</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa0f4061ccbd8889df5022bd2a733a9ba</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>curvature</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa1aaebb0e99dcd40e66f42010ecdc910</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>arclength</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>ad3d5d1a5345ce07084fd90744bcef438</anchor>
      <arglist>(double t1, double t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Ellipse2D</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a341529ae340bc3ed80acbf0f26e02c53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Ellipse2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a5b51d2717809660574a5cc45c9b69af9</anchor>
      <arglist>(const Ellipse2D &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint2D</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>af9eba45dd4301eb56a7a42fd042a1040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myAxis1</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a1bb9e9c5f7f1bf03f0e9d996b4454317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myAxis2</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a7e46684e52c56531336f6b3bf36bc03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myTheta</name>
      <anchorfile>classDGtal_1_1Ellipse2D.html</anchorfile>
      <anchor>a3a98c7fd1fdaa775a3504d408d84ceab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Flower2D</name>
    <filename>classDGtal_1_1Flower2D.html</filename>
    <templarg>TSpace</templarg>
    <base>DGtal::StarShaped2D</base>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a54917e9a0cf9e32fb5a4e1e5fd2ca681</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a809daa1c5847776c504552482aaf61ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint2D</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>af19b9d5352b6c3e3eb072aab90dcabed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector2D</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a9234983f2e1a29213fe3310fab145f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a6867a370510f21fb2e97db4561f0b36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Flower2D</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>ad4d2b35d9f5767f321105b0004c7fca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Flower2D</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a9655be1a7d8de843b87921589d4b6961</anchor>
      <arglist>(const double x0, const double y0, const double r, const double smallr, const unsigned int k, const double phi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Flower2D</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a6d2941dadcde2f169090b47cfea95e99</anchor>
      <arglist>(const RealPoint2D &amp;aPoint, const double r, const double smallr, const unsigned int k, const double phi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Flower2D</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>aeae933529ea924db00720b158d34ff70</anchor>
      <arglist>(const Point &amp;aPoint, const double r, const double smallr, const unsigned int k, const double phi)</arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a3d86edefc26ca7a5794d1767a89d3db8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a0d949a1bbf4a2f1837f8f59fdc787109</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>center</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a8711a7c7987f1554bee243fbf457e48e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>parameter</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a856adfd985548ff3e7ca0ae8579774d7</anchor>
      <arglist>(const RealPoint2D &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>x</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>ad2b5a170a21a9a0be70b0aa58a512b5d</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xp</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a93a2c079d90585ab341a5f1dd7015149</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xpp</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>accfd90d1ce0c9668c8bad36a08a451d2</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>aa67b1a8f1d762d97ce3a371843647fcb</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a155036b7bf9ff9bec294ab3b5f517d19</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a687bd3705526de4940437b27ce3ec8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a889d52d4c6fc818c12d475eef7b39279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>interiorPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a47a5f71aceca2908abc36f983a233e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>afc8b45df7e363f934b5d72629d0bbb92</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a49f06c6874e201a4c0d5b0170fc55bd0</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a979f87792ed4fb7a94dda0c2fad92ba7</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>tangent</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a3a4ebd379dc45f741ab2c97d91e6c6f4</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>normal</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa0f4061ccbd8889df5022bd2a733a9ba</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>curvature</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa1aaebb0e99dcd40e66f42010ecdc910</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>arclength</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>ad3d5d1a5345ce07084fd90744bcef438</anchor>
      <arglist>(double t1, double t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Flower2D</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>abad7e3137a5ee61e958cd7d4b20e7e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Flower2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a7b8fcd3f094cbef87c240e654e1d42cd</anchor>
      <arglist>(const Flower2D &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint2D</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>ab4385ed8cb788aa941c563a13f4821b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myRadius</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a79023d199a56bd939c667c5aecd8382f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myVarRadius</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>acce025e8553c682af2e2887bc81a8345</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a94e43cdfc83f5d5c527b0297a872e378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myPhi</name>
      <anchorfile>classDGtal_1_1Flower2D.html</anchorfile>
      <anchor>a564ee0b5c68b04f94294fd72e33f88b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::NGon2D</name>
    <filename>classDGtal_1_1NGon2D.html</filename>
    <templarg>TSpace</templarg>
    <base>DGtal::StarShaped2D</base>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a876aa12e1407835d61b85d361ac16d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a38e2e59f5bd06589123ad4d6503267df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint2D</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>ae7a6d97d6991f1ed7c7aca6fefbd428a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector2D</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a0fb87823b7bdeb720de853e3750154ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a6867a370510f21fb2e97db4561f0b36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NGon2D</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>acbd201c417833970ada8d0f54adbfa44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NGon2D</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a377afa44422f8e330997eed49c12bb88</anchor>
      <arglist>(const double x0, const double y0, const double r, const unsigned int k, const double phi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NGon2D</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a19dde661f7fb54cdd09ef75aea507964</anchor>
      <arglist>(const RealPoint2D &amp;aPoint, const double r, const unsigned int k, const double phi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NGon2D</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a4cf53f1cc946dcf9b95aeb13d7752eb2</anchor>
      <arglist>(const Point &amp;aPoint, const double r, const unsigned int k, const double phi)</arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>aae818134aa83d95734e14202f70d899e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>ab6d622bc58335330ccca2b77dfee8ce3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>center</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a68744b0bb7aeb276bb21241cf60990ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>parameter</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a8697f2c4941c9ea8322f30cb53fee030</anchor>
      <arglist>(const RealPoint2D &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint2D</type>
      <name>x</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>ade95ec60ee08d0342c4a9b1d00cbe6a5</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xp</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a1ead45d1e4a0a2e130cdd2aec8b83b9b</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealVector2D</type>
      <name>xpp</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a72604d6292f6e9261fd46ca367625c89</anchor>
      <arglist>(const double t) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a90239377138ed82b5fc14d219cbb6ab5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>add4148a6d22d4b789aa26b541154c152</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a687bd3705526de4940437b27ce3ec8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a889d52d4c6fc818c12d475eef7b39279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>interiorPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a47a5f71aceca2908abc36f983a233e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>afc8b45df7e363f934b5d72629d0bbb92</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a49f06c6874e201a4c0d5b0170fc55bd0</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a979f87792ed4fb7a94dda0c2fad92ba7</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>tangent</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a3a4ebd379dc45f741ab2c97d91e6c6f4</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>normal</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa0f4061ccbd8889df5022bd2a733a9ba</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>curvature</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa1aaebb0e99dcd40e66f42010ecdc910</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>arclength</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>ad3d5d1a5345ce07084fd90744bcef438</anchor>
      <arglist>(double t1, double t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NGon2D</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>ae5cacac8a112f5871ddeb2381b812648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>NGon2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>adf06d4b1b645ef0dc1196fa4027d10f6</anchor>
      <arglist>(const NGon2D &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint2D</type>
      <name>myCenter</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>aa4cb461673aae18fbd5992cfa8f0a3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myRadius</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a9b02e5f135a8989b9b062dffa32dc771</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>unsigned int</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a535b1fc10dd0b07e5c912127b0f7fd7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>double</type>
      <name>myPhi</name>
      <anchorfile>classDGtal_1_1NGon2D.html</anchorfile>
      <anchor>a0156599c9784514e142a9b5d986965aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::StarShaped2D</name>
    <filename>classDGtal_1_1StarShaped2D.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a4d2d41d6f6d07544450ac32d26a6abb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a33e32e825c5aafdd567ecdf6c0fe2f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a6867a370510f21fb2e97db4561f0b36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a687bd3705526de4940437b27ce3ec8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StarShaped2D</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a889d52d4c6fc818c12d475eef7b39279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>interiorPoint</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a47a5f71aceca2908abc36f983a233e30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>ac03182e3419111332eef6436735f7480</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a9790e27dd5b75751ff6019d49581b367</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>center</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>ad2290b83f1b29cb1c651518e794773c5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>parameter</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a9d87076e30318b190b3f3cc5aeb3d4cc</anchor>
      <arglist>(const RealPoint &amp;p) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>x</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa7941e02fc02539751c033ef9dc0b862</anchor>
      <arglist>(const double t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>xp</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>af75a62e0953a2f42f058966c24d84e50</anchor>
      <arglist>(const double t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>xpp</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa79ff10fb8f1b4976856f63141107132</anchor>
      <arglist>(const double t) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>afc8b45df7e363f934b5d72629d0bbb92</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a49f06c6874e201a4c0d5b0170fc55bd0</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a979f87792ed4fb7a94dda0c2fad92ba7</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>tangent</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a3a4ebd379dc45f741ab2c97d91e6c6f4</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>RealPoint</type>
      <name>normal</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa0f4061ccbd8889df5022bd2a733a9ba</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>curvature</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>aa1aaebb0e99dcd40e66f42010ecdc910</anchor>
      <arglist>(double t) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>arclength</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>ad3d5d1a5345ce07084fd90744bcef438</anchor>
      <arglist>(double t1, double t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>acfb1851fd86bba85eb103b9e454f5778</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>a18ae989eefab5a0d7fb0c60024a203b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>StarShaped2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1StarShaped2D.html</anchorfile>
      <anchor>ac25cdd735120f30c594be3975f107ff9</anchor>
      <arglist>(const StarShaped2D &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::StarShaped3D</name>
    <filename>classDGtal_1_1StarShaped3D.html</filename>
    <templarg>TSpace</templarg>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>af6cf5fbfdc5186d2ecadec1cebc3f12b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a60f0bb28678a97cefa6c449800b17a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pair&lt; double, double &gt;</type>
      <name>AngularCoordinates</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a467399e543420513057449f631d45826</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StarShaped3D</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a68a6bfc064cbb88417fbf399a34fe9ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~StarShaped3D</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a21eeffa04f73fc249b6a6ac7fe9899c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>interiorPoint</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>aa4cef8af4376c08977c684781a5b706d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>getLowerBound</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a2a4e782693546d164970c9e316c9769f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>getUpperBound</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>af0acd7e05635db94e999a19823961c91</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>center</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>ab007b15473ea585fe112670c96ffc740</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual AngularCoordinates</type>
      <name>parameter</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a9a3e9054236a3e5cdd993d8a459a9255</anchor>
      <arglist>(const RealPoint &amp;p) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>x</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>ab5843aeb041eb750a93ec9d2481a4b6a</anchor>
      <arglist>(const AngularCoordinates t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>gradient</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a353d622b95589dae1ade39988c439f8c</anchor>
      <arglist>(const AngularCoordinates t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>rt</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a9f813f61629fd2822339545a42ade569</anchor>
      <arglist>(const AngularCoordinates t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>rp</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a8112b332c914d63cda8c4ae08c844eba</anchor>
      <arglist>(const AngularCoordinates t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>rtt</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>abe6c6732b4fd8cd1ab7cee9f98c0226f</anchor>
      <arglist>(const AngularCoordinates t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>rpp</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>ab85891c1f3c61b3ce702c91d2b4198f0</anchor>
      <arglist>(const AngularCoordinates t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RealPoint</type>
      <name>rtp</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a4b7899827c292778fb044877ab9cc315</anchor>
      <arglist>(const AngularCoordinates t) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a3f3e6370487b2545f66b4e708ffa9796</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Orientation</type>
      <name>orientation</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a6996884aae4e92fce8d3acb8a9dcb74f</anchor>
      <arglist>(const RealPoint &amp;p) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual RealPoint</type>
      <name>normal</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a35c3bf05ddd36d0e10e437cc65d3e404</anchor>
      <arglist>(AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>gaussianCurvature</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>ad3d64f20178de21fb546b1eb4856050f</anchor>
      <arglist>(AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>meanCurvature</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a45cd5d4a2db0402e7ce7489825f25cb9</anchor>
      <arglist>(AngularCoordinates t) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>arclength</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a9695fa5974a2ba5ef2515fd465c9963b</anchor>
      <arglist>(AngularCoordinates t1, AngularCoordinates t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>surfacelength</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a6fbf4e0451305c951873f9c5953a9764</anchor>
      <arglist>(AngularCoordinates t1, AngularCoordinates t2, unsigned int nb) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a35e60294067e850db7e55cf9313996be</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a8e8fd95525b6516eb8770c89ebf16f8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>StarShaped3D &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1StarShaped3D.html</anchorfile>
      <anchor>a36b0f4daacef06636a6b9d519b8f813f</anchor>
      <arglist>(const StarShaped3D &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Shapes</name>
    <filename>classDGtal_1_1Shapes.html</filename>
    <templarg>TDomain</templarg>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>aa9a8621947bb3fdbaed2e5f36deb67bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a357c52eab59aaa7ac2c3fbfa7bc1fedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a14d29e6794827596f06daca81a52dba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>afb0284796d305586759d1b4c54b59486</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a5cf679843e06b64c34686fe728ee1434</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Predicate</type>
      <name>Predicate</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a178e531e45d1597fddfcf247567b1d0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>aec68ace82ad6d9a4206603fa241a5c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a10536748e4c0b5d3b278baf2c90d677a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::UnsignedInteger</type>
      <name>UnsignedInteger</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a3f53c50b41106d8e044ce1143290b36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Shapes</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a101ec2e105e032eee40a2c430df9293f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a63a663520f210ff09d79e4f801aea8a9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>ad87b74c3d4e01da4cffc97aa45aad4f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>digitalShaper</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>ac6cad3991e9d82d35cae49159abb1ecc</anchor>
      <arglist>(TDigitalSet &amp;aSet, const ShapeFunctor &amp;aFunctor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>euclideanShaper</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a768f72a676ed7fb80dd7beb0d5756dee</anchor>
      <arglist>(TDigitalSet &amp;aSet, const ShapeFunctor &amp;aFunctor, const double h)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>digitalShaper</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>af3a1aa18d3baa6d230c2352524bb1c30</anchor>
      <arglist>(TDigitalSet &amp;aSet, const TShapeFunctor &amp;aFunctor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>euclideanShaper</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a4f55514e13176de559ba0f7b85df6949</anchor>
      <arglist>(TDigitalSet &amp;aSet, const TShapeFunctor &amp;aFunctor, const double h=1.0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>makeSetFromPointPredicate</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a0fd2058cf61620385d5d7772c3a5c700</anchor>
      <arglist>(DigitalSet &amp;aSet, const PointPredicate &amp;aPP)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addNorm1Ball</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>ac07b9a2f16a5d8cbabb1833eafb2d5c4</anchor>
      <arglist>(TDigitalSet &amp;aSet, const Point &amp;aCenter, UnsignedInteger aRadius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>addNorm2Ball</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a22f0ceb1aec5681fec5b8d1ac02c6022</anchor>
      <arglist>(TDigitalSet &amp;aSet, const Point &amp;aCenter, UnsignedInteger aRadius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeNorm1Ball</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a06ff74253e0d0b7995b9c055504b425c</anchor>
      <arglist>(TDigitalSet &amp;aSet, const Point &amp;aCenter, UnsignedInteger aRadius)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>removeNorm2Ball</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>ada8af8b42062d246c6a322c26250cc4e</anchor>
      <arglist>(TDigitalSet &amp;aSet, const Point &amp;aCenter, UnsignedInteger aRadius)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Shapes</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a30a7471927fb3f9412e030904f38362f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a964517cf371ecd41429c30e7fb1d4a91</anchor>
      <arglist>((CDomain&lt; TDomain &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Shapes</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>aea9516dbca90f4a868852078fe0d5751</anchor>
      <arglist>(const Shapes &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Shapes &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Shapes.html</anchorfile>
      <anchor>a02c4fc8614c2e256b6c25fa96ae63504</anchor>
      <arglist>(const Shapes &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::BreadthFirstVisitor</name>
    <filename>classDGtal_1_1BreadthFirstVisitor.html</filename>
    <templarg>TGraph</templarg>
    <templarg>TMarkSet</templarg>
    <class kind="struct">DGtal::BreadthFirstVisitor::ConstIterator</class>
    <class kind="struct">DGtal::BreadthFirstVisitor::NodeAccessor</class>
    <class kind="struct">DGtal::BreadthFirstVisitor::VertexAccessor</class>
    <member kind="typedef">
      <type>BreadthFirstVisitor&lt; TGraph, TMarkSet &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a81f7c114fbbab2c19b3cf4b83b3f1296</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TGraph</type>
      <name>Graph</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>ae05051b43636d7432320ad8a5dbdc7c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMarkSet</type>
      <name>MarkSet</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>ae8f2e765b87912960bac6f2386034ddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a7195645fc084657ef1b51ac57e16eddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::Vertex</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>acf9db9990bba964d53a779aa8d6df1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Vertex, Size &gt;</type>
      <name>Node</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>aed0e07b6ad6a45245ec672f846cd980e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::queue&lt; Node &gt;</type>
      <name>NodeQueue</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a070ca2478018541b230b60cc43513e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>VertexList</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a98b4eadd150d4375e52e5c35f62d6aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator&lt; VertexAccessor &gt;</type>
      <name>VertexConstIterator</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>ae9a978beb1b56e46c7e9277612c5382b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator&lt; NodeAccessor &gt;</type>
      <name>NodeConstIterator</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>ab05c1032abbcb1504de46cbed5f09d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BreadthFirstVisitor</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a64626e958b371642be673152630d313d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BreadthFirstVisitor</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a3819eec52ff29d37c4712d271065d1b9</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BreadthFirstVisitor</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a9d5921ff265266e93d7d98b58caa9708</anchor>
      <arglist>(const Graph &amp;graph, const Vertex &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BreadthFirstVisitor</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a2d7b92ccdd7e90e3caac782cb94afe9d</anchor>
      <arglist>(const Graph &amp;graph, VertexIterator b, VertexIterator e)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>graph</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a8383ef5cc84704eb8cb5b8366b842bb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Node &amp;</type>
      <name>current</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a0013dafeb90c08f125ffeebe42f1db8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignore</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a68daeb591e9bd1a9310f99cd44ee19ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>af171f17c5465cfbf942cda0d33e3fd11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a5b4b58d707406efb9386ce2297e11467</anchor>
      <arglist>(const VertexPredicate &amp;authorized_vtx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>aca9f7fea93ff690a60242e4456aed483</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>ab6350035868fc4098130ddb95f52da53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MarkSet &amp;</type>
      <name>markedVertices</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>ac3312e664b25a2475c42746633672136</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MarkSet</type>
      <name>visitedVertices</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a7189c0b28a6bc82c870e24c4088bc7cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a1cdef196c83bf5f9e314052d8fbf2802</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>ab958c63c5bd1439fafceafbcc0468262</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BreadthFirstVisitor</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>aa7934dd5a7c80f208f99ffbdb1b1a670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BreadthFirstVisitor</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a1e63e6e708459020da062296dc4ccf09</anchor>
      <arglist>(const BreadthFirstVisitor &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>BreadthFirstVisitor &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a938bf9c7e48710a2348c0116e53d051e</anchor>
      <arglist>(const BreadthFirstVisitor &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Graph &amp;</type>
      <name>myGraph</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>aca5ec47a42a58f77bad02cfc9c51bb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MarkSet</type>
      <name>myMarkedVertices</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a47dc0ae8433cc1dcece4c1272cb12b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeQueue</type>
      <name>myQueue</name>
      <anchorfile>classDGtal_1_1BreadthFirstVisitor.html</anchorfile>
      <anchor>a2357ae6e4607ae39ae73cea6202405c5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::BreadthFirstVisitor::ConstIterator</name>
    <filename>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ConstIterator&lt; TAccessor &gt;</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a5f834c1749d95446500c6956e587aa97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BreadthFirstVisitor&lt; TGraph, TMarkSet &gt;</type>
      <name>Visitor</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>aa34ec4d989921265fc17958409de9e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAccessor</type>
      <name>Accessor</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a56961e57991c07502e12079d9d498742</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a21ddb1f520861ab99d9cc08e0a05c938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Accessor::value</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>ae4a3573aa70ae11181ffe5acc326ba06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>afababf493edb2f6df739bddfb9c0e3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Accessor::pointer</type>
      <name>pointer</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a2b3eda8f6e886d75ff7755fab6d8ee51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Accessor::reference</type>
      <name>reference</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a8b8254dbea7b98c9298fbcd642693bb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a749b89351b558d1d69bf8e0b03dd3415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a23ca7b61aee1780bbb01900edc7d9647</anchor>
      <arglist>(Visitor *ptrV)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a6173760831b61a993b4ac49253937a16</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>afbdbd18e0a4d7d5bb611e45923f9fcd2</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a37dda313f2ecaa99ab8d854246ee24aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a24d59b5a5a67e48360b69fce594da339</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a3b33950080e1b49089aae719d0e96b6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a2e727dfd1e9f45afbc29ae9af7bdc02e</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a7d66602a2b00fb68b663e31d869c3d88</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>aaeb8fe374ba015afaed92fac368958e6</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>CountedPtr&lt; Visitor &gt;</type>
      <name>myVisitor</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>ab96a6c90611aad1630b87d16075d472a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::BreadthFirstVisitor::NodeAccessor</name>
    <filename>structDGtal_1_1BreadthFirstVisitor_1_1NodeAccessor.html</filename>
    <member kind="typedef">
      <type>const Node</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>ad67adea6c3db50e4339f94ab699d4c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Node</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>a1bf2fc72540ae70a385383fbe20a2a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Node *</type>
      <name>pointer</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>a0bb24ca8b1588ed8f75fb3353353054a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Node &amp;</type>
      <name>reference</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>aa8ca1d1ed68850b401b8002fab770279</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static reference</type>
      <name>get</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>afa6e21ce211b1a056974e4b95c222fb9</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::BreadthFirstVisitor::VertexAccessor</name>
    <filename>structDGtal_1_1BreadthFirstVisitor_1_1VertexAccessor.html</filename>
    <member kind="typedef">
      <type>const Vertex</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>af22879711ef6d85d08a7ac638b4673d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Vertex</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>a8866c44e30b9413261cc666fb38b828b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Vertex *</type>
      <name>pointer</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>a04233cd479fc18bc6c031ba9c086f327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Vertex &amp;</type>
      <name>reference</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>aeb9fdecf317f7d11eef3431b43b54d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static reference</type>
      <name>get</name>
      <anchorfile>structDGtal_1_1BreadthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>a979d7309af0884b2bd205dca9822e4e5</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CAdjacency</name>
    <filename>structDGtal_1_1CAdjacency.html</filename>
    <templarg>Adj</templarg>
    <base>CUndirectedSimpleLocalGraph&lt; Adj &gt;</base>
    <member kind="typedef">
      <type>Adj::Space</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>a432985c9732ba02e040c14eea70d4b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Adj::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>afdfa54473172139c9cbdd65f44d3d496</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Adj::Adjacency</type>
      <name>Adjacency</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>ae717e98e12df5a2efc65398aaf6b4931</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Adj::Vertex</type>
      <name>Vertex</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>ad261a54be4f0888c1fcd7ae3419fe9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Adj::Size</type>
      <name>Size</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>afc4ba199b5b8c9fd1b3a6cd3772af41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Adj::VertexSet</type>
      <name>VertexSet</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a5126411e4912223348a85b78f0425434</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>a3dcdac7d4166ed2846bc470a9f66f834</anchor>
      <arglist>(CAdjacency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>af9d891319eb0af63a36bec002255df2c</anchor>
      <arglist>((CInteger&lt; Size &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a4a860de357da4749d3a50f1d55c24798</anchor>
      <arglist>(CUndirectedSimpleLocalGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a1e274957654b1298122e0afd739352ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Adj</type>
      <name>myAdj</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>aec864cfc6c737a92e5c9f11d636473e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP1</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>a40717572e6f966b279d2467e7a451fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP2</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>ab4e84bcc320b76f78f91f2c443865cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myBool</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>aff05bd9f1430837974bd14477c8b99bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::back_insert_iterator&lt; std::vector&lt; Point &gt; &gt;</type>
      <name>myInserter</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>adf0375d296b2b4eb2e9d8dc8738164dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CCellEmbedder</name>
    <filename>structDGtal_1_1CCellEmbedder.html</filename>
    <templarg></templarg>
    <base>CUnaryFunctor&lt; T, T::Cell, T::RealPoint &gt;</base>
    <member kind="typedef">
      <type>T::KSpace</type>
      <name>KSpace</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>adac69e0292fc29fa12792dc844c01b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Cell</type>
      <name>Cell</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a4196a1a24f8708ca290960eba4e1a59e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a35a7b4692a997e8d9a1957c26f0c33f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Argument</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a83a67e889855cae155b86c272904a558</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a6a7d7ad1085cee19a70e1d8d8aad46b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>ae67256c689e55d1891955656b811a19f</anchor>
      <arglist>((CCellularGridSpaceND&lt; KSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a5f5561e21115da58006915157f8f591f</anchor>
      <arglist>((ConceptUtils::SameType&lt; Cell, typename KSpace::Cell &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a3274f9a355b4bb364f389f4b42193ed3</anchor>
      <arglist>((ConceptUtils::SameType&lt; Cell, Argument &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a4d0bf664308728da4400436ef6657f1d</anchor>
      <arglist>((ConceptUtils::SameType&lt; RealPoint, Value &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a3cd68b1cd1612f7983fc289ed806f4e8</anchor>
      <arglist>(CCellEmbedder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a911893495fb1e72358b8d28017107722</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUnaryFunctor.html</anchorfile>
      <anchor>a9c5f252680e4e0b14a0c68b724656840</anchor>
      <arglist>(CUnaryFunctor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a3d1a92a2d031467c3144f93d9ead6f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Cell</type>
      <name>myP</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a329c3745b0f06d09af3bb5448c3bd93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myRP</name>
      <anchorfile>structDGtal_1_1CCellEmbedder.html</anchorfile>
      <anchor>a58be2a662fa1c0e687307f36f9442a24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CCellularGridSpaceND</name>
    <filename>structDGtal_1_1CCellularGridSpaceND.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::Integer</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a163509a347e8356e33f8d67958128e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Size</type>
      <name>Size</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a0fba3bba313e10a7af841fb3c338d3ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Space</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a22537827119955625e959874aa1f1e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Cell</type>
      <name>Cell</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a255bd3aa83f0cdcdac876557c7bfa662</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::SCell</type>
      <name>SCell</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a5d9b86ed47c7143422325e70faa2db93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Surfel</type>
      <name>Surfel</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a65f97827d0a48c4a981819dbe402ba2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Sign</type>
      <name>Sign</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a614d1f50cd194dad8be268cf8ab08c3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::DirIterator</type>
      <name>DirIterator</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>af3d9739e665e3dc81cbcdbd1b0fc8cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>aadcf5da018245ae9d2eedc0704b7a9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Vector</type>
      <name>Vector</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a9411e2cdcf9ad00a72dd10b96b677e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Cells</type>
      <name>Cells</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a08ea517fab063fad63fb5bd3b3732e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::SCells</type>
      <name>SCells</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a8209c17f34ec54a0b0cccd1b33ee29e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::CellSet</type>
      <name>CellSet</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a211af9c3b05dab2e72431f442daaa263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::SCellSet</type>
      <name>SCellSet</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>af0362340df1e7a8c9b740b117bdc76e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::SurfelSet</type>
      <name>SurfelSet</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a0042d12369aaf7e5832176564b4680ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>Dummy</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>aad54afc08f4aed9996909fc79ed38c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::template CellMap&lt; Dummy &gt;::Type</type>
      <name>CellMap</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a559763ee37d55fc62bd8357d8c4f771f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::template SCellMap&lt; Dummy &gt;::Type</type>
      <name>SCellMap</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a58528a096dbd31dddf63c9709479fe8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::template SurfelMap&lt; Dummy &gt;::Type</type>
      <name>SurfelMap</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a4536c2dd2299185436a7e27978aa2cc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a86c94d15137b8a5ddd889e246eeac235</anchor>
      <arglist>((CInteger&lt; Integer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ad02b0526317ed956397cb66d9fa9cfd0</anchor>
      <arglist>((CUnsignedInteger&lt; Size &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a2d32567f628e10081f011b993cb1428a</anchor>
      <arglist>((ConceptUtils::SameType&lt; Integer, typename Space::Integer &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>af9f5ef94ab24858e717edae4227d691b</anchor>
      <arglist>((ConceptUtils::SameType&lt; Point, typename Space::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ab9a1921b80d5da9a0246458ed67e35e0</anchor>
      <arglist>((ConceptUtils::SameType&lt; Vector, typename Space::Vector &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a38e7f9768439f6c78698bceaaf111438</anchor>
      <arglist>((CConstSinglePassRange&lt; Cells &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a6e5ae58134dcb6c5ffd07a25d454e93f</anchor>
      <arglist>((CConstSinglePassRange&lt; SCells &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a34394a85396e148bac06c067262b16ac</anchor>
      <arglist>((boost::UniqueAssociativeContainer&lt; CellSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a2287ce36e915da188b839e52c4959e44</anchor>
      <arglist>((boost::UniqueAssociativeContainer&lt; SCellSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a0e318318b5e974190ffe545d0d403862</anchor>
      <arglist>((boost::UniqueAssociativeContainer&lt; SurfelSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>af8f8cc9d0b0e7efd85a3a7f7de6621bb</anchor>
      <arglist>((boost::SimpleAssociativeContainer&lt; CellSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>aa60f26e8921d329a10ba74527931d21e</anchor>
      <arglist>((boost::SimpleAssociativeContainer&lt; SCellSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a81adbbebd4cdb8bb23ba3619522d7883</anchor>
      <arglist>((boost::SimpleAssociativeContainer&lt; SurfelSet &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ac3d6d44d3b83fabd5ae97b3ba62da98e</anchor>
      <arglist>((boost::UniqueAssociativeContainer&lt; CellMap &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ad5ac75f20062842408f8fc7fc2deb2b0</anchor>
      <arglist>((boost::UniqueAssociativeContainer&lt; SCellMap &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>aee4c0e740b719f2af810a568a8259ac2</anchor>
      <arglist>((boost::UniqueAssociativeContainer&lt; SurfelMap &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a93bfe72a7d5276ee69e1c62822fb2fa7</anchor>
      <arglist>((boost::PairAssociativeContainer&lt; CellMap &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a68bfe129436edde212de47b7db695569</anchor>
      <arglist>((boost::PairAssociativeContainer&lt; SCellMap &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a912c30743afeb8e3748f1552d7026892</anchor>
      <arglist>((boost::PairAssociativeContainer&lt; SurfelMap &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a35fcda570705efb8bdbd1180055ff94f</anchor>
      <arglist>(CCellularGridSpaceND)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ade041a102fba4bf36bc1d634473edde3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ad4869b89c67f9f8e7699a2d2aaac86c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Integer</type>
      <name>myInteger</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a737c041456b1860cf9724ed093f9dd01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>mySize</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a588f4ae2644dbd8a5746bc2b97d1c5ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Dimension</type>
      <name>myDim</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a7f8ba7322863ae87747410bde30f6511</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP1</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ad7d45a96090ee3f988876f00d587db7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myP2</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a2ad9047762c5361504071434582c9ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vector</type>
      <name>myV</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ab4e49a4e83fe9f04ac646bfc8024f7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Cell</type>
      <name>myCell</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ac9a15e11469f1a5fee831358f63d5ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCell</type>
      <name>mySCell</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a925370d1e7f99c05f2d0e0fd3d7187d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Cell</type>
      <name>myMutableCell</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a8ef25000c6c618e6dbc950dc91b785b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCell</type>
      <name>myMutableSCell</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ae1be8b578a254fbf0c2d6f4690c5f7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myBool</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>ac128a3cd8c3124487d0a8f0cb534d2b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Sign</type>
      <name>mySign</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a1f3efae08b9647bbca71fb7ad49b3ec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DirIterator</type>
      <name>myDirIt</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a8e518f5ffb06a3891422aa6c84bf99d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Cells</type>
      <name>myCells</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>a28292b3c670ebd155dd4d3022f40a296</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCells</type>
      <name>mySCells</name>
      <anchorfile>structDGtal_1_1CCellularGridSpaceND.html</anchorfile>
      <anchor>af1d223f9d4837c4d1ddd957c4f3b32a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDigitalSurfaceContainer</name>
    <filename>structDGtal_1_1CDigitalSurfaceContainer.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::KSpace</type>
      <name>KSpace</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>aec1a5a9215d30edc3323a97cd51d3c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Surfel</type>
      <name>Surfel</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>a96b9c0a0c69f4674c43a7a02dad1923a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::SurfelConstIterator</type>
      <name>SurfelConstIterator</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>aa05c41f3513e2e36c7606d7661152600</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::DigitalSurfaceTracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>ac804e0d9d5b67008c82c91bfb37fc685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Size</type>
      <name>Size</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>ab2635d1b977e78f405f69f1cda5b9e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>ab02f1e6dc6426e9fe614ce3d17ccecea</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; SurfelConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>aaae368f9a789174c78961ab2d1524aa2</anchor>
      <arglist>((CCellularGridSpaceND&lt; KSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>ae7cb65e22a357f572b1ed0fbdc24eca0</anchor>
      <arglist>((CDigitalSurfaceTracker&lt; DigitalSurfaceTracker &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>afe384e0cb2a2fc545257e328b0d75049</anchor>
      <arglist>(CDigitalSurfaceContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>ae5576e392c4cb6669d18f6e0883ea6a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>a23742a3ff0d3822d4fffe188240a6347</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KSpace</type>
      <name>myKSpace</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>a02615fa742085fca2ae6680200f5c695</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Surfel</type>
      <name>mySurfel</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>a869c4871708e0ea803d9f898ec8d68eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myBool</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>ac154e2df3e84e9a7603afb715eef34aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SurfelConstIterator</type>
      <name>mySurfelCIt</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>a3787103559ed034886ebc1286aa604c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DigitalSurfaceTracker *</type>
      <name>myPtrTracker</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>a8e1023612796a0f70fab95cb235d6138</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Connectedness</type>
      <name>myConnectedness</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>ac5aa03beee3eb109b6f21b92f34de808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>mySize</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceContainer.html</anchorfile>
      <anchor>ab65177166ae05f6549574d806dca1369</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDigitalSurfaceEmbedder</name>
    <filename>structDGtal_1_1CDigitalSurfaceEmbedder.html</filename>
    <templarg></templarg>
    <base>DGtal::CSCellEmbedder</base>
    <member kind="typedef">
      <type>T::KSpace</type>
      <name>KSpace</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a98741cffc5273ccbd57bd7e3a0474201</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Surface</type>
      <name>Surface</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a65aa0e3599d3379342f4671daa509357</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::SCell</type>
      <name>SCell</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>aef0283ba2b39a8a2339c30245d4df20d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a5edf4977193b78b18b746955cd10f766</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Argument</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a91a6500bb5b7b869d8cfa365b592b2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a10603ac4cd7970f93937b00bd63d6a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a3631692cb9f73884c02e0ac26fd6fed3</anchor>
      <arglist>(CDigitalSurfaceEmbedder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a8bc438e84be15ba8748e25ccc523bf07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>ad16e6b6fb34f9175fec18b9fc56a3277</anchor>
      <arglist>((CCellularGridSpaceND&lt; KSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>af0cf18cf97d156f26196b043798171e2</anchor>
      <arglist>((ConceptUtils::SameType&lt; SCell, typename KSpace::SCell &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>a59812ccde5cdb35fd4d5f01c18b56c87</anchor>
      <arglist>((ConceptUtils::SameType&lt; SCell, Argument &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>ac1d21e712402d716a085a3c92ca115a5</anchor>
      <arglist>((ConceptUtils::SameType&lt; RealPoint, Value &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>a4981ee03a08fc4d986e4437ed88f7404</anchor>
      <arglist>(CSCellEmbedder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUnaryFunctor.html</anchorfile>
      <anchor>a9c5f252680e4e0b14a0c68b724656840</anchor>
      <arglist>(CUnaryFunctor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>abd15453462ea7e553a57463314f21289</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Surface</type>
      <name>mySurface</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceEmbedder.html</anchorfile>
      <anchor>a4304865e3e81a7e3df9d661c1ba75cac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDigitalSurfaceTracker</name>
    <filename>structDGtal_1_1CDigitalSurfaceTracker.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T::Self</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>a92009404127b6ddd9b02a5accc682aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::DigitalSurfaceContainer</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>a81f6c5846aaa14d4a57aa621d25110a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Surfel</type>
      <name>Surfel</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>ae4d29d9b9a4583f0027ed53517fce2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>a5fd5f8e4508a1a4ed691c1f9a654a9f3</anchor>
      <arglist>((ConceptUtils::SameType&lt; Surfel, typename DigitalSurfaceContainer::Surfel &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>a07b55e11777948e8c14a8f8f9ec8d1e0</anchor>
      <arglist>(CDigitalSurfaceTracker)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>a5ecea3b7baeae72c6922877a39f2184c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>ad27eb33f205eafae2a9e59769be0221b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DigitalSurfaceContainer</type>
      <name>myDSC</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>aec1c3f712e90f07660b4cd02732d1149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Surfel</type>
      <name>mySurfel</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>a969919c3e6313b2d3a52d455786fae2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Dimension</type>
      <name>myDim</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>a686a407107c005cf5800f8b6016c4a08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myBool</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>ae7232311e07682af110223dd9428aa92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>uint8_t</type>
      <name>myInt</name>
      <anchorfile>structDGtal_1_1CDigitalSurfaceTracker.html</anchorfile>
      <anchor>a870c347d356bd7d382da67e9e131a825</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CDomainAdjacency</name>
    <filename>structDGtal_1_1CDomainAdjacency.html</filename>
    <templarg></templarg>
    <base>CAdjacency&lt; T &gt;</base>
    <member kind="typedef">
      <type>Adj::Domain</type>
      <name>Domain</name>
      <anchorfile>structDGtal_1_1CDomainAdjacency.html</anchorfile>
      <anchor>a9fb89ac2d1c06aea3b412eaa105a0d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Adj::Predicate</type>
      <name>Predicate</name>
      <anchorfile>structDGtal_1_1CDomainAdjacency.html</anchorfile>
      <anchor>a7cdda316c8fc288259b540b6f0211c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Space</type>
      <name>Space</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>a432985c9732ba02e040c14eea70d4b18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Point</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>afdfa54473172139c9cbdd65f44d3d496</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Adjacency</type>
      <name>Adjacency</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>ae717e98e12df5a2efc65398aaf6b4931</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Vertex</type>
      <name>Vertex</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>ad261a54be4f0888c1fcd7ae3419fe9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Size</type>
      <name>Size</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>afc4ba199b5b8c9fd1b3a6cd3772af41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::VertexSet</type>
      <name>VertexSet</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a5126411e4912223348a85b78f0425434</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CDomainAdjacency.html</anchorfile>
      <anchor>aea7f86baddaca91ffed030c64d0f77d7</anchor>
      <arglist>(CDomainAdjacency)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myT</name>
      <anchorfile>structDGtal_1_1CDomainAdjacency.html</anchorfile>
      <anchor>a06e6a6abd0a1f64f20ba584eb09edbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Domain</type>
      <name>myDomain</name>
      <anchorfile>structDGtal_1_1CDomainAdjacency.html</anchorfile>
      <anchor>a952bfd4b42f2cb4567b12076e90c7324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Predicate</type>
      <name>myPredicate</name>
      <anchorfile>structDGtal_1_1CDomainAdjacency.html</anchorfile>
      <anchor>a7364290a99942b0bf38643b20bf11285</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CAdjacency.html</anchorfile>
      <anchor>a3dcdac7d4166ed2846bc470a9f66f834</anchor>
      <arglist>(CAdjacency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>af9d891319eb0af63a36bec002255df2c</anchor>
      <arglist>((CInteger&lt; Size &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a4a860de357da4749d3a50f1d55c24798</anchor>
      <arglist>(CUndirectedSimpleLocalGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a1e274957654b1298122e0afd739352ec</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSCellEmbedder</name>
    <filename>structDGtal_1_1CSCellEmbedder.html</filename>
    <templarg></templarg>
    <base>CUnaryFunctor&lt; T, T::SCell, T::RealPoint &gt;</base>
    <member kind="typedef">
      <type>T::KSpace</type>
      <name>KSpace</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>ae7deb5e03ff5b056785635561297e851</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::SCell</type>
      <name>SCell</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>a0b3839c47971ba0b9c35eaabc09e2bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>a33883eba412e37d9fef41528e3159527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Argument</type>
      <name>Argument</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>ad77f4e85b541d2e2a45e1674df4bc310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>a358dc6991842c17f716038bdbc8826a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>ad16e6b6fb34f9175fec18b9fc56a3277</anchor>
      <arglist>((CCellularGridSpaceND&lt; KSpace &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>af0cf18cf97d156f26196b043798171e2</anchor>
      <arglist>((ConceptUtils::SameType&lt; SCell, typename KSpace::SCell &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>a59812ccde5cdb35fd4d5f01c18b56c87</anchor>
      <arglist>((ConceptUtils::SameType&lt; SCell, Argument &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>ac1d21e712402d716a085a3c92ca115a5</anchor>
      <arglist>((ConceptUtils::SameType&lt; RealPoint, Value &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>a4981ee03a08fc4d986e4437ed88f7404</anchor>
      <arglist>(CSCellEmbedder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>adecde9a7f7eb05d30bf16efb602e7e94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUnaryFunctor.html</anchorfile>
      <anchor>a9c5f252680e4e0b14a0c68b724656840</anchor>
      <arglist>(CUnaryFunctor)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>a6f3e833c2c358589fa70f8824bcc6e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCell</type>
      <name>myP</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>af3ad59ea872bb2bf34cb32b5879799c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>RealPoint</type>
      <name>myRP</name>
      <anchorfile>structDGtal_1_1CSCellEmbedder.html</anchorfile>
      <anchor>ad7b6cdf4079dde26f9bc46ed7428964d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CSurfelPredicate</name>
    <filename>structDGtal_1_1CSurfelPredicate.html</filename>
    <templarg></templarg>
    <base>CPredicate&lt; T, T::Surfel &gt;</base>
    <member kind="typedef">
      <type>T::Surfel</type>
      <name>Element</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>ac5f670436a2793c76eb725d2d69bcdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>a4da1a3fad5f2a00f4279026173c8e2b9</anchor>
      <arglist>(CPredicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>a7b6bb027a92532932fbced9752da0c2b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CUndirectedSimpleGraph</name>
    <filename>structDGtal_1_1CUndirectedSimpleGraph.html</filename>
    <templarg></templarg>
    <base>DGtal::CUndirectedSimpleLocalGraph</base>
    <base>DGtal::CConstSinglePassRange</base>
    <member kind="typedef">
      <type>T::Edge</type>
      <name>Edge</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleGraph.html</anchorfile>
      <anchor>a5bedd6ac5fceb96517cf1a6d59196b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Size</type>
      <name>Size</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleGraph.html</anchorfile>
      <anchor>ad26b454d149d538bf0ecec86bc9bed68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Vertex</type>
      <name>Vertex</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>ad261a54be4f0888c1fcd7ae3419fe9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::VertexSet</type>
      <name>VertexSet</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a5126411e4912223348a85b78f0425434</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>a26c3b89c2f3a9fd5a7a08ede7621f6a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleGraph.html</anchorfile>
      <anchor>a0521f73c1a30a6f82494ea9e2b5c61b5</anchor>
      <arglist>(CUndirectedSimpleGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleGraph.html</anchorfile>
      <anchor>ac68e23b816462a94f918e001efbb3552</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>af9d891319eb0af63a36bec002255df2c</anchor>
      <arglist>((CInteger&lt; Size &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a4a860de357da4749d3a50f1d55c24798</anchor>
      <arglist>(CUndirectedSimpleLocalGraph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>ab9e3f444ef5139a0f858b63f29d0dd56</anchor>
      <arglist>((boost_concepts::SinglePassIteratorConcept&lt; ConstIterator &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CConstSinglePassRange.html</anchorfile>
      <anchor>aad1d1ee495c5903433932f9e97cf12cc</anchor>
      <arglist>(CConstSinglePassRange)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleGraph.html</anchorfile>
      <anchor>a81b0c29730c52d292b4ad2c6aff0ab02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>mySize</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleGraph.html</anchorfile>
      <anchor>aa84f11717126f7bbf7bb6587b13218e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CUndirectedSimpleLocalGraph</name>
    <filename>structDGtal_1_1CUndirectedSimpleLocalGraph.html</filename>
    <templarg>T</templarg>
    <class kind="struct">DGtal::CUndirectedSimpleLocalGraph::VertexMap</class>
    <member kind="typedef">
      <type>T::Vertex</type>
      <name>Vertex</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>ad261a54be4f0888c1fcd7ae3419fe9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Size</type>
      <name>Size</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>afc4ba199b5b8c9fd1b3a6cd3772af41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::VertexSet</type>
      <name>VertexSet</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a5126411e4912223348a85b78f0425434</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>af9d891319eb0af63a36bec002255df2c</anchor>
      <arglist>((CInteger&lt; Size &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a4a860de357da4749d3a50f1d55c24798</anchor>
      <arglist>(CUndirectedSimpleLocalGraph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a1e274957654b1298122e0afd739352ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a26f80abef369061b778614a0ba45dfd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>mySize</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>ac4c9ce3fb0fd424b286eb6bef881a6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vertex</type>
      <name>myVertex</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a5c834fb4a9930cd8185bdd471a07fbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::output_iterator_archetype&lt; Vertex &gt;</type>
      <name>myOutIt</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph.html</anchorfile>
      <anchor>a064ca11aadf92876f5520ae68e2c52c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CUndirectedSimpleLocalGraph::VertexMap</name>
    <filename>structDGtal_1_1CUndirectedSimpleLocalGraph_1_1VertexMap.html</filename>
    <templarg>Value</templarg>
    <member kind="typedef">
      <type>T::template VertexMap&lt; Value &gt;::Type</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph_1_1VertexMap.html</anchorfile>
      <anchor>aa33b9bc82865e55f9e8d83fbe2974519</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1CUndirectedSimpleLocalGraph_1_1VertexMap.html</anchorfile>
      <anchor>a1c1c7f8e14fc24dcdfcd4439fd6af83e</anchor>
      <arglist>((CVertexMap&lt; VertexMap&lt; Value &gt; &gt;))</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CVertexMap</name>
    <filename>structDGtal_1_1CVertexMap.html</filename>
    <templarg></templarg>
    <base>boost::Assignable</base>
    <member kind="typedef">
      <type>T::Vertex</type>
      <name>Vertex</name>
      <anchorfile>structDGtal_1_1CVertexMap.html</anchorfile>
      <anchor>a064cc630d87ad2c7c01860f694d6103a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T::Value</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1CVertexMap.html</anchorfile>
      <anchor>a87abf1dd895a3c0b545a462368dc77df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CVertexMap.html</anchorfile>
      <anchor>a805579d54c5fe877d1a11d991bc97f99</anchor>
      <arglist>(CVertexMap)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>T</type>
      <name>myX</name>
      <anchorfile>structDGtal_1_1CVertexMap.html</anchorfile>
      <anchor>a3ac3dd1237aa7205950b7978c8467400</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Vertex</type>
      <name>myVertex</name>
      <anchorfile>structDGtal_1_1CVertexMap.html</anchorfile>
      <anchor>a8a20ce4be10b84dda9813a76a4295f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myValue</name>
      <anchorfile>structDGtal_1_1CVertexMap.html</anchorfile>
      <anchor>ac5b19c1acdf11689032091152e5338ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::CVertexPredicate</name>
    <filename>structDGtal_1_1CVertexPredicate.html</filename>
    <templarg></templarg>
    <base>CPredicate&lt; T, T::Vertex &gt;</base>
    <member kind="typedef">
      <type>T::Vertex</type>
      <name>Element</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>ac5f670436a2793c76eb725d2d69bcdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_USAGE</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>a4da1a3fad5f2a00f4279026173c8e2b9</anchor>
      <arglist>(CPredicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkConstConstraints</name>
      <anchorfile>structDGtal_1_1CPredicate.html</anchorfile>
      <anchor>a7b6bb027a92532932fbced9752da0c2b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DepthFirstVisitor</name>
    <filename>classDGtal_1_1DepthFirstVisitor.html</filename>
    <templarg>TGraph</templarg>
    <templarg>TMarkSet</templarg>
    <class kind="struct">DGtal::DepthFirstVisitor::ConstIterator</class>
    <class kind="struct">DGtal::DepthFirstVisitor::NodeAccessor</class>
    <class kind="struct">DGtal::DepthFirstVisitor::VertexAccessor</class>
    <member kind="typedef">
      <type>DepthFirstVisitor&lt; TGraph, TMarkSet &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a36fd1eb0c6983e6e20af4c5d25a0a1dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TGraph</type>
      <name>Graph</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a9c7518d87ee8f2d3a6157db3ec2b4e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMarkSet</type>
      <name>MarkSet</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>ac365b36b59b9ae9bded8cea11bfb6622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>ad23c59808ffce50fbd451ef4fdcded10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::Vertex</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a1ab031d1b42b4f970dce9067028403b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Vertex, Size &gt;</type>
      <name>Node</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>ac41797ded33357a936560dd3d5ba5ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::stack&lt; Node &gt;</type>
      <name>NodeQueue</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a208484ef31e0d80460d675b1f16054e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>VertexList</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a7fa6eb011f3c806fabae1fdcc653c01f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator&lt; VertexAccessor &gt;</type>
      <name>VertexConstIterator</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a58062158de5d224520c5727f7377bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator&lt; NodeAccessor &gt;</type>
      <name>NodeConstIterator</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>acf3a1c23f94c7a32599cd8b3f460ad8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DepthFirstVisitor</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a84c4838be1230454bc39b97745cd6ca7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DepthFirstVisitor</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a68a727c64200e26d0f6a0f4c2ff2f63e</anchor>
      <arglist>(const Graph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DepthFirstVisitor</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a41383d8fa1849a1165609f1ca3ad729e</anchor>
      <arglist>(const Graph &amp;graph, const Vertex &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DepthFirstVisitor</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>ae7d71272b714b945641eb97fa4ce4437</anchor>
      <arglist>(const Graph &amp;graph, VertexIterator b, VertexIterator e)</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>graph</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>abf1ae4ae37c32437d5870cde24d60828</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Node &amp;</type>
      <name>current</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>abe4e01aea94af7810887bdea471cd3de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignore</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>af9dd6491ba5d3e5232f1b4f96aac276b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>ac80075fe18a6d2bd8ebda3c35446959c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>expand</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>ac79e167c987a0166778f1f55fd98fb4f</anchor>
      <arglist>(const VertexPredicate &amp;authorized_vtx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>ac6022b67a2c10b15134059e0f5d3b2dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>terminate</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a683804ea28a9b5f2584a2a029cf3109a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MarkSet &amp;</type>
      <name>markedVertices</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a281a07817c103b5592e3c547d3b65e70</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>MarkSet</type>
      <name>visitedVertices</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a6a56c107728f38ea4caff84372401869</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>ae600f05b2c21d0e882ddc3261d2626bd</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a36c09a097ddd0c931fea308eaad4a1aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DepthFirstVisitor</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a1fd514c57d683befbdcc3ad37605e2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DepthFirstVisitor</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>af5f774f44426033f00acdeac93ee8871</anchor>
      <arglist>(const DepthFirstVisitor &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DepthFirstVisitor &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a8f55776983eddc84077ad14fe6a3ee5c</anchor>
      <arglist>(const DepthFirstVisitor &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Graph &amp;</type>
      <name>myGraph</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>ac8691895d9dd02ad82896ebb64618e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MarkSet</type>
      <name>myMarkedVertices</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a438089cf9361939f7e05d1bbb4ffab12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NodeQueue</type>
      <name>myQueue</name>
      <anchorfile>classDGtal_1_1DepthFirstVisitor.html</anchorfile>
      <anchor>a3f6e8a578f4276158ccac99a584fa6c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DepthFirstVisitor::ConstIterator</name>
    <filename>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ConstIterator&lt; TAccessor &gt;</type>
      <name>Self</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a0554b98c5dc993ffc164497ab06cecb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DepthFirstVisitor&lt; TGraph, TMarkSet &gt;</type>
      <name>Visitor</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>acb836a45d5083c650096a0d546f704e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAccessor</type>
      <name>Accessor</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>aaf513e91a1232d520e19bd4a9bdccc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>aa9f17a2e9ee2773a98f383562376503c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Accessor::value</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>af6d9ce77776b99e3b3f67d2f734ce9f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a13cfa1a325cc3544a5cc976477a92f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Accessor::pointer</type>
      <name>pointer</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a5189ed74b99f3977c4f1bdd35659b06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Accessor::reference</type>
      <name>reference</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>ad2e48388fa8a1e030a2928aef164baf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a214d51abc8198c16269b6abc399d7e1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a020291b8c24165caa4aaaa995168b45b</anchor>
      <arglist>(Visitor *ptrV)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>ab340d34f2c3888255c83017404d6164e</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a7b87900502f694c8e0b20ebc09f2a9b1</anchor>
      <arglist>(const Self &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a58b51051d2533a71dd24860739356425</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>ab2d61ec2949dfda37d6c00b0c7784506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>aba24dd301803ed8c52699b45efccec33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a8e199889232b7885517d33b46f8ea524</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a89ddad387c3a8f168ef9cb66637c7637</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a8d83d2576bcb24ac311ce7760108373c</anchor>
      <arglist>(const Self &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>CountedPtr&lt; Visitor &gt;</type>
      <name>myVisitor</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1ConstIterator.html</anchorfile>
      <anchor>a5186debb584241b8a16c2f1d58879163</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DepthFirstVisitor::NodeAccessor</name>
    <filename>structDGtal_1_1DepthFirstVisitor_1_1NodeAccessor.html</filename>
    <member kind="typedef">
      <type>const Node</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>a88d5fe7e4bf406e93daaf25ad97f0a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Node</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>ad41652358348f2fe4834cc69cb1c5b8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Node *</type>
      <name>pointer</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>ad64beac596c21115b158e2d9ef70b37c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Node &amp;</type>
      <name>reference</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>aa643af06250c948b9b7fea01f93d3f01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static reference</type>
      <name>get</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1NodeAccessor.html</anchorfile>
      <anchor>a41f3a3ff264365bd797175b8886f8520</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DepthFirstVisitor::VertexAccessor</name>
    <filename>structDGtal_1_1DepthFirstVisitor_1_1VertexAccessor.html</filename>
    <member kind="typedef">
      <type>const Vertex</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>a04022f8cc8117e8d994373aa975ccd3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Vertex</type>
      <name>value_type</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>afd4299bf217d48ceedb2a9f727bf19dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Vertex *</type>
      <name>pointer</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>adc6705dcb5520ab86f24c1e7528011a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Vertex &amp;</type>
      <name>reference</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>a9341c52fd6428c2853cb28bd750e8e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static reference</type>
      <name>get</name>
      <anchorfile>structDGtal_1_1DepthFirstVisitor_1_1VertexAccessor.html</anchorfile>
      <anchor>a0b5d13acea074b6e601ef34a46a06e34</anchor>
      <arglist>(const Node &amp;node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSetBoundary</name>
    <filename>classDGtal_1_1DigitalSetBoundary.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TDigitalSet</templarg>
    <class kind="class">DGtal::DigitalSetBoundary::Tracker</class>
    <member kind="typedef">
      <type>DigitalSetBoundary&lt; TKSpace, TDigitalSet &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a94e744475ef1559ad9390ff29d6d30b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>aafdcfedc94ffc7a344d44e65ad267be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a8327513a04ffe2a6564d2ffe74b5583a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a89109aa24207c3272c82a7dc2a61a115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDigitalSet</type>
      <name>DigitalSet</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>ac3c2dcc16315946de17ce7592f6cc369</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Surfel &gt;</type>
      <name>SurfelStorage</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>aaf0e7a32733758d52955187d967de6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelStorage::const_iterator</type>
      <name>SurfelConstIterator</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a38906cd4e56ab8fd5db2c9d2d4696971</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a385fa7102983841e5d86232916791bda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>add82e39729830dbae25b13ee7db53189</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a083d897930eb7400b3ac4755d692496e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>ae4856120b650fd242face69f22af7e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelAdjacency&lt; KSpace::dimension &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>ae3ed1c3fb75435a39eb4d0e9380e1e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>af1eb7b7dd41c082d277a8554a82dec71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a17d431b0c42bdf35033a75eeee7e0d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalSetBoundary</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a5c7fb6634f2929c97ba68904cf3e5f40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetBoundary</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a3aa554d1fc5abf85a1d2ea315a5e64d1</anchor>
      <arglist>(const DigitalSetBoundary &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSetBoundary</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>ad562873bb6f11b8408f27bd8f4e855a5</anchor>
      <arglist>(const KSpace &amp;aKSpace, const DigitalSet &amp;aSet, const Adjacency &amp;adj=Adjacency(true))</arglist>
    </member>
    <member kind="function">
      <type>const Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a549e045f23b49c0d3a64e215aade3e0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a8e03493bf0415bd930bf661fa01d3e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DigitalSet &amp;</type>
      <name>digitalSet</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a18de41e30f7ef6dba051b71ce2b8939e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const KSpace &amp;</type>
      <name>space</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a6c77dee4e48bf7c7d1c6fcd927142b7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>ab4f72e90c508bbd58cdef0c32c3805de</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a9d8d40acb3d71b3814759ad9fe2169b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>ac6d57c57e9e8e47487355eda31c92762</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>nbSurfels</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a86e8b8158395a8ccedd6d37e9d03070c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a161e37541dc9a0952420c1b87cc9bfaa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DigitalSurfaceTracker *</type>
      <name>newTracker</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>aa72992cadd440269293030fe2a0130fe</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Connectedness</type>
      <name>connectedness</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>afdacb918c88ce127f79ae3bd70bc1b4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>aa87f0b0b46a31dd677ba3ae06f6fb957</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a023f8392b097150f96c1d0a13ecc5bbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeSurfels</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a74a7221c06ab65145597833bd0e2605b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DigitalSetBoundary &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>aea64b0caf1ccef8638eb3309fd866583</anchor>
      <arglist>(const DigitalSetBoundary &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace &amp;</type>
      <name>myKSpace</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a218e143ad9029c7022fda5bf561cbbd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DigitalSet</type>
      <name>myDigitalSet</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>aab36ae8ba82b3d8b5cbc938a30c3e085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Adjacency</type>
      <name>mySurfelAdjacency</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>a3bd2a02a2db9417ac7decf04c79ba935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SurfelStorage</type>
      <name>mySurfels</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary.html</anchorfile>
      <anchor>abf39dd1ae07e865da6e65b815f264475</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSetBoundary::Tracker</name>
    <filename>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</filename>
    <member kind="typedef">
      <type>Tracker</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a1a0c4644dc1db6769f2dba94c3d825f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetBoundary&lt; TKSpace, TDigitalSet &gt;</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a4e6bd9b71c0614c9ec7ef94b65fd6d8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a4151247150464610aa63df927cf6ce59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a3320c02ec1d748fa0a602533de5aefcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelNeighborhood&lt; KSpace &gt;</type>
      <name>Neighborhood</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a855a4861db8692006b05fb8d2501edb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a02b5fc015df95d31f85cecbdbb9a1aad</anchor>
      <arglist>(const DigitalSurfaceContainer &amp;aSurface, const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>ab0ca677bb640531b87632ad047868010</anchor>
      <arglist>(const Tracker &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tracker</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a3586ae91bdecb50e9f4022d7ac0921b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>surface</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>aedb64914bf06c50a86f8f26e15caefbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Surfel &amp;</type>
      <name>current</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>ad7f410f2cdabf8d123ec7f8b1b189dee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>orthDir</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a7b515ee54e1c83bcaa4dd7a3f0d601be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a2cf2f7f78bf8e092f3ec4f7d66b0c691</anchor>
      <arglist>(const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>adjacent</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a7a892e96517dadf0d3e08334cbe0fc1b</anchor>
      <arglist>(Surfel &amp;s, Dimension d, bool pos) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>mySurface</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>a6e39a9bc03994f6cd45d425f05e086d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Neighborhood</type>
      <name>myNeighborhood</name>
      <anchorfile>classDGtal_1_1DigitalSetBoundary_1_1Tracker.html</anchorfile>
      <anchor>ab2b82f21768791e47c373f3a633d23a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSurface</name>
    <filename>classDGtal_1_1DigitalSurface.html</filename>
    <templarg>TDigitalSurfaceContainer</templarg>
    <class kind="struct">DGtal::DigitalSurface::Arc</class>
    <class kind="struct">DGtal::DigitalSurface::Edge</class>
    <class kind="struct">DGtal::DigitalSurface::Face</class>
    <class kind="struct">DGtal::DigitalSurface::SurfelMap</class>
    <class kind="struct">DGtal::DigitalSurface::VertexMap</class>
    <member kind="typedef">
      <type>TDigitalSurfaceContainer</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a1e5d3aa778ac2d76c6a5fe1c3986d63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurface&lt; DigitalSurfaceContainer &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a0f666741db27b7f1572ffa9df52e527a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::KSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a9a527561977510dc5ab21cec7438727c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a1af620e72d9fb0255d243cfa987d8e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>abfa4ca29739a597b3683da322b007002</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::Surfel</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a022bb4ded759e45963bfe00706ae8214</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::SurfelConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a40056dd099c93e7ab5dfc5196a56e550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::DigitalSurfaceTracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a81da19bd361a25c90f7a0c295e91cfaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a0664e08baf1b583b098a7f05fb49bf71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SurfelSet</type>
      <name>SurfelSet</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>aaa80abbd219d17cd225cc8f961be68f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Surfel</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a637f8034aff12a2f65fe9cc47c95b8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a6296308d1a6833a0fa93bdeebfbc7dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SurfelSet</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a59b53ec1f8a4c8822b7b69a516f1cb7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UmbrellaComputer&lt; DigitalSurfaceTracker &gt;</type>
      <name>Umbrella</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a4cbb677a11598140c386bdfdce17aec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Umbrella::State</type>
      <name>UmbrellaState</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a83504df2d968329d36d731f43113af34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Arc &gt;</type>
      <name>ArcRange</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a8a951074c459f89ceb3fcb0b8259e293</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Face &gt;</type>
      <name>FaceRange</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>aa10b17c760ac59745d97e05a9877532f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Vertex &gt;</type>
      <name>VertexRange</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a7bbab2b7e1bedf06738f5151d1157b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Face &gt;</type>
      <name>FaceSet</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>aca5daf921da1f67b921cfc109f2dbb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>ab583189223671a0b494c58eec0f5c229</anchor>
      <arglist>((CDigitalSurfaceContainer&lt; DigitalSurfaceContainer &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalSurface</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>ae8855c6a375d39d158b0183680127126</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurface</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a86a7018fa782fd6d26507bb7c49c9c2f</anchor>
      <arglist>(const DigitalSurface &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurface</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>adb71df1db33ced96701d969db1a2c52c</anchor>
      <arglist>(const DigitalSurfaceContainer &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurface</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a989fbda2a51aee5980d4d90f5331df68</anchor>
      <arglist>(DigitalSurfaceContainer *containerPtr)</arglist>
    </member>
    <member kind="function">
      <type>DigitalSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a67cc8841720bf7635e1f195b879237af</anchor>
      <arglist>(const DigitalSurface &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>container</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a04255fe28baf6c4f6cf09406841ee14d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DigitalSurfaceContainer &amp;</type>
      <name>container</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>af9af7327ef52a67de666fdaea45cb6d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a8c70f548de624cbe68ba306173ab5917</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a3e933603c18eabdf8a22560592b45201</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a934c1b88122e6f1062b7ed885efef13c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a3947944cc33930321bcbed85ac111a31</anchor>
      <arglist>(const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>aa7ac6aeaaa14d7d5a90f31d4c4f63968</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>ac45efcabe133596dd17895188bf9ee13</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>ad6c8cee8f87eea74705f740185393170</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred) const </arglist>
    </member>
    <member kind="function">
      <type>ArcRange</type>
      <name>outArcs</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a22db541b4877392d293abcb36768c8fd</anchor>
      <arglist>(const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>ArcRange</type>
      <name>inArcs</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>ac163f674cdad2ecb15943193680daba4</anchor>
      <arglist>(const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>FaceRange</type>
      <name>facesAroundVertex</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a9949b7d503c4348b0ec934cb0e9a66eb</anchor>
      <arglist>(const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Vertex</type>
      <name>head</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a03ee9c4336cdfe554916a9dceeaea513</anchor>
      <arglist>(const Arc &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Vertex</type>
      <name>tail</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a393f4b72b704446881a5c3638782f585</anchor>
      <arglist>(const Arc &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>opposite</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a574bf0254fecfbc61fd10313628c7569</anchor>
      <arglist>(const Arc &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>Arc</type>
      <name>arc</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a0b4bc7dd52bc53f48e015f700c371608</anchor>
      <arglist>(const Vertex &amp;tail, const Vertex &amp;head) const </arglist>
    </member>
    <member kind="function">
      <type>FaceRange</type>
      <name>facesAroundArc</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a5ec85b4cdc709db7b750a311d0a14f29</anchor>
      <arglist>(const Arc &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>VertexRange</type>
      <name>verticesAroundFace</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a5cfc0831f825d2949412b06d9a6300fd</anchor>
      <arglist>(const Face &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>FaceSet</type>
      <name>allFaces</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>aef963efd64aea28e7e7dcf73b33475f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FaceSet</type>
      <name>allClosedFaces</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a284f5faab4a703dcf2a2959fae9ce232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>FaceSet</type>
      <name>allOpenFaces</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>adf6170e0e115226a463174fbb5d89337</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Face</type>
      <name>computeFace</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a4c81ba20cb51223055d21cbedbe54ea4</anchor>
      <arglist>(UmbrellaState state) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>separator</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a3932a32d86e5ce3991881e7435c7da84</anchor>
      <arglist>(const Arc &amp;a) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>pivot</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a231eae8751ba35dd088323222390f673</anchor>
      <arglist>(const Face &amp;f) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a1abc134ca4db818c935834a4f82aa76c</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>ad4c009ce77413088d023964dbe6c1f4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exportSurfaceAs3DOFF</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a0ca3aa0e577cb37f684345dfa5dee23d</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exportEmbeddedSurfaceAs3DOFF</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a2f8bee288fd426111bf259736ea1c038</anchor>
      <arglist>(std::ostream &amp;out, const CellEmbedder &amp;cembedder) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exportEmbeddedSurfaceAs3DNOFF</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a98265ddb6986ecc4da96bb0eb3b27189</anchor>
      <arglist>(std::ostream &amp;out, const CellEmbedder &amp;cembedder) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exportAs3DNOFF</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a9d7e0f91191e8e4d7ee1257623aff04f</anchor>
      <arglist>(std::ostream &amp;out, const SCellEmbedderWithGradientMap &amp;scembedder) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exportEmbeddedIteratedSurfaceAs3DNOFF</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>aa19f737b546d1389c2672d2aadb56d01</anchor>
      <arglist>(std::ostream &amp;out, const CellEmbedder &amp;cembedder) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DigitalSurface</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>afbb0a0811a6bdb0a684fb5ee7ddb995b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CountedPtr&lt; DigitalSurfaceContainer &gt;</type>
      <name>myContainer</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a864562b0c92f06a8145292559f10d4bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DigitalSurfaceTracker *</type>
      <name>myTracker</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a85ac20f70cd198d6151a83bf98383896</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>UmbrellaComputer&lt; DigitalSurfaceTracker &gt;</type>
      <name>myUmbrellaComputer</name>
      <anchorfile>classDGtal_1_1DigitalSurface.html</anchorfile>
      <anchor>a3065ef97fcf9ae4ea3024a88ca6ca93b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DigitalSurface::Arc</name>
    <filename>structDGtal_1_1DigitalSurface_1_1Arc.html</filename>
    <member kind="function">
      <type></type>
      <name>Arc</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Arc.html</anchorfile>
      <anchor>aa1086a7463bd64f4a7b788b3ad9a2eac</anchor>
      <arglist>(const Vertex &amp;theTail, Dimension aK, bool aEpsilon)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Arc.html</anchorfile>
      <anchor>a4036697c4f5672fc5e56c2f2d4c3580d</anchor>
      <arglist>(const Arc &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Arc.html</anchorfile>
      <anchor>abef0c40ad5b80a4da7f6ab3d00799249</anchor>
      <arglist>(const Arc &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Vertex</type>
      <name>base</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Arc.html</anchorfile>
      <anchor>aa7ea3ca7e711f11e537cb1a3c3e3d5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Dimension</type>
      <name>k</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Arc.html</anchorfile>
      <anchor>a77ed3955863a603b3303485d93e9d3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>epsilon</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Arc.html</anchorfile>
      <anchor>aa57ac2a14420a9749dc6768d8b0cbf2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DigitalSurface::Edge</name>
    <filename>structDGtal_1_1DigitalSurface_1_1Edge.html</filename>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Edge.html</anchorfile>
      <anchor>a5d2a60f72948ffe5fab659b5fe78d8bb</anchor>
      <arglist>(const Vertex &amp;v1, const Vertex &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Edge.html</anchorfile>
      <anchor>acd756b1deea7fad578c3e14d7e0aae5f</anchor>
      <arglist>(const Edge &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Edge.html</anchorfile>
      <anchor>af7ea1500200cff63d13b83776f7ddf23</anchor>
      <arglist>(const Edge &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Vertex</type>
      <name>vertices</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Edge.html</anchorfile>
      <anchor>a02f0ff7e656ec569612e0066f0dc18d1</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DigitalSurface::Face</name>
    <filename>structDGtal_1_1DigitalSurface_1_1Face.html</filename>
    <member kind="function">
      <type></type>
      <name>Face</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Face.html</anchorfile>
      <anchor>a879f0cc2eeac8db370dcad50fa5dda0a</anchor>
      <arglist>(const UmbrellaState &amp;aState, unsigned int nb, bool aIsClosed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Face.html</anchorfile>
      <anchor>a6c974e1eef331634f73321c6072bbe47</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Face.html</anchorfile>
      <anchor>a9c63fad25677e83ca71c682ce62d17cc</anchor>
      <arglist>(const Face &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Face.html</anchorfile>
      <anchor>ad1908b5b12cbe655ae3640e6c17a07c3</anchor>
      <arglist>(const Face &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>UmbrellaState</type>
      <name>state</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Face.html</anchorfile>
      <anchor>a2b562e6ab0cc7c0a9543d5fb37831f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>nbVertices</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Face.html</anchorfile>
      <anchor>a6d7271d58884c7ba92cefa0426ca6a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>closed</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1Face.html</anchorfile>
      <anchor>a2021376b880a1abfce1f869d3c649dbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DigitalSurface::SurfelMap</name>
    <filename>structDGtal_1_1DigitalSurface_1_1SurfelMap.html</filename>
    <templarg>Value</templarg>
    <member kind="typedef">
      <type>KSpace::template SurfelMap&lt; Value &gt;::Type</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1SurfelMap.html</anchorfile>
      <anchor>a7b6e23422cca181ebcba301df59f9e06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DigitalSurface::VertexMap</name>
    <filename>structDGtal_1_1DigitalSurface_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KSpace::template SurfelMap&lt; Value &gt;::Type</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1DigitalSurface_1_1VertexMap.html</anchorfile>
      <anchor>add6288293f6ea8296f7667c3ca7867dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalSurface2DSlice</name>
    <filename>classDGtal_1_1DigitalSurface2DSlice.html</filename>
    <templarg>TDigitalSurfaceTracker</templarg>
    <member kind="typedef">
      <type>TDigitalSurfaceTracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a53c1ebfd70d7abf8d89971c2b2714a8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurface2DSlice&lt; DigitalSurfaceTracker &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a2b563fa1fb1473be1c53d20bf47d29f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceTracker::DigitalSurfaceContainer</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a990300e819a90196b022397b47009eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::KSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a10d71d5bf1bf30eabe18155ab0167747</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::Surfel</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>ac93063202a66da3de98dd50e4fdfa27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a3c4867ed3d1b6712f1a1e3570dae3b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurface&lt; DigitalSurfaceContainer &gt;</type>
      <name>TheDigitalSurface</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>ab1194d50955c328ee7f620531b278cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; Surfel &gt;</type>
      <name>Storage</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a4044eed97625585d0751ef0dde232a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Storage::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>ae1145cec81eb12a11fff969d8ccc78c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Storage::const_reverse_iterator</type>
      <name>ConstReverseIterator</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a696a50c5fb0cfb35c4bd820b9bf5cacd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Circulator&lt; ConstIterator &gt;</type>
      <name>ConstCirculator</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a92a74247a8648f9b041d1b29ecc01714</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Circulator&lt; ConstReverseIterator &gt;</type>
      <name>ConstReverseCirculator</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a6b5ee8db36358fd7758cd179ce169726</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>ac7ffa0741536bd243974fef18ae78efe</anchor>
      <arglist>((CDigitalSurfaceTracker&lt; DigitalSurfaceTracker &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalSurface2DSlice</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a4831e7c42580c5ea476db5bcf27574c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalSurface2DSlice</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>aec5f2a23891d56ae68fb7320032e190e</anchor>
      <arglist>(DigitalSurfaceTracker *tracker, Dimension i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>aa92f2b2baf212b9dbe3d62f3bfed4296</anchor>
      <arglist>(DigitalSurfaceTracker *tracker, Dimension i)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>afd8cf1b8e2c3f2b86910d69ca634c5e3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a20bc175b211854a63a3da2f29d8f160f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>start</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a076898e32988b7a169052c9ef2527b4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rstart</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>ac12ca41ffad2e32d3993d459bbb5bd94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstCirculator</type>
      <name>cstart</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a55654810a34c10c488f3636ecb1db78b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseCirculator</type>
      <name>rcstart</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a12cda4c64826ddafcbdf2bb7ba77f95e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a8b20ca41d6f38c607bd92f0264756fdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a91488618b81aa16342bb29d31f66a8de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rbegin</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a5c0681c052bd3f31b425da19b3b10cab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseIterator</type>
      <name>rend</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a18f47482f379f7524db00dee34738fc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstCirculator</type>
      <name>c</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a179b399f8321d4a9af97b945836264b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstReverseCirculator</type>
      <name>rc</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a7018869d1ceab577d9cbe41f966c5a76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a4b8de67ca41c46776dd85d58639f2af7</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>ab1dde7e96a47a06dfa6a2ddaa9353868</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DigitalSurface2DSlice</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>acf85a8e6b66ee411e7474bfeaf3228fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>DigitalSurface2DSlice</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>ae2bf33ae336679dba303f9b71a9765bd</anchor>
      <arglist>(const DigitalSurface2DSlice &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DigitalSurface2DSlice &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>aa735f89c60a5c93a70f3750cc94e718a</anchor>
      <arglist>(const DigitalSurface2DSlice &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::deque&lt; Surfel &gt;</type>
      <name>mySurfels</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>ac771add171e3c08eebba54bb13694ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myIsClosed</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>acc5c44f927404bd4f455cb99a7185db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myStart</name>
      <anchorfile>classDGtal_1_1DigitalSurface2DSlice.html</anchorfile>
      <anchor>a8c35bc617090ade1396e520a1f15a3df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DigitalTopology</name>
    <filename>classDGtal_1_1DigitalTopology.html</filename>
    <templarg>TForegroundAdjacency</templarg>
    <templarg>TBackgroundAdjacency</templarg>
    <member kind="typedef">
      <type>TForegroundAdjacency</type>
      <name>ForegroundAdjacency</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a90140ff99d11cfacc7f487f99b6249d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TBackgroundAdjacency</type>
      <name>BackgroundAdjacency</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>ab95095e30eb63d937625b1a0cacffd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ForegroundAdjacency::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a79692ff150d077898f3539d950f1d85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BackgroundAdjacency::Point</type>
      <name>BackPoint</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a3d343a46c8cb1f6df20c00295f806e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology&lt; BackgroundAdjacency, ForegroundAdjacency &gt;</type>
      <name>ReverseTopology</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a5449114a76a291b22e45cb61bef7f25f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a4b01f751e6611da74aba8d3b897e5058</anchor>
      <arglist>((CAdjacency&lt; ForegroundAdjacency &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>ad45443971b24c94e67c6823e96550b85</anchor>
      <arglist>((CAdjacency&lt; BackgroundAdjacency &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalTopology</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a186a74048d8c2512c0ddd128d18d9371</anchor>
      <arglist>(const ForegroundAdjacency &amp;aKappa, const BackgroundAdjacency &amp;aLambda, DigitalTopologyProperties props=UNKNOWN_DT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DigitalTopology</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a70fe2f0b57308edd1e9599fbe800a597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DigitalTopology</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a1dc2114d76a8bd38ca64ed454e34ae94</anchor>
      <arglist>(const DigitalTopology &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ForegroundAdjacency &amp;</type>
      <name>kappa</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>ae86fa0468a98a06d8e7326d500d9110c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const BackgroundAdjacency &amp;</type>
      <name>lambda</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a14979fbba1e62be65b5020652f19daf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DigitalTopologyProperties</type>
      <name>properties</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>adfcbd23c8d721e63574e7bf9645e045e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ReverseTopology</type>
      <name>reverseTopology</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a5db75c6023ff43247a25dff75ad77d94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a80ac54387920094da926b439489fb319</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>aa96da6dded79c6c868e431c70808891b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DigitalTopology</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a344c43e95f1ae945b8e47e003156931b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DigitalTopology &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>ace7eb8eb5d6619857f0a8ab8c3882f31</anchor>
      <arglist>(const DigitalTopology &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const ForegroundAdjacency &amp;</type>
      <name>myKappa</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>afc5984480d95cdbb2ef9196d5ab20be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const BackgroundAdjacency &amp;</type>
      <name>myLambda</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a89b263d90555037af04d2f574cc68669</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalTopologyProperties</type>
      <name>myProps</name>
      <anchorfile>classDGtal_1_1DigitalTopology.html</anchorfile>
      <anchor>a7a3aea4a7d2ac719fbf496995ab9373c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::DomainAdjacency</name>
    <filename>classDGtal_1_1DomainAdjacency.html</filename>
    <templarg>TDomain</templarg>
    <templarg>TAdjacency</templarg>
    <class kind="struct">DGtal::DomainAdjacency::VertexMap</class>
    <member kind="typedef">
      <type>TDomain::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>abd4ab9ac4d3538276d9e43256cae7f7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TAdjacency</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a1637528418cc61dff0f98b9894bec19c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDomain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a0cba6f145152a7cd53ea48b0b65f1f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a0d9da7940d53bee54d4ff9683e4f0487</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DomainPredicate&lt; Domain &gt;</type>
      <name>Predicate</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>ae47dc7a298c204de90b00d09e8134bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a84e749ef09ac47eeb6d3a7bfa5676173</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a45fadcd04570cd9409470b5d13b7379a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetSelector&lt; Domain, SMALL_DS+HIGH_ITER_DS &gt;::Type</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>aa8bbaad9e9f6850c0e5412c509cb75d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainAdjacency</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>aa38dae43de1e904f06b9dfb36b1d54a3</anchor>
      <arglist>(const Domain &amp;aDomain, const Adjacency &amp;adjacency)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainAdjacency</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a39ad0428f571fea7cbd6c5df8133a18b</anchor>
      <arglist>(const DomainAdjacency &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DomainAdjacency</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a99e21baa7656ceb7bd0928b7415406a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>afb50ae0b57a649307ddb0dc5c50af77c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Predicate &amp;</type>
      <name>predicate</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a98d728b9db35169101a216ce2b27f851</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAdjacentTo</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>ac0a235aed63836063a9d4d5c84a627eb</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProperlyAdjacentTo</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a3e6241c2dce13fd5ee77b33f1594f5ab</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a697473fa8235a48a2ace3855acc9c72e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>aca5ba63bc44b5ffd9640044c542a83a8</anchor>
      <arglist>(const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>ac08a022434b4513cba417d23fd4c8bca</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a86fdf79256114f80357f368598ff42a9</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a1e98b772626225947d87adff7378d2e7</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a954bef307bdfc46a0f015cf488cee309</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DomainAdjacency</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a41147a50b71e3399aebaf766075b99cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>ab2a51fcc9a65828a3f1eaaeb9c8dd185</anchor>
      <arglist>((CDomain&lt; TDomain &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a34b719a6a522ac402f41f56eaf40e591</anchor>
      <arglist>((CAdjacency&lt; TAdjacency &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DomainAdjacency &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a998cd2048f4a9510371368b3ef89b8bd</anchor>
      <arglist>(const DomainAdjacency &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Predicate</type>
      <name>myPred</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a2a852bed390cefce2ef0e4d6e5f607ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Adjacency &amp;</type>
      <name>myAdjacency</name>
      <anchorfile>classDGtal_1_1DomainAdjacency.html</anchorfile>
      <anchor>a6ab054e8e0b4ec8e1c75c012ab256fd9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::DomainAdjacency::VertexMap</name>
    <filename>structDGtal_1_1DomainAdjacency_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; Vertex, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1DomainAdjacency_1_1VertexMap.html</anchorfile>
      <anchor>a6bd7480959b3818315a3e9ae0be81aa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Expander</name>
    <filename>classDGtal_1_1Expander.html</filename>
    <templarg>TObject</templarg>
    <member kind="typedef">
      <type>TObject</type>
      <name>Object</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a9705115071f2c6be3f4beaa44007415b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>acf63c14e1d2ef4ab59979b8114e4754b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a121415cbd6d1a3b09d5143a61b9e6b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a6702408032c603093558cd32c88186fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object::DigitalSet</type>
      <name>DigitalSet</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>aceb5c7b1bded281b38048fef9aebc38b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object::ForegroundAdjacency</type>
      <name>ForegroundAdjacency</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a289f66b42d2d19df0cf78671502070aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a0e5b3976c6a9d0d7a1b9390a3fa7c7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a4903f3eb20e472317a76e69eb559b132</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetDomain&lt; DigitalSet &gt;</type>
      <name>ObjectDomain</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>ab8c33757c2e4c30cba5c7dde4327c511</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetDomain&lt; DigitalSet &gt;</type>
      <name>CoreDomain</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a18b4cd36904ceddaa56bad7a1cbe97f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DomainAdjacency&lt; ObjectDomain, ForegroundAdjacency &gt;</type>
      <name>ObjectAdjacency</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a6ac0681324a151002e9a4373fc89eed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoreDomain::Predicate</type>
      <name>InCoreDomainPredicate</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a4f48b8459cc015c5e4cc9aaae6cffdcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NotPointPredicate&lt; InCoreDomainPredicate &gt;</type>
      <name>NotInCoreDomainPredicate</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a33e6d6d31f2633f6fc4273d932b59c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Expander</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>ad8b22af299c261a6e9e22dbd24efae7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expander</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a54b87ff1b7ab19f20caa7497948fb3bf</anchor>
      <arglist>(const Object &amp;object, const Point &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expander</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a18a5f3204664790f8dd970c2f6c0656c</anchor>
      <arglist>(const Object &amp;object, PointInputIterator b, PointInputIterator e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a516f5e8c62976ba442bf41c9bcfe769f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>distance</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>ae74a6a3c140e3ef05e38d7e75cf479e8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextLayer</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a4f8b2d88d92b7022576068c4bb3bc8e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DigitalSet &amp;</type>
      <name>core</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a2585c5158a1273dfa72d5afe868d2578</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DigitalSet &amp;</type>
      <name>layer</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a2c634af6a8c0b2ef6f951459d1730069</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a25925adaa73802e6f27d2271cccc28de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a6ae7761e85191d7d0364ec6e34528bd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a2cb16a32fa4c97f5c403902c9bac88e1</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>ae5cd7fe6520c0faf72f57560ca9a852e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expander</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>af7057fa7613671ac53f9d06ac67ab57d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeNextLayer</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a464d11ae575ce7826a35de0afc9650db</anchor>
      <arglist>(const DigitalSet &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>endLayer</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>ad92db1c30ed3ac4ee03f50f8af463d83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Expander</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a215f284f3dea146083bc4f87caebb216</anchor>
      <arglist>(const Expander &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Expander &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>adbaf088b88da34efff197861d35af868</anchor>
      <arglist>(const Expander &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Domain &amp;</type>
      <name>myEmbeddingDomain</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a4c71348ad3a2c76aa56dbf5bfee341c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Object &amp;</type>
      <name>myObject</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a10a62be75e9f233a28d7957ccba49b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectDomain</type>
      <name>myObjectDomain</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a194a387eb779bbf47f901515302e95f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ObjectAdjacency</type>
      <name>myObjectAdjacency</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a08682a85f49f2686ecd2b32330b46a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DigitalSet</type>
      <name>myCore</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>ad55ab3f2d398b9eef9d93522d1d9c304</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DigitalSet</type>
      <name>myLayer</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a4bee4465ca90ed1c763a9f615e7cb3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Size</type>
      <name>myDistance</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>adde62e9902d661f309f53e7b5c4d3669</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFinished</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a82a56c96b8f8a9504773b5431518847b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>InCoreDomainPredicate</type>
      <name>myInCorePred</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>a3eae34b30deffd2dbd4c9ba0c1993623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NotInCoreDomainPredicate</type>
      <name>myNotInCorePred</name>
      <anchorfile>classDGtal_1_1Expander.html</anchorfile>
      <anchor>aec888b4a7b4482abed8b2ef50757eb68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ExplicitDigitalSurface</name>
    <filename>classDGtal_1_1ExplicitDigitalSurface.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TSurfelPredicate</templarg>
    <class kind="class">DGtal::ExplicitDigitalSurface::Tracker</class>
    <member kind="typedef">
      <type>ExplicitDigitalSurface&lt; TKSpace, TSurfelPredicate &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>aa3caadc9a8f6de0db73a8699be32ca5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>af1eef0948367538f33e909aa8f1861a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a3f0db396535637df067eeac5dd2e89f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a5ee5a6f12a774e265a6102e9b4df1cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSurfelPredicate</type>
      <name>SurfelPredicate</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a4b8752e74b8542cdbca5f7418b29cc90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Surfel &gt;</type>
      <name>SurfelStorage</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a200a28b462d746270a150e014b71a3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelStorage::const_iterator</type>
      <name>SurfelConstIterator</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>aed3a39ba2e71192a821a75c9ac82297d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>ab373e4b8132857d8604dbd6c9a95f540</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a423d402734cb47b5225d6d4a361bf0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>ae068b1080fea11fc1831b1fdde303e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelAdjacency&lt; KSpace::dimension &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>ab24177a40f32ed01336faa378e77bb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>ae7aa6277259045cb5191db9accddf9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a8cb5093447f7b421ef4a52caa7206ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::CellSet</type>
      <name>CellSet</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>ada59b43586e0fcf00b8352399542292d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCellSet</type>
      <name>SCellSet</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a492abe4426a149d8ec88ceed7746c799</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>aefb85cd8808be638e60d4adee8bf38ec</anchor>
      <arglist>((CSurfelPredicate&lt; SurfelPredicate &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a8fe17f2273eb2483c90ad3027717f993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>af44e96712673e579919eb8b0d0f2af77</anchor>
      <arglist>(const ExplicitDigitalSurface &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a591390edb04f951867788e1027a4ed5c</anchor>
      <arglist>(const KSpace &amp;aKSpace, const SurfelPredicate &amp;aSP, const Adjacency &amp;adj, const Surfel &amp;s, bool closed=false)</arglist>
    </member>
    <member kind="function">
      <type>const Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a91c39daeb2b5a229b2c8623bd8babf8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>af3fc12a11f41307dc44547a00c89fd4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SurfelPredicate &amp;</type>
      <name>surfelPredicate</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a27eaf4334b0e235c0eb19aa8b21a9d5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const KSpace &amp;</type>
      <name>space</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a8e2ddbc712b7ac4b32c516d0770b42aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a2bd0209705fd37902733def312ac55a1</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a308696d3b12f03ed816c1f11c656dfe1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>ac6153a65dc2e0fe9a3ceef4e415e0f6e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>nbSurfels</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>aa04d695ebe569dc256d19601d682466f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a38c18bcb920619910655fc08965a9500</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DigitalSurfaceTracker *</type>
      <name>newTracker</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a28e69650404f3f4cc9eab7c9d8c2bd74</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Connectedness</type>
      <name>connectedness</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a823364ca5e973807888fe68708887960</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a4037e0856f61ed51011d820df0cca7ba</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a7c50efa28a13e278f68a0a4821bebf21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeSurfels</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>ae5a22e4a3aff8c899adf1b0170f9138d</anchor>
      <arglist>(const Surfel &amp;p, bool closed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ExplicitDigitalSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a23716da509feaf1e998e65771098670f</anchor>
      <arglist>(const ExplicitDigitalSurface &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace &amp;</type>
      <name>myKSpace</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a70824101c036a128be04d39be261d1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SurfelPredicate &amp;</type>
      <name>mySurfelPredicate</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>ab53be1bc41f6071a3fd9402f3bed640c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Adjacency</type>
      <name>mySurfelAdjacency</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>aea799de7f3d10848bac0402a018a4e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SurfelStorage</type>
      <name>mySurfels</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface.html</anchorfile>
      <anchor>a2d10b6631461ea4eb2441b0049ce28a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ExplicitDigitalSurface::Tracker</name>
    <filename>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</filename>
    <member kind="typedef">
      <type>Tracker</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a38e9299eb9fdfc51c58a28588697ec2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ExplicitDigitalSurface&lt; TKSpace, TSurfelPredicate &gt;</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a053106dd2acc422deba76b03982f7c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a81c73137cea4d6c7789b94163ad0eb8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>af0a466174cd1599d25ac9348134473fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelNeighborhood&lt; KSpace &gt;</type>
      <name>Neighborhood</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a3e76929fecb13a4dae43b8e447bb68c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a622361e4a486586ef1db97e055fbfd50</anchor>
      <arglist>(const DigitalSurfaceContainer &amp;aSurface, const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>aeea695846523705973443905445bf0ff</anchor>
      <arglist>(const Tracker &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tracker</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>af35a86be1f640ab37254578ecf76adda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>surface</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>afad7fd2009b45249b057ab77b65d0004</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Surfel &amp;</type>
      <name>current</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a5e0824c57adf7dd413599580f422a35e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>orthDir</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a74a0f8e3be5e2f064c0e0c18ca85f4b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a9fe1c5435a2caa97b0cbc901f855844f</anchor>
      <arglist>(const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>adjacent</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a1640aa7ca4b5761396f09e9db2235636</anchor>
      <arglist>(Surfel &amp;s, Dimension d, bool pos) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>mySurface</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>abc21f9ecb8012dd95fcac5829d8eafb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Neighborhood</type>
      <name>myNeighborhood</name>
      <anchorfile>classDGtal_1_1ExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>adc9433c6abc0d116b09b1661579175a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::BoundaryPredicate</name>
    <filename>classDGtal_1_1BoundaryPredicate.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TImage</templarg>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a9b75032fb80c40eb1870896ea780ce99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a13f188789711b4c3b82d9d0029716869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Surfel</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a50175dd33664a29e83686d03b9fa1072</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>aa16edb36e81be01750d1e7721950b0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a52f5d77f0b2b7497427f88a71c4d2516</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>ad442ae9196e50aa4ccb2ec84e49ead72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a506efc990f9d097b3e7a28d9c1d1f818</anchor>
      <arglist>((ConceptUtils::SameType&lt; typename KSpace::Point, typename Image::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundaryPredicate</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a3a3bd4b37f20b8064762b3137ae2bbb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryPredicate</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>af5cbe1d56dd1895421265fbae0ff5735</anchor>
      <arglist>(const KSpace &amp;aSpace, const Image &amp;anImage, const Value &amp;l1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryPredicate</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>abe497aa19468a51594146009102fe769</anchor>
      <arglist>(const BoundaryPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BoundaryPredicate &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a177e921675cce1ae6d5d7c24f719c74b</anchor>
      <arglist>(const BoundaryPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a5f347304154a281f4829559f745fe301</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>aec2895eb8c23e36f29ec3d6335f597dd</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a883c427694a871202ea71cc392f00804</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myPtrSpace</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>ab9326aa7a863daf878bd257494bdc6c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Image *</type>
      <name>myPtrImage</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>aaba39db4258ba16298d3cd566bdf879e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myLabel1</name>
      <anchorfile>classDGtal_1_1BoundaryPredicate.html</anchorfile>
      <anchor>a2a776b06633ec8fb708a90ed76d66bb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::FrontierPredicate</name>
    <filename>classDGtal_1_1FrontierPredicate.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TImage</templarg>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a7464fee271a54c631a416e01b41894a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TImage</type>
      <name>Image</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a3dda781087efe00c3958f1d402b477b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Surfel</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a124eb46cb7736df8b5098d96e3b02a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>ab65614e9ac5fbe9411b947f9dd7555f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>ad2f395acc4914b36059b8f88e7cf7174</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Image::Value</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a1fb8bc34270ea0a2908b7308493c6ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>affad18b0c888dc933854aa8d0f1b4256</anchor>
      <arglist>((ConceptUtils::SameType&lt; typename KSpace::Point, typename Image::Point &gt;::value))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~FrontierPredicate</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a3592ed25a5e0822b9f3b5ea3eb58c268</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrontierPredicate</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>ab42aa57ed7f63f67db9dcfc2a23d20d2</anchor>
      <arglist>(const KSpace &amp;aSpace, const Image &amp;anImage, const Value &amp;l1, const Value &amp;l2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrontierPredicate</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a1fbe6b7418c608145101ffaf5d536f39</anchor>
      <arglist>(const FrontierPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>FrontierPredicate &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>adaa9a50e014a4b6565206098e2e50f12</anchor>
      <arglist>(const FrontierPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a24bd44b1a57d4020bfd65fc08876602d</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a62f35b82f16f977257914ef7ee426396</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a93280f9d4b1de7e8702372bcaa2f7171</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myPtrSpace</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>aac603e6700650ce42be2c6a5ed94c59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Image *</type>
      <name>myPtrImage</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>ade677abef31b512202f65e175068a382</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myLabel1</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>a5985b198c2009316cec367f9f7121f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Value</type>
      <name>myLabel2</name>
      <anchorfile>classDGtal_1_1FrontierPredicate.html</anchorfile>
      <anchor>acb46c3ffaa79d6c32f0c86ffcde0fc00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Surfaces</name>
    <filename>classDGtal_1_1Surfaces.html</filename>
    <templarg>TKSpace</templarg>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>ae254510c81f339dbb5bd4b33ed9f5f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a91dd49aa1b8c90ceaf595448ce30ebb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>ab58accd9ff51d3cb85f7f4d7e7ed80c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a6e02ccfe37b82b2d278d066161f4d1d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a5eaebd043923d70cecb81470431be557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::DirIterator</type>
      <name>DirIterator</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>aea3655c1310aed70fc5fcedaef454d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Surfaces</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a4a40685150ee27be46185eed33b49582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a80771c760a6b1ae094343a2e8011dad3</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a93d3b1bb0ae25b25a2f02b32096c8ea4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SCell</type>
      <name>findABel</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>ab7cb9762acdb10a8e91ac27f936c7ff9</anchor>
      <arglist>(const KSpace &amp;K, const PointPredicate &amp;pp, unsigned int nbtries=1000)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SCell</type>
      <name>findABel</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a8108a13a0e55b8b218a4b94ba6b9bebf</anchor>
      <arglist>(const KSpace &amp;K, const PointPredicate &amp;pp, Point x1, Point x2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>trackBoundary</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a24fcfb2a607d919c84250bc9965cb86b</anchor>
      <arglist>(SCellSet &amp;surface, const KSpace &amp;K, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;surfel_adj, const PointPredicate &amp;pp, const SCell &amp;start_surfel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>trackClosedBoundary</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>ae917f93333eb382dd285d660388c9ba7</anchor>
      <arglist>(SCellSet &amp;surface, const KSpace &amp;K, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;surfel_adj, const PointPredicate &amp;pp, const SCell &amp;start_surfel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>trackSurface</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a997c3b0bfec1b627a9822d4a1352f4ba</anchor>
      <arglist>(SCellSet &amp;surface, const KSpace &amp;K, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;surfel_adj, const SurfelPredicate &amp;pp, const SCell &amp;start_surfel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>trackClosedSurface</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a08c4dba52a1b96479aec48d646f4d469</anchor>
      <arglist>(SCellSet &amp;surface, const KSpace &amp;K, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;surfel_adj, const SurfelPredicate &amp;pp, const SCell &amp;start_surfel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>track2DBoundary</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a4b4a4cd531b56d91d0ec1931f81b3884</anchor>
      <arglist>(std::vector&lt; SCell &gt; &amp;aSCellContour2D, const KSpace &amp;K, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;surfel_adj, const PointPredicate &amp;pp, const SCell &amp;start_surfel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>track2DSliceBoundary</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>adc9eb26aaad975e24dc43045b7e926e1</anchor>
      <arglist>(std::vector&lt; SCell &gt; &amp;aSCellContour2D, const KSpace &amp;K, const Dimension &amp;trackDir, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;surfel_adj, const PointPredicate &amp;pp, const SCell &amp;start_surfel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>track2DSurface</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a158d2fa1b8d32e7a48452cb6efb3044a</anchor>
      <arglist>(std::vector&lt; SCell &gt; &amp;aSCellContour, const KSpace &amp;K, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;surfel_adj, const SurfelPredicate &amp;sp, const SCell &amp;start_surfel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>track2DSliceSurface</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a64703c857b00eea04d5b3fc4323437cc</anchor>
      <arglist>(std::vector&lt; SCell &gt; &amp;aSCellContour, const KSpace &amp;K, const Dimension &amp;trackDir, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;surfel_adj, const SurfelPredicate &amp;sp, const SCell &amp;start_surfel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>track2DBoundaryPoints</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>aeea1a2dc0f7d5c3c86028f2643290486</anchor>
      <arglist>(std::vector&lt; Point &gt; &amp;aVectorOfPoints, const KSpace &amp;K, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;surfel_adj, const PointPredicate &amp;pp, const SCell &amp;start_surfel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>extractAllPointContours4C</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a6b5d23e7d194d2c22d97de7853723d20</anchor>
      <arglist>(std::vector&lt; std::vector&lt; Point &gt; &gt; &amp;aVectPointContour2D, const KSpace &amp;aKSpace, const PointPredicate &amp;pp, const SurfelAdjacency&lt; 2 &gt; &amp;aSAdj)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>extractAll2DSCellContours</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a5565d229014c6d68ad32d64ad69e6eaf</anchor>
      <arglist>(std::vector&lt; std::vector&lt; SCell &gt; &gt; &amp;aVectSCellContour2D, const KSpace &amp;aKSpace, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;aSurfelAdj, const PointPredicate &amp;pp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>extractAllConnectedSCell</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a7c70171234046344fa0b089373424171</anchor>
      <arglist>(std::vector&lt; std::vector&lt; SCell &gt; &gt; &amp;aVectConnectedSCell, const KSpace &amp;aKSpace, const SurfelAdjacency&lt; KSpace::dimension &gt; &amp;aSurfelAdj, const PointPredicate &amp;pp, bool forceOrientCellExterior=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>orientSCellExterior</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a29fc6a36477080451c0951082ec7a456</anchor>
      <arglist>(std::vector&lt; SCell &gt; &amp;aVectOfSCell, const KSpace &amp;aKSpace, const PointPredicate &amp;pp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>uMakeBoundary</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a77140694e5697b73346f9e7e0e1a52fa</anchor>
      <arglist>(CellSet &amp;aBoundary, const KSpace &amp;aKSpace, const PointPredicate &amp;pp, const Point &amp;aLowerBound, const Point &amp;aUpperBound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sMakeBoundary</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>ad00979785283bbf3ac3767016f9f759f</anchor>
      <arglist>(SCellSet &amp;aBoundary, const KSpace &amp;aKSpace, const PointPredicate &amp;pp, const Point &amp;aLowerBound, const Point &amp;aUpperBound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>uWriteBoundary</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a051a425aad5367ebf261d774e2d8244a</anchor>
      <arglist>(OutputIterator &amp;out_it, const KSpace &amp;aKSpace, const PointPredicate &amp;pp, const Point &amp;aLowerBound, const Point &amp;aUpperBound)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>sWriteBoundary</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>aec4221c2c86b9a35cda45fa6da5a2de9</anchor>
      <arglist>(OutputIterator &amp;out_it, const KSpace &amp;aKSpace, const PointPredicate &amp;pp, const Point &amp;aLowerBound, const Point &amp;aUpperBound)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Surfaces</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>af256c2b3c2af32a9b20e011748382e1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>Surfaces</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a8cab7368470487cee8c10921739f5f23</anchor>
      <arglist>(const Surfaces &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Surfaces &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Surfaces.html</anchorfile>
      <anchor>a31d72cf1ccdf33632636c890e5816d1d</anchor>
      <arglist>(const Surfaces &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImplicitDigitalSurface</name>
    <filename>classDGtal_1_1ImplicitDigitalSurface.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TPointPredicate</templarg>
    <class kind="class">DGtal::ImplicitDigitalSurface::Tracker</class>
    <member kind="typedef">
      <type>ImplicitDigitalSurface&lt; TKSpace, TPointPredicate &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a98c061cc4955a6c387b86d438641bf97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a4c5ff5f7181d2b3ed21ab3a4324364ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a9a2173df4161a7f4e22229bf0a05db44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>ac89181065a4374fc9289d886087275b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPointPredicate</type>
      <name>PointPredicate</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a295e89dde56159ff74d78b27a6995bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Surfel &gt;</type>
      <name>SurfelStorage</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a504b051b51ade7699da7546659a254ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelStorage::const_iterator</type>
      <name>SurfelConstIterator</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>afd5e63e17f6bea3897a780d09cfbda0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a914ccbefa6b22cf5b942cf6bcc69bff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>aa76cfc05fc29e85cfa07d570161af619</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>aaf773bb5dbc560e2f99054bc6e2baf1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelAdjacency&lt; KSpace::dimension &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a3d77d6129c16b355e2eac1767fa0ee44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>af91779ddbbd6b94ccde126a81dd19b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>ab28165af8c30484107617962ce8383b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::CellSet</type>
      <name>CellSet</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a58b9fcb23a2663d8655f3a89af1d57f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCellSet</type>
      <name>SCellSet</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>af7fece6029e6d4222b7417d760fb2a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a71e9931915d294e08e069c82590c8dff</anchor>
      <arglist>((CPointPredicate&lt; PointPredicate &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a3b16f85b138f842ecd55c6c3b1b67438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a1295c838052ea6cc6539bc46435772af</anchor>
      <arglist>(const ImplicitDigitalSurface &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a83d2b7b7bfcfeb5e51514d8aed1ea75b</anchor>
      <arglist>(const KSpace &amp;aKSpace, const PointPredicate &amp;aPP, const Adjacency &amp;adj, const Surfel &amp;s, bool closed=false)</arglist>
    </member>
    <member kind="function">
      <type>const Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a41bb9301d0265766913df0cf2a1c77f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a6d84009776684203a0802545d8853873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PointPredicate &amp;</type>
      <name>pointPredicate</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>ac46437c5deafece083b425af039e2d57</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const KSpace &amp;</type>
      <name>space</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a4c2548212f38aa1405506b92e7b152cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a0f053a968b5ef5f37a4e0661734f6ef1</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a0e9f5885d03f7fa987d2ba1d38b9c9ec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>aa16364a40520a685bcd9ecd1cecdf0d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>nbSurfels</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>acb201f1be8db948235e62113b28b70d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>aab3b1cf5a62d4d404d8ee0ce7f0fb0c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DigitalSurfaceTracker *</type>
      <name>newTracker</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>ab84ac2d367ce43ab1742d3e337c06d56</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Connectedness</type>
      <name>connectedness</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a1af8f91cf48826092378eeb4a8eecc82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a7a8eb62b1250385b7b9770637e2560c1</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a040ecd439a901fdf80f3f9ee68d20720</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeSurfels</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a43017be69ffb9e540ad37ab61daa3b6a</anchor>
      <arglist>(const Surfel &amp;p, bool closed)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ImplicitDigitalSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a57a22527d4a0959b73ffae92476a1e36</anchor>
      <arglist>(const ImplicitDigitalSurface &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace &amp;</type>
      <name>myKSpace</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a643a4482b0d8786807e621da43b8b0b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const PointPredicate &amp;</type>
      <name>myPointPredicate</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a3aa375a2dd8e945011a77faad99c16f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Adjacency</type>
      <name>mySurfelAdjacency</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>a6df57d948f311f6c3a52ecaa14b83aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SurfelStorage</type>
      <name>mySurfels</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface.html</anchorfile>
      <anchor>ad2e8aadf404fc8a83fc6d328df3d5ba3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::ImplicitDigitalSurface::Tracker</name>
    <filename>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</filename>
    <member kind="typedef">
      <type>Tracker</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>aa940da6948c9988111c1aca504a14410</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitDigitalSurface&lt; TKSpace, TPointPredicate &gt;</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a5087b7c54ed6abb9f160df2df114a081</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>aca9e5a78e29a26a995af9e4cb32152f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a8527555e644cb782903837b1e246d421</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelNeighborhood&lt; KSpace &gt;</type>
      <name>Neighborhood</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a0ddcff2892018f97b5d089dca40fe573</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a38e84f9b24c764d5e074c43063d07814</anchor>
      <arglist>(const DigitalSurfaceContainer &amp;aSurface, const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>ad9ffd1b38ad6df2ca4e7c91cbdf8f88a</anchor>
      <arglist>(const Tracker &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tracker</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>acf791ad030116092d24ac23c8f35f4da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>surface</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a927fbb475156b7fe86b3a22c1a485862</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Surfel &amp;</type>
      <name>current</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a1cd7071665925ec9cef7df9cd6d22546</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>orthDir</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a532ae86eac867aa951878a09012538b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a8d537a0e6302deb0dabd0ded6bf09e71</anchor>
      <arglist>(const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>adjacent</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>acfd941feff85c70a2edad659a6bb7d22</anchor>
      <arglist>(Surfel &amp;s, Dimension d, bool pos) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>mySurface</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>afa25ca69ae0fe4939924e73b08cf2ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Neighborhood</type>
      <name>myNeighborhood</name>
      <anchorfile>classDGtal_1_1ImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a431adfb9b16165d97a2dab26f66589c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::KhalimskyCell</name>
    <filename>structDGtal_1_1KhalimskyCell.html</filename>
    <templarg>dim</templarg>
    <templarg>TInteger</templarg>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>a6594477c1023d219153494795dbf8c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::UnsignedVersion</type>
      <name>UnsignedInteger</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>ab534f6a5cb99a7c87f9ee5d70a256027</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; dim, Integer &gt;</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>acedca084817f2d80b478414daf38afe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>af144a8f245c92488a0a035b272408034</anchor>
      <arglist>((CInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>a5860ad3ff4658934bce6ac41c0b99848</anchor>
      <arglist>((CSignedInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KhalimskyCell</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>abe71213a8917eb4722c2174782f62075</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KhalimskyCell</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>a4d9bcd8024a56416d5176ed2cd7d6d3f</anchor>
      <arglist>(const KhalimskyCell &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KhalimskyCell</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>a301345cd5dada2afbd717cda81a2f544</anchor>
      <arglist>(const Point &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>KhalimskyCell &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>ad80a60ef27dcf25436220dc865021a2c</anchor>
      <arglist>(const KhalimskyCell &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>a290c4ab93f28dd3c7ac3b21147c3253b</anchor>
      <arglist>(const KhalimskyCell &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>a328913563dcb2e9fd01a08fb346a19cd</anchor>
      <arglist>(const KhalimskyCell &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>aa4b7d167d57f14acf387dd9526a25440</anchor>
      <arglist>(const KhalimskyCell &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>a56fca7aee5161bd061b40658794c381d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myCoordinates</name>
      <anchorfile>structDGtal_1_1KhalimskyCell.html</anchorfile>
      <anchor>a2888eee49bbe4cce3d071d93a365d739</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SignedKhalimskyCell</name>
    <filename>structDGtal_1_1SignedKhalimskyCell.html</filename>
    <templarg>dim</templarg>
    <templarg>TInteger</templarg>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>ab7b35435d043519e3e6ad32a2745317c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::UnsignedVersion</type>
      <name>UnsignedInteger</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a3393486ad64d78e47f596a9713629c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; dim, Integer &gt;</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a1e0da3db9f8fc74c7c8dce977e8c8406</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a7953b2be14e224af5a914da12a7a2b9a</anchor>
      <arglist>((CInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a76ca32e209cea2ae8df0c7946f192b77</anchor>
      <arglist>((CSignedInteger&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignedKhalimskyCell</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a07c0e9680c57f7b7535f22deab8a8a49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignedKhalimskyCell</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a2c8c440a4147d192345822ac3df1b43d</anchor>
      <arglist>(const SignedKhalimskyCell &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SignedKhalimskyCell</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>ab779e78721868dcc5680cdac6749c008</anchor>
      <arglist>(const Point &amp;point, bool positive)</arglist>
    </member>
    <member kind="function">
      <type>SignedKhalimskyCell &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a4040a4acbaa8904b8c72f804b4253e23</anchor>
      <arglist>(const SignedKhalimskyCell &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a9a79fde0386599553b10f22fb1140622</anchor>
      <arglist>(const SignedKhalimskyCell &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a8c286304e992fcb9a3fdf0258af7e15c</anchor>
      <arglist>(const SignedKhalimskyCell &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>af1affe887b34fae65fceef44d00f60f6</anchor>
      <arglist>(const SignedKhalimskyCell &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a32003a7841aa06be354e09ea76ef3fd7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable">
      <type>Point</type>
      <name>myCoordinates</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a2cf61a7c0240ea5471bb94fa9dd3a4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>myPositive</name>
      <anchorfile>structDGtal_1_1SignedKhalimskyCell.html</anchorfile>
      <anchor>a49631a932686d301e40c499d19b79c70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::CellDirectionIterator</name>
    <filename>classDGtal_1_1CellDirectionIterator.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>a3313cd2474f5acda57eb9bebbd4e2e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KhalimskyCell&lt; dim, Integer &gt;</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>a0cd7e1d4e258bcf445b3eac0920b5243</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignedKhalimskyCell&lt; dim, Integer &gt;</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>ad0162046dcf9d198e5eb4a040aa98d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellDirectionIterator</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>adc750f9f203d28ff192ec7ae081e47ac</anchor>
      <arglist>(Cell cell, bool open=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CellDirectionIterator</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>ad68e8b95b269c17b25f2d119bfc7fe12</anchor>
      <arglist>(SCell scell, bool open=true)</arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>a61218f4a07c36f7178e3f530c359ec01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>CellDirectionIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>ac030180e5f8c21a9c5e50e60be4accef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>a10e7162d876cfe49db3cdc66f735fbac</anchor>
      <arglist>(const Integer) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>aca588e6e8dc5ba9df7f283d8f8598e3d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>ab641e3d59cade294960ef5b57dfd0818</anchor>
      <arglist>(const CellDirectionIterator &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>a2154e51b4a139e55716dc340490e3b2d</anchor>
      <arglist>(const CellDirectionIterator &amp;other) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>find</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>a47723b14e9b2dd0f9b66a8e1d657f73a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Dimension</type>
      <name>myDir</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>a8149dda2dbd79809a71fbc52f4fd2c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Cell</type>
      <name>myCell</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>a37b0e3de186807514b6c24d08c95c876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myOpen</name>
      <anchorfile>classDGtal_1_1CellDirectionIterator.html</anchorfile>
      <anchor>aa55808ba830910c10296f37cbeda4c80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::KhalimskySpaceND</name>
    <filename>classDGtal_1_1KhalimskySpaceND.html</filename>
    <templarg>dim</templarg>
    <templarg>TInteger</templarg>
    <class kind="struct">DGtal::KhalimskySpaceND::AnyCellCollection</class>
    <class kind="struct">DGtal::KhalimskySpaceND::CellMap</class>
    <class kind="struct">DGtal::KhalimskySpaceND::SCellMap</class>
    <class kind="struct">DGtal::KhalimskySpaceND::SurfelMap</class>
    <member kind="typedef">
      <type>TInteger</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a1101d4adbc2a87db33afcb42209b6f04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumberTraits&lt; Integer &gt;::UnsignedVersion</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a93973417f7b05e40cb4c121eeb43f5a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KhalimskyCell&lt; dim, Integer &gt;</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>af87a8fec76262bec1a3b33881fa38f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SignedKhalimskyCell&lt; dim, Integer &gt;</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a7d26c7464cdc9dbc684472a204136128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ae4aa1c6d804b5e0ad5de4fb395a96321</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>Sign</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>adddee0465b2c14a4463e5e51647c564a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CellDirectionIterator&lt; dim, Integer &gt;</type>
      <name>DirIterator</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a1d881a05507612d89e445ec310124138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; dim, Integer &gt;</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a70d1b8007551de58a7b8ccee328bed00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; dim, Integer &gt;</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ad73ce442a5ecb094572646903f561cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceND&lt; dim, Integer &gt;</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ab2215bc032ca075e029b33eaf129feec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KhalimskySpaceND&lt; dim, Integer &gt;</type>
      <name>KhalimskySpace</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a8a45c392ff1385e6a3e6cf6f69f16e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AnyCellCollection&lt; Cell &gt;</type>
      <name>Cells</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>afbb82ddbe915a3a4a4f6ecea1ad873ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AnyCellCollection&lt; SCell &gt;</type>
      <name>SCells</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>abe54e4a551cce2d23fc06bd047eee2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Cell &gt;</type>
      <name>CellSet</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aadff976a31587821f9a7e9f280c9700a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; SCell &gt;</type>
      <name>SCellSet</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ae6cf442a7d0a46d254f9fbdd7237ab11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; SCell &gt;</type>
      <name>SurfelSet</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a0a02413be83a0f38f23ed5cb45c2bcc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KhalimskySpaceND</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a90519742b52c197a541ffa55e0ddb789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KhalimskySpaceND</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a32ffd0fd1c11929c18bc27903f5f1375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KhalimskySpaceND</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a201b1a0ef3d8a2b0e088a92a09ac817e</anchor>
      <arglist>(const KhalimskySpaceND &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>KhalimskySpaceND &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a37f5d01daff8ab8e55f3a8133c7f5fb6</anchor>
      <arglist>(const KhalimskySpaceND &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a9a6662eec886590d91ad5097bbfe1859</anchor>
      <arglist>(const Point &amp;lower, const Point &amp;upper, bool closed)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a552e8d952d3ea53c56ba6df89c32f89e</anchor>
      <arglist>(Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>min</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a6f1baeee75d47601427e88df76e29f4f</anchor>
      <arglist>(Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>max</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ad8bdd8a607c41497fecf32b90852b42b</anchor>
      <arglist>(Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>lowerBound</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>adf9988749c914b4e7f8116c076fe0c4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Point &amp;</type>
      <name>upperBound</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a863b4c4d1c85ec943e98214988c2a678</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Cell &amp;</type>
      <name>lowerCell</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a431bc3bd4faa44def7a663a7f9dfbcfd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Cell &amp;</type>
      <name>upperCell</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>afcf9e4346ae5c81751b53533224bc696</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSpaceClosed</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ac5bb678e192cf79b62213ef9673162d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uCell</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aff1a33ccc713c2a00e3ab73ea44e1e69</anchor>
      <arglist>(const Point &amp;kp) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uCell</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a5403d5efcee07144b3f0e8787be5ac8d</anchor>
      <arglist>(const Point &amp;p, const Cell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sCell</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a1223cf533c27e6670e4c3455f27fdac1</anchor>
      <arglist>(const Point &amp;kp, Sign sign=POS) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sCell</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a66061ed13896fac26f4221da6ad39c2c</anchor>
      <arglist>(const Point &amp;p, const SCell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uSpel</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a255ac161cb44b2a8634529a5717dde67</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sSpel</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a7e96bae62af1a14ff0d06126351694ae</anchor>
      <arglist>(const Point &amp;p, Sign sign=POS) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uPointel</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a369b2eebcc3c692d0e029e677817574f</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sPointel</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aa0ff427be9e99b6b7fe12687c788bfdb</anchor>
      <arglist>(const Point &amp;p, Sign sign=POS) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>uKCoord</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a001b7b05ee1817e77da45a6b414036fa</anchor>
      <arglist>(const Cell &amp;c, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>uCoord</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>acae38f62d4e607176ce34138d0a792c9</anchor>
      <arglist>(const Cell &amp;c, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>uKCoords</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a590277e6a16eef3aec269401a6f9d5fa</anchor>
      <arglist>(const Cell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>uCoords</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ae703e3f5da68aad8e4b9e0df60cd2126</anchor>
      <arglist>(const Cell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>sKCoord</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ae1fb74b3d118d4fe8a73e2403555cf96</anchor>
      <arglist>(const SCell &amp;c, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>sCoord</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ab56a7904ee4c1192052c507c2d811379</anchor>
      <arglist>(const SCell &amp;c, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>sKCoords</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aa4c3df21b31c40827b62a1baaebcf857</anchor>
      <arglist>(const SCell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>sCoords</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>af5e51115159abc3106c402e68b26128b</anchor>
      <arglist>(const SCell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Sign</type>
      <name>sSign</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a54c6096b1edfe75de6c5d746fb592d50</anchor>
      <arglist>(const SCell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uSetKCoord</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a66dacf50f409d7d05547cf54f50f4709</anchor>
      <arglist>(Cell &amp;c, Dimension k, const Integer &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sSetKCoord</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a423e59e5c25a221c29a6b6d77f6ed589</anchor>
      <arglist>(SCell &amp;c, Dimension k, const Integer &amp;i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uSetCoord</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a3e7f323e3913d031caa561799c59bfe0</anchor>
      <arglist>(Cell &amp;c, Dimension k, Integer i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sSetCoord</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a92f1e9b9242944121a41640a4e149e53</anchor>
      <arglist>(SCell &amp;c, Dimension k, Integer i) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uSetKCoords</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ad9e8fd86c485107918908f95a3886448</anchor>
      <arglist>(Cell &amp;c, const Point &amp;kp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sSetKCoords</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ae622350e3cd33ff6241bec0dee480721</anchor>
      <arglist>(SCell &amp;c, const Point &amp;kp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uSetCoords</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a76fb0b8ab89bacff5113599ec3851493</anchor>
      <arglist>(Cell &amp;c, const Point &amp;kp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sSetCoords</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a695ad71f24bf5e9aaa1069d66916574f</anchor>
      <arglist>(SCell &amp;c, const Point &amp;kp) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sSetSign</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>afb9765a9e4386cc599824f8356a61cce</anchor>
      <arglist>(SCell &amp;c, Sign s) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>signs</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>afbe88ffc6984bc3dcdc927e01970e67a</anchor>
      <arglist>(const Cell &amp;p, Sign s) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>unsigns</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>afeb509567bc8f9cf144b2192893122b8</anchor>
      <arglist>(const SCell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sOpp</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a86c0e1e388c8c5965f4d862ee62e2aed</anchor>
      <arglist>(const SCell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>uTopology</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>adab5baa58d76e0645b15df983af1d322</anchor>
      <arglist>(const Cell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>sTopology</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a7218b1d15a79913765323fdaa7062652</anchor>
      <arglist>(const SCell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>uDim</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a2330dc5dba382df89801c4e420f95fa8</anchor>
      <arglist>(const Cell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>sDim</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a7724461b1404a6db561c49fd2c918d8a</anchor>
      <arglist>(const SCell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uIsSurfel</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a2b26a666325e58542d9179fa48a189e6</anchor>
      <arglist>(const Cell &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sIsSurfel</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aaebcb89aad612c1adb6dfc794377d312</anchor>
      <arglist>(const SCell &amp;b) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uIsOpen</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a306243a1f17fc7c93c1be8d57e77d558</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sIsOpen</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aec8d78fc82b601e757aaca3d3c3de08d</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>uDirs</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a929b4f7aaa63e05dd48b34001725e9c0</anchor>
      <arglist>(const Cell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>sDirs</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a133ef989d9450848c100954c13f45a6e</anchor>
      <arglist>(const SCell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>uOrthDirs</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a50fefabbe426937d449313b70b3018a6</anchor>
      <arglist>(const Cell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>DirIterator</type>
      <name>sOrthDirs</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a5090c62eee1d210794fabd73243a9557</anchor>
      <arglist>(const SCell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>uOrthDir</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a575c42b482a830503488c4119cabf448</anchor>
      <arglist>(const Cell &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>sOrthDir</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a3392f23617850b7f2592fc26c2fced19</anchor>
      <arglist>(const SCell &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uFirst</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a0f16991a3dfed6d188df65dc031a4de5</anchor>
      <arglist>(const Cell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uLast</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a638a3d5d84d1a7c5dbf1044540d26026</anchor>
      <arglist>(const Cell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uGetIncr</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ad9c5bbffb14d6f716e2eaa87a78f7281</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uIsMax</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>af0bfa8affa5cc093ac4456fdde06b39d</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uIsInside</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a00e5ad876fd189916794d4176a9bb72d</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uGetMax</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a91a1010c8cb4f67740a9ae1cb304c0ec</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uGetDecr</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ad482a39e3ad8e3bf9fc1566f8b16612f</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uIsMin</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ad9ea6898b5b8a0098ff5446a33798dd6</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uGetMin</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aad292f917bdcb9feedb9bfcd59d619e4</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uGetAdd</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a18a7e614f3065fc4e755735c229c7a00</anchor>
      <arglist>(const Cell &amp;p, Dimension k, const Integer &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uGetSub</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a5ede2674b177b0476e13d464fd75b127</anchor>
      <arglist>(const Cell &amp;p, Dimension k, const Integer &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>uDistanceToMax</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ac36a173c1237e7030dccf99aa9c53d4e</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>uDistanceToMin</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a6cfa3f390686cbb8451f0fceb581ecdf</anchor>
      <arglist>(const Cell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uTranslation</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a00e26ac349a1713ae774fb9cbf83fddc</anchor>
      <arglist>(const Cell &amp;p, const Vector &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uProjection</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aee5c196ba58e4b9ddde0bf385dd8cb56</anchor>
      <arglist>(const Cell &amp;p, const Cell &amp;bound, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uProject</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a8d70ab5efae988a51f29af0393e5a07d</anchor>
      <arglist>(Cell &amp;p, const Cell &amp;bound, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uNext</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a9a74704846e251a9e18e12f96a36d690</anchor>
      <arglist>(Cell &amp;p, const Cell &amp;lower, const Cell &amp;upper) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sFirst</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a508558a8b4dbd032bbf00d10b4d348a6</anchor>
      <arglist>(const SCell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sLast</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ac72f3ef2e706e359d304795fa581fabc</anchor>
      <arglist>(const SCell &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sGetIncr</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a5c588209032cb8f080e47b2fb1402a6f</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sIsMax</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a0117478b026c3ecf76c80e6a131d798a</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sIsInside</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a23f536fcbd11596cdda7a5b2605f9e2e</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sGetMax</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ad712a78be17810a79144bf978cd81a52</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sGetDecr</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a001b20467a324de004e84f7c73c9b60a</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sIsMin</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a4e484ff3a98dbe0ac0a611f6f85d1d00</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sGetMin</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ad52a7d33eec034b1233bd852602e5239</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sGetAdd</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a7e0c0f75960316a89239135b0c5404fb</anchor>
      <arglist>(const SCell &amp;p, Dimension k, const Integer &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sGetSub</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a3ef0b3058e2f682cf598662c5e0f5ca9</anchor>
      <arglist>(const SCell &amp;p, Dimension k, const Integer &amp;x) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>sDistanceToMax</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aa013ebe89ac6a16fd228e66f3f8e28ae</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>Integer</type>
      <name>sDistanceToMin</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>acb5e079514cb6038579d5fa1fadf9330</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sTranslation</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>acec217f9664c2fc9f23683cc711c3cf4</anchor>
      <arglist>(const SCell &amp;p, const Vector &amp;vec) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sProjection</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a2a52f8c460e92fafc1063e26884438ee</anchor>
      <arglist>(const SCell &amp;p, const SCell &amp;bound, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sProject</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a3d8482b853751e72521f25c31f430359</anchor>
      <arglist>(SCell &amp;p, const SCell &amp;bound, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sNext</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a948cae7017a79ecbaa9467640242a3ef</anchor>
      <arglist>(SCell &amp;p, const SCell &amp;lower, const SCell &amp;upper) const </arglist>
    </member>
    <member kind="function">
      <type>Cells</type>
      <name>uNeighborhood</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a9f94c85f58807a4aa508a964e6f11737</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>SCells</type>
      <name>sNeighborhood</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>af699c6fa77c4bfecfecc66fa49539784</anchor>
      <arglist>(const SCell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>Cells</type>
      <name>uProperNeighborhood</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a389e3a9806106af457d0ae765646dbc9</anchor>
      <arglist>(const Cell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>SCells</type>
      <name>sProperNeighborhood</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a4420ae8d3d9972c89f6acf57127cf247</anchor>
      <arglist>(const SCell &amp;cell) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uAdjacent</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a18f3719c4d7d523726156f47b3a0fbcb</anchor>
      <arglist>(const Cell &amp;p, Dimension k, bool up) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sAdjacent</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a6d4515295f6b0dd4d31f13a063af70b5</anchor>
      <arglist>(const SCell &amp;p, Dimension k, bool up) const </arglist>
    </member>
    <member kind="function">
      <type>Cell</type>
      <name>uIncident</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a3b0b9af32eb5003d657f5a9ba90cec4c</anchor>
      <arglist>(const Cell &amp;c, Dimension k, bool up) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sIncident</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a085e79ad476f836d879ff366d9dbe966</anchor>
      <arglist>(const SCell &amp;c, Dimension k, bool up) const </arglist>
    </member>
    <member kind="function">
      <type>Cells</type>
      <name>uLowerIncident</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ac429cdca60c5b853c9fc4a50116619ce</anchor>
      <arglist>(const Cell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Cells</type>
      <name>uUpperIncident</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aeae345c5ff7b1376b53ba6f4caf15077</anchor>
      <arglist>(const Cell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>SCells</type>
      <name>sLowerIncident</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a63dae1ad6c18b8111abad30e1588ade5</anchor>
      <arglist>(const SCell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>SCells</type>
      <name>sUpperIncident</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a69c35e0c27cdbdf4e83a77f357349a29</anchor>
      <arglist>(const SCell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Cells</type>
      <name>uFaces</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a91cfff3ce98d13a546dfc4f195fb7812</anchor>
      <arglist>(const Cell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>Cells</type>
      <name>uCoFaces</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ab7e019d99972c3058797fe783ef5faf4</anchor>
      <arglist>(const Cell &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sDirect</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aac64aaa55d118a6c8beec0b0cfcdb5b1</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sDirectIncident</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a3866fdb4505dded79a0eb085db2690f6</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>sIndirectIncident</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ade5051d2db70b9e44bfe700a7c442070</anchor>
      <arglist>(const SCell &amp;p, Dimension k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a809ac839ba4bbf9113782383964ac2a9</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a6e894c16a0838342ba7a1fe1391c5f30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a1d8e26be840d73704262d2238453d6dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dimension</type>
      <name>DIM</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aa28d289b98c2289026eacb0ccc7ecc8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Sign</type>
      <name>POS</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a35b73a2846db17d70c95c2c7ca05e0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Sign</type>
      <name>NEG</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>af2a6f7fd37be7630478aa1996f7fc7db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a8a8dabe6ecf447b86c954367d1112a83</anchor>
      <arglist>((CCommutativeRing&lt; TInteger &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myLower</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a376ee8a1c54ba52382696f08c960a34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myUpper</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a955497f01179b96e20081817cc5db1d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Cell</type>
      <name>myCellLower</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>a7ea1f4234053d2263be7bef65f297b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Cell</type>
      <name>myCellUpper</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>ad9e217bbdd2dd79a62c9d2594e495cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myIsClosed</name>
      <anchorfile>classDGtal_1_1KhalimskySpaceND.html</anchorfile>
      <anchor>aaf7721c9dc746633f7feabb20de8dff2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::KhalimskySpaceND::AnyCellCollection</name>
    <filename>structDGtal_1_1KhalimskySpaceND_1_1AnyCellCollection.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CellType</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1KhalimskySpaceND_1_1AnyCellCollection.html</anchorfile>
      <anchor>abf93db445434cf694400fc1d560e5648</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; CellType &gt;</type>
      <name>Container</name>
      <anchorfile>structDGtal_1_1KhalimskySpaceND_1_1AnyCellCollection.html</anchorfile>
      <anchor>ad05b419429b68577ee1084c73a29c0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; CellType &gt;::iterator</type>
      <name>Iterator</name>
      <anchorfile>structDGtal_1_1KhalimskySpaceND_1_1AnyCellCollection.html</anchorfile>
      <anchor>aee47950fd6c27747ea1bab6817611bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::deque&lt; CellType &gt;::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>structDGtal_1_1KhalimskySpaceND_1_1AnyCellCollection.html</anchorfile>
      <anchor>a45ec36aeb8257574b2871549efdf4c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>elements</name>
      <anchorfile>classstd_1_1deque.html</anchorfile>
      <anchor>a090b92581de438d2e14bedc190f0b0f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::KhalimskySpaceND::CellMap</name>
    <filename>structDGtal_1_1KhalimskySpaceND_1_1CellMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; SCell, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1KhalimskySpaceND_1_1CellMap.html</anchorfile>
      <anchor>ade6f3c1fffa7f92fbdb3134c45233800</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::KhalimskySpaceND::SCellMap</name>
    <filename>structDGtal_1_1KhalimskySpaceND_1_1SCellMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; SCell, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1KhalimskySpaceND_1_1SCellMap.html</anchorfile>
      <anchor>a74831d43927266352100df90de1c6787</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::KhalimskySpaceND::SurfelMap</name>
    <filename>structDGtal_1_1KhalimskySpaceND_1_1SurfelMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; SCell, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1KhalimskySpaceND_1_1SurfelMap.html</anchorfile>
      <anchor>a9a4bbe7070588d79b195198674bfc641</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LightExplicitDigitalSurface</name>
    <filename>classDGtal_1_1LightExplicitDigitalSurface.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TSurfelPredicate</templarg>
    <class kind="class">DGtal::LightExplicitDigitalSurface::Tracker</class>
    <class kind="struct">DGtal::LightExplicitDigitalSurface::VertexMap</class>
    <member kind="typedef">
      <type>LightExplicitDigitalSurface&lt; TKSpace, TSurfelPredicate &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>ad9977b8d0634c583c9d666f8f0ef57b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>ad4881d8da24db152e651eedb0d7be8c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a0b2fb6a8f41fd5e1ec7a36c98554e7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a894fcc0ea6cc04861bfa4d501033d840</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSurfelPredicate</type>
      <name>SurfelPredicate</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a5f80de28e473c2c82ca9ce7373b225a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelAdjacency&lt; KSpace::dimension &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a618ce82b1b0543f4702d25b6c91a88f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>aa742ca20af46c23b49cdc3b3ac94da7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a882f6d915a6577425c55bfedb56b23a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::CellSet</type>
      <name>CellSet</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a8b2ba80e16be8ad7842225e2dd8f6855</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCellSet</type>
      <name>SCellSet</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a3b035a1b2575bf28461a76523941d6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Surfel</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a3c49c560b85e51df4def3eca3c4c8003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCellSet</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a37882ce2d28d33bc235261325f3b1448</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BreadthFirstVisitor&lt; Self &gt;</type>
      <name>SelfVisitor</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a263f9b370be4bb34313864292b65161a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SelfVisitor::VertexConstIterator</type>
      <name>SurfelConstIterator</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>ab6835ea8f73bc3618b52c7708b5d5c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>aaf6c92d7336be9813de89ad0d1a9e538</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>ae6710b468fcf2fe4c757e6d6900f956c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a98648fa4286fb636d67acefb251ae868</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a9b06690ed1f65b28665db63230897ceb</anchor>
      <arglist>((CSurfelPredicate&lt; SurfelPredicate &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LightExplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a7c7cbfd10349ec64497c316be88af26f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LightExplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a550ce750918fea90976cc06652927c49</anchor>
      <arglist>(const LightExplicitDigitalSurface &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LightExplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>ab9e0372e9589bf2548329536d7ad165a</anchor>
      <arglist>(const KSpace &amp;aKSpace, const SurfelPredicate &amp;aSP, const Adjacency &amp;adj, const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>aa2bf295506f4108c7bc78b1c23e4f57e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a9d4d2f8f1fa699e498bc1bd2b4538814</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SurfelPredicate &amp;</type>
      <name>surfelPredicate</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a933f73d88c7fa880f34aca04e383ffb9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Surfel &amp;</type>
      <name>surfel</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a04bf57b029b3d9ea5af25ee1748506df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSurfel</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>ae9b5886b039b4f69d09876fd23404763</anchor>
      <arglist>(const Surfel &amp;aSurfel)</arglist>
    </member>
    <member kind="function">
      <type>const KSpace &amp;</type>
      <name>space</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a429fa29c40f4ceea6c97c6a9f9d5e845</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a09abbb44874bcadf908ba9a51db5a4d5</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a3f92cad9a0a492cd90163464549114d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a6eac01d7f2aa50bd873b87becaf4f04b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>nbSurfels</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>aa3dfee73c3866ad77a86fc0df27925a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a1e3b0ba916b804cbf2b5e48acb88b2a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DigitalSurfaceTracker *</type>
      <name>newTracker</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a7fe40c9a7f5c0e91168863c4f89a3e47</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Connectedness</type>
      <name>connectedness</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>ab4a0b9e4a2e45b318096427eedc537e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>ab03940cdc0f2fbd2258325f2e1011455</anchor>
      <arglist>(const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>ac7d9b7c9961423dfd71d5328bfbb2d36</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a32920d2e763316ff743161a9959023ea</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred) const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a4a57ab5a4820cadd3ba5f25b52d78d10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a0f9753326f17292d99cdd11c245c46e8</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a762dd67c37ad0eb3ef44a7f893a089e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>LightExplicitDigitalSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a60f4721a8e3d61991e4cd1c685884817</anchor>
      <arglist>(const LightExplicitDigitalSurface &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace &amp;</type>
      <name>myKSpace</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a7ed97c395bd8fc7a5e3ccab4d8f08f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SurfelPredicate &amp;</type>
      <name>mySurfelPredicate</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a7536329ae0f310284b195d9d0142e92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Adjacency</type>
      <name>mySurfelAdjacency</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a76692d80306afbb6753a81d09bd09350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Surfel</type>
      <name>mySurfel</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>a311cccb74b30892daee0fabfa0bed952</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Tracker</type>
      <name>myTracker</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface.html</anchorfile>
      <anchor>af1e555d14385b7e12350db0aacc23886</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LightExplicitDigitalSurface::Tracker</name>
    <filename>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</filename>
    <member kind="typedef">
      <type>Tracker</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>ac58275b596d56083586a26830f1159f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightExplicitDigitalSurface&lt; TKSpace, TSurfelPredicate &gt;</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>ad59d27b5ed3aad2ce3a922f0f7034004</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a294d364e2f86b2544d3545970659972d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a927860d628b81377b46f5a35f9998ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelNeighborhood&lt; KSpace &gt;</type>
      <name>Neighborhood</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a9c2558d659b544d3a00ed38ebee10596</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a7d66757348d5e380b4bb9f9e8b88b38e</anchor>
      <arglist>(const DigitalSurfaceContainer &amp;aSurface, const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a0fd00033b9b1a55b76620578608e004a</anchor>
      <arglist>(const Tracker &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tracker</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a65541138e6f571ff8296889221860926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>surface</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>af8446d9361a5086a2d0c53cca1668cf7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Surfel &amp;</type>
      <name>current</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a17db7149618beda6d5625e7cdfafe276</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>orthDir</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a8e44993724a527987ad9bf3b80daa820</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a568f9ead359535c025e1ef8f1758d9f1</anchor>
      <arglist>(const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>adjacent</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>add20de5784a6d1d9e94a2d59b4fdd72f</anchor>
      <arglist>(Surfel &amp;s, Dimension d, bool pos) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>mySurface</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a24dc8c13720c37de276fe8a3847db611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Neighborhood</type>
      <name>myNeighborhood</name>
      <anchorfile>classDGtal_1_1LightExplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a26224e25996fa3d4a59217a4475cecd8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LightExplicitDigitalSurface::VertexMap</name>
    <filename>structDGtal_1_1LightExplicitDigitalSurface_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KSpace::template SurfelMap&lt; Value &gt;::Type</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1LightExplicitDigitalSurface_1_1VertexMap.html</anchorfile>
      <anchor>a1089585a014d0195f9b7573e0ff845c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LightImplicitDigitalSurface</name>
    <filename>classDGtal_1_1LightImplicitDigitalSurface.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TPointPredicate</templarg>
    <class kind="class">DGtal::LightImplicitDigitalSurface::Tracker</class>
    <class kind="struct">DGtal::LightImplicitDigitalSurface::VertexMap</class>
    <member kind="typedef">
      <type>LightImplicitDigitalSurface&lt; TKSpace, TPointPredicate &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a1fae0c8534ca02d0a87eebb3588282ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>adc0d4cea6c9352dbafdb742243693521</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>ac8477587a6233296a5ab7f7eb54702a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>ac4e3383024e496e399c2af523b30bdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPointPredicate</type>
      <name>PointPredicate</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>ac9b3c6a282c3edcd90c35846b504a6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelAdjacency&lt; KSpace::dimension &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a504e4c08cbd245c8676a5739bc14078c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a4051dd4a53f2c33511681028c67536c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a15983b65a5df32b045ce6e816af9b2e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::CellSet</type>
      <name>CellSet</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a213629a00f55b9c37c67df76f88b626a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCellSet</type>
      <name>SCellSet</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>af11a08846ccaffa71def2f4515c412fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Surfel</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a9dfe1a3c8817e9ebb44513d4976365ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SCellSet</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a95064424722270414a3910c5cf5727d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BreadthFirstVisitor&lt; Self &gt;</type>
      <name>SelfVisitor</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a94b4731969b8527a2b0fc137b1160a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SelfVisitor::VertexConstIterator</type>
      <name>SurfelConstIterator</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a95d1b57cc2a2664ea48fa6ccc94268ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>addca43f5b0282a3e76c4aae175f161ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a11622e5639d3efe9b172492304976cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>ad7cd02363f5a355215320fb341eee219</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>ab8082d0a06dc74e683d300ed96360938</anchor>
      <arglist>((CPointPredicate&lt; PointPredicate &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LightImplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a81bbd2acf6d9fc4492254f1f8b997351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LightImplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>ad8892d7a31dc1e18ddcbf6c19465317e</anchor>
      <arglist>(const LightImplicitDigitalSurface &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LightImplicitDigitalSurface</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a88fb8bca4600e6d4c06ee7c09cad5841</anchor>
      <arglist>(const KSpace &amp;aKSpace, const PointPredicate &amp;aPP, const Adjacency &amp;adj, const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>const Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a2b10b4dd2f1580f87e7f8fc0d8929247</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>aa2729d4425e84ad478ee9cbd509147af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PointPredicate &amp;</type>
      <name>pointPredicate</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a8c5e09b3fb4bfbb365548ec0708eaf21</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const KSpace &amp;</type>
      <name>space</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a11a759628637d65a70ade85b41015bf2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>aaddd17229d011366524d7f3455e2e36b</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a6c8863be2681c672834792c360788293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a008ed486f2d1814be4d971f0ef7ff506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>nbSurfels</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a1563ca1d1344cc574a88f8a76b0233f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a7411767a62fb2e4f30c1247e7507db6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DigitalSurfaceTracker *</type>
      <name>newTracker</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>aa73f5aa0b79ceff5cbbd249ddaef5fd0</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Connectedness</type>
      <name>connectedness</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a78a8f18fd140dd8fd2ee7102c6d04718</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a0068dcf200822ac600f57d81eebd61a7</anchor>
      <arglist>(const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>ae09588a7258acebe15afc7373a85b4f1</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>aee2234cac2ddb7119256993d96165dae</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred) const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>aee82f21190ae1cbd2ac19448799cd791</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a2b639b42133217a3124a0f8448f89138</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a4f867fc6a07770d9771569b3c8b69fb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>LightImplicitDigitalSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>aac6d71e581c68389fe68ac378f5ac102</anchor>
      <arglist>(const LightImplicitDigitalSurface &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace &amp;</type>
      <name>myKSpace</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>afee7473944928038d0621e41ffebd24f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const PointPredicate &amp;</type>
      <name>myPointPredicate</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a412bc568c58a920d5949e492488ca696</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Adjacency</type>
      <name>mySurfelAdjacency</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>aaa5d61de9ccf5c0eb8eeed611909a440</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Surfel</type>
      <name>mySurfel</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a814139b2452e7bc63cecbafd940f8202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Tracker</type>
      <name>myTracker</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface.html</anchorfile>
      <anchor>a723edc44814c6651dfe8c00a86d8ba27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::LightImplicitDigitalSurface::Tracker</name>
    <filename>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</filename>
    <member kind="typedef">
      <type>Tracker</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a6aa2daede89c6d7c35ff56a479630a2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LightImplicitDigitalSurface&lt; TKSpace, TPointPredicate &gt;</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a2d53160b955d71ccaf3e9b31ad32858f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a8902af5d32fabb633cde662d97121d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a0821feb87bc49c2307265315935af718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelNeighborhood&lt; KSpace &gt;</type>
      <name>Neighborhood</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a54b3df364ddcd005c29a999f7f125722</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a6ca401ca4452f3b2355e5f6632c6a0cb</anchor>
      <arglist>(const DigitalSurfaceContainer &amp;aSurface, const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a8ac627bd2104176b178604d8a26ae577</anchor>
      <arglist>(const Tracker &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tracker</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a9b4f23df75e740cdc200f82e48564532</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>surface</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>aa76eb33be7d044b49d8d74c92f5f9297</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Surfel &amp;</type>
      <name>current</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a759760a2a9642350b07b3bf0621a6216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>orthDir</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a5246bb027a3e608633f487aad42949c8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a5b66e8798060231b1b302ab2b6490d73</anchor>
      <arglist>(const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>adjacent</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>a47b6e497d869e472013d5203397e2968</anchor>
      <arglist>(Surfel &amp;s, Dimension d, bool pos) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>mySurface</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>aa1bda29daae49ac0b022913ea8bdcfd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Neighborhood</type>
      <name>myNeighborhood</name>
      <anchorfile>classDGtal_1_1LightImplicitDigitalSurface_1_1Tracker.html</anchorfile>
      <anchor>ab44d9b44266f40a911b568e864f49e8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::LightImplicitDigitalSurface::VertexMap</name>
    <filename>structDGtal_1_1LightImplicitDigitalSurface_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KSpace::template SurfelMap&lt; Value &gt;::Type</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1LightImplicitDigitalSurface_1_1VertexMap.html</anchorfile>
      <anchor>a0e76ea96420615c34fdb1bc5cf7dc3cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MetricAdjacency</name>
    <filename>classDGtal_1_1MetricAdjacency.html</filename>
    <templarg>TSpace</templarg>
    <templarg>maxNorm1</templarg>
    <templarg>dimension</templarg>
    <class kind="struct">DGtal::MetricAdjacency::VertexMap</class>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>aee91f5a79fbef533d47e70ebeaf5cd72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a57b41d78afbb6036dd7368bac94ad9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, maxNorm1, dimension &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>ad746d7e87b616b9f725b3e9755575790</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a3f91595adc533f247db3f1f0db384dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a8357961e594bd3bbe64d62f77b52332e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a1275aaeeca65ff595ea40eb99c134c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Vertex &gt;</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>ae4290daf19ce9f72322de8f6ab3dda40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a480224d6f601a7dd9c3be95586b5d2c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a79c6c43d2d8485e90988036d188407b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a31b5d4a007f50ffcac0984689efd294a</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProperlyAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a0c4d332d8cf195275857cff10fae7dbe</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a47e1a6349185174813d874765f907102</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a0d1cb842e1a6e81b75a3f4e49e84047b</anchor>
      <arglist>(const Vertex &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>aa18759fee19efd4511fe98029c356ac6</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>ab2d22bd6eb04e2c34ac6d850210c643b</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>ab41344b86cbb0fd963accf40d9311158</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a38a65bfe4c298b15d58f9171f44e59d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Size</type>
      <name>computeCapacity</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>a2bdde0e88d85b13c68e6a1ecb5395acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>aa7380be621740bcea2a12222e826eecc</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>ad2ae2f634143c750b387fc299b878266</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MetricAdjacency &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MetricAdjacency.html</anchorfile>
      <anchor>ad463057ad4535f5d660c29496b04f3c5</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MetricAdjacency::VertexMap</name>
    <filename>structDGtal_1_1MetricAdjacency_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; Vertex, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1MetricAdjacency_1_1VertexMap.html</anchorfile>
      <anchor>a6e084b7b3b4d39d583e2688cc96eff25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MetricAdjacency&lt; TSpace, 2, 2 &gt;</name>
    <filename>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</filename>
    <templarg></templarg>
    <class kind="struct">DGtal::MetricAdjacency&lt; TSpace, 2, 2 &gt;::VertexMap</class>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a3f2a056816bd20d94e33d2e9246eaf82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a55999365b8c652c82a2fdaf491e4431d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 2, 2 &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a5abcbd02f3145c4625254be797d364e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a50454332484a7d5cdc517a8798c0d736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a0d6673269ea0489c4ca8e98e1f8c28c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>ab16fae6d0d75c710121988f447a0f7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>afce320fbb31c01ad76e65923a76bb9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Vertex &gt;</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a51b4acf42cf8b73f96603ef3dac46913</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a794fca13dc0a8e4e2c739c014b279bee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a8a107e25a8580f66f9fabf04adadf386</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a3688e854fc7e29670f85d49edab94f12</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProperlyAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a6c24fdfbc4f396e7a087457fb0489aae</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a054807342e26d759554c5f15ad67bae8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a0ecd4ef1d8d8d012e5cf0ee5b3e596c5</anchor>
      <arglist>(const Vertex &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a895cf5d246c5d9a123b221d82267812d</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>aa25d43e7ecc98fadefcbdaf7be1aec02</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a1e18b9c5856ba7457a9656fdafe7789b</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a5e8cd07e6b2459a0a0a1dbe31313c923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a75091634e8d1eaabcab7a5d8a798f692</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>af1f4ed72af991be657f26fe719bb2974</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MetricAdjacency &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4.html</anchorfile>
      <anchor>a82f9053553074f9598f64f5845ef0c86</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MetricAdjacency&lt; TSpace, 2, 2 &gt;::VertexMap</name>
    <filename>structDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; Vertex, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_012_01_4_1_1VertexMap.html</anchorfile>
      <anchor>a2cf932f1eaa020129cc7d033964291d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MetricAdjacency&lt; TSpace, 1, 2 &gt;</name>
    <filename>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</filename>
    <templarg></templarg>
    <class kind="struct">DGtal::MetricAdjacency&lt; TSpace, 1, 2 &gt;::VertexMap</class>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>a53fb8440497ecd957afe6c6ac6d7dee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>a36fd358d5c38be9cf646b061617d6b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 1, 2 &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>acc56bfba3e90afaf1a1fa952c70f475e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>ad2277670f08bd4ce8facdd56c37ce486</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>aad0a3723c8c4e4abb1d9503aafe17b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>ade98f93dd9eca66a59fb4c349f3c5c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>a4e295575e864b4be1223a91cd1a36689</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Vertex &gt;</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>af30c8e0ea5e8ca9dccbb7988366dbf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>a7a2d118c73f63879ea97bce6e1d64824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>aa73e131552ea6966345bed9375e51a7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>a3ec20344dd9986cb4ff5618a85a47727</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProperlyAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>a08cd7adb85742a8a6a29326e6d345692</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>aca8216aacc2dd753a5d9c4fde5562b84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>afd2cfd08c305f3197d9b42f5665109c2</anchor>
      <arglist>(const Vertex &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>ac8bd43119e18694bf769948e08235e88</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>acc696480323f96200535bc778d570819</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>ad8e6d41f70b009fbf53d0601a7b9efe9</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>ac750a7daf6c0c1a050689c3f4bf32460</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>abdbf3326a83ab483ee37bd343c6c48cc</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>a5cb111d9d39ee75a9c52bcc53e784cc9</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MetricAdjacency &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4.html</anchorfile>
      <anchor>a232ec03178c44988e832e14471775d4e</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MetricAdjacency&lt; TSpace, 1, 2 &gt;::VertexMap</name>
    <filename>structDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; Vertex, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_012_01_4_1_1VertexMap.html</anchorfile>
      <anchor>adf33bda40f6cf3516b3d0c79a2e123bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MetricAdjacency&lt; TSpace, 3, 3 &gt;</name>
    <filename>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</filename>
    <templarg></templarg>
    <class kind="struct">DGtal::MetricAdjacency&lt; TSpace, 3, 3 &gt;::VertexMap</class>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a8bc04c09c6a63d136c6fd0e5b2aee6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a4347a82930a412b64fdea9ca3ab7034c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 3, 3 &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>ab38121d4149e4471c29fed38d6a2f5c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a519676e19ddb507d2bf6cc084777f213</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a6938eb537e45c90c52aa998ca866ed85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a7b4bf67af1d29bb18e0c3e67da02ba78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a5df79d52a7986c86c772193110eb91cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Vertex &gt;</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a14deab6a5deb288f3d33975a30669400</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>aab74752d409e88f160ba12e588c6c467</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a5c9dbea5f0cb1636007373e1b91fe13e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a2fcbbb9344eb39b96d55ef33f2669cb0</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProperlyAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a6688b15f9b21092ff2fabb3605917907</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a14dacac300809a0d7c2e489535a8a191</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a98695221685e3d8e786eac5d3eeb8543</anchor>
      <arglist>(const Vertex &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a8a2c6b2d2a7cedc6cb50ab4712ad11de</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a63fcf9c969b746ad1ad7213eb0fcfa8d</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a1723850c3bd26ab7c57add7d83349ae4</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>ae61e2d5ec43d67ee9e676bad7de0bad1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a2c615fbe3b69380d6ee84830bb54af19</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a712d5a8dbdae092e1589dd8407337527</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MetricAdjacency &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4.html</anchorfile>
      <anchor>a38866db4e68bf0c4ed0554c8fc6fcb32</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MetricAdjacency&lt; TSpace, 3, 3 &gt;::VertexMap</name>
    <filename>structDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; Vertex, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1MetricAdjacency_3_01TSpace_00_013_00_013_01_4_1_1VertexMap.html</anchorfile>
      <anchor>ab73bbecb75729590cdb0d38ac6405379</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MetricAdjacency&lt; TSpace, 2, 3 &gt;</name>
    <filename>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</filename>
    <templarg></templarg>
    <class kind="struct">DGtal::MetricAdjacency&lt; TSpace, 2, 3 &gt;::VertexMap</class>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>ac438cdb50e75e086d7b85a90a5d8e891</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a148b6ecd086a11ee03105ba23dad9e65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 2, 3 &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a6b9a0c2d9692f2c4e2e1ad9e071d933e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a990c867b25e79a4401acd286f3d81555</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>ac70f4411e9859604d947b13561250370</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a274e60aeb881669877344f703e41dde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>afdc4890cb4efe11942550d25c657e487</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Vertex &gt;</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>ad1f65cb393642b5d16246f1aee270afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>ad4c445fbadcb24ba04c546c926e41a21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>aad556e1667a4238be661855d667c8306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a1a6cfd15fc8bf03051ba6b7e0b7c82d7</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProperlyAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a984e02e7c8406c0dd1f722a179a73b9f</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>ab00c16113a5a22223a2be746a8dacc84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a47a6a186c1210d879c1c101b5a3f4bd7</anchor>
      <arglist>(const Vertex &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a4cdad88af7ff3e85500ff22093be60e7</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a8cdf0fd68896fa0054cad169e2858295</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>aa158863609092d30ee426e3b001456e0</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>af4716257c1fd4147cfd28496c4ae2abe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a7e8a1750f3ea526361efc4700036cf05</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>a920e28fb6d51300106607302fc4f539c</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MetricAdjacency &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4.html</anchorfile>
      <anchor>ab78adc3ecc6b1caa1f49ab847f545e30</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MetricAdjacency&lt; TSpace, 2, 3 &gt;::VertexMap</name>
    <filename>structDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; Vertex, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1MetricAdjacency_3_01TSpace_00_012_00_013_01_4_1_1VertexMap.html</anchorfile>
      <anchor>a31b30e060a99a6044e0dcbc8aa13f368</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::MetricAdjacency&lt; TSpace, 1, 3 &gt;</name>
    <filename>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</filename>
    <templarg></templarg>
    <class kind="struct">DGtal::MetricAdjacency&lt; TSpace, 1, 3 &gt;::VertexMap</class>
    <member kind="typedef">
      <type>TSpace</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a6fbd46a45300f05f38f56c35cbc80fd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>ab67d1f093bc5520847d5aa300f4086b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 1, 3 &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a373f633eac4f163be51dfc44f9a7bc6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>aa71fbe185b8c05ef3c1f0a2109ec5dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>af3c4c0bd9d98aa00b903ad9793131f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>ae78e3930cce88d650573c1380b9d7c4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a69736fc6458f176aebb3a62d60c4266e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Vertex &gt;</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a8b87b63055df5b34d27686bf09063110</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a8ccd4f342d653ced3efb3bfa0406e13c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a06394869d0d0dcf6ddb8757d2e6d5af2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a51401426171dd691f6389d1f4b26b2a0</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isProperlyAdjacentTo</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>adca999854694486d5af204c030692d83</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a9cd166493c41707a3f2eb661f505e2d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a45a0f0b6bbfeccfa923565d447ece5f6</anchor>
      <arglist>(const Vertex &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a319622549f1bdf5567c4135aa95cf945</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a8bb94ed9bc0f7a8fe45f1f8ba7dfde6c</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a97b013e80ea40908841bb476336da43b</anchor>
      <arglist>(std::ostream &amp;out)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a4f42bb7877890b31fd48a9f46e8eda79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>ad85bdcfe52f6fb71dc71c86c73cfa7e5</anchor>
      <arglist>((CSpace&lt; TSpace &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MetricAdjacency</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>a517034142f857006632f68520a8f26af</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MetricAdjacency &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4.html</anchorfile>
      <anchor>abb174a254c8b3fcf23a622e4cf9fcdf6</anchor>
      <arglist>(const MetricAdjacency &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::MetricAdjacency&lt; TSpace, 1, 3 &gt;::VertexMap</name>
    <filename>structDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; Vertex, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1MetricAdjacency_3_01TSpace_00_011_00_013_01_4_1_1VertexMap.html</anchorfile>
      <anchor>ae3c81ddcbefe27dd2fb792e4167893a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::Object</name>
    <filename>classDGtal_1_1Object.html</filename>
    <templarg>TDigitalTopology</templarg>
    <templarg>TDigitalSet</templarg>
    <class kind="struct">DGtal::Object::Edge</class>
    <class kind="struct">DGtal::Object::VertexMap</class>
    <member kind="typedef">
      <type>TDigitalSet</type>
      <name>DigitalSet</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a35aa57d190f5932f404c742b5db82a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDigitalTopology</type>
      <name>DigitalTopology</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ab35178d0d0635abfa76f468dc37bedd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology::ReverseTopology</type>
      <name>ReverseTopology</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a426849b3224d442a37a7e683ed30246d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a126fafdf5d2db52447001dde04907aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a6448c64b25bdfb32ccfe9bc116147cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology::Point</type>
      <name>DTPoint</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a9c35b7e17d5a48d14e13e90dc9663875</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::Domain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ad8b10e41b1b8d838c0f026d59882a5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a9cc71dc78abd83458dc3da04611cad19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetSelector&lt; Domain, SMALL_DS+HIGH_ITER_DS &gt;::Type</type>
      <name>SmallSet</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a3d20b44ab1e9fe03e32949bd1db5ee78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology::ForegroundAdjacency</type>
      <name>ForegroundAdjacency</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>adf999422bdd28b628a386d5f4d3d5dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology::BackgroundAdjacency</type>
      <name>BackgroundAdjacency</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ab3da27d137553eaf078d11d4f8cf0152</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; ReverseTopology, DigitalSet &gt;</type>
      <name>ComplementObject</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a973b5d4d12e078610001e0333a9b3ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DigitalTopology, SmallSet &gt;</type>
      <name>SmallObject</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a7032fdeb6e2828521ddc7f33172c5b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; ReverseTopology, SmallSet &gt;</type>
      <name>SmallComplementObject</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a3cee40132a55aa524b5b42bd64d5459f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDigitalSet</type>
      <name>VertexSet</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a7b55a446d26256d58814936aa6b8993e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a75876dd4530bb0f9f918811c7e9b32f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSet::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>aef707b2ca3f2d631bc6a0f3a11242f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ac7b3415a4e649243bf1733481fb5c4eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a19847ab919024c4c1c7fc40a6d3b9b93</anchor>
      <arglist>(const DigitalTopology &amp;aTopology, const DigitalSet &amp;aPointSet, Connectedness cxn=UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a9e486c094b8cb1ca0521d27624adc1cb</anchor>
      <arglist>(const CowPtr&lt; DigitalTopology &gt; &amp;aTopology, const DigitalSet &amp;aPointSet, Connectedness cxn=UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a1f19c8a4970f0999675a70e06473857a</anchor>
      <arglist>(const DigitalTopology &amp;aTopology, const CowPtr&lt; DigitalSet &gt; &amp;aPointSet, Connectedness cxn=UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a484395779dd76cfb682d2d9d19d75ddf</anchor>
      <arglist>(const DigitalTopology &amp;aTopology, DigitalSet *aPointSetPtr, Connectedness cxn=UNKNOWN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a5ba2c00bdb19f2f4103f87f44329624f</anchor>
      <arglist>(const DigitalTopology &amp;aTopology, const Domain &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a9fd2d9d458425c4887d11e7deab7064a</anchor>
      <arglist>(const CowPtr&lt; DigitalTopology &gt; &amp;aTopology, const Domain &amp;aDomain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>af132a0a8bea28fd0f21ca89b83fa9669</anchor>
      <arglist>(const Object &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Object</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a86a6e87abd2e8670271e67688528b9ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Object &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ae09ae0dd75c9ad9c296e3edd52308ead</anchor>
      <arglist>(const Object &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>addfd5bfb4b35f02fa70aae20474bac7e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a7dd1714e958e81d1f9c67f99901d36ef</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const DigitalSet &amp;</type>
      <name>pointSet</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>afb774dce722e158de4eb64ad7fc760d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DigitalSet &amp;</type>
      <name>pointSet</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a4bdc961effb0fcf81fff3adf44a4fd43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DigitalTopology &amp;</type>
      <name>topology</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a50181623f6c4af6306f30c97e5d84af1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const ForegroundAdjacency &amp;</type>
      <name>adjacency</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ad0cddec22436cfeabdec1a4b396b098d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SmallObject</type>
      <name>neighborhood</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a12b692a12fc19a8cbd5aac7bb7a434ff</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>neighborhoodSize</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ac255de1c228d901493d2e957f11cd74c</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>SmallObject</type>
      <name>properNeighborhood</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ad090874b31428a0745a8801f80ea069c</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>properNeighborhoodSize</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ab315a73a73178bdd7bed00c268e817ea</anchor>
      <arglist>(const Point &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type>Object</type>
      <name>border</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a9e2f75f5869ca799b692305757a94bf5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>writeComponents</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>acbd62de10ca0c62ab35cedfffdc00d94</anchor>
      <arglist>(OutputObjectIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>Connectedness</type>
      <name>connectedness</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>aa4fc86efe6748a80d4d8bcd1e05f46fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Connectedness</type>
      <name>computeConnectedness</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ad50fa80cebe160af7e8cf8eeddd86962</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ac2d10e1808be13fd3ce5080369637945</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a22ebda44a776f34bcdd4ae202cba3478</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>degree</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a618d4834dfce6462ed0b42d469871ff9</anchor>
      <arglist>(const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>bestCapacity</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a0e6afe174a93916cd640668439880cbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ace6c15290f07fc5d5ce1fa7946fadf43</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighbors</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a6237a4a75f30297aefb45a623cd5c22e</anchor>
      <arglist>(OutputIterator &amp;it, const Vertex &amp;v, const VertexPredicate &amp;pred) const </arglist>
    </member>
    <member kind="function">
      <type>SmallObject</type>
      <name>geodesicNeighborhood</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a5576b7b31161161af5dd07ffb98daf4c</anchor>
      <arglist>(const TAdjacency &amp;adj, const Point &amp;p, unsigned int k) const </arglist>
    </member>
    <member kind="function">
      <type>SmallComplementObject</type>
      <name>geodesicNeighborhoodInComplement</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>aee08cc420a65e84d3c2228b1e9c8a311</anchor>
      <arglist>(const TAdjacency &amp;adj, const Point &amp;p, unsigned int k) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSimple</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a0599b02eb63901e71563ef0e0d9e5ec9</anchor>
      <arglist>(const Point &amp;v) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>addb90cdaacb488c381706be4a7968263</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a7d1dbe5350d7dfc3471be56027c626a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>a8b0eccf7be2ab98a05a316bce7b52572</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CowPtr&lt; DigitalTopology &gt;</type>
      <name>myTopo</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ad2ae983d9e6eca2cfe211aa8d6923bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>CowPtr&lt; DigitalSet &gt;</type>
      <name>myPointSet</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ae98ff3a06e170ce35e0085ef010fab28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Connectedness</type>
      <name>myConnectedness</name>
      <anchorfile>classDGtal_1_1Object.html</anchorfile>
      <anchor>ae23b155d198c4d8bc725676c61575064</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Object::Edge</name>
    <filename>structDGtal_1_1Object_1_1Edge.html</filename>
    <member kind="function">
      <type></type>
      <name>Edge</name>
      <anchorfile>structDGtal_1_1Object_1_1Edge.html</anchorfile>
      <anchor>abef5984d640ad546ca0533394fd188ed</anchor>
      <arglist>(const Vertex &amp;v1, const Vertex &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1Object_1_1Edge.html</anchorfile>
      <anchor>a6c75047a8491be2e7925304078a2f51b</anchor>
      <arglist>(const Edge &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structDGtal_1_1Object_1_1Edge.html</anchorfile>
      <anchor>a7d8c2fad1e2ccf26ebe6e4b504546cc2</anchor>
      <arglist>(const Edge &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Vertex</type>
      <name>vertices</name>
      <anchorfile>structDGtal_1_1Object_1_1Edge.html</anchorfile>
      <anchor>aab0c58d4500de7956ea317cb4172f785</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::Object::VertexMap</name>
    <filename>structDGtal_1_1Object_1_1VertexMap.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; Vertex, Value &gt;</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1Object_1_1VertexMap.html</anchorfile>
      <anchor>a7896e90fa94b75659940d0883ba11757</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SCellToPoint</name>
    <filename>classDGtal_1_1SCellToPoint.html</filename>
    <templarg>KSpace</templarg>
    <member kind="function">
      <type></type>
      <name>SCellToPoint</name>
      <anchorfile>classDGtal_1_1SCellToPoint.html</anchorfile>
      <anchor>a73cb701c2f3622bb424c693ce022fabb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToPoint</name>
      <anchorfile>classDGtal_1_1SCellToPoint.html</anchorfile>
      <anchor>ac6e0858c82c89daa50d60e1d9f68a0d6</anchor>
      <arglist>(const KSpace &amp;aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToPoint</name>
      <anchorfile>classDGtal_1_1SCellToPoint.html</anchorfile>
      <anchor>a6216885b6a193e28a9ac6fe7b5d6372e</anchor>
      <arglist>(const SCellToPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SCellToPoint.html</anchorfile>
      <anchor>abb537a1b1befe2ed26776af8607cd521</anchor>
      <arglist>(const SCellToPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SCellToPoint.html</anchorfile>
      <anchor>a0c7712eb3374a4e76932c156194a14b1</anchor>
      <arglist>(const Input &amp;aSCell) const </arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>KSpace::Point</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1SCellToPoint.html</anchorfile>
      <anchor>aeeec864930ec9871349678b15a4d3526</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1SCellToPoint.html</anchorfile>
      <anchor>a6baac3e64720a7c1b088610bf3b40bf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1SCellToPoint.html</anchorfile>
      <anchor>a9d56d09f5eb6e4a16b2348bbdb783736</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SCellToMidPoint</name>
    <filename>classDGtal_1_1SCellToMidPoint.html</filename>
    <templarg>KSpace</templarg>
    <member kind="typedef">
      <type>KSpace::Space::RealPoint</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a7e525421fd5eda893789f3a7dcdb507f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a06f08fb1453bf7a58df3cffdb33558c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToMidPoint</name>
      <anchorfile>classDGtal_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a3bc22335126c22175ca21708b671fb14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToMidPoint</name>
      <anchorfile>classDGtal_1_1SCellToMidPoint.html</anchorfile>
      <anchor>ae64fa511aef39f5b9afd4d8bb9c1d8c9</anchor>
      <arglist>(const KSpace &amp;aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToMidPoint</name>
      <anchorfile>classDGtal_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a0849a3e8e5ff25b901956a87bf86a738</anchor>
      <arglist>(const SCellToMidPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToMidPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a7e112c80f3c3bf985efd23d4d7a44a97</anchor>
      <arglist>(const SCellToMidPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SCellToMidPoint.html</anchorfile>
      <anchor>ac7b52325fe27a51dfecbea33c1335b84</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a9330080c6364aa9195137dda083da3e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SCellToArrow</name>
    <filename>classDGtal_1_1SCellToArrow.html</filename>
    <templarg>KSpace</templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>a34fbc34c6b2b415071595f868de7b01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>a90200454982e58253c77d8abdc945912</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Point, Vector &gt;</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>a8f1b31a9da3a332bab301426cfa1cd38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>aa25ae368996343bb332a005c72ac32b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToArrow</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>aeb1f721767ed3dc51fb33a52f20d30bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToArrow</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>ab9b9c0eba3ff9ed1c9befbf09cc1bf96</anchor>
      <arglist>(const KSpace &amp;aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToArrow</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>a487875f2cc2c2dd233d67e778d10b37e</anchor>
      <arglist>(const SCellToArrow &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToArrow &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>ae4cb35755c125e571d4ef72afde18348</anchor>
      <arglist>(const SCellToArrow &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>a9ade37d27ce44c6d90907a0b530ad553</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1SCellToArrow.html</anchorfile>
      <anchor>a313f5ff646391c67782d49ab25c1b637</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SCellToInnerPoint</name>
    <filename>classDGtal_1_1SCellToInnerPoint.html</filename>
    <templarg>KSpace</templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>add918f59d8b7f3bd2e16b6e7568636d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a89fcbd1c279d2fb657a513a4eb5d7a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToInnerPoint</name>
      <anchorfile>classDGtal_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a51110856fe86da797c79a6098df9bb3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToInnerPoint</name>
      <anchorfile>classDGtal_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a7001164edc09448be7da8eba2f9ec50a</anchor>
      <arglist>(const KSpace &amp;aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToInnerPoint</name>
      <anchorfile>classDGtal_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a13a36c9d0c64f8295bcfd152bf2fe5cc</anchor>
      <arglist>(const SCellToInnerPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToInnerPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a9f6ea53e9a46d34648838b3beb5e7d95</anchor>
      <arglist>(const SCellToInnerPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a7453d3829cd18d656a4dd235c5cc41de</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a53854a2399279746d906513354281719</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SCellToOuterPoint</name>
    <filename>classDGtal_1_1SCellToOuterPoint.html</filename>
    <templarg>KSpace</templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>ae58bdc1b5276ed4b915af3e13b6713d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a112d80ddcf4e1448cd45c652cfe52282</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToOuterPoint</name>
      <anchorfile>classDGtal_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a2ad826fbf270745ed5b6cbcd7b443874</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToOuterPoint</name>
      <anchorfile>classDGtal_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a3dcd1be007958ed02ca3ab464b3954fd</anchor>
      <arglist>(const KSpace &amp;aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToOuterPoint</name>
      <anchorfile>classDGtal_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a217c237809b40600eadb023c05c76adf</anchor>
      <arglist>(const SCellToOuterPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToOuterPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a0d160741efcb2056439390b663e0f1de</anchor>
      <arglist>(const SCellToOuterPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a5d3b3b2d076a7b168c24297ae6bbadb5</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a4d3f69bb2b0d8ef180a63dd778cff306</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SCellToIncidentPoints</name>
    <filename>classDGtal_1_1SCellToIncidentPoints.html</filename>
    <templarg>KSpace</templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a9e4fd0f12589e4da7e224963243ce5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Point, Point &gt;</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a6e761a1e610ed8ba6e31c7830d54334e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a67ddc91a4f92202f4466f33947202a15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToIncidentPoints</name>
      <anchorfile>classDGtal_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a3ffffe13416d545f877ea56cf2c5a856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToIncidentPoints</name>
      <anchorfile>classDGtal_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>ac93c908cfd7c77fba3bddd84d4a6dfc7</anchor>
      <arglist>(const KSpace &amp;aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToIncidentPoints</name>
      <anchorfile>classDGtal_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a8e45150ed8ce0a8a936b854336ca8841</anchor>
      <arglist>(const SCellToIncidentPoints &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToIncidentPoints &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>ace56c95c184096ae99f295382ab1299f</anchor>
      <arglist>(const SCellToIncidentPoints &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>ab3c3caa710d2f51a64b80dad4b0ef22b</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a09277330c6b0eb0fcdc06eb0c0384294</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SCellToCode</name>
    <filename>classDGtal_1_1SCellToCode.html</filename>
    <templarg>KSpace</templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>a7044262f5fe7b7b47d6b736016cf361d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>a33f2074970edfc1608d24449ff68f88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>a88ab7ee2a2089116a6b4a7068586471f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>ad7468b1bf0b08a1b62132066e18e02d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToCode</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>ac3455bfa3ad3520e3e3f4959cf30628f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToCode</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>a7f4089a0221d3459c0aa3b1481e03b8d</anchor>
      <arglist>(const KSpace &amp;aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToCode</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>abeecdf442a30927ea9943a317f315b76</anchor>
      <arglist>(const SCellToCode &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToCode &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>a8b49a171bef35494482d04b9ff8526f2</anchor>
      <arglist>(const SCellToCode &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>a8b262e58caa571e2a52e83d24cee21c8</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>a6b54eb7ef1078dc916e083efde09d38c</anchor>
      <arglist>(KSpace::dimension==2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1SCellToCode.html</anchorfile>
      <anchor>aac8c7e65216c53e9699ed5a710ad3693</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SetOfSurfels</name>
    <filename>classDGtal_1_1SetOfSurfels.html</filename>
    <templarg>TKSpace</templarg>
    <templarg>TSurfelSet</templarg>
    <class kind="class">DGtal::SetOfSurfels::Tracker</class>
    <member kind="typedef">
      <type>SetOfSurfels&lt; TKSpace, TSurfelSet &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>aa3ae9b0647428b9d13b69ca52af85319</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a98d2b4c0abc1c0564a5cb0aa673d263b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a9c9b2f1c7ab046cd07a16160b11ee6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a305a81ffa65e9e862070ca2bd31c6ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSurfelSet</type>
      <name>SurfelSet</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a52cad23c0ba34f350b213ab1ce119681</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelSet::const_iterator</type>
      <name>SurfelConstIterator</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>aab8419da40482ddb47af73cfcd93c905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a11dc2d6b2c4d1c7b0a89cb82e55512d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a5308b5d6f33305e05b24da1bae2773d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Tracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a534df7610afc3b29b4351d13cead0995</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelAdjacency&lt; KSpace::dimension &gt;</type>
      <name>Adjacency</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>abe90b64a74612273fd07e781835c0ebf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a30346c98b944ec3a4ec278c0e080574a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a56bc5d9075d21536d687f2240f070092</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::CellSet</type>
      <name>CellSet</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a64a5e3406a55a238526246a318f845f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCellSet</type>
      <name>SCellSet</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a0aae9d88bd74513bcb56823b0a742d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelSetPredicate&lt; SurfelSet, Surfel &gt;</type>
      <name>SurfelPredicate</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>ade324b475e452489d54a15ef2de4973c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SetOfSurfels</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>aa9383f1dcad807eb1ab6b83603bf6e78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetOfSurfels</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a959b851b189abd6aa5bcada2fabe0c11</anchor>
      <arglist>(const SetOfSurfels &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SetOfSurfels</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a2350a2082181da21b2ce089a7f01fa19</anchor>
      <arglist>(const KSpace &amp;aKSpace, const Adjacency &amp;adj, SurfelSet aSetOfSurfels=SurfelSet())</arglist>
    </member>
    <member kind="function">
      <type>SurfelSet &amp;</type>
      <name>surfelSet</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a7ee967b7297505544e08897586b25fa3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SurfelSet &amp;</type>
      <name>surfelSet</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a51a9b702550db815eeafe88af651f52b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>ad5c7e16ee0951b236b4e3a61ed819690</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Adjacency &amp;</type>
      <name>surfelAdjacency</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>ac85bb8eab5258b89ecd8825dc615a727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SurfelPredicate &amp;</type>
      <name>surfelPredicate</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a7b62b722f60a8b2097f502c10b69087c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const KSpace &amp;</type>
      <name>space</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>ad8835cd7d65dc045638e3de885866971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>acc6960f8e72be8b6b76505dc6c60df5a</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a36307d70117e0c0443ee9e26ff089159</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SurfelConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a9caffbd661c4eecaf0e0afab02d12970</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>nbSurfels</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a4bd0083a9be7e1c0b9513db95d00b5c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a732e7c8b6455612b12fce7790f077fa9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>DigitalSurfaceTracker *</type>
      <name>newTracker</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>ab6e2b7ac249295c001c4e430ce07eafd</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function">
      <type>Connectedness</type>
      <name>connectedness</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a85ef448217e95f2bce1652ed27ae536f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a7cbb0696775d69828951aa8235b17780</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>ac04171e26ecb98ee8466601de9190d31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>SetOfSurfels &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>abced380b35b54cc1cdbe2b1f6016f361</anchor>
      <arglist>(const SetOfSurfels &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace &amp;</type>
      <name>myKSpace</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>acbabe9a4a0eb0f18461701bd2d02f652</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SurfelSet</type>
      <name>mySurfelSet</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a5367f3f66cc02b76b8a2d58cafc0d9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SurfelPredicate</type>
      <name>mySurfelPredicate</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>abbdbda1bb0f8c502d777aabc987a3ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Adjacency</type>
      <name>mySurfelAdjacency</name>
      <anchorfile>classDGtal_1_1SetOfSurfels.html</anchorfile>
      <anchor>a7f2a54401b577ed93d7665979e3cc636</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SetOfSurfels::Tracker</name>
    <filename>classDGtal_1_1SetOfSurfels_1_1Tracker.html</filename>
    <member kind="typedef">
      <type>Tracker</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>acf50f63a59f0d169b768cb536eb10cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SetOfSurfels&lt; TKSpace, TSurfelSet &gt;</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>acfec411aecaf5e409a252e17dca60147</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace::SCell</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>a4aa0fda6581cddd2c63516cd3f2e22de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>a01cf86047aa71f9fb70b073cde96bc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfelNeighborhood&lt; KSpace &gt;</type>
      <name>Neighborhood</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>a33557d8f7d7f63fc6d787e9f350da30f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>a9290e68809cb45b0a8fd9d664beda29c</anchor>
      <arglist>(const DigitalSurfaceContainer &amp;aSurface, const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tracker</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>a4a594700d995acfd311bee8295966edd</anchor>
      <arglist>(const Tracker &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tracker</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>a221ed86dc7f270b7c67a3e9872506517</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>surface</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>a556fffbec721584530295a800f105170</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Surfel &amp;</type>
      <name>current</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>ac38230738197e035132cc013d9289154</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>orthDir</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>abb591fc0764f07e6c160aeacaa059b4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>ae8504148b0bff9f5363ac7809d25801c</anchor>
      <arglist>(const Surfel &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>adjacent</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>ad05ac40dbc4a3dda728a071a87db12ab</anchor>
      <arglist>(Surfel &amp;s, Dimension d, bool pos) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const DigitalSurfaceContainer &amp;</type>
      <name>mySurface</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>a924fca9cb00608316754d4a5ac49bf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Neighborhood</type>
      <name>myNeighborhood</name>
      <anchorfile>classDGtal_1_1SetOfSurfels_1_1Tracker.html</anchorfile>
      <anchor>aa3feaccae136074ce7ae480974a2f231</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::STLMapToVertexMapAdapter</name>
    <filename>classDGtal_1_1STLMapToVertexMapAdapter.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>STLMapToVertexMapAdapter&lt; TMap &gt;</type>
      <name>Self</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>a69df4f57fb59a598f94c797ae2527daa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TMap</type>
      <name>Container</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>abea2bf6ce46844f4533d9548b6b28551</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container::value_compare</type>
      <name>Compare</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>a96bff2eee24abc955198b16cbad10d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container::allocator_type</type>
      <name>Allocator</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>ac5be1e27b4e37078e883fa65b5d94967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container::key_type</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>aa5b937d022b84e166605177e6f231bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container::mapped_type</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>a77d9861f4fc727e8ddabd257f43648e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STLMapToVertexMapAdapter</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>a0eca83a2f97e9e9e8ece52e114e8d365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STLMapToVertexMapAdapter</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>a43a34010c8856c4621227fcb1f3efef7</anchor>
      <arglist>(InputIterator first, InputIterator last, const Compare &amp;comp=Compare(), const Allocator &amp;alloc=Allocator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>STLMapToVertexMapAdapter</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>a8a7afbdc7dd432f08692ba78ed83e807</anchor>
      <arglist>(STLMapToVertexMapAdapter &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>a572294077a4b745a4fc47115a6bfbf80</anchor>
      <arglist>(Vertex v, Value val)</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1STLMapToVertexMapAdapter.html</anchorfile>
      <anchor>ab866938ed201e97a68f4ee7cfcaed37f</anchor>
      <arglist>(Vertex v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SurfelAdjacency</name>
    <filename>classDGtal_1_1SurfelAdjacency.html</filename>
    <templarg>dim</templarg>
    <member kind="function">
      <type></type>
      <name>~SurfelAdjacency</name>
      <anchorfile>classDGtal_1_1SurfelAdjacency.html</anchorfile>
      <anchor>addeaf81ee90edc82ffc70bdf0d39a325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfelAdjacency</name>
      <anchorfile>classDGtal_1_1SurfelAdjacency.html</anchorfile>
      <anchor>a536c52291f5f41860f43644b8927591e</anchor>
      <arglist>(bool int2ext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfelAdjacency</name>
      <anchorfile>classDGtal_1_1SurfelAdjacency.html</anchorfile>
      <anchor>a358643e07f293ef7392d03d0900d9c63</anchor>
      <arglist>(const SurfelAdjacency &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SurfelAdjacency &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SurfelAdjacency.html</anchorfile>
      <anchor>ac92f0f632c5e841249a07f5b12b84ee9</anchor>
      <arglist>(const SurfelAdjacency &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdjacency</name>
      <anchorfile>classDGtal_1_1SurfelAdjacency.html</anchorfile>
      <anchor>a7e78764ac616cd77ccc153feb73cbd20</anchor>
      <arglist>(Dimension i, Dimension j, bool int2ext)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdjacency</name>
      <anchorfile>classDGtal_1_1SurfelAdjacency.html</anchorfile>
      <anchor>ae2a0e36f7a28d664cd98e24d11da7121</anchor>
      <arglist>(Dimension i, Dimension j) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SurfelAdjacency.html</anchorfile>
      <anchor>a01fd734ca7fc596f70a7e7c5b7011bd0</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SurfelAdjacency.html</anchorfile>
      <anchor>aeaee91309a0c55ea81842168a1a15f52</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>boost::array&lt; bool, dim *dim &gt;</type>
      <name>myInt2Ext</name>
      <anchorfile>classDGtal_1_1SurfelAdjacency.html</anchorfile>
      <anchor>ab34c6abe2cfb75605110b1fad59cee75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::SurfelNeighborhood</name>
    <filename>classDGtal_1_1SurfelNeighborhood.html</filename>
    <templarg>TKSpace</templarg>
    <member kind="typedef">
      <type>TKSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a88d29197eb8be012242aa18e1b094f14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>afac3cad381540679e082d93cd743fa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>af63626c43c2b72a1d3ae11fa17b76efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a23d2daf64c14440209f484c6ec9582ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SurfelNeighborhood</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>afc4e7480cd718b88fa0c4e4d62fb823d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfelNeighborhood</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a0f209ff300ca4fbe91eef95fd5e5b8d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfelNeighborhood</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a5777626a64bed27bd3f65e0afaa5303b</anchor>
      <arglist>(const SurfelNeighborhood &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SurfelNeighborhood &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>aac280117be2271fdc6ec7fe72f1ed02e</anchor>
      <arglist>(const SurfelNeighborhood &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a917b5b927f28381e1d0f62715c91f519</anchor>
      <arglist>(const KSpace *space, const SurfelAdjacency&lt; KSpace::dimension &gt; *adj, const SCell &amp;aSurfel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSurfel</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a9d5728fe1d5ada79f5249f0dd189d1e1</anchor>
      <arglist>(const SCell &amp;aSurfel)</arglist>
    </member>
    <member kind="function">
      <type>const SCell &amp;</type>
      <name>surfel</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a2c9ef3c9f809aa736e6d7a5dc02017f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>orthDir</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>aea0f2a2bc095426e2b2b3402d17e5030</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>innerSpel</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>ae7949a63f2bfb2c3fa5f15e3135c71b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>outerSpel</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a6ccf51c98673b4faf66fe14da211a568</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>innerAdjacentSpel</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a2cd5eb80a4d4c3eef987e2ba05da3d08</anchor>
      <arglist>(Dimension track_dir, bool pos) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>outerAdjacentSpel</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>aeefe36d0319bcaf87b5f72d24412d19a</anchor>
      <arglist>(Dimension track_dir, bool pos) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>follower1</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>afd5ddb9e4381d3b53f5e181bb4619757</anchor>
      <arglist>(Dimension track_dir, bool pos) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>follower2</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a9e9cda1c695e81414c079a6aa9d3f279</anchor>
      <arglist>(Dimension track_dir, bool pos) const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>follower3</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>ae4c6a35e3f638ab9a96ff4ce6a023890</anchor>
      <arglist>(Dimension track_dir, bool pos) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAdjacentOnSpelSet</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>ae8e4b81f9d7fbdde3b4aa1125862fc57</anchor>
      <arglist>(SCell &amp;adj_surfel, const SpelSet &amp;obj, Dimension track_dir, bool pos) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAdjacentOnDigitalSet</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a904cf1b04a96d3a5682d91ce054eb297</anchor>
      <arglist>(SCell &amp;adj_surfel, const DigitalSet &amp;obj, Dimension track_dir, bool pos) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAdjacentOnPointPredicate</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a635ea93c00eede9eaf8d85e9fd035e2f</anchor>
      <arglist>(SCell &amp;adj_surfel, const PointPredicate &amp;pp, Dimension track_dir, bool pos) const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getAdjacentOnSurfelPredicate</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a32f584693393aaa95c6ca3329dc4e3a7</anchor>
      <arglist>(SCell &amp;adj_surfel, const SurfelPredicate &amp;sp, Dimension track_dir, bool pos) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a670feae489490c40f8da664c21d976b5</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>aee7c06df5b9a8daa7fc4014dcf9e7bfe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const KSpace *</type>
      <name>mySpace</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a7d950a4fb00306dd3b218ecdaf65827d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SurfelAdjacency&lt; KSpace::dimension &gt; *</type>
      <name>mySurfelAdj</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>ad7091871b7a6f9e002667ee03282c540</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>SCell</type>
      <name>mySurfel</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a3bb64dc4848a278a9c6a75936ace722f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Dimension</type>
      <name>myOrthDir</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>ab404da184e9cbb425acefcb77d389393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myOrthDirect</name>
      <anchorfile>classDGtal_1_1SurfelNeighborhood.html</anchorfile>
      <anchor>a7bccc4e18c23010cf98706b110f82870</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::SurfelSetPredicate</name>
    <filename>structDGtal_1_1SurfelSetPredicate.html</filename>
    <templarg>TSurfelSet</templarg>
    <templarg>TSurfel</templarg>
    <member kind="typedef">
      <type>TSurfelSet</type>
      <name>SurfelSet</name>
      <anchorfile>structDGtal_1_1SurfelSetPredicate.html</anchorfile>
      <anchor>a21cf2f45589e66c7c58f2b8c21b69748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSurfel</type>
      <name>Surfel</name>
      <anchorfile>structDGtal_1_1SurfelSetPredicate.html</anchorfile>
      <anchor>a6dc51e1daf4a384725f1e602acba89ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfelSetPredicate</name>
      <anchorfile>structDGtal_1_1SurfelSetPredicate.html</anchorfile>
      <anchor>a794bc5bd13c3513b441f737244cabdd7</anchor>
      <arglist>(const SurfelSet &amp;aSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfelSetPredicate</name>
      <anchorfile>structDGtal_1_1SurfelSetPredicate.html</anchorfile>
      <anchor>ac71f611ebf215e0d1efee618c78e189d</anchor>
      <arglist>(const SurfelSetPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SurfelSetPredicate &amp;</type>
      <name>operator=</name>
      <anchorfile>structDGtal_1_1SurfelSetPredicate.html</anchorfile>
      <anchor>add17706b7129db251edbc950f3015429</anchor>
      <arglist>(const SurfelSetPredicate &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1SurfelSetPredicate.html</anchorfile>
      <anchor>a379d5d9dc66c4c71cd5a8806ab295886</anchor>
      <arglist>(const Surfel &amp;s) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SurfelSetPredicate</name>
      <anchorfile>structDGtal_1_1SurfelSetPredicate.html</anchorfile>
      <anchor>a54e2b32ff0531c900f7dc9704c08d320</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const SurfelSet *</type>
      <name>mySet</name>
      <anchorfile>structDGtal_1_1SurfelSetPredicate.html</anchorfile>
      <anchor>a4ba5e09d30c904db82a114e962ce3cda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::UmbrellaComputer</name>
    <filename>classDGtal_1_1UmbrellaComputer.html</filename>
    <templarg>TDigitalSurfaceTracker</templarg>
    <class kind="struct">DGtal::UmbrellaComputer::State</class>
    <member kind="typedef">
      <type>TDigitalSurfaceTracker</type>
      <name>DigitalSurfaceTracker</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a108777f84c0a4a835b61c7630d5f7c79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceTracker::DigitalSurfaceContainer</type>
      <name>DigitalSurfaceContainer</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>abc8da884ebe2914a22f28516eed69a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::KSpace</type>
      <name>KSpace</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a434d0dd90daa1e25e242a64cc7832d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::Surfel</type>
      <name>Surfel</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a2ae2aa49c34cd7999a3ffa83f9bc1db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSurfaceContainer::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a50ecbac32b4c8716ffc4775e41e3fc60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a8540ef4edbdea4af3bb6ea3077ed54dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UmbrellaComputer</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a14608dc0c9bd83ddeab73a4791d8d5b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UmbrellaComputer</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a5aa6332d58369def09cb7782c9aee448</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UmbrellaComputer</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>ac5e5a000dd7a6455d8f97a730d4cd917</anchor>
      <arglist>(const UmbrellaComputer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>UmbrellaComputer &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a54edccc000cbf0cab1c9cb91f5e82944</anchor>
      <arglist>(const UmbrellaComputer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a8f2ded1174ecce55c22d5dce488f7016</anchor>
      <arglist>(const DigitalSurfaceTracker &amp;tracker, Dimension k, bool epsilon, Dimension j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a2df9dcf5dc859c793792d4695c5d662c</anchor>
      <arglist>(const State &amp;aState)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getState</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>aeaeda645b4c0e35ed08fa92dc03d3ed3</anchor>
      <arglist>(State &amp;aState) const </arglist>
    </member>
    <member kind="function">
      <type>const State &amp;</type>
      <name>state</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>ab99829b33d096704ac03a7944cd2d70a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const KSpace &amp;</type>
      <name>space</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a524b8b449d57b81c124a53a0dd03d40f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Surfel &amp;</type>
      <name>surfel</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a1b3d51c53feef6193021b75bf87ff2dd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>separator</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a132ec4a4488ff6b3092068c9000bbb83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SCell</type>
      <name>pivot</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>af79842f4af6d60b3501580b90279c6c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>orthDir</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a57db95e92486220895d9d03616326b17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>trackDir</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>ae21eafb4dc697f52aeba1719484f98d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>trackOrientation</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a5d6f877d59e1b5196b63554fb919984d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Dimension</type>
      <name>separatorDir</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a1644c255d8a333ff499fcc45301ee84d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>separatorOrientation</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>aebd6d08de002820f7cbea29b2bebe94a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a7d5e780ec0db2ec3de13790e793e6984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>previous</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a907b0c5fa79228820c832cf8a9df26bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adjacent</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a4c702a99c080357eab620a612aced9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a785ef2efcf7842862b23b6e02120cd5e</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a03cacdfa04574970a4d0522b5e833874</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a5d3d24a4eef73990d3a2b5cf813691b7</anchor>
      <arglist>((CDigitalSurfaceTracker&lt; TDigitalSurfaceTracker &gt;))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>DigitalSurfaceTracker *</type>
      <name>myTracker</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>aa04e0f60bd8f4edfc4951d3067da9dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>State</type>
      <name>myState</name>
      <anchorfile>classDGtal_1_1UmbrellaComputer.html</anchorfile>
      <anchor>a0950bca45e8d53901508db9633f1485a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::UmbrellaComputer::State</name>
    <filename>structDGtal_1_1UmbrellaComputer_1_1State.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structDGtal_1_1UmbrellaComputer_1_1State.html</anchorfile>
      <anchor>a807dec519c044a1e30d9de4721aa6229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>structDGtal_1_1UmbrellaComputer_1_1State.html</anchorfile>
      <anchor>aadf73c8b108ef6dcf74e0bd108dd4a5f</anchor>
      <arglist>(const Surfel &amp;_surfel, Dimension _k, bool _epsilon, Dimension _j)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>structDGtal_1_1UmbrellaComputer_1_1State.html</anchorfile>
      <anchor>a5eb46fd8a5342a5db1af0d38cb700a8a</anchor>
      <arglist>(const State &amp;other) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>structDGtal_1_1UmbrellaComputer_1_1State.html</anchorfile>
      <anchor>a8cac1ac5443a5e2c8564aa8c0a88f38d</anchor>
      <arglist>(const State &amp;other) const </arglist>
    </member>
    <member kind="variable">
      <type>Surfel</type>
      <name>surfel</name>
      <anchorfile>structDGtal_1_1UmbrellaComputer_1_1State.html</anchorfile>
      <anchor>a84d41094941911bf5b8e8af3d67b9812</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Dimension</type>
      <name>k</name>
      <anchorfile>structDGtal_1_1UmbrellaComputer_1_1State.html</anchorfile>
      <anchor>ab54dbade83d8922aa53029d4c15d9d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>epsilon</name>
      <anchorfile>structDGtal_1_1UmbrellaComputer_1_1State.html</anchorfile>
      <anchor>add6657e20009e00f8ac8ca2b83c3eeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Dimension</type>
      <name>j</name>
      <anchorfile>structDGtal_1_1UmbrellaComputer_1_1State.html</anchorfile>
      <anchor>aa5aed50444059dc9cd30a94e79f545f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ImplicitDigitalEllipse3</name>
    <filename>structDGtal_1_1ImplicitDigitalEllipse3.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TPoint3</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1ImplicitDigitalEllipse3.html</anchorfile>
      <anchor>ae979ba940a8e962cf9edcd10dc12718a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TPoint3</type>
      <name>Point</name>
      <anchorfile>structDGtal_1_1ImplicitDigitalEllipse3.html</anchorfile>
      <anchor>ae979ba940a8e962cf9edcd10dc12718a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitDigitalEllipse3</name>
      <anchorfile>structDGtal_1_1ImplicitDigitalEllipse3.html</anchorfile>
      <anchor>a53e97262166d6f29295e80f9ac92e7a5</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1ImplicitDigitalEllipse3.html</anchorfile>
      <anchor>a6b9431e2f91e3c3107f49d4dcab3eec7</anchor>
      <arglist>(const TPoint3 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitDigitalEllipse3</name>
      <anchorfile>structDGtal_1_1ImplicitDigitalEllipse3.html</anchorfile>
      <anchor>a53e97262166d6f29295e80f9ac92e7a5</anchor>
      <arglist>(double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1ImplicitDigitalEllipse3.html</anchorfile>
      <anchor>a6b9431e2f91e3c3107f49d4dcab3eec7</anchor>
      <arglist>(const TPoint3 &amp;p) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myA</name>
      <anchorfile>structDGtal_1_1ImplicitDigitalEllipse3.html</anchorfile>
      <anchor>abfd0ba8d0fb7d7c3b1b68e50ec4a7d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myB</name>
      <anchorfile>structDGtal_1_1ImplicitDigitalEllipse3.html</anchorfile>
      <anchor>ace16c1dbfe88cee3782ed6fddee4d500</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myC</name>
      <anchorfile>structDGtal_1_1ImplicitDigitalEllipse3.html</anchorfile>
      <anchor>a14cf338f6afa093cb2e1045bb2d12fcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>DGtal::BasicColorToScalarFunctors</name>
    <filename>namespaceDGtal_1_1BasicColorToScalarFunctors.html</filename>
    <class kind="struct">DGtal::BasicColorToScalarFunctors::RedChannel</class>
    <class kind="struct">DGtal::BasicColorToScalarFunctors::BlueChannel</class>
    <class kind="struct">DGtal::BasicColorToScalarFunctors::GreenChannel</class>
    <class kind="struct">DGtal::BasicColorToScalarFunctors::MeanChannels</class>
  </compound>
  <compound kind="struct">
    <name>DGtal::BasicColorToScalarFunctors::RedChannel</name>
    <filename>structDGtal_1_1BasicColorToScalarFunctors_1_1RedChannel.html</filename>
    <member kind="function">
      <type>unsigned char</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1BasicColorToScalarFunctors_1_1RedChannel.html</anchorfile>
      <anchor>a06c545bd1c2a83ca36503e09ab6a91f8</anchor>
      <arglist>(const Color &amp;aCol) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::BasicColorToScalarFunctors::BlueChannel</name>
    <filename>structDGtal_1_1BasicColorToScalarFunctors_1_1BlueChannel.html</filename>
    <member kind="function">
      <type>unsigned char</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1BasicColorToScalarFunctors_1_1BlueChannel.html</anchorfile>
      <anchor>a0c664be546b94826f4de964cd4c3ca8b</anchor>
      <arglist>(const Color &amp;aCol) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::BasicColorToScalarFunctors::GreenChannel</name>
    <filename>structDGtal_1_1BasicColorToScalarFunctors_1_1GreenChannel.html</filename>
    <member kind="function">
      <type>unsigned char</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1BasicColorToScalarFunctors_1_1GreenChannel.html</anchorfile>
      <anchor>a308b67eeb37bb3331c0ac7ba56b5c2a5</anchor>
      <arglist>(const Color &amp;aCol) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::BasicColorToScalarFunctors::MeanChannels</name>
    <filename>structDGtal_1_1BasicColorToScalarFunctors_1_1MeanChannels.html</filename>
    <member kind="function">
      <type>unsigned char</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1BasicColorToScalarFunctors_1_1MeanChannels.html</anchorfile>
      <anchor>a7b44c9fe9d1a11c28ea102af1713460b</anchor>
      <arglist>(const Color &amp;aCol) const </arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>DGtal::ConceptUtils</name>
    <filename>namespaceDGtal_1_1ConceptUtils.html</filename>
    <class kind="struct">DGtal::ConceptUtils::SameType</class>
    <class kind="struct">DGtal::ConceptUtils::SameType&lt; T, T &gt;</class>
    <class kind="struct">DGtal::ConceptUtils::CheckTrue</class>
    <class kind="struct">DGtal::ConceptUtils::CheckTrue&lt; TagTrue &gt;</class>
    <class kind="struct">DGtal::ConceptUtils::CheckFalse</class>
    <class kind="struct">DGtal::ConceptUtils::CheckUnknown</class>
    <class kind="struct">DGtal::ConceptUtils::CheckUnknown&lt; TagUnknown &gt;</class>
    <class kind="struct">DGtal::ConceptUtils::CheckTrueOrFalse</class>
    <class kind="struct">DGtal::ConceptUtils::CheckTag</class>
    <member kind="function">
      <type>void</type>
      <name>sameType</name>
      <anchorfile>namespaceDGtal_1_1ConceptUtils.html</anchorfile>
      <anchor>a854fdc6bdb4e328b988671f00e67b9ed</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTrue</name>
      <anchorfile>namespaceDGtal_1_1ConceptUtils.html</anchorfile>
      <anchor>ae9ea57a6046d7c45ab03a12f80c43944</anchor>
      <arglist>(const TagTrue &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkFalse</name>
      <anchorfile>namespaceDGtal_1_1ConceptUtils.html</anchorfile>
      <anchor>a1a32eb4b16ad07314958c7dd1761c049</anchor>
      <arglist>(const TagFalse &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkUnknown</name>
      <anchorfile>namespaceDGtal_1_1ConceptUtils.html</anchorfile>
      <anchor>a4a348527bfea449848b744ca165bb4f6</anchor>
      <arglist>(const TagUnknown &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTag</name>
      <anchorfile>namespaceDGtal_1_1ConceptUtils.html</anchorfile>
      <anchor>a2728058ea237ca1f8156c003c2cfc834</anchor>
      <arglist>(const TagUnknown &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTag</name>
      <anchorfile>namespaceDGtal_1_1ConceptUtils.html</anchorfile>
      <anchor>a2c10b6c88b3ec4207c454cb4822d6531</anchor>
      <arglist>(const TagTrue &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTag</name>
      <anchorfile>namespaceDGtal_1_1ConceptUtils.html</anchorfile>
      <anchor>a0ef2bbdba0b4f716910ced4906761d8e</anchor>
      <arglist>(const TagFalse &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTrueOrFalse</name>
      <anchorfile>namespaceDGtal_1_1ConceptUtils.html</anchorfile>
      <anchor>a3b1c7acd7247639387508b43f914ed8e</anchor>
      <arglist>(const TagFalse &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkTrueOrFalse</name>
      <anchorfile>namespaceDGtal_1_1ConceptUtils.html</anchorfile>
      <anchor>a8c2bd59caa35c03a4188859d5a53adad</anchor>
      <arglist>(const TagTrue &amp;tag)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConceptUtils::SameType</name>
    <filename>structDGtal_1_1ConceptUtils_1_1SameType.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1ConceptUtils_1_1SameType.html</anchorfile>
      <anchor>a084f043a3fae12b328a4d0d90166d692</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConceptUtils::SameType&lt; T, T &gt;</name>
    <filename>structDGtal_1_1ConceptUtils_1_1SameType_3_01T_00_01T_01_4.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1ConceptUtils_1_1SameType_3_01T_00_01T_01_4.html</anchorfile>
      <anchor>a3c8a6a9aaca1fb6a8bff811e2e499fcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConceptUtils::CheckTrue</name>
    <filename>structDGtal_1_1ConceptUtils_1_1CheckTrue.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1ConceptUtils_1_1CheckTrue.html</anchorfile>
      <anchor>af5b856d756e3264fb65eae10e1d811ad</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConceptUtils::CheckTrue&lt; TagTrue &gt;</name>
    <filename>structDGtal_1_1ConceptUtils_1_1CheckTrue_3_01TagTrue_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1ConceptUtils_1_1CheckTrue_3_01TagTrue_01_4.html</anchorfile>
      <anchor>a329c01da4e384b2ca5e1681dd7cfe93a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConceptUtils::CheckFalse</name>
    <filename>structDGtal_1_1ConceptUtils_1_1CheckFalse.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1ConceptUtils_1_1CheckFalse.html</anchorfile>
      <anchor>a3155dfdad840f33998c72d09a7a9d1bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConceptUtils::CheckUnknown</name>
    <filename>structDGtal_1_1ConceptUtils_1_1CheckUnknown.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1ConceptUtils_1_1CheckUnknown.html</anchorfile>
      <anchor>a93e227853c16c25da1e6a7f122b92545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConceptUtils::CheckUnknown&lt; TagUnknown &gt;</name>
    <filename>structDGtal_1_1ConceptUtils_1_1CheckUnknown_3_01TagUnknown_01_4.html</filename>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1ConceptUtils_1_1CheckUnknown_3_01TagUnknown_01_4.html</anchorfile>
      <anchor>afe8052f31964c8f4076f024a4e375b76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConceptUtils::CheckTrueOrFalse</name>
    <filename>structDGtal_1_1ConceptUtils_1_1CheckTrueOrFalse.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1ConceptUtils_1_1CheckTrueOrFalse.html</anchorfile>
      <anchor>a05cbf9684cbbf733621a44e7cbbf716a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::ConceptUtils::CheckTag</name>
    <filename>structDGtal_1_1ConceptUtils_1_1CheckTag.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1ConceptUtils_1_1CheckTag.html</anchorfile>
      <anchor>a3ae77f6abd77141b4238cb92ac34d6c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>DGtal::deprecated</name>
    <filename>namespaceDGtal_1_1deprecated.html</filename>
    <class kind="class">DGtal::deprecated::Point3dTo2dXY</class>
    <class kind="class">DGtal::deprecated::Point3dTo2dXZ</class>
    <class kind="class">DGtal::deprecated::Point3dTo2dYZ</class>
    <class kind="class">DGtal::deprecated::SCellToPoint</class>
    <class kind="class">DGtal::deprecated::SCellToMidPoint</class>
    <class kind="class">DGtal::deprecated::SCellToArrow</class>
    <class kind="class">DGtal::deprecated::SCellToInnerPoint</class>
    <class kind="class">DGtal::deprecated::SCellToOuterPoint</class>
    <class kind="class">DGtal::deprecated::SCellToIncidentPoints</class>
    <class kind="class">DGtal::deprecated::SCellToCode</class>
    <class kind="class">DGtal::deprecated::GreedyDecomposition</class>
    <class kind="class">DGtal::deprecated::MaximalSegments</class>
    <class kind="class">DGtal::deprecated::DomainMetricAdjacency</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal_1_1deprecated.html</anchorfile>
      <anchor>afc9d0bc7846a38c11c708ec875abbc16</anchor>
      <arglist>(std::ostream &amp;out, const GreedyDecomposition&lt; Segment &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal_1_1deprecated.html</anchorfile>
      <anchor>a45e5e69f53a083af29e2ed5a060ad75d</anchor>
      <arglist>(std::ostream &amp;out, const MaximalSegments&lt; TSegment &gt; &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceDGtal_1_1deprecated.html</anchorfile>
      <anchor>abc1f406e2ce0c4a710d9e8e4f98afb2c</anchor>
      <arglist>(std::ostream &amp;out, const DomainMetricAdjacency&lt; Domain, maxNorm1, Domain::Space::dimension &gt; &amp;object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::Point3dTo2dXY</name>
    <filename>classDGtal_1_1deprecated_1_1Point3dTo2dXY.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>PointVector&lt; 3, Coordinate &gt;</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1Point3dTo2dXY.html</anchorfile>
      <anchor>a004e732d12f9338bf629d1b03d2fdc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; 2, Coordinate &gt;</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1Point3dTo2dXY.html</anchorfile>
      <anchor>a7e5694ec3488356f307e27a5ca761d66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1Point3dTo2dXY.html</anchorfile>
      <anchor>a992ee26eb4be05fe99ec4afeeead6b63</anchor>
      <arglist>(const Input &amp;p) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::Point3dTo2dXZ</name>
    <filename>classDGtal_1_1deprecated_1_1Point3dTo2dXZ.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>PointVector&lt; 3, Coordinate &gt;</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1Point3dTo2dXZ.html</anchorfile>
      <anchor>afb2e55ee54ec4a0a83282e72a1e2c1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; 2, Coordinate &gt;</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1Point3dTo2dXZ.html</anchorfile>
      <anchor>a7580a45df9e5d96b3bc023e08af310fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1Point3dTo2dXZ.html</anchorfile>
      <anchor>a8a81bcdd13e58725a7a6a281511bd36d</anchor>
      <arglist>(const Input &amp;p) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::Point3dTo2dYZ</name>
    <filename>classDGtal_1_1deprecated_1_1Point3dTo2dYZ.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>PointVector&lt; 3, Coordinate &gt;</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1Point3dTo2dYZ.html</anchorfile>
      <anchor>a5a7e33758de0b688a38cf3202d5ee721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointVector&lt; 2, Coordinate &gt;</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1Point3dTo2dYZ.html</anchorfile>
      <anchor>a0c617d12256f49d52dec43d526038c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1Point3dTo2dYZ.html</anchorfile>
      <anchor>a70a711d23bee6f9947f57e14966cd368</anchor>
      <arglist>(const Input &amp;p) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::SCellToPoint</name>
    <filename>classDGtal_1_1deprecated_1_1SCellToPoint.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToPoint.html</anchorfile>
      <anchor>ac3df5f3c212c8abd66891ca1681bec63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToPoint.html</anchorfile>
      <anchor>acb141b4b98abf63d98fdca05f231fff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToPoint.html</anchorfile>
      <anchor>a6ffc5345a17579cb3ba6f32d794e3cd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToPoint.html</anchorfile>
      <anchor>a9c99ee2d2c7ac65bb9bcb3da526c3663</anchor>
      <arglist>(KSpace aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToPoint.html</anchorfile>
      <anchor>a231c83ffd694d7bc7321360db57ac4a3</anchor>
      <arglist>(const SCellToPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToPoint.html</anchorfile>
      <anchor>a24be8bf390ff4a34f5f0617036edd2b3</anchor>
      <arglist>(const SCellToPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToPoint.html</anchorfile>
      <anchor>a39eedd1d2d5ac26b53d460acd9c1d742</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KSpace</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToPoint.html</anchorfile>
      <anchor>a2e0b3531ea7add6af303ad75dfa4ff42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::SCellToMidPoint</name>
    <filename>classDGtal_1_1deprecated_1_1SCellToMidPoint.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>PointVector&lt; KSpace::dimension, double &gt;</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToMidPoint.html</anchorfile>
      <anchor>af9ace0633f80109bf4a9f8d221bc0e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToMidPoint.html</anchorfile>
      <anchor>ad7cb05817b34233a375d447290afe877</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToMidPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a68bbd58ba19d71d12059309b97d907db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToMidPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToMidPoint.html</anchorfile>
      <anchor>aa30a49c1177ce2041ed36b102862c08e</anchor>
      <arglist>(KSpace aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToMidPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a056b04721b92a742338338eb59d3a271</anchor>
      <arglist>(const SCellToMidPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToMidPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToMidPoint.html</anchorfile>
      <anchor>aa2e921959173eeb4376d21b733c25694</anchor>
      <arglist>(const SCellToMidPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a9756c92226434eb37ca3d4cba16caf09</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KSpace</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToMidPoint.html</anchorfile>
      <anchor>a43c7a1eaf7b993be2ea3572fe60c1d05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::SCellToArrow</name>
    <filename>classDGtal_1_1deprecated_1_1SCellToArrow.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>a123501c9306a83f1d4ba8ba7835334ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>a05d2c04fc47d400135ec559b3016ef4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Point, Vector &gt;</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>a91443e6b1a2ef5661421308d02cbed7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>a450645a68ddc3da4af45f1811395774b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToArrow</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>aff7bb2d472a89d04ca0660120f9b4fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToArrow</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>a80a3821d133f0127b70cb079dc8a48b1</anchor>
      <arglist>(KSpace aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToArrow</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>ad65c6261d9eb7490c021a2efb8652e0e</anchor>
      <arglist>(const SCellToArrow &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToArrow &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>a80337141afc78634ed2310051a17f2f4</anchor>
      <arglist>(const SCellToArrow &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>a547233e3baf1863e2de609b938ab7db2</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KSpace</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToArrow.html</anchorfile>
      <anchor>a91aaf5864997abc5b28d3a5542047cec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::SCellToInnerPoint</name>
    <filename>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a42259b53088493df991564c3be2bd8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>ab48355b375cde0c0e3e63585f00f62ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToInnerPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>ae0056f480fbab2b5c8289c55144d2ffb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToInnerPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a87f27f4f9190e9949f2536ac22086e63</anchor>
      <arglist>(KSpace aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToInnerPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>aedd312b2c2f964cc8dd355126a03eb8a</anchor>
      <arglist>(const SCellToInnerPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToInnerPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>ae458cac37aa57ef3dd5364d234f1cbf7</anchor>
      <arglist>(const SCellToInnerPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a903cd66bbbbce1c4b3760ddbbaa9cf92</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>a3b79a42ed164bfdab8e7e253c3db555e</anchor>
      <arglist>((KSpace::dimension==2))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KSpace</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToInnerPoint.html</anchorfile>
      <anchor>aa606809b4d5372d7db435e213f95536a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::SCellToOuterPoint</name>
    <filename>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a084a5cc2dbec40fdbedc3f3ffcadf030</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>aa0f7db488fc86db89f16950324b995a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToOuterPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>ab59ef2498ed278cd9b9c0649cd4623a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToOuterPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a0d31e804d5a19b6641670c11df32c2e4</anchor>
      <arglist>(KSpace aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToOuterPoint</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>aaeab7b9cb372ad50e2f494eb43191f2c</anchor>
      <arglist>(const SCellToOuterPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToOuterPoint &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a3b2e49ba44628f1136a8bd5e5f54ac27</anchor>
      <arglist>(const SCellToOuterPoint &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a80ed30b141ba035501af31154c697840</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>a76f264b06c16386a6a6f2c11c7a27ea9</anchor>
      <arglist>((KSpace::dimension==2))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KSpace</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToOuterPoint.html</anchorfile>
      <anchor>aa2fc9016b4097ffb3468ab446a749fa0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::SCellToIncidentPoints</name>
    <filename>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a536ff4db84c7218560bb017b8c05244b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Point, Point &gt;</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>aebd96cc0ee88f316b2581b75479b88c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>af57c91292495fbc1701c44b6dc1cfaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToIncidentPoints</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a35ffb451561666c2a47019347ebc44c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToIncidentPoints</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>ac14c0aebc68b6c4ffbc5d6c781711bbc</anchor>
      <arglist>(KSpace aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToIncidentPoints</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>ae29ebdf8390b5b8ac2228f11909c4997</anchor>
      <arglist>(const SCellToIncidentPoints &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToIncidentPoints &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a8ab8b9be542e584134be9e5240e0dc75</anchor>
      <arglist>(const SCellToIncidentPoints &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a568b11e48ad2153b5606a86317ab204b</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>a1bf1b0435f96159553bce2d940c0f301</anchor>
      <arglist>((KSpace::dimension==2))</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KSpace</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToIncidentPoints.html</anchorfile>
      <anchor>adddfe1035e8cb159286c3bf2cd2ea2f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::SCellToCode</name>
    <filename>classDGtal_1_1deprecated_1_1SCellToCode.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>KSpace::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>a9a0ee5d991a1648684760cdb23ba9994</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>ade1d640e8bf061e21e4da606944d540a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>Output</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>a65fe5b17fe9d50c71344e2c8b1ba780e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>Input</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>ab80ed4f56ba46ad1d43285bc3c1f111a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToCode</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>a3f836ebea24ab46051ffef025ddf0620</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToCode</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>afbe4ef9cea9702a6efc2141db91208c9</anchor>
      <arglist>(KSpace aK)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SCellToCode</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>a7258c522c51df5f2bd804658c8558424</anchor>
      <arglist>(const SCellToCode &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>SCellToCode &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>a19708161410c5d57e497cc8a9c50d8d4</anchor>
      <arglist>(const SCellToCode &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Output</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>a33d2dc7985a91458a1fdb088a8477b00</anchor>
      <arglist>(const Input &amp;s) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_STATIC_ASSERT</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>ae705b9dbf806627860cd4b7a524ed044</anchor>
      <arglist>(KSpace::dimension==2)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>KSpace</type>
      <name>myK</name>
      <anchorfile>classDGtal_1_1deprecated_1_1SCellToCode.html</anchorfile>
      <anchor>a85701a84b86875a4cd4164e9bf600ea1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::GreedyDecomposition</name>
    <filename>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</filename>
    <templarg>TSegment</templarg>
    <class kind="class">DGtal::deprecated::GreedyDecomposition::SegmentIterator</class>
    <member kind="typedef">
      <type>TSegment</type>
      <name>Segment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>ad1ca60aeb395922613de6404dcd7119a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Segment::ConstIterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>a3efc4611fb77a73df1935279655a08ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GreedyDecomposition</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>ac11552910acce39f5f8d329b8c9d7366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GreedyDecomposition</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>a0be507fa2655a65bcb621f5a6a0a31ad</anchor>
      <arglist>(const Iterator &amp;aBegin, const Iterator &amp;aEnd, const Segment &amp;aSegment, const bool &amp;aFlag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>a712481030a0475c77a67ea20b27f0a92</anchor>
      <arglist>(const Iterator &amp;aBegin, const Iterator &amp;aEnd, const Segment &amp;aSegment, const bool &amp;aFlag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GreedyDecomposition</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>a50e6451005d3eab94c0b613f6d09afbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GreedyDecomposition::SegmentIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>af50a877496ea3cd0507a34a83ec3b8f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>GreedyDecomposition::SegmentIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>a47513c6ac00276c7237d38d5366d8b4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>ae8a2a09c0e13458dd232db2b607f7d27</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>ad487083d1a4c76ab4be6069de0484590</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>GreedyDecomposition</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>a376f3d20e18083101f696ad4031dec88</anchor>
      <arglist>(const GreedyDecomposition &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>GreedyDecomposition &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>a31005bdb893b12257b361a8b7f7ff757</anchor>
      <arglist>(const GreedyDecomposition &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>ad2c79fa6296c657feb3b0c2a89721d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>a2b7500f7ed50769f02407b7bbd6a9643</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment</type>
      <name>mySegment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>ab588d8e09ca595a87848192788b488fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition.html</anchorfile>
      <anchor>a0364c8188c7d29f7bed6793d12e92632</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::GreedyDecomposition::SegmentIterator</name>
    <filename>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>SegmentIterator</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a7d0ca989e1856619553077692fb0df46</anchor>
      <arglist>(const GreedyDecomposition&lt; TSegment &gt; *aDec, const typename TSegment::ConstIterator &amp;aBack, const TSegment &amp;aSegment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentIterator</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>ae4e4c4c173b6d1cc7b2f84f523c64bba</anchor>
      <arglist>(const SegmentIterator &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type>SegmentIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a379d08d025c080ac907095deec089eaa</anchor>
      <arglist>(const SegmentIterator &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SegmentIterator</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>af3383e62b1da34905464b9c60be4ebd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Segment</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a3444c984a600ccbc336d27aa58f5b0de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Segment</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a13aecb58857dd145d2ee50f446022d90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a340d4fd93d3a722a9946b3b763451574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a32a8ffb3ce1fda77a79331ea50f05f54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectNext</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a1a4e16739170c7bce1a84f166d514016</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectPrevious</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a0a82570ddeb0a94cce0702c2cbc82da9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Iterator</type>
      <name>getFront</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a069652273ffafbb7a2f3963499061a41</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Iterator</type>
      <name>getBack</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>af036ee4288d6dcd0500086e9246df87a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a77023528501cddda1071b91261a30196</anchor>
      <arglist>(const SegmentIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a2d4bed619176a1bf725c48245e424ee4</anchor>
      <arglist>(const SegmentIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>longestSegment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>af3f856ec2ec786cab5dffabf9d07f8fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a76b3b10409cc4c9c10f03de5dc514a3e</anchor>
      <arglist>(const Iterator &amp;it)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const GreedyDecomposition&lt; TSegment &gt; *</type>
      <name>myDec</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>ae1d2f67390f28e51d6de6889f647ef2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myFront</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>ae25376208a8dd7fb78761f4ff27cbb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myBack</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a0356f03d2b8586880b4f2867529d79db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment</type>
      <name>mySegment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a43d5a156354c712fbe1426eb22d1951d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIntersectNext</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a37d016e3a2e440cbd9488fb7c796e05d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIntersectPrevious</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>a0c7ff95020e4888b9c3f735ad2663afe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GreedyDecomposition&lt; TSegment &gt;</name>
      <anchorfile>classDGtal_1_1deprecated_1_1GreedyDecomposition_1_1SegmentIterator.html</anchorfile>
      <anchor>aad0c616b515234edc5302ca482ba1362</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::MaximalSegments</name>
    <filename>classDGtal_1_1deprecated_1_1MaximalSegments.html</filename>
    <templarg>TSegment</templarg>
    <class kind="class">DGtal::deprecated::MaximalSegments::SegmentIterator</class>
    <member kind="typedef">
      <type>TSegment</type>
      <name>Segment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a2a85337ae32427a0a56c9addcf4a95cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSegment::Reverse</type>
      <name>ReverseSegment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a81163b6faecb4f94801432811ac33986</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TSegment::ConstIterator</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a6f0a938ea7979e2720d51e1e6f4c00da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReverseSegment::ConstIterator</type>
      <name>ReverseIterator</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a706f24694b3c957dcc30aa30950121c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaximalSegments</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>abd1eaac2e1041f43dd5139976dfdc8a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MaximalSegments</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a6f29ccf5ffedcfe8600693311df48261</anchor>
      <arglist>(const Iterator &amp;beginIt, const Iterator &amp;endIt, const Segment &amp;aSegment, const bool &amp;aFlag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a6aebc9be8bb043b2b0111556879181b4</anchor>
      <arglist>(const Iterator &amp;beginIt, const Iterator &amp;endIt, const Segment &amp;aSegment, const bool &amp;aFlag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MaximalSegments</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>aabf9fda70b506ca400706c2e590ab8c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaximalSegments::SegmentIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a262fcec02a7dd0b3605592f01c6b6ef1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MaximalSegments::SegmentIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>aba998e09d87b9cf205f7568a59eac29f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>ac0ac37ce4a1c2d1998bb91f1ee03dddb</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>ab3d02f0514a8b85d67dca346f2c2512a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>MaximalSegments</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a87e4be8f44267f8a9fdbde323b433a71</anchor>
      <arglist>(const MaximalSegments &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>MaximalSegments &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a89b2380d322b29940aaf2aa327166376</anchor>
      <arglist>(const MaximalSegments &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a05ac04af61f31b1ce133885b3470ecbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>aa6243db983875cd9480860d80cf2ae32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myFirstMaximalSegmentBack</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>af1abe0cc8e8c9eba57a767c4402581b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment</type>
      <name>mySegment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a2339ea6cd71cb2891704062689290773</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>isClosed</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments.html</anchorfile>
      <anchor>a205d133a6c9e4de4fbbeb1156e5081ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::MaximalSegments::SegmentIterator</name>
    <filename>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>SegmentIterator</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>aa5eb71749cfe8b77f0d67a437a4fd5ec</anchor>
      <arglist>(MaximalSegments&lt; Segment &gt; *aCov, const Iterator &amp;aBack, const Segment &amp;aSegment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SegmentIterator</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>ae37a8450be73bf616d8d3faef4e00346</anchor>
      <arglist>(const SegmentIterator &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type>SegmentIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a923cc69061d6cdb2165fa0c2db6f41fb</anchor>
      <arglist>(const SegmentIterator &amp;aOther)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SegmentIterator</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a71a0ddd922ab7f21a8b685c36d426e2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Segment</type>
      <name>operator*</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a0b5a6a84a55dab7acf1fec54baa6195c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Segment</type>
      <name>get</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>af1683e4c3a34ea9cc26761e8fbabb3db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>SegmentIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>aa4281bdf93e1f289f97c562b53c73190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectNext</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a7c8f1a2081ee33aaac512eaeb1eef07d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersectPrevious</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>ad93d6d2b80a2193a3b5ffe3cd6b315b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Iterator</type>
      <name>getFront</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a31a265d6fbd5d3bb9c5fc27a536da6ab</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Iterator</type>
      <name>getBack</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a88a80ef3050531d27ace5c93d9ffd75e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a5ab8c145db0f59d352cfdc9d7728315d</anchor>
      <arglist>(const SegmentIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>ae5df77cdef2f40288337e99b2e90271d</anchor>
      <arglist>(const SegmentIterator &amp;aOther) const </arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extension</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a8c5119375d54753c5855b1f70e5ba291</anchor>
      <arglist>(TypeSegment &amp;aSeg, TypeIterator &amp;it, const TypeIterator &amp;end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extension</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>aee5e5b6b63a37154c0e3bcc719bb6f7e</anchor>
      <arglist>(TypeSegment &amp;aSeg, TypeIterator &amp;it)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>extensionInLoop</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a9702364eb4624d2d12b0d478f9c0a8de</anchor>
      <arglist>(TypeSegment &amp;aSeg, TypeIterator &amp;it, const TypeIterator &amp;begin, const TypeIterator &amp;end)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>firstMaximalSegment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a513155e75fbec74d13cf919a14142279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>nextMaximalSegment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a28db5f251f61e36e9ff1fa7e3f87cc99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>doesIntersectNext</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a5bef0ebfeed3e30390e5509ca4988cdd</anchor>
      <arglist>(const Iterator &amp;it)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>MaximalSegments&lt; Segment &gt; *</type>
      <name>myCov</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>ac8499e6b3a03f625c859230fe8a0030e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myFront</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a7d8b7b57fb472b6d3a1a8961573b2525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myBack</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a367e010ef61089cc5a5ca5c4cea82bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Segment</type>
      <name>mySegment</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a9be69dbc1b727b496ec667e7cc51992d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIntersectNext</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>ae48469b2af4ec2caf16c5913429c1ec9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlagIntersectPrevious</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a0de0631406f94434f24b4eb09bd79d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>myFlag</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>abeb354cce436c26e294c392497fd069f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>MaximalSegments&lt; Segment &gt;</name>
      <anchorfile>classDGtal_1_1deprecated_1_1MaximalSegments_1_1SegmentIterator.html</anchorfile>
      <anchor>a9d66d51afbb1c98cd382891e55c50f88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::deprecated::DomainMetricAdjacency</name>
    <filename>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</filename>
    <templarg></templarg>
    <templarg>maxNorm1</templarg>
    <templarg>dimension</templarg>
    <member kind="typedef">
      <type>Domain::Space</type>
      <name>Space</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a27ad9ed2f52ea3dffa1d145354c6134d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a5dd1e2d3cc0d4fa5684489e13a8c79bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a676a7a5f0ecb103ac5b7bf55d8f267c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainMetricAdjacency</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a6efdd26b146c07f2359fae55f62d3e41</anchor>
      <arglist>(const Domain &amp;aDomain)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainMetricAdjacency</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>ab5a8c21ebd2b13fb5099ef8b236287b2</anchor>
      <arglist>(const DomainMetricAdjacency &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DomainMetricAdjacency</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a0a9f6124a53d035ddd9089dfc37c684b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAdjacentTo</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>ac4e1363ecbb41132f9fcbde699697f23</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isProperlyAdjacentTo</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a4697adbc048c9f4243d5bb2134d5724c</anchor>
      <arglist>(const Point &amp;p1, const Point &amp;p2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeNeighborhood</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a66f879c347d9888479761ebdc9a1df08</anchor>
      <arglist>(const Point &amp;p, OutputIterator &amp;out_it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeProperNeighborhood</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>ae517a335990d3a09296d316fa6a804f0</anchor>
      <arglist>(const Point &amp;p, OutputIterator &amp;out_it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a427fbec17d7592b07ace9ae7a9a0490c</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>af461532ea5dfc441022d35c712fbfad9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DomainMetricAdjacency</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a27696bc6ac9b224357a8513b71e403e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>aef0a09182668d295e615469260e1810b</anchor>
      <arglist>((CDomain&lt; Domain &gt;))</arglist>
    </member>
    <member kind="function" protection="private">
      <type>DomainMetricAdjacency &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>adc11aaa7619e91d06c842b9ba4449eea</anchor>
      <arglist>(const DomainMetricAdjacency &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>const Domain &amp;</type>
      <name>myDomain</name>
      <anchorfile>classDGtal_1_1deprecated_1_1DomainMetricAdjacency.html</anchorfile>
      <anchor>a08ab38d246bcbc1c5cae93d2ff00bce6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>DGtal::detail</name>
    <filename>namespaceDGtal_1_1detail.html</filename>
    <class kind="struct">DGtal::detail::HasNestedType</class>
    <class kind="struct">DGtal::detail::IsCirculator</class>
    <class kind="struct">DGtal::detail::IsCirculator&lt; IC, true &gt;</class>
    <class kind="struct">DGtal::detail::IteratorCirculatorTypeImpl</class>
    <class kind="struct">DGtal::detail::IteratorCirculatorTypeImpl&lt; true &gt;</class>
    <class kind="struct">DGtal::detail::LabelledMapMemFunctor</class>
    <class kind="class">DGtal::detail::PosIndepScaleIndepSCEstimator</class>
    <class kind="class">DGtal::detail::PosIndepScaleDepSCEstimator</class>
    <class kind="class">DGtal::detail::PosDepScaleIndepSCEstimator</class>
    <class kind="class">DGtal::detail::PosDepScaleDepSCEstimator</class>
    <class kind="struct">DGtal::detail::TangentAngleFromDSS</class>
    <class kind="struct">DGtal::detail::NormalizedTangentVectorFromDSS</class>
    <class kind="struct">DGtal::detail::TangentVectorFromDSS</class>
    <class kind="struct">DGtal::detail::CurvatureFromDCA</class>
    <class kind="struct">DGtal::detail::CurvatureFromDCA&lt; false &gt;</class>
    <class kind="struct">DGtal::detail::NormalVectorFromDCA</class>
    <class kind="struct">DGtal::detail::TangentVectorFromDCA</class>
    <class kind="struct">DGtal::detail::DistanceFromDCA</class>
    <class kind="struct">DGtal::detail::CurvatureFromDSSLength</class>
    <class kind="struct">DGtal::detail::CurvatureFromDSSLengthAndWidth</class>
    <class kind="class">DGtal::detail::CurvatureFromDSSBaseEstimator</class>
    <member kind="function">
      <type>bool</type>
      <name>isNotEmpty</name>
      <anchorfile>namespaceDGtal_1_1detail.html</anchorfile>
      <anchor>a58243ebf587bb6ca6eafd9184dae75c4</anchor>
      <arglist>(const IC &amp;itb, const IC &amp;ite, IteratorType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNotEmpty</name>
      <anchorfile>namespaceDGtal_1_1detail.html</anchorfile>
      <anchor>a30249aee78160c75dcd9af6f399cd4b0</anchor>
      <arglist>(const IC &amp;c1, const IC &amp;c2, CirculatorType)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; unsigned int, unsigned int &gt;</type>
      <name>argminLabelledMapMemoryUsageForGeometricDistribution</name>
      <anchorfile>namespaceDGtal_1_1detail.html</anchorfile>
      <anchor>aa5fa503d580db4f9c6d421783c54eac0</anchor>
      <arglist>(unsigned int L, double prob_no_data, double prob_one_data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::HasNestedType</name>
    <filename>structDGtal_1_1detail_1_1HasNestedType.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>char</type>
      <name>yes</name>
      <anchorfile>structDGtal_1_1detail_1_1HasNestedType.html</anchorfile>
      <anchor>a827a9b4bab62ea43ecfa718b509d6750</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>no</name>
      <anchorfile>structDGtal_1_1detail_1_1HasNestedType.html</anchorfile>
      <anchor>ac3fe40337cb4cee1bf8913088c44151c</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static yes &amp;</type>
      <name>test</name>
      <anchorfile>structDGtal_1_1detail_1_1HasNestedType.html</anchorfile>
      <anchor>a06b22877ad3c0ade2b456126ac37fc41</anchor>
      <arglist>(typename C::Type *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static no &amp;</type>
      <name>test</name>
      <anchorfile>structDGtal_1_1detail_1_1HasNestedType.html</anchorfile>
      <anchor>af14e2454ecc77f63ae2f563664729b3b</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1detail_1_1HasNestedType.html</anchorfile>
      <anchor>a6c8f1853df06126929e3710436e8f1de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::IsCirculator</name>
    <filename>structDGtal_1_1detail_1_1IsCirculator.html</filename>
    <templarg></templarg>
    <templarg>flagHasNestedType</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1detail_1_1IsCirculator.html</anchorfile>
      <anchor>a66e23aaabcc82b10ff92c02044d56f6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::IsCirculator&lt; IC, true &gt;</name>
    <filename>structDGtal_1_1detail_1_1IsCirculator_3_01IC_00_01true_01_4.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>char</type>
      <name>yes</name>
      <anchorfile>structDGtal_1_1detail_1_1IsCirculator_3_01IC_00_01true_01_4.html</anchorfile>
      <anchor>a415d2dae69dc9b1a7e7d54c433607d8d</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="typedef">
      <type>char</type>
      <name>no</name>
      <anchorfile>structDGtal_1_1detail_1_1IsCirculator_3_01IC_00_01true_01_4.html</anchorfile>
      <anchor>a80f7bc5717b668bc541e0ed8138eef95</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static yes &amp;</type>
      <name>test</name>
      <anchorfile>structDGtal_1_1detail_1_1IsCirculator_3_01IC_00_01true_01_4.html</anchorfile>
      <anchor>ab559af0d5a2420081ea7177cf9cf6a8d</anchor>
      <arglist>(CirculatorType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static no &amp;</type>
      <name>test</name>
      <anchorfile>structDGtal_1_1detail_1_1IsCirculator_3_01IC_00_01true_01_4.html</anchorfile>
      <anchor>a8a000963fb9db1b4715fec1518b29522</anchor>
      <arglist>(IteratorType)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>structDGtal_1_1detail_1_1IsCirculator_3_01IC_00_01true_01_4.html</anchorfile>
      <anchor>ae9b7815fa2386f09846dfd5fc1101ecc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::IteratorCirculatorTypeImpl</name>
    <filename>structDGtal_1_1detail_1_1IteratorCirculatorTypeImpl.html</filename>
    <templarg>b</templarg>
    <member kind="typedef">
      <type>IteratorType</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1detail_1_1IteratorCirculatorTypeImpl.html</anchorfile>
      <anchor>aa9130adaf3e4ae98b2322f07895d2b21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::IteratorCirculatorTypeImpl&lt; true &gt;</name>
    <filename>structDGtal_1_1detail_1_1IteratorCirculatorTypeImpl_3_01true_01_4.html</filename>
    <member kind="typedef">
      <type>CirculatorType</type>
      <name>Type</name>
      <anchorfile>structDGtal_1_1detail_1_1IteratorCirculatorTypeImpl_3_01true_01_4.html</anchorfile>
      <anchor>ac0561582f0c60db10f2a085e3abdc628</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::LabelledMapMemFunctor</name>
    <filename>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</filename>
    <member kind="function">
      <type></type>
      <name>LabelledMapMemFunctor</name>
      <anchorfile>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</anchorfile>
      <anchor>a5402346170864cdbfcab4da61a0141b0</anchor>
      <arglist>(double p, double q, unsigned int sL, unsigned int sV, unsigned int sP, unsigned int sA)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fctNM</name>
      <anchorfile>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</anchorfile>
      <anchor>aeddf354e0d40fbe0bc3cb22b4773f55b</anchor>
      <arglist>(unsigned int N, unsigned int M) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fctNMpq</name>
      <anchorfile>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</anchorfile>
      <anchor>a7826f10abfb7b1463416694c85b8c165</anchor>
      <arglist>(unsigned int N, unsigned int M, double p, double q) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_p</name>
      <anchorfile>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</anchorfile>
      <anchor>acb6c90e8b9f28cb8a76ee9e30b633c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>_q</name>
      <anchorfile>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</anchorfile>
      <anchor>a53866f953b5ce5388c92b0d57fee1397</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>_sL</name>
      <anchorfile>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</anchorfile>
      <anchor>a53306994cad74c6b628758eab4b87336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>_sV</name>
      <anchorfile>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</anchorfile>
      <anchor>af8162697ab628ad37e3ed275105b2317</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>_sP</name>
      <anchorfile>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</anchorfile>
      <anchor>ad2a660593920573c45216bbfe59c17f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>_sA</name>
      <anchorfile>structDGtal_1_1detail_1_1LabelledMapMemFunctor.html</anchorfile>
      <anchor>a6b344cfaa7619b21744075f91b297aeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::detail::PosIndepScaleIndepSCEstimator</name>
    <filename>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</filename>
    <templarg>TSegmentComputer</templarg>
    <templarg>Functor</templarg>
    <templarg>ReturnType</templarg>
    <member kind="typedef">
      <type>TSegmentComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>af0a43e906305bebcf6849eedc85ef505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a04f2dd8ae21af66fc51f9f874f40b0c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReturnType</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a441ee2de78634c64af65671208415e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>afa29d45723c7e933929497bbd1b44ba3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosIndepScaleIndepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a0a30627d9381ea4b96d7ec819f1e0da3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ac7fc5918522c698d646bf8bf14a280a3</anchor>
      <arglist>(const double, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a0d832412c9adc62b70ef9eb6fe58b900</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a6f82b603ec6a15a3a9685ccffd219910</anchor>
      <arglist>(const ConstIterator &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ace23724b28e9078079482107236bea41</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const </arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a31642c35ff25195925f1f72ee02e8329</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a8bad91ac70845458022a7d4fae23f57a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a653baa60e0215d7881adb9f0bbe669d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Functor</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a1020afea497fb691273e363e585aa6f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::detail::PosIndepScaleDepSCEstimator</name>
    <filename>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</filename>
    <templarg>TSegmentComputer</templarg>
    <templarg>Functor</templarg>
    <templarg>ReturnType</templarg>
    <member kind="typedef">
      <type>TSegmentComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ab1f1d608527f4d0bcc2f12b44039b0f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ac1678db92f3f134fc073b9d340677429</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReturnType</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ac412baecf14d6092846344ad7f4731e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosIndepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a9f12617912b2a290282ff96c8078da77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosIndepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>af551abbcebd8a3f5b19937437e8df095</anchor>
      <arglist>(const PosIndepScaleDepSCEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PosIndepScaleDepSCEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ab2661917486eadc5ca457aeb89ab8e19</anchor>
      <arglist>(const PosIndepScaleDepSCEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PosIndepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a413c63c6d6db6d9ae9590967322b0004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a856a1bd04592496f742991d0ae6a3ef2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ac23b30470b729d2e7733071ec540b038</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ab0b6fbe60569fd461a2fb362b0d6fc72</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a5e8956c50a189ce505dc0c5cceb036fa</anchor>
      <arglist>(const ConstIterator &amp;) const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>aa75d7439479b71aff291a3121b3bdb51</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a3ac166f4052c77534b6cdffa4332e283</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ae3b9d6b856caef74947eae3cabd1e01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>a4048ec4b98ad0e479088477c0ebc606a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>ae739a4a6ecaffa3492a21bb6d8f935db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Functor</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosIndepScaleDepSCEstimator.html</anchorfile>
      <anchor>af953ad483406774ac67cd9e9bb900203</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::detail::PosDepScaleIndepSCEstimator</name>
    <filename>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</filename>
    <templarg>TSegmentComputer</templarg>
    <templarg>Functor</templarg>
    <templarg>ReturnType</templarg>
    <member kind="typedef">
      <type>TSegmentComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ae53c18dd09abf562567db1b30cefef39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a1aaa2f2b9b3db05d5a811277df98129b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReturnType</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ab86712abc7bca320abeed801272586fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a9a11b109e1224d145b89829ed7fd9677</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosDepScaleIndepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>afc2789e119896b74f7ae8420ce3119fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a3cc1728cdd5701ee142b7d3bc313870b</anchor>
      <arglist>(const double, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a54fa1bd65c151a02daabfb4bcd909920</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a8588efa89a398cadd33924d44a354a48</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a61a5184d89a163ad6440ffd29456da5a</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const </arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a058222a4834495d7e9e5b97b518f3208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a5a0a69f4fb6755f8c5eebe56d918352d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>a65e8eb861d1bd919876ab092bb6109c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Functor</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleIndepSCEstimator.html</anchorfile>
      <anchor>ac365608f647659508a2eee7208692541</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::detail::PosDepScaleDepSCEstimator</name>
    <filename>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</filename>
    <templarg>TSegmentComputer</templarg>
    <templarg>Functor</templarg>
    <templarg>ReturnType</templarg>
    <member kind="typedef">
      <type>TSegmentComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>aceb9654478477e1474d4daa0ab8a746b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SegmentComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a1862147a73aa5c67eac1bd5b1e38213f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReturnType</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a2f04c4e46aec5a374f63624f3a76bb7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosDepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a7be99be13d905245a519bf7a02b3e4e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosDepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a63f66f89a44f629ace1054b2b150bb9c</anchor>
      <arglist>(const PosDepScaleDepSCEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PosDepScaleDepSCEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>ab02aa3faf3089a7b91f2e56c972af2ff</anchor>
      <arglist>(const PosDepScaleDepSCEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PosDepScaleDepSCEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a28d44529654cfdecbeca7c63b4735011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a30af234036074800f968c1d9e2de0e07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a6345df3438a39dc6a2e59dc44b761f4e</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a8c225afc8dd02c96acbff5996a5827f2</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a10e3bf7d2ab6c889a2ac2f6aacde38d4</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a58cf12e6359d4601f82e7dd24e5546f2</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result) const </arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>ad366d17d1256691fb530f389af342f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>af6e26e916b040edcbcb4f859265a47d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>a0201376a120da9d7e9b3538c0751b109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>abae0c36f4b5dabd4e7b9ce1cd29fe1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Functor</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1PosDepScaleDepSCEstimator.html</anchorfile>
      <anchor>acaed10f4de284e9c16f031160ab38af4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::TangentAngleFromDSS</name>
    <filename>structDGtal_1_1detail_1_1TangentAngleFromDSS.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1TangentAngleFromDSS.html</anchorfile>
      <anchor>aac0ba52b1c25a278d8688dde59898441</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1TangentAngleFromDSS.html</anchorfile>
      <anchor>a5546383bd7f2f0895f114661980507f2</anchor>
      <arglist>(const DSS &amp;aDSS) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::NormalizedTangentVectorFromDSS</name>
    <filename>structDGtal_1_1detail_1_1NormalizedTangentVectorFromDSS.html</filename>
    <member kind="typedef">
      <type>DGtal::PointVector&lt; 2, double &gt;</type>
      <name>RealVector</name>
      <anchorfile>structDGtal_1_1detail_1_1NormalizedTangentVectorFromDSS.html</anchorfile>
      <anchor>af8059172831af032bba7aff9bc20e255</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealVector</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1NormalizedTangentVectorFromDSS.html</anchorfile>
      <anchor>a8723b972e80fbdd85b684651e5f1041e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1NormalizedTangentVectorFromDSS.html</anchorfile>
      <anchor>a99e6e6b11fe7d5353dd4d85d63a006c6</anchor>
      <arglist>(const DSS &amp;aDSS) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::TangentVectorFromDSS</name>
    <filename>structDGtal_1_1detail_1_1TangentVectorFromDSS.html</filename>
    <templarg>DSS</templarg>
    <member kind="typedef">
      <type>DSS::Vector</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1TangentVectorFromDSS.html</anchorfile>
      <anchor>aa5ab89035a4ef7b2dd64f6e0ea38fefe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1TangentVectorFromDSS.html</anchorfile>
      <anchor>adcab99d8ecb1fca3eb3c2b145b9b5cb4</anchor>
      <arglist>(const DSS &amp;aDSS) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::CurvatureFromDCA</name>
    <filename>structDGtal_1_1detail_1_1CurvatureFromDCA.html</filename>
    <templarg>isCCW</templarg>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1CurvatureFromDCA.html</anchorfile>
      <anchor>a7e58a6427629eda96cacf70ed6cc3bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1CurvatureFromDCA.html</anchorfile>
      <anchor>a7b36e85fd1cf59610151f3ede4fd7a64</anchor>
      <arglist>(const DCA &amp;aDCA, const double &amp;aH=1.0) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::CurvatureFromDCA&lt; false &gt;</name>
    <filename>structDGtal_1_1detail_1_1CurvatureFromDCA_3_01false_01_4.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1CurvatureFromDCA_3_01false_01_4.html</anchorfile>
      <anchor>a60f7114e33a08179910f5b4b25daf68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1CurvatureFromDCA_3_01false_01_4.html</anchorfile>
      <anchor>a4273ca4f8556e85dc28c86d57588ad87</anchor>
      <arglist>(const DCA &amp;aDCA, const Value &amp;aH=1.0) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::NormalVectorFromDCA</name>
    <filename>structDGtal_1_1detail_1_1NormalVectorFromDCA.html</filename>
    <member kind="typedef">
      <type>PointVector&lt; 2, double &gt;</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1NormalVectorFromDCA.html</anchorfile>
      <anchor>a64ced542f6e2d24f00eee8090f0b9b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1NormalVectorFromDCA.html</anchorfile>
      <anchor>a77455b6b25739a490c2823b464cd1285</anchor>
      <arglist>(const typename DCA::ConstIterator &amp;it, const DCA &amp;aDCA) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::TangentVectorFromDCA</name>
    <filename>structDGtal_1_1detail_1_1TangentVectorFromDCA.html</filename>
    <member kind="typedef">
      <type>PointVector&lt; 2, double &gt;</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1TangentVectorFromDCA.html</anchorfile>
      <anchor>aba74d2b5c4bb66475efb57cbe390b5b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1TangentVectorFromDCA.html</anchorfile>
      <anchor>acc3c5ccfc3b47ad58be7478dd982366b</anchor>
      <arglist>(const typename DCA::ConstIterator &amp;it, const DCA &amp;aDCA) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::DistanceFromDCA</name>
    <filename>structDGtal_1_1detail_1_1DistanceFromDCA.html</filename>
    <member kind="typedef">
      <type>std::pair&lt; double, double &gt;</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1DistanceFromDCA.html</anchorfile>
      <anchor>a4ad67f20e72b13ded0515cc01413e193</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1DistanceFromDCA.html</anchorfile>
      <anchor>af8289408b7f445f043cfd34acc9edaeb</anchor>
      <arglist>(const typename DCA::ConstIterator &amp;it, const DCA &amp;aDCA, const double &amp;aH) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::CurvatureFromDSSLength</name>
    <filename>structDGtal_1_1detail_1_1CurvatureFromDSSLength.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1CurvatureFromDSSLength.html</anchorfile>
      <anchor>ab62993b8ab34b52b6e966e91196c2854</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1CurvatureFromDSSLength.html</anchorfile>
      <anchor>a8cc551b683c2ff6bb7d5ea3867c168ab</anchor>
      <arglist>(const DSS &amp;aDSS) const </arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>DGtal::detail::CurvatureFromDSSLengthAndWidth</name>
    <filename>structDGtal_1_1detail_1_1CurvatureFromDSSLengthAndWidth.html</filename>
    <member kind="typedef">
      <type>double</type>
      <name>Value</name>
      <anchorfile>structDGtal_1_1detail_1_1CurvatureFromDSSLengthAndWidth.html</anchorfile>
      <anchor>a4fd8360324e116f730264e7145a2322d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>structDGtal_1_1detail_1_1CurvatureFromDSSLengthAndWidth.html</anchorfile>
      <anchor>a5d030af7b3a07880efbc28a9e589c128</anchor>
      <arglist>(const DSS &amp;aDSS) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGtal::detail::CurvatureFromDSSBaseEstimator</name>
    <filename>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</filename>
    <templarg>DSSComputer</templarg>
    <templarg>Functor</templarg>
    <member kind="typedef">
      <type>DSSComputer</type>
      <name>SegmentComputer</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>af6165f8e99e21fcf1cc01ab326a08696</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DSSComputer::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a2cb72baaf0dd0f1351248444867f12db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Quantity</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ac6268b11a3b06aba31a497741363bd4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ae3177bef0ae6cbf8f2f63e38758c46af</anchor>
      <arglist>((CUnaryFunctor&lt; Functor, SegmentComputer, Quantity &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSBaseEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ac809346b9b1ceb96c095a6b61826ea9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CurvatureFromDSSBaseEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a75adc2445c88d230209f4c8ebbc73eb5</anchor>
      <arglist>(const CurvatureFromDSSBaseEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CurvatureFromDSSBaseEstimator &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ad1980700c89cc34d1022156aaf27e964</anchor>
      <arglist>(const CurvatureFromDSSBaseEstimator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CurvatureFromDSSBaseEstimator</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a58877107cec3392126793e489fd434eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a9af558050806f3e9c443896e6d50be5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a5adf995e948ef9253739ce271a39be06</anchor>
      <arglist>(const double h, const ConstIterator &amp;itb, const ConstIterator &amp;ite)</arglist>
    </member>
    <member kind="function">
      <type>Quantity</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a52cb79108e6105b0ba6c6dcf43b230e2</anchor>
      <arglist>(const ConstIterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>OutputIterator</type>
      <name>eval</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ab6b916c426d8ad13d3e1e2d1c09e954b</anchor>
      <arglist>(const ConstIterator &amp;itb, const ConstIterator &amp;ite, OutputIterator result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ad293ec3dd58f0ed0c623ef1b96dd4b3f</anchor>
      <arglist>(const SegmentComputer &amp;aSC)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>myH</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>af4d3e897df4a5bcecd1ccfa5698f7ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myBegin</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a2961b014c6e35bbacbfb3527423b002a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ConstIterator</type>
      <name>myEnd</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a198a5c5bea5fcb052d5010d7e4d85a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const SegmentComputer *</type>
      <name>mySCPtr</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>ac511af52e84e0324dd275d4f490cad0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Functor</type>
      <name>myFunctor</name>
      <anchorfile>classDGtal_1_1detail_1_1CurvatureFromDSSBaseEstimator.html</anchorfile>
      <anchor>a317ce147dcf78ccec15ee94a1773b64c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>DGtal::details</name>
    <filename>namespaceDGtal_1_1details.html</filename>
    <class kind="class">DGtal::details::PointValueCompare</class>
  </compound>
  <compound kind="class">
    <name>DGtal::details::PointValueCompare</name>
    <filename>classDGtal_1_1details_1_1PointValueCompare.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1details_1_1PointValueCompare.html</anchorfile>
      <anchor>af1d57eede2ecf19b6ebba0e230aa1dc8</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>DGtal::experimental</name>
    <filename>namespaceDGtal_1_1experimental.html</filename>
    <class kind="class">DGtal::experimental::ImageContainerByITKImage</class>
  </compound>
  <compound kind="class">
    <name>DGtal::experimental::ImageContainerByITKImage</name>
    <filename>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</filename>
    <templarg>TDomain</templarg>
    <templarg>TValue</templarg>
    <member kind="typedef">
      <type>TValue</type>
      <name>Value</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a2d8fd57a508f74115c18ffaa100ef549</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TDomain</type>
      <name>Domain</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a2d048a7cce137baba25f37c7c5789cc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Point</type>
      <name>Point</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a58467feb315209435f4481e82796e532</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Vector</type>
      <name>Vector</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a666ad1e257f1c8024da19aaba7323138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Dimension</type>
      <name>Dimension</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>ac2e548bdb774d2d8e1f68f1a51efadfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Integer</type>
      <name>Integer</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a29920bda4d754092f75a056e1bae220e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain::Size</type>
      <name>Size</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a5aad76066183c77223ca5ed4909969e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point</type>
      <name>Vertex</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>ab3cb2643d08ed459864d53f8ebac3b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>itk::Image&lt; TValue, dimension &gt;</type>
      <name>ITKImage</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a18a4374fab58115b55cdfe4d7da78777</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ITKImage::Pointer</type>
      <name>ITKImagePointer</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a9617dd1cb6b04067e0a2186d9c472272</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>itk::ImageRegionConstIterator&lt; ITKImage &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a84c2e1273417c7b2590da70c423f8534</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>itk::ImageRegionIterator&lt; ITKImage &gt;</type>
      <name>Iterator</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a1e3523910e5fca325520d270763ca2ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>ac500b5e19aa4f3c20ce97fbef8a3f5f2</anchor>
      <arglist>((CLabel&lt; TValue &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_ASSERT</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a8051eff68aa9e2104dbdb8e3b215e79e</anchor>
      <arglist>((CDomain&lt; TDomain &gt;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageContainerByITKImage</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a94569d9b09f5973a254c1e6d5744d1f9</anchor>
      <arglist>(const Point &amp;aPointA, const Point &amp;aPointB)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImageContainerByITKImage</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>ac3608319cd7059e9cab5637a0c32ae15</anchor>
      <arglist>(const Point &amp;aPointA, const Point &amp;aPointB, ITKImagePointer &amp;aRef)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ImageContainerByITKImage</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a7d74836bafa4c15efdf6fb23e6da6e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a557970607caee40de5b9e569cd540db5</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a4a02b54704a9b6a4a999fda925f1f117</anchor>
      <arglist>(const ConstIterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>Value</type>
      <name>operator()</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a9d7a2419911bc12ea76740183d632fa9</anchor>
      <arglist>(const Iterator &amp;it) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>ae14c3c7fb6b2c928d567878e4d87cead</anchor>
      <arglist>(const Point &amp;aPoint, const Value &amp;aValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a41e1aba835677a322623e9a3a43e1444</anchor>
      <arglist>(Iterator &amp;it, const Value &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>Domain</type>
      <name>domain</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>aa3b9703a3dc6fb2b9abd5fd5e38df384</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Point</type>
      <name>extent</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>ac60d544a6cb8a6b3e5e14be267abb38b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ITKImagePointer</type>
      <name>getImagePointer</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a2cc47c9972551903eac4482389e7f3dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>selfDisplay</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a599f16cee1aadaa5ab418a61063b7bad</anchor>
      <arglist>(std::ostream &amp;out) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a2a2e565cabdf5486dbe5efbbed3d4974</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>aeb73119bfccf289699ac715fad58bbaf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a655fcbc04a1b73211a6ff9e8e9bb199d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a3f34f4551731b0bc7c53b4c08912ca7e</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="function">
      <type>const ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a95d30b5425e9240ee8b1669c759916b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>adce5eea722a3f0e1b9b731752dc41f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a3caece1555704c3659295e31c2978355</anchor>
      <arglist>(const Point &amp;aPoint) const </arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Domain::Dimension</type>
      <name>dimension</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a0db898c5bd431ad32ff0fcd3d81c4478</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ImageContainerByITKImage</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a135c8b907c13643365693c5a747d64f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type></type>
      <name>ImageContainerByITKImage</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a3943084dbc4736511c7fb317a3952543</anchor>
      <arglist>(const ImageContainerByITKImage &amp;other)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>ImageContainerByITKImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a0b7c8be3b71c82ddb6ae94b8eeb35765</anchor>
      <arglist>(const ImageContainerByITKImage &amp;other)</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myLowerBound</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>ad847ecf30b5ae80e84c54380c476f1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Point</type>
      <name>myUpperBound</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a8d82bb47ddeab4c62f4038d83d49824b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ITKImagePointer</type>
      <name>myITKImagePointer</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a8b5db1ac4d9cc5329f3870642f412fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ITKImage::RegionType</type>
      <name>myRegion</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a7c2a0f6a8588155db8904c965180a71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myConstItBegin</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>af57f91a5465a0e829be37d7d99056271</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myItBegin</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>ab87c6fa2114f04289e5dd53b9255624f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>ConstIterator</type>
      <name>myConstItEnd</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a83bf1e1345d6e5cfef668b487ed24438</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>Iterator</type>
      <name>myItEnd</name>
      <anchorfile>classDGtal_1_1experimental_1_1ImageContainerByITKImage.html</anchorfile>
      <anchor>a4c5e74873ba9aebf197af0dec34c7293</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>DGtal::Z2i</name>
    <filename>namespaceDGtal_1_1Z2i.html</filename>
    <member kind="typedef">
      <type>DGtal::int32_t</type>
      <name>Integer</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a5d93c6632713d21e2662c93af3a941e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceND&lt; 2, Integer &gt;</type>
      <name>Space</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a9b96ab8175cf9c54b1f451858ccd46a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space</type>
      <name>Z2</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>adf7ebed7141fd4101a0eb93ed99145c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KhalimskySpaceND&lt; 2, Integer &gt;</type>
      <name>KSpace</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a6183d00ec6f8c4f81748fd20a52e5590</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace</type>
      <name>K2</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a6d087f788830a4de6e4cfe8539d9ba34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a3013e647aa4b87b40c1554ed6234f9e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>ada8961626acc7fab62a96bf22bc74281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cells</type>
      <name>Cells</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a9f86209ada021fa8909749cdb3a58982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCells</type>
      <name>SCells</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a74d94b781a80eb312c52360057a00529</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 1 &gt;</type>
      <name>Adj4</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a4d25eff23463be573774eff2ac86a794</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 2 &gt;</type>
      <name>Adj8</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>aba773ccf268d50d2d75a9bc930b1b3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology&lt; Adj4, Adj8 &gt;</type>
      <name>DT4_8</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>ad87e90392fb69e9957c28c861f3b46fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology&lt; Adj8, Adj4 &gt;</type>
      <name>DT8_4</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a3bb587fddafb1469f1331eeccf0c074f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>ac0a04516c81db6f4a583eddda0f64875</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a7622ca076fc84589070b3a7719f0eb1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a858b8746eb7dc0280c8e12b37e56d9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a0db3f1b80b0d65707785c1072244befc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyperRectDomain&lt; Space &gt;</type>
      <name>Domain</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>aca523bebdae58eb19385aaefffff8bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetSelector&lt; Domain, BIG_DS+HIGH_BEL_DS &gt;::Type</type>
      <name>DigitalSet</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a371252c324e496cf8650757c1a2b4eb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT4_8, DigitalSet &gt;</type>
      <name>Object4_8</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a7b2f164e461fd4e76244e919ffedf685</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT4_8, DigitalSet &gt;::ComplementObject</type>
      <name>ComplementObject4_8</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>adee8d4857bdc41c8ff1c07af6874e3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT4_8, DigitalSet &gt;::SmallObject</type>
      <name>SmallObject4_8</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>aaab08cb19eb590b8318939383793eca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT4_8, DigitalSet &gt;::SmallComplementObject</type>
      <name>SmallComplementObject4_8</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a24113aff0617a5054bd8980d290457ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT8_4, DigitalSet &gt;</type>
      <name>Object8_4</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a3ac2150ad3b1a395a08aac72650d855a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT8_4, DigitalSet &gt;::ComplementObject</type>
      <name>ComplementObject8_4</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>ad80a28b0a52e20cd125673be3cebb367</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT8_4, DigitalSet &gt;::SmallObject</type>
      <name>SmallObject8_4</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a1ff9b829b40291dcf81fe781525e21bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT8_4, DigitalSet &gt;::SmallComplementObject</type>
      <name>SmallComplementObject8_4</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a691fd465e5ee90c256b99a39fcc5e699</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridCurve&lt; K2 &gt;</type>
      <name>Curve</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a503faf4d34b6500e8f14035911fa04d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Adj4</type>
      <name>adj4</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>ab85365bfaeb1bf55ff96eee60026a852</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Adj8</type>
      <name>adj8</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>ac30a8868a1f783f0758b5d4977ef2ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DT4_8</type>
      <name>dt4_8</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a66bc7c15d8f9427e237f9a3e8f0d6c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DT8_4</type>
      <name>dt8_4</name>
      <anchorfile>namespaceDGtal_1_1Z2i.html</anchorfile>
      <anchor>a3145832e4c5d8db0223f117954a1fe72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>DGtal::Z3i</name>
    <filename>namespaceDGtal_1_1Z3i.html</filename>
    <member kind="typedef">
      <type>DGtal::int32_t</type>
      <name>Integer</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>ae90d88848027490b2a61ab53fbb6a1b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SpaceND&lt; 3, Integer &gt;</type>
      <name>Space</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a48673a2728f3f979ef5ee06f8f598eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space</type>
      <name>Z3</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a53d22fc69530a513baf89080684d8158</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KhalimskySpaceND&lt; 3, Integer &gt;</type>
      <name>KSpace</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a4c1b0b50dafb838783bc2347a840147d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace</type>
      <name>K3</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a4b7ee43018f9144683fab486eef6f205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cell</type>
      <name>Cell</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>abac1c11ef559c78e66eb53bbe49b19bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCell</type>
      <name>SCell</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a96583b392d71bd493733117e3136d82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::Cells</type>
      <name>Cells</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>adb8d0c2ca201272152ef461475a092a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KSpace::SCells</type>
      <name>SCells</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>aad23ab1b3f28f23113db3c14b3b28a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 1 &gt;</type>
      <name>Adj6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a88c46bc17937d2a2d389c663e529ea9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 2 &gt;</type>
      <name>Adj18</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a02769c25d70f4f7e85fcee03b369e55c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MetricAdjacency&lt; Space, 3 &gt;</type>
      <name>Adj26</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a44acb785a4616854c8fe13be68ed6e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology&lt; Adj6, Adj18 &gt;</type>
      <name>DT6_18</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>ae1d67d49e26cdc9cd742554a32df5fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology&lt; Adj18, Adj6 &gt;</type>
      <name>DT18_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>abd11647f8c12d8be9d8c89a805505459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology&lt; Adj6, Adj26 &gt;</type>
      <name>DT6_26</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>af778e2511b7f5ce923ed4fda74b7a407</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalTopology&lt; Adj26, Adj6 &gt;</type>
      <name>DT26_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>ae6e790b7439eafa5c22f890a025e3b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Point</type>
      <name>Point</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a8d69892de6b10119a8070bd5d0871bf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::Vector</type>
      <name>Vector</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>ae17e112888e54316e9523b52d2b78245</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealPoint</type>
      <name>RealPoint</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a5f087066515ecd33cefd7bd080ef8114</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Space::RealVector</type>
      <name>RealVector</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a5576ca14b13483060ec716f17bf6d81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HyperRectDomain&lt; Space &gt;</type>
      <name>Domain</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a39a69f8da09f1094df563ca067927c61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DigitalSetSelector&lt; Domain, BIG_DS+HIGH_BEL_DS &gt;::Type</type>
      <name>DigitalSet</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a7b7028f23aee23f64730fb2300dc1ecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT6_18, DigitalSet &gt;</type>
      <name>Object6_18</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a8e4960d296e39e7e624b24d9d70e9ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT6_18, DigitalSet &gt;::ComplementObject</type>
      <name>ComplementObject6_18</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a44512b796edf3f45309cb6603fa5da9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT6_18, DigitalSet &gt;::SmallObject</type>
      <name>SmallObject6_18</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a93d2247e40c83e2be3d33ada699f56a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT6_18, DigitalSet &gt;::SmallComplementObject</type>
      <name>SmallComplementObject6_18</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a81e44274726c1adabb71bcb8cb0dece8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT18_6, DigitalSet &gt;</type>
      <name>Object18_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>ad3c59f1acd81dabcd6bda393aa940480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT18_6, DigitalSet &gt;::ComplementObject</type>
      <name>ComplementObject18_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a47be0506b7f32576be4ce4f32e0c2989</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT18_6, DigitalSet &gt;::SmallObject</type>
      <name>SmallObject18_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>ae82ee27864d82d41edef051222a4c751</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT18_6, DigitalSet &gt;::SmallComplementObject</type>
      <name>SmallComplementObject18_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a71076bccfba84bf5936f4222c6c8710a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT6_26, DigitalSet &gt;</type>
      <name>Object6_26</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>af588ee809267ddd557bc719fbc190925</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT6_26, DigitalSet &gt;::ComplementObject</type>
      <name>ComplementObject6_26</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a665baa540262e7baf8c9265eb5ea4587</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT6_26, DigitalSet &gt;::SmallObject</type>
      <name>SmallObject6_26</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a55f8d91fd245e843f5743eb1ce2b8db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT6_26, DigitalSet &gt;::SmallComplementObject</type>
      <name>SmallComplementObject6_26</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a7f12c256131669003d7b551a58d395c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT26_6, DigitalSet &gt;</type>
      <name>Object26_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>af17378e2e0533237cfb81af157e39b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT26_6, DigitalSet &gt;::ComplementObject</type>
      <name>ComplementObject26_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>aea9f727f37c135eec224c77c4e56b696</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT26_6, DigitalSet &gt;::SmallObject</type>
      <name>SmallObject26_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>abeeed9f55c52bcacf97e70c205d9a01b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Object&lt; DT26_6, DigitalSet &gt;::SmallComplementObject</type>
      <name>SmallComplementObject26_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a80ad77cd14b8a2f26c021cea5e063e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridCurve&lt; K3 &gt;</type>
      <name>Curve</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>aa7eefcdf1de2012617fbcc325070d843</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Adj6</type>
      <name>adj6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>acb3f81fd7822995f3a738dffa7c2c155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Adj18</type>
      <name>adj18</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a9824aaed1cbac82a90bde24d7ecda794</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Adj26</type>
      <name>adj26</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>ae657d08f0914786f08b0260cec2ee1bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DT6_18</type>
      <name>dt6_18</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a0b37f6533ee49fb1b86d8300c4939a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DT18_6</type>
      <name>dt18_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>a4175cb6f2e4d9a47d70139103c6c89eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DT6_26</type>
      <name>dt6_26</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>af91ab69d064d580789a2443f4420bb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DT26_6</type>
      <name>dt26_6</name>
      <anchorfile>namespaceDGtal_1_1Z3i.html</anchorfile>
      <anchor>aa8a991cc7510590d9271da69f9aac49d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/arithmetic/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/arithmetic/</path>
    <filename>dir_23a5132b2719f1ede5eb4c3c9c25bf7e.html</filename>
    <file>testArithmeticDSS-benchmark.cpp</file>
    <file>testIntegerComputer.cpp</file>
    <file>testLatticePolytope2D.cpp</file>
    <file>testLighterSternBrocot.cpp</file>
    <file>testLightSternBrocot.cpp</file>
    <file>testModuloComputer.cpp</file>
    <file>testPattern.cpp</file>
    <file>testStandardDSLQ0-LrSB-reversedSmartDSS-benchmark.cpp</file>
    <file>testStandardDSLQ0-LSB-reversedSmartDSS-benchmark.cpp</file>
    <file>testStandardDSLQ0-reversedSmartDSS-benchmark.cpp</file>
    <file>testStandardDSLQ0-smartDSS-benchmark.cpp</file>
    <file>testSternBrocot.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/arithmetic/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/arithmetic/</path>
    <filename>dir_9d2942cdc6eb90f6470f789cdd6b5d2d.html</filename>
    <file>ClosedIntegerHalfPlane.h</file>
    <file>ClosedIntegerHalfPlane.ih</file>
    <file>CPositiveIrreducibleFraction.h</file>
    <file>IntegerComputer.h</file>
    <file>IntegerComputer.ih</file>
    <file>LatticePolytope2D.h</file>
    <file>LatticePolytope2D.ih</file>
    <file>LighterSternBrocot.cpp</file>
    <file>LighterSternBrocot.h</file>
    <file>LighterSternBrocot.ih</file>
    <file>LightSternBrocot.cpp</file>
    <file>LightSternBrocot.h</file>
    <file>LightSternBrocot.ih</file>
    <file>ModuloComputer.h</file>
    <file>ModuloComputer.ih</file>
    <file>Pattern.h</file>
    <file>Pattern.ih</file>
    <file>StandardDSLQ0.h</file>
    <file>StandardDSLQ0.ih</file>
    <file>SternBrocot.cpp</file>
    <file>SternBrocot.h</file>
    <file>SternBrocot.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/arithmetic/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/arithmetic/</path>
    <filename>dir_20e3ba626be699f43377d76162952ab1.html</filename>
    <file>approximation.cpp</file>
    <file>convergents-biginteger.cpp</file>
    <file>convergents.cpp</file>
    <file>extended-euclid.cpp</file>
    <file>fraction.cpp</file>
    <file>lower-integer-convex-hull.cpp</file>
    <file>pattern.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/base/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/base/</path>
    <filename>dir_a49f9b051925a4cbbe82ac92a0123656.html</filename>
    <file>testBasicBoolFunctions.cpp</file>
    <file>testBasicFunctors.cpp</file>
    <file>testBits.cpp</file>
    <file>testCirculator.cpp</file>
    <file>testClock.cpp</file>
    <file>testConstIteratorAdapter.cpp</file>
    <file>testConstRangeAdapter.cpp</file>
    <file>testCountedPtr.cpp</file>
    <file>testcpp11.cpp</file>
    <file>testIndexedListWithBlocks.cpp</file>
    <file>testLabelledMap-benchmark.cpp</file>
    <file>testLabelledMap.cpp</file>
    <file>testLabels.cpp</file>
    <file>testMultiMap-benchmark.cpp</file>
    <file>testOrderedAlphabet.cpp</file>
    <file>testOutputIteratorAdapter.cpp</file>
    <file>testOwningOrAliasingPtr.cpp</file>
    <file>testProgressBar.cpp</file>
    <file>testStatistics.cpp</file>
    <file>testTrace.cpp</file>
  </compound>
  <compound kind="dir">
    <name>src/DGtal/base/</name>
    <path>/Users/kerautre/EnCours/DGtal/build/src/DGtal/base/</path>
    <filename>dir_e923416383e7f317510cd6adcf3e5e4c.html</filename>
    <file>Config.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/base/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/base/</path>
    <filename>dir_c72d96e2c8210585cd8a59fe221b7478.html</filename>
    <file>Assert.h</file>
    <file>BasicArchetypes.h</file>
    <file>BasicBoolFunctions.h</file>
    <file>BasicBoolFunctions.ih</file>
    <file>BasicFunctors.h</file>
    <file>BasicTypes.h</file>
    <file>Bits.cpp</file>
    <file>Bits.h</file>
    <file>CBackInsertable.h</file>
    <file>CBidirectionalOutputRange.h</file>
    <file>CBidirectionalOutputRangeFromPoint.h</file>
    <file>CBidirectionalRange.h</file>
    <file>CBidirectionalRangeFromPoint.h</file>
    <file>CConstBidirectionalRange.h</file>
    <file>CConstBidirectionalRangeFromPoint.h</file>
    <file>CConstSinglePassRange.h</file>
    <file>CConstSinglePassRangeFromPoint.h</file>
    <file>Circulator.h</file>
    <file>CLabel.h</file>
    <file>Clock.h</file>
    <file>Clock.ih</file>
    <file>Common.cpp</file>
    <file>Common.h</file>
    <file>ConceptUtils.h</file>
    <file>ConstIteratorAdapter.h</file>
    <file>ConstRangeAdapter.h</file>
    <file>ConstRangeFromPointAdapter.h</file>
    <file>CountedPtr.h</file>
    <file>CountedPtr.ih</file>
    <file>CowPtr.h</file>
    <file>CowPtr.ih</file>
    <file>CPredicate.h</file>
    <file>CQuantity.h</file>
    <file>CSinglePassOutputRange.h</file>
    <file>CSinglePassOutputRangeFromPoint.h</file>
    <file>CSinglePassRange.h</file>
    <file>CSinglePassRangeFromPoint.h</file>
    <file>CUnaryFunctor.h</file>
    <file>Exceptions.h</file>
    <file>ExpressionTemplates.h</file>
    <file>GlobalFunctions.h</file>
    <file>IndexedListWithBlocks.h</file>
    <file>IndexedListWithBlocks.ih</file>
    <file>InputIteratorWithRankOnSequence.h</file>
    <file>InputIteratorWithRankOnSequence.ih</file>
    <file>IteratorAdapter.h</file>
    <file>IteratorFunctions.h</file>
    <file>IteratorTraits.h</file>
    <file>LabelledMap.h</file>
    <file>LabelledMap.ih</file>
    <file>Labels.h</file>
    <file>Labels.ih</file>
    <file>Modifier.h</file>
    <file>OpInSTLContainers.h</file>
    <file>OrderedAlphabet.cpp</file>
    <file>OrderedAlphabet.h</file>
    <file>OrderedAlphabet.ih</file>
    <file>OutputIteratorAdapter.h</file>
    <file>OwningOrAliasingPtr.h</file>
    <file>OwningOrAliasingPtr.ih</file>
    <file>ReverseIterator.h</file>
    <file>SimpleConstRange.h</file>
    <file>SimpleRandomAccessConstRangeFromPoint.h</file>
    <file>SimpleRandomAccessRangeFromPoint.h</file>
    <file>Statistic.h</file>
    <file>Statistic.ih</file>
    <file>StdRebinders.h</file>
    <file>Trace.h</file>
    <file>Trace.ih</file>
    <file>TraceWriter.h</file>
    <file>TraceWriterFile.h</file>
    <file>TraceWriterTerm.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/Board/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/Board/</path>
    <filename>dir_a0e3b0b917879cdf9a8546ddcf87ece3.html</filename>
    <file>Board.cpp</file>
    <file>Board.h</file>
    <file>Board.ih</file>
    <file>Path.cpp</file>
    <file>Path.h</file>
    <file>Point.h</file>
    <file>PSFonts.cpp</file>
    <file>PSFonts.h</file>
    <file>Rect.cpp</file>
    <file>Rect.h</file>
    <file>ShapeList.cpp</file>
    <file>ShapeList.h</file>
    <file>ShapeList.ih</file>
    <file>Shapes.cpp</file>
    <file>Board/Shapes.h</file>
    <file>Board/Shapes.ih</file>
    <file>Tools.cpp</file>
    <file>Tools.h</file>
    <file>Tools.ih</file>
    <file>Transforms.cpp</file>
    <file>Transforms.h</file>
    <file>Transforms.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/io/boards/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/io/boards/</path>
    <filename>dir_af52dc2cf483b7589aa9a055c27e6831.html</filename>
    <file>dgtalBoard2D-1-points.cpp</file>
    <file>dgtalBoard2D-2-sets.cpp</file>
    <file>dgtalBoard2D-3-custom-classes.cpp</file>
    <file>dgtalBoard2D-3-custom-points.cpp</file>
    <file>dgtalBoard2D-4-colormaps.cpp</file>
    <file>dgtalBoard3DTo2D-0-demo-kernel-2.cpp</file>
    <file>dgtalBoard3DTo2D-1-points.cpp</file>
    <file>dgtalBoard3DTo2D-2-sets.cpp</file>
    <file>dgtalBoard3DTo2D-2bis-sets.cpp</file>
    <file>dgtalBoard3DTo2D-3-objects.cpp</file>
    <file>dgtalBoard3DTo2D-4-modes.cpp</file>
    <file>dgtalBoard3DTo2D-5-custom.cpp</file>
    <file>dgtalBoard3DTo2D-6.cpp</file>
    <file>dgtalBoard3DTo2D-KSCell.cpp</file>
    <file>logoDGtal.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/io/boards/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/io/boards/</path>
    <filename>dir_3b43fe505c70ce59b3e34efa0b94c580.html</filename>
    <file>Board2D.cpp</file>
    <file>Board2D.h</file>
    <file>Board2D.ih</file>
    <file>Board3DTo2D.cpp</file>
    <file>Board3DTo2D.h</file>
    <file>Board3DTo2D.ih</file>
    <file>CDrawableWithBoard2D.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/io/colormaps/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/io/colormaps/</path>
    <filename>dir_b6f773e2441b0d0d72b68fad21f44c9b.html</filename>
    <file>testColorMaps.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/io/colormaps/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/io/colormaps/</path>
    <filename>dir_c9522c97f30603e3dd64dac8aff8bd02.html</filename>
    <file>BasicColorToScalarFunctors.h</file>
    <file>CColorMap.h</file>
    <file>CColorMap.ih</file>
    <file>ColorBrightnessColorMap.h</file>
    <file>ColorBrightnessColorMap.ih</file>
    <file>GradientColorMap.h</file>
    <file>GradientColorMap.ih</file>
    <file>GrayscaleColorMap.h</file>
    <file>GrayscaleColorMap.ih</file>
    <file>HueShadeColorMap.h</file>
    <file>HueShadeColorMap.ih</file>
    <file>RandomColorMap.h</file>
    <file>RandomColorMap.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/geometry/curves/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/geometry/curves/</path>
    <filename>dir_b86e4cf1834dd6c00dc083be87b942a3.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/tests/geometry/curves/estimation/</dir>
    <file>testArithDSS.cpp</file>
    <file>testArithDSS3d.cpp</file>
    <file>testBinomialConvolver.cpp</file>
    <file>testCombinDSS.cpp</file>
    <file>testDecomposition.cpp</file>
    <file>testFP.cpp</file>
    <file>testFrechetShortcut.cpp</file>
    <file>testFreemanChain.cpp</file>
    <file>testGeometricalDCA.cpp</file>
    <file>testGeometricalDSS.cpp</file>
    <file>testGridCurve.cpp</file>
    <file>testMaximalSegments.cpp</file>
    <file>testSegmentation.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/curves/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/curves/</path>
    <filename>dir_f470c2f5fde179648eef8a3806cdaeb7.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/curves/estimation/</dir>
    <file>ArithmeticalDSS.h</file>
    <file>ArithmeticalDSS.ih</file>
    <file>ArithmeticalDSS3d.h</file>
    <file>ArithmeticalDSS3d.ih</file>
    <file>BinomialConvolver.h</file>
    <file>BinomialConvolver.ih</file>
    <file>CBidirectionalSegmentComputer.h</file>
    <file>CDynamicBidirectionalSegmentComputer.h</file>
    <file>CDynamicSegmentComputer.h</file>
    <file>CForwardSegmentComputer.h</file>
    <file>CIncrementalSegmentComputer.h</file>
    <file>CombinatorialDSS.h</file>
    <file>CombinatorialDSS.ih</file>
    <file>CSegment.h</file>
    <file>CSegmentFactory.h</file>
    <file>FP.h</file>
    <file>FP.ih</file>
    <file>FrechetShortcut.h</file>
    <file>FrechetShortcut.ih</file>
    <file>FreemanChain.h</file>
    <file>FreemanChain.ih</file>
    <file>GeometricalDCA.h</file>
    <file>GeometricalDCA.ih</file>
    <file>GeometricalDSS.h</file>
    <file>GeometricalDSS.ih</file>
    <file>GreedyDecomposition.h</file>
    <file>GreedyDecomposition.ih</file>
    <file>GreedySegmentation.h</file>
    <file>GreedySegmentation.ih</file>
    <file>GridCurve.h</file>
    <file>GridCurve.ih</file>
    <file>MaximalSegments.h</file>
    <file>MaximalSegments.ih</file>
    <file>SaturatedSegmentation.h</file>
    <file>SaturatedSegmentation.ih</file>
    <file>SegmentComputerUtils.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/geometry/curves/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/geometry/curves/</path>
    <filename>dir_7055262b8d939aa56a18f8842a20d386.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/examples/geometry/curves/estimation/</dir>
    <file>ArithmeticalDSS.cpp</file>
    <file>convex-and-concave-parts.cpp</file>
    <file>exampleArithDSS3d.cpp</file>
    <file>exampleFrechetShortcut.cpp</file>
    <file>exampleGeometricalDCA.cpp</file>
    <file>exampleGeometricalDSS.cpp</file>
    <file>exampleGridCurve2d.cpp</file>
    <file>exampleGridCurve3d-2.cpp</file>
    <file>exampleGridCurve3d.cpp</file>
    <file>freemanChainDisplay.cpp</file>
    <file>greedy-dss-decomposition.cpp</file>
  </compound>
  <compound kind="dir">
    <name>src/DGtal/</name>
    <path>/Users/kerautre/EnCours/DGtal/build/src/DGtal/</path>
    <filename>dir_61a747411b74047ebeb24126d12effb8.html</filename>
    <dir>src/DGtal/base/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/</path>
    <filename>dir_f2cd1aeea1cfa982bb13a5f95fa4218c.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/arithmetic/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/base/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/helpers/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/images/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/io/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/kernel/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/math/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/topology/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/geometry/volumes/distance/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/geometry/volumes/distance/</path>
    <filename>dir_ccf58f49583a53a57f7232121888f6dd.html</filename>
    <file>testDistanceTransformation.cpp</file>
    <file>testDistanceTransformationND.cpp</file>
    <file>testFMM.cpp</file>
    <file>testMetrics.cpp</file>
    <file>testReverseDT.cpp</file>
    <file>testVoronoiMap.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/geometry/volumes/distance/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/geometry/volumes/distance/</path>
    <filename>dir_4db1c1ad2f07d2d282729870a726c832.html</filename>
    <file>distancetransform2D.cpp</file>
    <file>distancetransform3D.cpp</file>
    <file>exampleFMM2D.cpp</file>
    <file>exampleFMM3D.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/volumes/distance/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/volumes/distance/</path>
    <filename>dir_7113985e055227d289e64d0ea84f4bd9.html</filename>
    <file>CSeparableMetric.h</file>
    <file>DistanceTransformation.h</file>
    <file>DistanceTransformation.ih</file>
    <file>FMM.h</file>
    <file>FMM.ih</file>
    <file>FMMPointFunctors.h</file>
    <file>FMMPointFunctors.ih</file>
    <file>ReverseDistanceTransformation.h</file>
    <file>ReverseDistanceTransformation.ih</file>
    <file>SeparableMetricHelper.h</file>
    <file>VoronoiMap.h</file>
    <file>VoronoiMap.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/doc-examples/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/doc-examples/</path>
    <filename>dir_15f2b1723cf4e94748f25203ed53ae60.html</filename>
    <file>demo-kernel-1.cpp</file>
    <file>kernelDomain.cpp</file>
    <file>labelledMapBestParameters.cpp</file>
    <file>range.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/kernel/domains/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/kernel/domains/</path>
    <filename>dir_cef37e076345cc04af4b70c51afebabd.html</filename>
    <file>CDomain.h</file>
    <file>CDomainArchetype.h</file>
    <file>DomainPredicate.h</file>
    <file>DomainPredicate.ih</file>
    <file>HyperRectDomain.h</file>
    <file>HyperRectDomain.ih</file>
    <file>HyperRectDomain_Iterator.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/geometry/volumes/estimation/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/geometry/volumes/estimation/</path>
    <filename>dir_8fdd410b46c480174cbb34f0f8fd21e0.html</filename>
    <file>testMeasureSet.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/geometry/curves/estimation/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/geometry/curves/estimation/</path>
    <filename>dir_29e79e5baabbcab293464dd8581175ca.html</filename>
    <file>testEstimatorComparator.cpp</file>
    <file>testL1LengthEstimator.cpp</file>
    <file>testLengthEstimators.cpp</file>
    <file>testMostCenteredMSEstimator.cpp</file>
    <file>testSegmentComputerEstimators.cpp</file>
    <file>testTrueLocalEstimator.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/volumes/estimation/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/volumes/estimation/</path>
    <filename>dir_c8c3f1b4e09bd1f40ccc09a5247eefe2.html</filename>
    <file>Measure.h</file>
    <file>Measure.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/geometry/curves/estimation/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/geometry/curves/estimation/</path>
    <filename>dir_81ad860ecfdfa6888cf9bc9644966184.html</filename>
    <file>exampleCurvature.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/curves/estimation/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/curves/estimation/</path>
    <filename>dir_14094fa3aac0bc308c06ab31cbaf878f.html</filename>
    <file>BLUELocalLengthEstimator.h</file>
    <file>CGlobalCurveGeometricEstimator.h</file>
    <file>CLocalCurveGeometricEstimator.h</file>
    <file>CompareLocalEstimators.h</file>
    <file>CSegmentComputerEstimator.h</file>
    <file>DSSLengthEstimator.h</file>
    <file>DSSLengthEstimator.ih</file>
    <file>FPLengthEstimator.h</file>
    <file>FPLengthEstimator.ih</file>
    <file>L1LengthEstimator.h</file>
    <file>L1LengthEstimator.ih</file>
    <file>MLPLengthEstimator.h</file>
    <file>MLPLengthEstimator.ih</file>
    <file>MostCenteredMaximalSegmentEstimator.h</file>
    <file>MostCenteredMaximalSegmentEstimator.ih</file>
    <file>ParametricShapeArcLengthFunctor.h</file>
    <file>ParametricShapeCurvatureFunctor.h</file>
    <file>ParametricShapeTangentFunctor.h</file>
    <file>RosenProffittLocalLengthEstimator.h</file>
    <file>SegmentComputerEstimators.h</file>
    <file>TrueGlobalEstimatorOnPoints.h</file>
    <file>TrueGlobalEstimatorOnPoints.ih</file>
    <file>TrueLocalEstimatorOnPoints.h</file>
    <file>TrueLocalEstimatorOnPoints.ih</file>
    <file>TwoStepLocalLengthEstimator.h</file>
    <file>TwoStepLocalLengthEstimator.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/surfaces/estimation/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/surfaces/estimation/</path>
    <filename>dir_9e526eef16e9947aa548e57a7e0c0334.html</filename>
    <file>BasicConvolutionWeights.h</file>
    <file>CConvolutionWeights.h</file>
    <file>CNormalVectorEstimator.h</file>
    <file>DigitalSurfaceEmbedderWithNormalVectorEstimator.h</file>
    <file>DigitalSurfaceEmbedderWithNormalVectorEstimator.ih</file>
    <file>LocalConvolutionNormalVectorEstimator.h</file>
    <file>LocalConvolutionNormalVectorEstimator.ih</file>
    <file>NormalVectorEstimatorLinearCellEmbedder.h</file>
    <file>NormalVectorEstimatorLinearCellEmbedder.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/</path>
    <filename>dir_d28a4824dc47e487b107a5db32ef43c4.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/examples/arithmetic/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/doc-examples/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/geometry/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/images/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/io/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/math/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/topology/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/tutorial-examples/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/fromPoints/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/fromPoints/</path>
    <filename>dir_5f40bbe3c19b24804c9dd9f382a99e71.html</filename>
    <file>CircleFrom2Points.h</file>
    <file>CircleFrom2Points.ih</file>
    <file>CircleFrom3Points.h</file>
    <file>CircleFrom3Points.ih</file>
    <file>MeshFromPoints.h</file>
    <file>MeshFromPoints.ih</file>
    <file>Point2ShapePredicate.h</file>
    <file>Point2ShapePredicate.ih</file>
    <file>StraightLineFrom2Points.h</file>
    <file>StraightLineFrom2Points.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/geometry/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/geometry/</path>
    <filename>dir_2751d6f01b35f5fec7131f6adf42b522.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/tests/geometry/curves/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/geometry/surfaces/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/geometry/tools/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/geometry/volumes/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/</path>
    <filename>dir_754267a81a1dbd2dcdc6a3e6905a7e31.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/curves/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/helpers/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/surfaces/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/tools/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/volumes/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/geometry/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/geometry/</path>
    <filename>dir_bbc6006c4fa8019b84b7adc573485eac.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/examples/geometry/curves/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/geometry/surfaces/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/geometry/tools/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/geometry/volumes/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/io/viewers/windows/GL/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/io/viewers/windows/GL/</path>
    <filename>dir_9547c0ef7a09ead9a130ee513e00dd19.html</filename>
    <file>glext.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/helpers/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/helpers/</path>
    <filename>dir_efedb30c6272480d4b6f116de23c17ed.html</filename>
    <file>testImplicitShape.cpp</file>
    <file>testParametricShape.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/helpers/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/helpers/</path>
    <filename>dir_cf30c0435acced65985fddead9ce96e2.html</filename>
    <file>StdDefs.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/helpers/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/helpers/</path>
    <filename>dir_92ade5b890f7d5496f310b5e861331fd.html</filename>
    <file>ContourHelper.h</file>
    <file>ContourHelper.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/topology/helpers/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/topology/helpers/</path>
    <filename>dir_993a644b7fc7355a2f154d648cab2163.html</filename>
    <file>BoundaryPredicate.h</file>
    <file>BoundaryPredicate.ih</file>
    <file>FrontierPredicate.h</file>
    <file>FrontierPredicate.ih</file>
    <file>Surfaces.h</file>
    <file>Surfaces.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/images/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/images/</path>
    <filename>dir_0b764bfdcde217fa8c269237ce5166e2.html</filename>
    <file>testCheckImageConcept.cpp</file>
    <file>testConstImageAdapter.cpp</file>
    <file>testHashTree.cpp</file>
    <file>testImage.cpp</file>
    <file>testImageAdapter.cpp</file>
    <file>testImageContainerBenchmark.cpp</file>
    <file>testImageContainerByHashTree.cpp</file>
    <file>testImageSimple.cpp</file>
    <file>testImageSpanIterators.cpp</file>
    <file>testITKImage.cpp</file>
    <file>testMorton.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/images/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/images/</path>
    <filename>dir_03c06f76cf2f3c51d4a27f3f460dbcc7.html</filename>
    <file>exampleConstImageAdapter.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/images/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/images/</path>
    <filename>dir_0b45b73c8a84e1e533b26fe370d7a80d.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/images/imagesSetsUtils/</dir>
    <file>CConstImage.h</file>
    <file>CImage.h</file>
    <file>ConstImageAdapter.h</file>
    <file>ConstImageAdapter.ih</file>
    <file>CTrivialConstImage.h</file>
    <file>CTrivialImage.h</file>
    <file>DefaultConstImageRange.h</file>
    <file>DefaultImageRange.h</file>
    <file>Image.h</file>
    <file>Image.ih</file>
    <file>ImageAdapter.h</file>
    <file>ImageAdapter.ih</file>
    <file>ImageContainerByHashTree.h</file>
    <file>ImageContainerByHashTree.ih</file>
    <file>ImageContainerByITKImage.h</file>
    <file>ImageContainerByITKImage.ih</file>
    <file>ImageContainerBySTLMap.h</file>
    <file>ImageContainerBySTLMap.ih</file>
    <file>ImageContainerBySTLVector.h</file>
    <file>ImageContainerBySTLVector.ih</file>
    <file>ImageHelper.h</file>
    <file>ImageHelper.ih</file>
    <file>ImageLinearCellEmbedder.h</file>
    <file>ImageLinearCellEmbedder.ih</file>
    <file>ImageSelector.h</file>
    <file>ImageSelector.ih</file>
    <file>Morton.h</file>
    <file>Morton.ih</file>
    <file>SetValueIterator.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/images/imagesSetsUtils/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/images/imagesSetsUtils/</path>
    <filename>dir_0026e29d9efa2c3b1e63133705ff5f6e.html</filename>
    <file>ImageFromSet.h</file>
    <file>ImageFromSet.ih</file>
    <file>IntervalForegroundPredicate.h</file>
    <file>SetFromImage.h</file>
    <file>SetFromImage.ih</file>
    <file>SimpleThresholdForegroundPredicate.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/implicit/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/implicit/</path>
    <filename>dir_289808cf2373f5703271050c064331ab.html</filename>
    <file>CImplicitFunction.h</file>
    <file>CImplicitFunctionDiff1.h</file>
    <file>ImplicitBall.h</file>
    <file>ImplicitBall.ih</file>
    <file>ImplicitFunctionDiff1LinearCellEmbedder.h</file>
    <file>ImplicitFunctionDiff1LinearCellEmbedder.ih</file>
    <file>ImplicitFunctionLinearCellEmbedder.h</file>
    <file>ImplicitFunctionLinearCellEmbedder.ih</file>
    <file>ImplicitHyperCube.h</file>
    <file>ImplicitHyperCube.ih</file>
    <file>ImplicitNorm1Ball.h</file>
    <file>ImplicitNorm1Ball.ih</file>
    <file>ImplicitPolynomial3Shape.h</file>
    <file>ImplicitPolynomial3Shape.ih</file>
    <file>ImplicitRoundedHyperCube.h</file>
    <file>ImplicitRoundedHyperCube.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/io/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/io/</path>
    <filename>dir_3cea7a19f1845e808fae46cf291229f2.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/tests/io/colormaps/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/io/readers/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/io/viewers/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/io/writers/</dir>
    <file>testArcDrawing.cpp</file>
    <file>testBoard2DCustomStyle.cpp</file>
    <file>testLongvol.cpp</file>
    <file>testSimpleBoard.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/io/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/io/</path>
    <filename>dir_be8641fa4d4d5ebb6e23d02c55dfd0c9.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/examples/io/boards/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/examples/io/viewers/</dir>
    <file>digitalSetFromPointList.cpp</file>
    <file>digitalSetFromVol.cpp</file>
    <file>display3DToOFF.cpp</file>
    <file>meshFromOFF.cpp</file>
    <file>viewDualSurface.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/io/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/io/</path>
    <filename>dir_5520f6078718884549800e0f3c69770f.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/io/boards/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/io/colormaps/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/io/readers/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/io/viewers/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/io/writers/</dir>
    <file>CDrawableWithDisplay3D.h</file>
    <file>Color.cpp</file>
    <file>Color.h</file>
    <file>Color.ih</file>
    <file>Display2DFactory.h</file>
    <file>Display2DFactory.ih</file>
    <file>Display3D.h</file>
    <file>Display3D.ih</file>
    <file>Display3DFactory.h</file>
    <file>Display3DFactory.ih</file>
    <file>DrawWithDisplay3DModifier.h</file>
    <file>Style2DFactory.h</file>
    <file>Style2DFactory.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/kernel/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/kernel/</path>
    <filename>dir_2b7a4b5856a4d2068800cbeeeef5e1d8.html</filename>
    <file>testBasicPointFunctors.cpp</file>
    <file>testDGtalGMP.cpp</file>
    <file>testDigitalSet.cpp</file>
    <file>testDomainSpanIterator.cpp</file>
    <file>testEmbedder.cpp</file>
    <file>testHyperRectDomain-snippet.cpp</file>
    <file>testHyperRectDomain.cpp</file>
    <file>testImagesSetsUtilities.cpp</file>
    <file>testInteger.cpp</file>
    <file>testLinearAlgebra.cpp</file>
    <file>testPointVector.cpp</file>
    <file>testSimpleMatrix.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/kernel/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/kernel/</path>
    <filename>dir_836e545d3226650d428fca2c7a499aa6.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/kernel/domains/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/kernel/sets/</dir>
    <file>BasicPointFunctors.h</file>
    <file>BasicPointFunctors.ih</file>
    <file>BasicPointPredicates.h</file>
    <file>BasicPointPredicates.ih</file>
    <file>CanonicCellEmbedder.h</file>
    <file>CanonicCellEmbedder.ih</file>
    <file>CanonicDigitalSurfaceEmbedder.h</file>
    <file>CanonicDigitalSurfaceEmbedder.ih</file>
    <file>CanonicEmbedder.h</file>
    <file>CanonicEmbedder.ih</file>
    <file>CanonicSCellEmbedder.h</file>
    <file>CanonicSCellEmbedder.ih</file>
    <file>CBoundedInteger.h</file>
    <file>CCommutativeRing.h</file>
    <file>CEuclideanRing.h</file>
    <file>CInteger.h</file>
    <file>CPointEmbedder.h</file>
    <file>CPointFunctor.h</file>
    <file>CPointPredicate.h</file>
    <file>CSignedInteger.h</file>
    <file>CSpace.h</file>
    <file>CUnsignedInteger.h</file>
    <file>CWithGradientMap.h</file>
    <file>LinearAlgebra.h</file>
    <file>LinearAlgebra.ih</file>
    <file>NumberTraits.cpp</file>
    <file>NumberTraits.h</file>
    <file>NumberTraits.ih</file>
    <file>PointVector.h</file>
    <file>PointVector.ih</file>
    <file>RegularPointEmbedder.h</file>
    <file>RegularPointEmbedder.ih</file>
    <file>SimpleMatrix.h</file>
    <file>SimpleMatrix.ih</file>
    <file>SimpleMatrixSpecializations.h</file>
    <file>SimpleMatrixSpecializations.ih</file>
    <file>SpaceND.h</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/math/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/math/</path>
    <filename>dir_89a953e969bebe1af0bcb31d1e92bf3f.html</filename>
    <file>testAngleLinearMinimizer.cpp</file>
    <file>testMeasure.cpp</file>
    <file>testMPolynomial.cpp</file>
    <file>testSignal.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/math/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/math/</path>
    <filename>dir_5c8200752a18666074accc56090f0321.html</filename>
    <file>polynomial-derivative.cpp</file>
    <file>polynomial-read.cpp</file>
    <file>polynomial2-derivative.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/math/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/math/</path>
    <filename>dir_b5108e809fa67f729d044e06289c9bff.html</filename>
    <file>AngleComputer.h</file>
    <file>AngleComputer.ih</file>
    <file>AngleLinearMinimizer.cpp</file>
    <file>AngleLinearMinimizer.h</file>
    <file>AngleLinearMinimizer.ih</file>
    <file>MeasureOfStraightLines.h</file>
    <file>MeasureOfStraightLines.ih</file>
    <file>MPolynomial.h</file>
    <file>MPolynomial.ih</file>
    <file>Signal.h</file>
    <file>Signal.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/parametric/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/parametric/</path>
    <filename>dir_399699993fff7c2f4ed171da804e88fb.html</filename>
    <file>AccFlower2D.h</file>
    <file>AccFlower2D.ih</file>
    <file>Ball2D.h</file>
    <file>Ball2D.ih</file>
    <file>Ball3D.h</file>
    <file>Ball3D.ih</file>
    <file>Ellipse2D.h</file>
    <file>Ellipse2D.ih</file>
    <file>Flower2D.h</file>
    <file>Flower2D.ih</file>
    <file>NGon2D.h</file>
    <file>NGon2D.ih</file>
    <file>StarShaped2D.h</file>
    <file>StarShaped2D.ih</file>
    <file>StarShaped3D.h</file>
    <file>StarShaped3D.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/io/readers/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/io/readers/</path>
    <filename>dir_785363a42aeac73f6eedde81d88c91ec.html</filename>
    <file>testMagickReader.cpp</file>
    <file>testMeshReader.cpp</file>
    <file>testMPolynomialReader.cpp</file>
    <file>testPNMReader.cpp</file>
    <file>testPointListReader.cpp</file>
    <file>testRawReader.cpp</file>
    <file>testVolReader.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/io/readers/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/io/readers/</path>
    <filename>dir_08eb2414170ee26d20336b7bc14760d5.html</filename>
    <file>LongvolReader.h</file>
    <file>LongvolReader.ih</file>
    <file>MagickReader.h</file>
    <file>MagickReader.ih</file>
    <file>MeshReader.h</file>
    <file>MeshReader.ih</file>
    <file>MPolynomialReader.h</file>
    <file>MPolynomialReader.ih</file>
    <file>PNMReader.h</file>
    <file>PNMReader.ih</file>
    <file>PointListReader.h</file>
    <file>PointListReader.ih</file>
    <file>RawReader.h</file>
    <file>RawReader.ih</file>
    <file>VolReader.h</file>
    <file>VolReader.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/kernel/sets/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/kernel/sets/</path>
    <filename>dir_e156a89a6949b6911251bd174d4d91fb.html</filename>
    <file>CDigitalSet.h</file>
    <file>CDigitalSet.ih</file>
    <file>CDigitalSetArchetype.h</file>
    <file>DigitalSetBySTLSet.h</file>
    <file>DigitalSetBySTLSet.ih</file>
    <file>DigitalSetBySTLVector.h</file>
    <file>DigitalSetBySTLVector.ih</file>
    <file>DigitalSetConverter.h</file>
    <file>DigitalSetConverter.ih</file>
    <file>DigitalSetDomain.h</file>
    <file>DigitalSetDomain.ih</file>
    <file>DigitalSetFromMap.h</file>
    <file>DigitalSetFromMap.ih</file>
    <file>DigitalSetInserter.h</file>
    <file>DigitalSetSelector.h</file>
    <file>DigitalSetSelector.ih</file>
    <file>SetPredicate.h</file>
    <file>SetPredicate.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/shapes/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/shapes/</path>
    <filename>dir_971d08a51fa8a98684efecda11079482.html</filename>
    <file>testBall3D.cpp</file>
    <file>testBall3DSurface.cpp</file>
    <file>testGaussDigitizer.cpp</file>
    <file>testHalfPlane.cpp</file>
    <file>testImplicitFunctionModels.cpp</file>
    <file>testMeshFromPoints.cpp</file>
    <file>testMeshFromPointsDisplay.cpp</file>
    <file>testPolynomial.cpp</file>
    <file>testShapesFromPoints.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/</path>
    <filename>dir_b5cedd3610db960cb0235f10a76b8ff0.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/fromPoints/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/implicit/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/shapes/parametric/</dir>
    <file>CDigitalBoundedShape.h</file>
    <file>CDigitalOrientedShape.h</file>
    <file>CEuclideanBoundedShape.h</file>
    <file>CEuclideanOrientedShape.h</file>
    <file>GaussDigitizer.h</file>
    <file>GaussDigitizer.ih</file>
    <file>ShapeFactory.h</file>
    <file>DGtal/shapes/Shapes.h</file>
    <file>DGtal/shapes/Shapes.ih</file>
  </compound>
  <compound kind="dir">
    <name>src/</name>
    <path>/Users/kerautre/EnCours/DGtal/build/src/</path>
    <filename>dir_4e7c8c4fc0d923782da8a23d70a9725b.html</filename>
    <dir>src/DGtal/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/</path>
    <filename>dir_68267d1309a1af8e8297ef4c3efbcdba.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/Board/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/geometry/surfaces/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/geometry/surfaces/</path>
    <filename>dir_e226bbce94b418b2b8019d48fb57e0e0.html</filename>
    <file>testCOBAGenericNaivePlane-benchmark.cpp</file>
    <file>testCOBANaivePlane-benchmark.cpp</file>
    <file>testCOBANaivePlane.cpp</file>
    <file>testLocalConvolutionNormalVectorEstimator.cpp</file>
    <file>testNormalVectorEstimatorEmbedder.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/geometry/surfaces/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/geometry/surfaces/</path>
    <filename>dir_b5e93de485fa0805eb39c4f1e57dd22a.html</filename>
    <file>greedy-plane-segmentation-ex2.cpp</file>
    <file>greedy-plane-segmentation-ex3.cpp</file>
    <file>greedy-plane-segmentation.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/surfaces/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/surfaces/</path>
    <filename>dir_63d9c33afbfec9fa25872cb1f269a9db.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/surfaces/estimation/</dir>
    <file>COBAGenericNaivePlane.h</file>
    <file>COBAGenericNaivePlane.ih</file>
    <file>COBANaivePlane.h</file>
    <file>COBANaivePlane.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/</path>
    <filename>dir_59425e443f801f1f2fd8bbe4959a3ccf.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/tests/arithmetic/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/base/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/geometry/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/helpers/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/images/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/io/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/kernel/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/math/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/shapes/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/topology/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/geometry/tools/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/geometry/tools/</path>
    <filename>dir_125fd55c9127a09f0b4dd6b6c090c8f1.html</filename>
    <file>testPreimage.cpp</file>
    <file>testSphericalAccumulator.cpp</file>
    <file>testSphericalAccumulatorQGL.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/tools/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/tools/</path>
    <filename>dir_18004d7a6c68375fed3e8c9ab4ef9707.html</filename>
    <file>Preimage2D.h</file>
    <file>Preimage2D.ih</file>
    <file>SphericalAccumulator.h</file>
    <file>SphericalAccumulator.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/geometry/tools/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/geometry/tools/</path>
    <filename>dir_66f15b50c350f28b2fac9e5372ee541e.html</filename>
    <file>examplePreimage.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/topology/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/topology/</path>
    <filename>dir_5c34bd9de7ab721f49dc5d2e8cf02612.html</filename>
    <file>testAdjacency.cpp</file>
    <file>testBreadthFirstPropagation.cpp</file>
    <file>testCellularGridSpaceND.cpp</file>
    <file>testDepthFirstPropagation.cpp</file>
    <file>testDigitalSurface.cpp</file>
    <file>testDigitalTopology.cpp</file>
    <file>testExpander-benchmark.cpp</file>
    <file>testExpander.cpp</file>
    <file>testImplicitDigitalSurface-benchmark.cpp</file>
    <file>testLightImplicitDigitalSurface-benchmark.cpp</file>
    <file>testObject-benchmark.cpp</file>
    <file>testObject.cpp</file>
    <file>testObjectBorder.cpp</file>
    <file>testSCellsFunctor.cpp</file>
    <file>testSimpleExpander.cpp</file>
    <file>testSTLMapToVertexMapAdapter.cpp</file>
    <file>testUmbrellaComputer.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/topology/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/topology/</path>
    <filename>dir_beb349dd51fade10e83e4caaef469050.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/topology/helpers/</dir>
    <file>BreadthFirstVisitor.h</file>
    <file>BreadthFirstVisitor.ih</file>
    <file>CAdjacency.h</file>
    <file>CCellEmbedder.h</file>
    <file>CCellularGridSpaceND.h</file>
    <file>CDigitalSurfaceContainer.h</file>
    <file>CDigitalSurfaceEmbedder.h</file>
    <file>CDigitalSurfaceTracker.h</file>
    <file>CDomainAdjacency.h</file>
    <file>CSCellEmbedder.h</file>
    <file>CSurfelPredicate.h</file>
    <file>CUndirectedSimpleGraph.h</file>
    <file>CUndirectedSimpleLocalGraph.h</file>
    <file>CVertexMap.h</file>
    <file>CVertexPredicate.h</file>
    <file>DepthFirstVisitor.h</file>
    <file>DepthFirstVisitor.ih</file>
    <file>DigitalSetBoundary.h</file>
    <file>DigitalSetBoundary.ih</file>
    <file>DigitalSurface.h</file>
    <file>DigitalSurface.ih</file>
    <file>DigitalSurface2DSlice.h</file>
    <file>DigitalSurface2DSlice.ih</file>
    <file>DigitalTopology.h</file>
    <file>DigitalTopology.ih</file>
    <file>DomainAdjacency.h</file>
    <file>DomainAdjacency.ih</file>
    <file>DomainMetricAdjacency.h</file>
    <file>DomainMetricAdjacency.ih</file>
    <file>Expander.h</file>
    <file>Expander.ih</file>
    <file>ExplicitDigitalSurface.h</file>
    <file>ExplicitDigitalSurface.ih</file>
    <file>ImplicitDigitalSurface.h</file>
    <file>ImplicitDigitalSurface.ih</file>
    <file>KhalimskySpaceND.h</file>
    <file>KhalimskySpaceND.ih</file>
    <file>LightExplicitDigitalSurface.h</file>
    <file>LightExplicitDigitalSurface.ih</file>
    <file>LightImplicitDigitalSurface.h</file>
    <file>LightImplicitDigitalSurface.ih</file>
    <file>MetricAdjacency.h</file>
    <file>MetricAdjacency.ih</file>
    <file>Object.h</file>
    <file>Object.ih</file>
    <file>SCellsFunctors.h</file>
    <file>SetOfSurfels.h</file>
    <file>SetOfSurfels.ih</file>
    <file>STLMapToVertexMapAdapter.h</file>
    <file>SurfelAdjacency.h</file>
    <file>SurfelAdjacency.ih</file>
    <file>SurfelNeighborhood.h</file>
    <file>SurfelNeighborhood.ih</file>
    <file>SurfelSetPredicate.h</file>
    <file>SurfelSetPredicate.ih</file>
    <file>Topology.h</file>
    <file>UmbrellaComputer.h</file>
    <file>UmbrellaComputer.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/topology/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/topology/</path>
    <filename>dir_e2a1212e307b93bd4c291c0c273a42c5.html</filename>
    <file>3dBorderExtraction.cpp</file>
    <file>3dBorderExtractionImg.cpp</file>
    <file>3dKSSurfaceExtraction.cpp</file>
    <file>ctopo-1-3d.cpp</file>
    <file>ctopo-1.cpp</file>
    <file>ctopo-1s-3d.cpp</file>
    <file>ctopo-2-3d.cpp</file>
    <file>ctopo-2.cpp</file>
    <file>digitalSurfaceSlice.cpp</file>
    <file>frontierAndBoundary.cpp</file>
    <file>generateSimplicityTables2D.cpp</file>
    <file>generateSimplicityTables3D.cpp</file>
    <file>homotopicThinning3D.cpp</file>
    <file>khalimskySpaceScanner.cpp</file>
    <file>trackImplicitPolynomialSurfaceToOFF.cpp</file>
    <file>volBreadthFirstTraversal.cpp</file>
    <file>volMarchingCubes.cpp</file>
    <file>volScanBoundary.cpp</file>
    <file>volToOFF.cpp</file>
    <file>volTrackBoundary.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/tutorial-examples/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/tutorial-examples/</path>
    <filename>dir_a423f34ab0b0a6c5fe36e9fbc0523270.html</filename>
    <file>3dVolViewer.cpp</file>
    <file>fileGridCurveRanges.cpp</file>
    <file>freemanChainFromImage.cpp</file>
    <file>imageGridCurveEstimator.cpp</file>
    <file>imageSetDT.cpp</file>
    <file>pgm2freeman.cpp</file>
    <file>shapeDTViewer.cpp</file>
    <file>shapeGridCurveEstimator.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/io/viewers/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/io/viewers/</path>
    <filename>dir_79ae309b9a64470911586dc9023c30f2.html</filename>
    <file>testDisplayKSCell.cpp</file>
    <file>testIVViewer.cpp</file>
    <file>testViewer3D.cpp</file>
    <file>volIVViewer.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/io/viewers/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/io/viewers/</path>
    <filename>dir_fec4c135949dc5ef1783f7be9d94f54f.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/io/viewers/windows/</dir>
    <file>DGtalInventor.h</file>
    <file>DGtalInventor.ih</file>
    <file>IVViewer.cpp</file>
    <file>IVViewer.h</file>
    <file>IVViewer.ih</file>
    <file>Lattice.h</file>
    <file>Lattice.ih</file>
    <file>Viewer3D.cpp</file>
    <file>Viewer3D.h</file>
    <file>Viewer3D.ih</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/io/viewers/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/io/viewers/</path>
    <filename>dir_bf3749fcd806166c89833f08af70c2f1.html</filename>
    <file>demo-kernel-2.cpp</file>
    <file>viewer3D-1-points.cpp</file>
    <file>viewer3D-2-sets.cpp</file>
    <file>viewer3D-3-objects.cpp</file>
    <file>viewer3D-4-modes.cpp</file>
    <file>viewer3D-4bis-illustrationMode.cpp</file>
    <file>viewer3D-5-custom.cpp</file>
    <file>viewer3D-6-clipping.cpp</file>
    <file>viewer3D-7-planes.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/geometry/volumes/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/geometry/volumes/</path>
    <filename>dir_617e36e15bcfca8ade183f7b877528e1.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/tests/geometry/volumes/distance/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/tests/geometry/volumes/estimation/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/examples/geometry/volumes/</name>
    <path>/Users/kerautre/EnCours/DGtal/examples/geometry/volumes/</path>
    <filename>dir_4e2b6255776ee794b28cc39d3a586de0.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/examples/geometry/volumes/distance/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/volumes/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/volumes/</path>
    <filename>dir_2dd8463e31daa17dc635e58ffe393814.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/volumes/distance/</dir>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/geometry/volumes/estimation/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/io/viewers/windows/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/io/viewers/windows/</path>
    <filename>dir_0f09856dde07a31193b083ce28b3512e.html</filename>
    <dir>/Users/kerautre/EnCours/DGtal/src/DGtal/io/viewers/windows/GL/</dir>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/tests/io/writers/</name>
    <path>/Users/kerautre/EnCours/DGtal/tests/io/writers/</path>
    <filename>dir_f89b35be35d492da11fed9f9bab38ddf.html</filename>
    <file>testMeshWriter.cpp</file>
    <file>testPNMRawWriter.cpp</file>
  </compound>
  <compound kind="dir">
    <name>/Users/kerautre/EnCours/DGtal/src/DGtal/io/writers/</name>
    <path>/Users/kerautre/EnCours/DGtal/src/DGtal/io/writers/</path>
    <filename>dir_87e0a58be5f3ad073dc9f684edf9e3c0.html</filename>
    <file>LongvolWriter.h</file>
    <file>LongvolWriter.ih</file>
    <file>MeshWriter.h</file>
    <file>MeshWriter.ih</file>
    <file>PGMWriter.h</file>
    <file>PGMWriter.ih</file>
    <file>PPMWriter.h</file>
    <file>PPMWriter.ih</file>
    <file>RawWriter.h</file>
    <file>RawWriter.ih</file>
    <file>VolWriter.h</file>
    <file>VolWriter.ih</file>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>DGtal - Digital Geometry Tools and Algorithms Library.</title>
    <filename>index</filename>
    <docanchor file="index">intro_sec_dgtal</docanchor>
    <docanchor file="index">package_description</docanchor>
    <docanchor file="index">manuals_dgtal</docanchor>
    <docanchor file="index">manueldev</docanchor>
    <docanchor file="index">links_sec_dgtal</docanchor>
  </compound>
</tagfile>
